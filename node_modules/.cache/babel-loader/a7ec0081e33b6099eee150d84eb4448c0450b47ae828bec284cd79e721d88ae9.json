{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mike\\\\reverendcrush\\\\src\\\\components\\\\BlueskyComponent.js\",\n  _s = $RefreshSig$();\n// Import the necessary packages\nimport React, { useEffect, useState } from 'react';\nimport { BskyAgent } from '@atproto/api';\nimport { MetaTags } from 'react-meta-tags';\nimport YouTube from 'react-youtube';\n\n// Define your component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlueskySocial = () => {\n  _s();\n  // Define your Bluesky handle, app password, and service URL\n  const HANDLE = 'reverendcrush.com';\n  const APP_PASSWORD = 'no6e-unlo-oob2-exqz';\n  const SERVICE_URL = 'https://bsky.social';\n\n  // State to store posts and error\n  const [posts, setPosts] = useState([]);\n  const [error, setError] = useState(null);\n\n  // Fetch data from Bluesky\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const agent = new BskyAgent({\n          service: SERVICE_URL\n        });\n        const {\n          data: {\n            did\n          }\n        } = await agent.resolveHandle({\n          handle: HANDLE\n        });\n        await agent.login({\n          identifier: did,\n          password: APP_PASSWORD\n        });\n        const {\n          data\n        } = await agent.getAuthorFeed({\n          actor: did,\n          filter: 'posts_and_author_threads',\n          limit: 1\n        });\n\n        // Process received data\n        if (Array.isArray(data.feed)) {\n          const postsData = data.feed.map(item => {\n            let formattedText = item.post.record.text;\n            return {\n              date: new Date(item.post.record.createdAt).toLocaleString('en-US', {\n                timeZone: 'America/New_York',\n                dateStyle: 'long',\n                timeStyle: 'long'\n              }),\n              text: formattedText,\n              interactions: item.post.record.interactions\n            };\n          });\n          setPosts(postsData);\n        } else {\n          console.error('Invalid feed data format:', data.feed);\n          throw new Error('Invalid feed data format');\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Error fetching data');\n      }\n    }\n    fetchData();\n  }, []);\n\n  // Render the component\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bsky-home skeet-text\",\n      children: [\"BlueSky Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"bsky-home\",\n    children: [/*#__PURE__*/_jsxDEV(MetaTags, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"Bluesky Social\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: \"Bluesky Social Feed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Skeet To Bsky\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"latest-skeet\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"skeet-date\",\n          children: [\"Posted by \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: `https://bsky.app/profile/${HANDLE}`,\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: [\"@\", HANDLE]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 49\n          }, this), \" to \", /*#__PURE__*/_jsxDEV(\"a\", {\n            href: \"https://bsky.app/\",\n            target: \"_blank\",\n            rel: \"noreferrer\",\n            children: \"bsky.app\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 146\n          }, this), \" on \", /*#__PURE__*/_jsxDEV(\"u\", {\n            children: post.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 223\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"skeet-text\",\n          style: {\n            whiteSpace: 'pre-line'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            dangerouslySetInnerHTML: {\n              __html: post.text\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this), post.interactions && /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Skeet Banger Score: \", calculateSkeetBangerScore(post.interactions)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), getPostImages(post.text).map((image, idx) => /*#__PURE__*/_jsxDEV(\"img\", {\n            src: image,\n            alt: `Image ${idx + 1}`\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this)), getPostYoutubeId(post.text) && /*#__PURE__*/_jsxDEV(YouTube, {\n            videoId: getPostYoutubeId(post.text)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n// Function to extract YouTube video ID from the post text\n_s(BlueskySocial, \"k/i6/CQ9z/20h34rTderKnfEXI4=\");\n_c = BlueskySocial;\nconst getPostYoutubeId = text => {\n  const matches = text.match(/youtu\\.be\\/([^?\\s]+)/);\n  return matches ? matches[1] : null;\n};\n\n// Function to get images from the post text\nconst getPostImages = text => {\n  const matches = text.match(/https?:\\/\\/[^\\s]+\\.(jpg|jpeg|png|gif)/g);\n  return matches ? matches.slice(0, 4) : [];\n};\n\n// Function to calculate the Skeet Banger Score\nconst calculateSkeetBangerScore = interactions => {\n  let score = 0;\n  if (interactions && typeof interactions === 'object') {\n    score += interactions.like ? 200 : 0;\n    score += interactions.comment ? 300 : 0;\n    score += interactions.repost ? 1000 : 0;\n  }\n  return score;\n};\nexport default BlueskySocial;\nvar _c;\n$RefreshReg$(_c, \"BlueskySocial\");","map":{"version":3,"names":["React","useEffect","useState","BskyAgent","MetaTags","YouTube","jsxDEV","_jsxDEV","BlueskySocial","_s","HANDLE","APP_PASSWORD","SERVICE_URL","posts","setPosts","error","setError","fetchData","agent","service","data","did","resolveHandle","handle","login","identifier","password","getAuthorFeed","actor","filter","limit","Array","isArray","feed","postsData","map","item","formattedText","post","record","text","date","Date","createdAt","toLocaleString","timeZone","dateStyle","timeStyle","interactions","console","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","name","content","index","href","target","rel","style","whiteSpace","dangerouslySetInnerHTML","__html","calculateSkeetBangerScore","getPostImages","image","idx","src","alt","getPostYoutubeId","videoId","_c","matches","match","slice","score","like","comment","repost","$RefreshReg$"],"sources":["C:/Users/Mike/reverendcrush/src/components/BlueskyComponent.js"],"sourcesContent":["// Import the necessary packages\r\nimport React, { useEffect, useState } from 'react';\r\nimport { BskyAgent } from '@atproto/api';\r\nimport { MetaTags } from 'react-meta-tags';\r\nimport YouTube from 'react-youtube';\r\n\r\n// Define your component\r\nconst BlueskySocial = () => {\r\n  // Define your Bluesky handle, app password, and service URL\r\n  const HANDLE = 'reverendcrush.com';\r\n  const APP_PASSWORD = 'no6e-unlo-oob2-exqz';\r\n  const SERVICE_URL = 'https://bsky.social';\r\n\r\n  // State to store posts and error\r\n  const [posts, setPosts] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch data from Bluesky\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      try {\r\n        const agent = new BskyAgent({ service: SERVICE_URL });\r\n        const { data: { did } } = await agent.resolveHandle({ handle: HANDLE });\r\n        await agent.login({ identifier: did, password: APP_PASSWORD });\r\n        const { data } = await agent.getAuthorFeed({\r\n          actor: did,\r\n          filter: 'posts_and_author_threads',\r\n          limit: 1,\r\n        });\r\n\r\n        // Process received data\r\n        if (Array.isArray(data.feed)) {\r\n          const postsData = data.feed.map(item => {\r\n            let formattedText = item.post.record.text;\r\n\r\n            return {\r\n              date: new Date(item.post.record.createdAt).toLocaleString('en-US', {\r\n                timeZone: 'America/New_York',\r\n                dateStyle: 'long',\r\n                timeStyle: 'long'\r\n              }),\r\n              text: formattedText,\r\n              interactions: item.post.record.interactions\r\n            };\r\n          });\r\n          setPosts(postsData);\r\n        } else {\r\n          console.error('Invalid feed data format:', data.feed);\r\n          throw new Error('Invalid feed data format');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n        setError('Error fetching data');\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  // Render the component\r\n  if (error) {\r\n    return <div className='bsky-home skeet-text'>BlueSky Error: {error}</div>;\r\n  }\r\n\r\n  return (\r\n    <section className='bsky-home'>\r\n      <MetaTags>\r\n        <title>Bluesky Social</title>\r\n        <meta name=\"description\" content=\"Bluesky Social Feed\" />\r\n      </MetaTags>\r\n      <h2>Latest Skeet To Bsky</h2>\r\n      <ul className='latest-skeet'>\r\n        {posts.map((post, index) => (\r\n          <li key={index}>\r\n            <p className='skeet-date'>Posted by <a href={`https://bsky.app/profile/${HANDLE}`} target=\"_blank\" rel=\"noreferrer\">@{HANDLE}</a> to <a href='https://bsky.app/' target=\"_blank\" rel=\"noreferrer\">bsky.app</a> on <u>{post.date}</u></p>\r\n            <div className='skeet-text' style={{ whiteSpace: 'pre-line' }}>\r\n              <div dangerouslySetInnerHTML={{ __html: post.text }}></div>\r\n              {post.interactions && (\r\n                <h3>Skeet Banger Score: {calculateSkeetBangerScore(post.interactions)}</h3>\r\n              )}\r\n              {getPostImages(post.text).map((image, idx) => (\r\n                <img key={idx} src={image} alt={`Image ${idx + 1}`} />\r\n              ))}\r\n              {getPostYoutubeId(post.text) && (\r\n                <YouTube videoId={getPostYoutubeId(post.text)} />\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n\r\n// Function to extract YouTube video ID from the post text\r\nconst getPostYoutubeId = (text) => {\r\n  const matches = text.match(/youtu\\.be\\/([^?\\s]+)/);\r\n  return matches ? matches[1] : null;\r\n};\r\n\r\n// Function to get images from the post text\r\nconst getPostImages = (text) => {\r\n  const matches = text.match(/https?:\\/\\/[^\\s]+\\.(jpg|jpeg|png|gif)/g);\r\n  return matches ? matches.slice(0, 4) : [];\r\n};\r\n\r\n// Function to calculate the Skeet Banger Score\r\nconst calculateSkeetBangerScore = (interactions) => {\r\n  let score = 0;\r\n  if (interactions && typeof interactions === 'object') {\r\n    score += interactions.like ? 200 : 0;\r\n    score += interactions.comment ? 300 : 0;\r\n    score += interactions.repost ? 1000 : 0;\r\n  }\r\n  return score;\r\n};\r\n\r\nexport default BlueskySocial;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}