{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n    exports: {}\n  }).exports, mod), mod.exports;\n};\nvar __export = (target, all) => {\n  for (var name2 in all) __defProp(target, name2, {\n    get: all[name2],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from3, except, desc) => {\n  if (from3 && typeof from3 === \"object\" || typeof from3 === \"function\") {\n    for (let key of __getOwnPropNames(from3)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from3[key],\n      enumerable: !(desc = __getOwnPropDesc(from3, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js\nvar require_boundaries = __commonJS({\n  \"../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js\"(exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    exports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;\n    var CLUSTER_BREAK;\n    (function (CLUSTER_BREAK2) {\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"CR\"] = 0] = \"CR\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"LF\"] = 1] = \"LF\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"CONTROL\"] = 2] = \"CONTROL\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"EXTEND\"] = 3] = \"EXTEND\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"REGIONAL_INDICATOR\"] = 4] = \"REGIONAL_INDICATOR\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"SPACINGMARK\"] = 5] = \"SPACINGMARK\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"L\"] = 6] = \"L\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"V\"] = 7] = \"V\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"T\"] = 8] = \"T\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"LV\"] = 9] = \"LV\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"LVT\"] = 10] = \"LVT\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"OTHER\"] = 11] = \"OTHER\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"PREPEND\"] = 12] = \"PREPEND\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"E_BASE\"] = 13] = \"E_BASE\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"E_MODIFIER\"] = 14] = \"E_MODIFIER\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"ZWJ\"] = 15] = \"ZWJ\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"GLUE_AFTER_ZWJ\"] = 16] = \"GLUE_AFTER_ZWJ\";\n      CLUSTER_BREAK2[CLUSTER_BREAK2[\"E_BASE_GAZ\"] = 17] = \"E_BASE_GAZ\";\n    })(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));\n    exports.EXTENDED_PICTOGRAPHIC = 101;\n  }\n});\n\n// ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js\nvar require_GraphemerHelper = __commonJS({\n  \"../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js\"(exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var boundaries_1 = require_boundaries();\n    var NotBreak = 0;\n    var BreakStart = 1;\n    var Break = 2;\n    var BreakLastRegional = 3;\n    var BreakPenultimateRegional = 4;\n    var GraphemerHelper = class {\n      static isSurrogate(str, pos) {\n        return 55296 <= str.charCodeAt(pos) && str.charCodeAt(pos) <= 56319 && 56320 <= str.charCodeAt(pos + 1) && str.charCodeAt(pos + 1) <= 57343;\n      }\n      static codePointAt(str, idx) {\n        if (idx === void 0) {\n          idx = 0;\n        }\n        const code2 = str.charCodeAt(idx);\n        if (55296 <= code2 && code2 <= 56319 && idx < str.length - 1) {\n          const hi = code2;\n          const low = str.charCodeAt(idx + 1);\n          if (56320 <= low && low <= 57343) {\n            return (hi - 55296) * 1024 + (low - 56320) + 65536;\n          }\n          return hi;\n        }\n        if (56320 <= code2 && code2 <= 57343 && idx >= 1) {\n          const hi = str.charCodeAt(idx - 1);\n          const low = code2;\n          if (55296 <= hi && hi <= 56319) {\n            return (hi - 55296) * 1024 + (low - 56320) + 65536;\n          }\n          return low;\n        }\n        return code2;\n      }\n      static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {\n        const all = [start].concat(mid).concat([end]);\n        const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);\n        const previous = all[all.length - 2];\n        const next = end;\n        const nextEmoji = endEmoji;\n        const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);\n        if (rIIndex > 0 && all.slice(1, rIIndex).every(function (c) {\n          return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n        }) && [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {\n          if (all.filter(function (c) {\n            return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n          }).length % 2 === 1) {\n            return BreakLastRegional;\n          } else {\n            return BreakPenultimateRegional;\n          }\n        }\n        if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {\n          return NotBreak;\n        } else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL || previous === boundaries_1.CLUSTER_BREAK.CR || previous === boundaries_1.CLUSTER_BREAK.LF) {\n          return BreakStart;\n        } else if (next === boundaries_1.CLUSTER_BREAK.CONTROL || next === boundaries_1.CLUSTER_BREAK.CR || next === boundaries_1.CLUSTER_BREAK.LF) {\n          return BreakStart;\n        } else if (previous === boundaries_1.CLUSTER_BREAK.L && (next === boundaries_1.CLUSTER_BREAK.L || next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.LV || next === boundaries_1.CLUSTER_BREAK.LVT)) {\n          return NotBreak;\n        } else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) && (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {\n          return NotBreak;\n        } else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) && next === boundaries_1.CLUSTER_BREAK.T) {\n          return NotBreak;\n        } else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {\n          return NotBreak;\n        } else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {\n          return NotBreak;\n        } else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {\n          return NotBreak;\n        }\n        const previousNonExtendIndex = allEmoji.slice(0, -1).lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);\n        if (previousNonExtendIndex !== -1 && allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC && all.slice(previousNonExtendIndex + 1, -2).every(function (c) {\n          return c === boundaries_1.CLUSTER_BREAK.EXTEND;\n        }) && previous === boundaries_1.CLUSTER_BREAK.ZWJ && nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {\n          return NotBreak;\n        }\n        if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {\n          return Break;\n        }\n        if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR && next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {\n          return NotBreak;\n        }\n        return BreakStart;\n      }\n    };\n    exports.default = GraphemerHelper;\n  }\n});\n\n// ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js\nvar require_GraphemerIterator = __commonJS({\n  \"../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js\"(exports) {\n    \"use strict\";\n\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var GraphemerIterator = class {\n      constructor(str, nextBreak) {\n        this._index = 0;\n        this._str = str;\n        this._nextBreak = nextBreak;\n      }\n      [Symbol.iterator]() {\n        return this;\n      }\n      next() {\n        let brk;\n        if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {\n          const value = this._str.slice(this._index, brk);\n          this._index = brk;\n          return {\n            value,\n            done: false\n          };\n        }\n        if (this._index < this._str.length) {\n          const value = this._str.slice(this._index);\n          this._index = this._str.length;\n          return {\n            value,\n            done: false\n          };\n        }\n        return {\n          value: void 0,\n          done: true\n        };\n      }\n    };\n    exports.default = GraphemerIterator;\n  }\n});\n\n// ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js\nvar require_Graphemer = __commonJS({\n  \"../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js\"(exports) {\n    \"use strict\";\n\n    var __importDefault = exports && exports.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var boundaries_1 = require_boundaries();\n    var GraphemerHelper_1 = __importDefault(require_GraphemerHelper());\n    var GraphemerIterator_1 = __importDefault(require_GraphemerIterator());\n    var Graphemer2 = class {\n      static nextBreak(string3, index) {\n        if (index === void 0) {\n          index = 0;\n        }\n        if (index < 0) {\n          return 0;\n        }\n        if (index >= string3.length - 1) {\n          return string3.length;\n        }\n        const prevCP = GraphemerHelper_1.default.codePointAt(string3, index);\n        const prev = Graphemer2.getGraphemeBreakProperty(prevCP);\n        const prevEmoji = Graphemer2.getEmojiProperty(prevCP);\n        const mid = [];\n        const midEmoji = [];\n        for (let i = index + 1; i < string3.length; i++) {\n          if (GraphemerHelper_1.default.isSurrogate(string3, i - 1)) {\n            continue;\n          }\n          const nextCP = GraphemerHelper_1.default.codePointAt(string3, i);\n          const next = Graphemer2.getGraphemeBreakProperty(nextCP);\n          const nextEmoji = Graphemer2.getEmojiProperty(nextCP);\n          if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {\n            return i;\n          }\n          mid.push(next);\n          midEmoji.push(nextEmoji);\n        }\n        return string3.length;\n      }\n      splitGraphemes(str) {\n        const res = [];\n        let index = 0;\n        let brk;\n        while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {\n          res.push(str.slice(index, brk));\n          index = brk;\n        }\n        if (index < str.length) {\n          res.push(str.slice(index));\n        }\n        return res;\n      }\n      iterateGraphemes(str) {\n        return new GraphemerIterator_1.default(str, Graphemer2.nextBreak);\n      }\n      countGraphemes(str) {\n        let count = 0;\n        let index = 0;\n        let brk;\n        while ((brk = Graphemer2.nextBreak(str, index)) < str.length) {\n          index = brk;\n          count++;\n        }\n        if (index < str.length) {\n          count++;\n        }\n        return count;\n      }\n      static getGraphemeBreakProperty(code2) {\n        if (code2 < 48905) {\n          if (code2 < 44116) {\n            if (code2 < 4141) {\n              if (code2 < 2818) {\n                if (code2 < 2363) {\n                  if (code2 < 1759) {\n                    if (code2 < 1471) {\n                      if (code2 < 127) {\n                        if (code2 < 11) {\n                          if (code2 < 10) {\n                            if (0 <= code2 && code2 <= 9) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 === 10) {\n                              return boundaries_1.CLUSTER_BREAK.LF;\n                            }\n                          }\n                        } else {\n                          if (code2 < 13) {\n                            if (11 <= code2 && code2 <= 12) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 14) {\n                              if (code2 === 13) {\n                                return boundaries_1.CLUSTER_BREAK.CR;\n                              }\n                            } else {\n                              if (14 <= code2 && code2 <= 31) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 768) {\n                          if (code2 < 173) {\n                            if (127 <= code2 && code2 <= 159) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 === 173) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          }\n                        } else {\n                          if (code2 < 1155) {\n                            if (768 <= code2 && code2 <= 879) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1425) {\n                              if (1155 <= code2 && code2 <= 1161) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (1425 <= code2 && code2 <= 1469) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 1552) {\n                        if (code2 < 1476) {\n                          if (code2 < 1473) {\n                            if (code2 === 1471) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1473 <= code2 && code2 <= 1474) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 1479) {\n                            if (1476 <= code2 && code2 <= 1477) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1536) {\n                              if (code2 === 1479) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (1536 <= code2 && code2 <= 1541) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 1648) {\n                          if (code2 < 1564) {\n                            if (1552 <= code2 && code2 <= 1562) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1611) {\n                              if (code2 === 1564) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (1611 <= code2 && code2 <= 1631) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 1750) {\n                            if (code2 === 1648) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 1757) {\n                              if (1750 <= code2 && code2 <= 1756) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 1757) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 2075) {\n                      if (code2 < 1840) {\n                        if (code2 < 1770) {\n                          if (code2 < 1767) {\n                            if (1759 <= code2 && code2 <= 1764) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1767 <= code2 && code2 <= 1768) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 1807) {\n                            if (1770 <= code2 && code2 <= 1773) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 1807) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                            if (code2 === 1809) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2027) {\n                          if (code2 < 1958) {\n                            if (1840 <= code2 && code2 <= 1866) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (1958 <= code2 && code2 <= 1968) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2045) {\n                            if (2027 <= code2 && code2 <= 2035) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2070) {\n                              if (code2 === 2045) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2070 <= code2 && code2 <= 2073) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 2200) {\n                        if (code2 < 2089) {\n                          if (code2 < 2085) {\n                            if (2075 <= code2 && code2 <= 2083) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (2085 <= code2 && code2 <= 2087) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2137) {\n                            if (2089 <= code2 && code2 <= 2093) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2192) {\n                              if (2137 <= code2 && code2 <= 2139) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2192 <= code2 && code2 <= 2193) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2275) {\n                          if (code2 < 2250) {\n                            if (2200 <= code2 && code2 <= 2207) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2274) {\n                              if (2250 <= code2 && code2 <= 2273) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 2274) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2307) {\n                            if (2275 <= code2 && code2 <= 2306) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 2307) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 2362) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 2561) {\n                    if (code2 < 2434) {\n                      if (code2 < 2381) {\n                        if (code2 < 2366) {\n                          if (code2 === 2363) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 2364) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 2369) {\n                            if (2366 <= code2 && code2 <= 2368) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2377) {\n                              if (2369 <= code2 && code2 <= 2376) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2377 <= code2 && code2 <= 2380) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2385) {\n                          if (code2 < 2382) {\n                            if (code2 === 2381) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (2382 <= code2 && code2 <= 2383) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2402) {\n                            if (2385 <= code2 && code2 <= 2391) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2433) {\n                              if (2402 <= code2 && code2 <= 2403) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 2433) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 2503) {\n                        if (code2 < 2494) {\n                          if (code2 < 2492) {\n                            if (2434 <= code2 && code2 <= 2435) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 2492) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2495) {\n                            if (code2 === 2494) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2497) {\n                              if (2495 <= code2 && code2 <= 2496) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2497 <= code2 && code2 <= 2500) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2519) {\n                          if (code2 < 2507) {\n                            if (2503 <= code2 && code2 <= 2504) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2509) {\n                              if (2507 <= code2 && code2 <= 2508) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 2509) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2530) {\n                            if (code2 === 2519) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2558) {\n                              if (2530 <= code2 && code2 <= 2531) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 2558) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 2691) {\n                      if (code2 < 2631) {\n                        if (code2 < 2620) {\n                          if (code2 < 2563) {\n                            if (2561 <= code2 && code2 <= 2562) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 2563) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2622) {\n                            if (code2 === 2620) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2625) {\n                              if (2622 <= code2 && code2 <= 2624) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2625 <= code2 && code2 <= 2626) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2672) {\n                          if (code2 < 2635) {\n                            if (2631 <= code2 && code2 <= 2632) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2641) {\n                              if (2635 <= code2 && code2 <= 2637) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 2641) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2677) {\n                            if (2672 <= code2 && code2 <= 2673) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2689) {\n                              if (code2 === 2677) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2689 <= code2 && code2 <= 2690) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 2761) {\n                        if (code2 < 2750) {\n                          if (code2 === 2691) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 2748) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 2753) {\n                            if (2750 <= code2 && code2 <= 2752) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2759) {\n                              if (2753 <= code2 && code2 <= 2757) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2759 <= code2 && code2 <= 2760) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2786) {\n                          if (code2 < 2763) {\n                            if (code2 === 2761) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 2765) {\n                              if (2763 <= code2 && code2 <= 2764) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 2765) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 2810) {\n                            if (2786 <= code2 && code2 <= 2787) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2817) {\n                              if (2810 <= code2 && code2 <= 2815) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 2817) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 3315) {\n                  if (code2 < 3076) {\n                    if (code2 < 2946) {\n                      if (code2 < 2887) {\n                        if (code2 < 2878) {\n                          if (code2 < 2876) {\n                            if (2818 <= code2 && code2 <= 2819) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 2876) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2880) {\n                            if (2878 <= code2 && code2 <= 2879) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2881) {\n                              if (code2 === 2880) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (2881 <= code2 && code2 <= 2884) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 2893) {\n                          if (code2 < 2891) {\n                            if (2887 <= code2 && code2 <= 2888) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (2891 <= code2 && code2 <= 2892) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 2901) {\n                            if (code2 === 2893) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 2914) {\n                              if (2901 <= code2 && code2 <= 2903) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (2914 <= code2 && code2 <= 2915) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3014) {\n                        if (code2 < 3007) {\n                          if (code2 === 2946) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (code2 === 3006) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3008) {\n                            if (code2 === 3007) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3009) {\n                              if (code2 === 3008) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3009 <= code2 && code2 <= 3010) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3031) {\n                          if (code2 < 3018) {\n                            if (3014 <= code2 && code2 <= 3016) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3021) {\n                              if (3018 <= code2 && code2 <= 3020) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 3021) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3072) {\n                            if (code2 === 3031) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3073) {\n                              if (code2 === 3072) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3073 <= code2 && code2 <= 3075) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 3262) {\n                      if (code2 < 3146) {\n                        if (code2 < 3134) {\n                          if (code2 === 3076) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (code2 === 3132) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3137) {\n                            if (3134 <= code2 && code2 <= 3136) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3142) {\n                              if (3137 <= code2 && code2 <= 3140) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3142 <= code2 && code2 <= 3144) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3201) {\n                          if (code2 < 3157) {\n                            if (3146 <= code2 && code2 <= 3149) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3170) {\n                              if (3157 <= code2 && code2 <= 3158) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3170 <= code2 && code2 <= 3171) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3202) {\n                            if (code2 === 3201) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3260) {\n                              if (3202 <= code2 && code2 <= 3203) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 3260) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3270) {\n                        if (code2 < 3264) {\n                          if (code2 === 3262) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 3263) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3266) {\n                            if (3264 <= code2 && code2 <= 3265) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3267) {\n                              if (code2 === 3266) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3267 <= code2 && code2 <= 3268) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3276) {\n                          if (code2 < 3271) {\n                            if (code2 === 3270) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3274) {\n                              if (3271 <= code2 && code2 <= 3272) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3274 <= code2 && code2 <= 3275) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3285) {\n                            if (3276 <= code2 && code2 <= 3277) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3298) {\n                              if (3285 <= code2 && code2 <= 3286) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3298 <= code2 && code2 <= 3299) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 3551) {\n                    if (code2 < 3406) {\n                      if (code2 < 3391) {\n                        if (code2 < 3330) {\n                          if (code2 < 3328) {\n                            if (code2 === 3315) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (3328 <= code2 && code2 <= 3329) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3387) {\n                            if (3330 <= code2 && code2 <= 3331) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3390) {\n                              if (3387 <= code2 && code2 <= 3388) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 3390) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3398) {\n                          if (code2 < 3393) {\n                            if (3391 <= code2 && code2 <= 3392) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (3393 <= code2 && code2 <= 3396) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3402) {\n                            if (3398 <= code2 && code2 <= 3400) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3405) {\n                              if (3402 <= code2 && code2 <= 3404) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 3405) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3530) {\n                        if (code2 < 3426) {\n                          if (code2 === 3406) {\n                            return boundaries_1.CLUSTER_BREAK.PREPEND;\n                          }\n                          if (code2 === 3415) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3457) {\n                            if (3426 <= code2 && code2 <= 3427) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3458) {\n                              if (code2 === 3457) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3458 <= code2 && code2 <= 3459) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3538) {\n                          if (code2 < 3535) {\n                            if (code2 === 3530) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3536) {\n                              if (code2 === 3535) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3536 <= code2 && code2 <= 3537) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3542) {\n                            if (3538 <= code2 && code2 <= 3540) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3544) {\n                              if (code2 === 3542) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3544 <= code2 && code2 <= 3550) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 3893) {\n                      if (code2 < 3655) {\n                        if (code2 < 3633) {\n                          if (code2 < 3570) {\n                            if (code2 === 3551) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (3570 <= code2 && code2 <= 3571) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3635) {\n                            if (code2 === 3633) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3636) {\n                              if (code2 === 3635) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3636 <= code2 && code2 <= 3642) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3764) {\n                          if (code2 < 3761) {\n                            if (3655 <= code2 && code2 <= 3662) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 3761) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 3763) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 3784) {\n                            if (3764 <= code2 && code2 <= 3772) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3864) {\n                              if (3784 <= code2 && code2 <= 3790) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3864 <= code2 && code2 <= 3865) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 3967) {\n                        if (code2 < 3897) {\n                          if (code2 === 3893) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (code2 === 3895) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 3902) {\n                            if (code2 === 3897) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 3953) {\n                              if (3902 <= code2 && code2 <= 3903) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (3953 <= code2 && code2 <= 3966) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 3981) {\n                          if (code2 < 3968) {\n                            if (code2 === 3967) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 3974) {\n                              if (3968 <= code2 && code2 <= 3972) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (3974 <= code2 && code2 <= 3975) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 3993) {\n                            if (3981 <= code2 && code2 <= 3991) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 4038) {\n                              if (3993 <= code2 && code2 <= 4028) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 4038) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 7204) {\n                if (code2 < 6448) {\n                  if (code2 < 5938) {\n                    if (code2 < 4226) {\n                      if (code2 < 4157) {\n                        if (code2 < 4146) {\n                          if (code2 < 4145) {\n                            if (4141 <= code2 && code2 <= 4144) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 4145) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 4153) {\n                            if (4146 <= code2 && code2 <= 4151) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 4155) {\n                              if (4153 <= code2 && code2 <= 4154) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (4155 <= code2 && code2 <= 4156) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 4184) {\n                          if (code2 < 4182) {\n                            if (4157 <= code2 && code2 <= 4158) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (4182 <= code2 && code2 <= 4183) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 4190) {\n                            if (4184 <= code2 && code2 <= 4185) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 4209) {\n                              if (4190 <= code2 && code2 <= 4192) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (4209 <= code2 && code2 <= 4212) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 4352) {\n                        if (code2 < 4229) {\n                          if (code2 === 4226) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (code2 === 4228) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                        } else {\n                          if (code2 < 4237) {\n                            if (4229 <= code2 && code2 <= 4230) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 4237) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 4253) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 4957) {\n                          if (code2 < 4448) {\n                            if (4352 <= code2 && code2 <= 4447) {\n                              return boundaries_1.CLUSTER_BREAK.L;\n                            }\n                          } else {\n                            if (code2 < 4520) {\n                              if (4448 <= code2 && code2 <= 4519) {\n                                return boundaries_1.CLUSTER_BREAK.V;\n                              }\n                            } else {\n                              if (4520 <= code2 && code2 <= 4607) {\n                                return boundaries_1.CLUSTER_BREAK.T;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 5906) {\n                            if (4957 <= code2 && code2 <= 4959) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 5909) {\n                              if (5906 <= code2 && code2 <= 5908) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 5909) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 6089) {\n                      if (code2 < 6070) {\n                        if (code2 < 5970) {\n                          if (code2 < 5940) {\n                            if (5938 <= code2 && code2 <= 5939) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 5940) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6002) {\n                            if (5970 <= code2 && code2 <= 5971) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6068) {\n                              if (6002 <= code2 && code2 <= 6003) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6068 <= code2 && code2 <= 6069) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6078) {\n                          if (code2 < 6071) {\n                            if (code2 === 6070) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (6071 <= code2 && code2 <= 6077) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6086) {\n                            if (6078 <= code2 && code2 <= 6085) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6087) {\n                              if (code2 === 6086) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6087 <= code2 && code2 <= 6088) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 6277) {\n                        if (code2 < 6155) {\n                          if (code2 < 6109) {\n                            if (6089 <= code2 && code2 <= 6099) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 6109) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6158) {\n                            if (6155 <= code2 && code2 <= 6157) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 6158) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                            if (code2 === 6159) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6435) {\n                          if (code2 < 6313) {\n                            if (6277 <= code2 && code2 <= 6278) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6432) {\n                              if (code2 === 6313) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6432 <= code2 && code2 <= 6434) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 6439) {\n                            if (6435 <= code2 && code2 <= 6438) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6441) {\n                              if (6439 <= code2 && code2 <= 6440) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6441 <= code2 && code2 <= 6443) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 6971) {\n                    if (code2 < 6744) {\n                      if (code2 < 6681) {\n                        if (code2 < 6451) {\n                          if (code2 < 6450) {\n                            if (6448 <= code2 && code2 <= 6449) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 6450) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6457) {\n                            if (6451 <= code2 && code2 <= 6456) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6679) {\n                              if (6457 <= code2 && code2 <= 6459) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6679 <= code2 && code2 <= 6680) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6741) {\n                          if (code2 < 6683) {\n                            if (6681 <= code2 && code2 <= 6682) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 6683) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6742) {\n                            if (code2 === 6741) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 6742) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 6743) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 6771) {\n                        if (code2 < 6754) {\n                          if (code2 < 6752) {\n                            if (6744 <= code2 && code2 <= 6750) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 6752) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 6757) {\n                            if (code2 === 6754) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6765) {\n                              if (6757 <= code2 && code2 <= 6764) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6765 <= code2 && code2 <= 6770) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 6912) {\n                          if (code2 < 6783) {\n                            if (6771 <= code2 && code2 <= 6780) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6832) {\n                              if (code2 === 6783) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6832 <= code2 && code2 <= 6862) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 6916) {\n                            if (6912 <= code2 && code2 <= 6915) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 6964) {\n                              if (code2 === 6916) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (6964 <= code2 && code2 <= 6970) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 7080) {\n                      if (code2 < 7019) {\n                        if (code2 < 6973) {\n                          if (code2 === 6971) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 6972) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 6978) {\n                            if (6973 <= code2 && code2 <= 6977) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 6979) {\n                              if (code2 === 6978) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (6979 <= code2 && code2 <= 6980) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 7073) {\n                          if (code2 < 7040) {\n                            if (7019 <= code2 && code2 <= 7027) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 7042) {\n                              if (7040 <= code2 && code2 <= 7041) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 7042) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 7074) {\n                            if (code2 === 7073) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 7078) {\n                              if (7074 <= code2 && code2 <= 7077) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7078 <= code2 && code2 <= 7079) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 7144) {\n                        if (code2 < 7083) {\n                          if (code2 < 7082) {\n                            if (7080 <= code2 && code2 <= 7081) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 7082) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 7142) {\n                            if (7083 <= code2 && code2 <= 7085) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 7142) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 7143) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 7150) {\n                          if (code2 < 7146) {\n                            if (7144 <= code2 && code2 <= 7145) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 7149) {\n                              if (7146 <= code2 && code2 <= 7148) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 7149) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 7151) {\n                            if (code2 === 7150) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 7154) {\n                              if (7151 <= code2 && code2 <= 7153) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7154 <= code2 && code2 <= 7155) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 43346) {\n                  if (code2 < 11647) {\n                    if (code2 < 7415) {\n                      if (code2 < 7380) {\n                        if (code2 < 7220) {\n                          if (code2 < 7212) {\n                            if (7204 <= code2 && code2 <= 7211) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (7212 <= code2 && code2 <= 7219) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 7222) {\n                            if (7220 <= code2 && code2 <= 7221) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 7376) {\n                              if (7222 <= code2 && code2 <= 7223) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (7376 <= code2 && code2 <= 7378) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 7394) {\n                          if (code2 < 7393) {\n                            if (7380 <= code2 && code2 <= 7392) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 7393) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 7405) {\n                            if (7394 <= code2 && code2 <= 7400) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 7405) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 7412) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 8205) {\n                        if (code2 < 7616) {\n                          if (code2 < 7416) {\n                            if (code2 === 7415) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (7416 <= code2 && code2 <= 7417) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 8203) {\n                            if (7616 <= code2 && code2 <= 7679) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 8203) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                            if (code2 === 8204) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 8288) {\n                          if (code2 < 8206) {\n                            if (code2 === 8205) {\n                              return boundaries_1.CLUSTER_BREAK.ZWJ;\n                            }\n                          } else {\n                            if (code2 < 8232) {\n                              if (8206 <= code2 && code2 <= 8207) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (8232 <= code2 && code2 <= 8238) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 8400) {\n                            if (8288 <= code2 && code2 <= 8303) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 11503) {\n                              if (8400 <= code2 && code2 <= 8432) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (11503 <= code2 && code2 <= 11505) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 43043) {\n                      if (code2 < 42612) {\n                        if (code2 < 12330) {\n                          if (code2 < 11744) {\n                            if (code2 === 11647) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (11744 <= code2 && code2 <= 11775) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 12441) {\n                            if (12330 <= code2 && code2 <= 12335) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 42607) {\n                              if (12441 <= code2 && code2 <= 12442) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (42607 <= code2 && code2 <= 42610) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43010) {\n                          if (code2 < 42654) {\n                            if (42612 <= code2 && code2 <= 42621) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 42736) {\n                              if (42654 <= code2 && code2 <= 42655) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (42736 <= code2 && code2 <= 42737) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 43014) {\n                            if (code2 === 43010) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 43014) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 43019) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 43188) {\n                        if (code2 < 43047) {\n                          if (code2 < 43045) {\n                            if (43043 <= code2 && code2 <= 43044) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43045 <= code2 && code2 <= 43046) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43052) {\n                            if (code2 === 43047) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43136) {\n                              if (code2 === 43052) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43136 <= code2 && code2 <= 43137) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43263) {\n                          if (code2 < 43204) {\n                            if (43188 <= code2 && code2 <= 43203) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43232) {\n                              if (43204 <= code2 && code2 <= 43205) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43232 <= code2 && code2 <= 43249) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 43302) {\n                            if (code2 === 43263) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 43335) {\n                              if (43302 <= code2 && code2 <= 43309) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43335 <= code2 && code2 <= 43345) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 43698) {\n                    if (code2 < 43493) {\n                      if (code2 < 43444) {\n                        if (code2 < 43392) {\n                          if (code2 < 43360) {\n                            if (43346 <= code2 && code2 <= 43347) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43360 <= code2 && code2 <= 43388) {\n                              return boundaries_1.CLUSTER_BREAK.L;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43395) {\n                            if (43392 <= code2 && code2 <= 43394) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 43395) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 43443) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43450) {\n                          if (code2 < 43446) {\n                            if (43444 <= code2 && code2 <= 43445) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (43446 <= code2 && code2 <= 43449) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43452) {\n                            if (43450 <= code2 && code2 <= 43451) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43454) {\n                              if (43452 <= code2 && code2 <= 43453) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43454 <= code2 && code2 <= 43456) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 43573) {\n                        if (code2 < 43567) {\n                          if (code2 < 43561) {\n                            if (code2 === 43493) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43561 <= code2 && code2 <= 43566) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43569) {\n                            if (43567 <= code2 && code2 <= 43568) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 43571) {\n                              if (43569 <= code2 && code2 <= 43570) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (43571 <= code2 && code2 <= 43572) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43597) {\n                          if (code2 < 43587) {\n                            if (43573 <= code2 && code2 <= 43574) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 43587) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 43596) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43644) {\n                            if (code2 === 43597) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 43644) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 43696) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 44006) {\n                      if (code2 < 43756) {\n                        if (code2 < 43710) {\n                          if (code2 < 43703) {\n                            if (43698 <= code2 && code2 <= 43700) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (43703 <= code2 && code2 <= 43704) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 43713) {\n                            if (43710 <= code2 && code2 <= 43711) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 43713) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 43755) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 43766) {\n                          if (code2 < 43758) {\n                            if (43756 <= code2 && code2 <= 43757) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 43765) {\n                              if (43758 <= code2 && code2 <= 43759) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 43765) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44003) {\n                            if (code2 === 43766) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 44005) {\n                              if (44003 <= code2 && code2 <= 44004) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 44005) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44032) {\n                        if (code2 < 44009) {\n                          if (code2 < 44008) {\n                            if (44006 <= code2 && code2 <= 44007) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 44008) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44012) {\n                            if (44009 <= code2 && code2 <= 44010) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 44012) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 44013) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44061) {\n                          if (code2 < 44033) {\n                            if (code2 === 44032) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44060) {\n                              if (44033 <= code2 && code2 <= 44059) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44060) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44088) {\n                            if (44061 <= code2 && code2 <= 44087) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44089) {\n                              if (code2 === 44088) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44089 <= code2 && code2 <= 44115) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 46497) {\n              if (code2 < 45293) {\n                if (code2 < 44704) {\n                  if (code2 < 44397) {\n                    if (code2 < 44256) {\n                      if (code2 < 44173) {\n                        if (code2 < 44144) {\n                          if (code2 < 44117) {\n                            if (code2 === 44116) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44117 <= code2 && code2 <= 44143) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44145) {\n                            if (code2 === 44144) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44172) {\n                              if (44145 <= code2 && code2 <= 44171) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44172) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44201) {\n                          if (code2 < 44200) {\n                            if (44173 <= code2 && code2 <= 44199) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 44200) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44228) {\n                            if (44201 <= code2 && code2 <= 44227) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44229) {\n                              if (code2 === 44228) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44229 <= code2 && code2 <= 44255) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44313) {\n                        if (code2 < 44284) {\n                          if (code2 < 44257) {\n                            if (code2 === 44256) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44257 <= code2 && code2 <= 44283) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44285) {\n                            if (code2 === 44284) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44312) {\n                              if (44285 <= code2 && code2 <= 44311) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44312) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44368) {\n                          if (code2 < 44340) {\n                            if (44313 <= code2 && code2 <= 44339) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44341) {\n                              if (code2 === 44340) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44341 <= code2 && code2 <= 44367) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44369) {\n                            if (code2 === 44368) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44396) {\n                              if (44369 <= code2 && code2 <= 44395) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44396) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 44537) {\n                      if (code2 < 44480) {\n                        if (code2 < 44425) {\n                          if (code2 < 44424) {\n                            if (44397 <= code2 && code2 <= 44423) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 44424) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44452) {\n                            if (44425 <= code2 && code2 <= 44451) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44453) {\n                              if (code2 === 44452) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44453 <= code2 && code2 <= 44479) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44508) {\n                          if (code2 < 44481) {\n                            if (code2 === 44480) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44481 <= code2 && code2 <= 44507) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44509) {\n                            if (code2 === 44508) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44536) {\n                              if (44509 <= code2 && code2 <= 44535) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44536) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44620) {\n                        if (code2 < 44565) {\n                          if (code2 < 44564) {\n                            if (44537 <= code2 && code2 <= 44563) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 44564) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44592) {\n                            if (44565 <= code2 && code2 <= 44591) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44593) {\n                              if (code2 === 44592) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44593 <= code2 && code2 <= 44619) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44649) {\n                          if (code2 < 44621) {\n                            if (code2 === 44620) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44648) {\n                              if (44621 <= code2 && code2 <= 44647) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44648) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44676) {\n                            if (44649 <= code2 && code2 <= 44675) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44677) {\n                              if (code2 === 44676) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44677 <= code2 && code2 <= 44703) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 44985) {\n                    if (code2 < 44844) {\n                      if (code2 < 44761) {\n                        if (code2 < 44732) {\n                          if (code2 < 44705) {\n                            if (code2 === 44704) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44705 <= code2 && code2 <= 44731) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44733) {\n                            if (code2 === 44732) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44760) {\n                              if (44733 <= code2 && code2 <= 44759) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44760) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44789) {\n                          if (code2 < 44788) {\n                            if (44761 <= code2 && code2 <= 44787) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 44788) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44816) {\n                            if (44789 <= code2 && code2 <= 44815) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44817) {\n                              if (code2 === 44816) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44817 <= code2 && code2 <= 44843) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 44901) {\n                        if (code2 < 44872) {\n                          if (code2 < 44845) {\n                            if (code2 === 44844) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (44845 <= code2 && code2 <= 44871) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 44873) {\n                            if (code2 === 44872) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44900) {\n                              if (44873 <= code2 && code2 <= 44899) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44900) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 44956) {\n                          if (code2 < 44928) {\n                            if (44901 <= code2 && code2 <= 44927) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 44929) {\n                              if (code2 === 44928) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (44929 <= code2 && code2 <= 44955) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 44957) {\n                            if (code2 === 44956) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 44984) {\n                              if (44957 <= code2 && code2 <= 44983) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 44984) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 45152) {\n                      if (code2 < 45068) {\n                        if (code2 < 45013) {\n                          if (code2 < 45012) {\n                            if (44985 <= code2 && code2 <= 45011) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 45012) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45040) {\n                            if (45013 <= code2 && code2 <= 45039) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45041) {\n                              if (code2 === 45040) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45041 <= code2 && code2 <= 45067) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45097) {\n                          if (code2 < 45069) {\n                            if (code2 === 45068) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45096) {\n                              if (45069 <= code2 && code2 <= 45095) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45096) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45124) {\n                            if (45097 <= code2 && code2 <= 45123) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45125) {\n                              if (code2 === 45124) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45125 <= code2 && code2 <= 45151) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 45209) {\n                        if (code2 < 45180) {\n                          if (code2 < 45153) {\n                            if (code2 === 45152) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45153 <= code2 && code2 <= 45179) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45181) {\n                            if (code2 === 45180) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45208) {\n                              if (45181 <= code2 && code2 <= 45207) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45208) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45264) {\n                          if (code2 < 45236) {\n                            if (45209 <= code2 && code2 <= 45235) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45237) {\n                              if (code2 === 45236) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45237 <= code2 && code2 <= 45263) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45265) {\n                            if (code2 === 45264) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45292) {\n                              if (45265 <= code2 && code2 <= 45291) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45292) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 45908) {\n                  if (code2 < 45600) {\n                    if (code2 < 45433) {\n                      if (code2 < 45376) {\n                        if (code2 < 45321) {\n                          if (code2 < 45320) {\n                            if (45293 <= code2 && code2 <= 45319) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 45320) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45348) {\n                            if (45321 <= code2 && code2 <= 45347) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45349) {\n                              if (code2 === 45348) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45349 <= code2 && code2 <= 45375) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45404) {\n                          if (code2 < 45377) {\n                            if (code2 === 45376) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45377 <= code2 && code2 <= 45403) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45405) {\n                            if (code2 === 45404) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45432) {\n                              if (45405 <= code2 && code2 <= 45431) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45432) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 45516) {\n                        if (code2 < 45461) {\n                          if (code2 < 45460) {\n                            if (45433 <= code2 && code2 <= 45459) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 45460) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45488) {\n                            if (45461 <= code2 && code2 <= 45487) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45489) {\n                              if (code2 === 45488) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45489 <= code2 && code2 <= 45515) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45545) {\n                          if (code2 < 45517) {\n                            if (code2 === 45516) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45544) {\n                              if (45517 <= code2 && code2 <= 45543) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45544) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45572) {\n                            if (45545 <= code2 && code2 <= 45571) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45573) {\n                              if (code2 === 45572) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45573 <= code2 && code2 <= 45599) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 45741) {\n                      if (code2 < 45657) {\n                        if (code2 < 45628) {\n                          if (code2 < 45601) {\n                            if (code2 === 45600) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45601 <= code2 && code2 <= 45627) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45629) {\n                            if (code2 === 45628) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45656) {\n                              if (45629 <= code2 && code2 <= 45655) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45656) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45712) {\n                          if (code2 < 45684) {\n                            if (45657 <= code2 && code2 <= 45683) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45685) {\n                              if (code2 === 45684) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45685 <= code2 && code2 <= 45711) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45713) {\n                            if (code2 === 45712) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45740) {\n                              if (45713 <= code2 && code2 <= 45739) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45740) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 45824) {\n                        if (code2 < 45769) {\n                          if (code2 < 45768) {\n                            if (45741 <= code2 && code2 <= 45767) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 45768) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45796) {\n                            if (45769 <= code2 && code2 <= 45795) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45797) {\n                              if (code2 === 45796) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45797 <= code2 && code2 <= 45823) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45853) {\n                          if (code2 < 45825) {\n                            if (code2 === 45824) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45852) {\n                              if (45825 <= code2 && code2 <= 45851) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45852) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 45880) {\n                            if (45853 <= code2 && code2 <= 45879) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 45881) {\n                              if (code2 === 45880) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (45881 <= code2 && code2 <= 45907) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 46189) {\n                    if (code2 < 46048) {\n                      if (code2 < 45965) {\n                        if (code2 < 45936) {\n                          if (code2 < 45909) {\n                            if (code2 === 45908) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (45909 <= code2 && code2 <= 45935) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 45937) {\n                            if (code2 === 45936) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 45964) {\n                              if (45937 <= code2 && code2 <= 45963) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 45964) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 45993) {\n                          if (code2 < 45992) {\n                            if (45965 <= code2 && code2 <= 45991) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 45992) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46020) {\n                            if (45993 <= code2 && code2 <= 46019) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46021) {\n                              if (code2 === 46020) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46021 <= code2 && code2 <= 46047) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 46105) {\n                        if (code2 < 46076) {\n                          if (code2 < 46049) {\n                            if (code2 === 46048) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46049 <= code2 && code2 <= 46075) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46077) {\n                            if (code2 === 46076) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46104) {\n                              if (46077 <= code2 && code2 <= 46103) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46104) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46160) {\n                          if (code2 < 46132) {\n                            if (46105 <= code2 && code2 <= 46131) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46133) {\n                              if (code2 === 46132) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46133 <= code2 && code2 <= 46159) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46161) {\n                            if (code2 === 46160) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46188) {\n                              if (46161 <= code2 && code2 <= 46187) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46188) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 46356) {\n                      if (code2 < 46272) {\n                        if (code2 < 46217) {\n                          if (code2 < 46216) {\n                            if (46189 <= code2 && code2 <= 46215) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 46216) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46244) {\n                            if (46217 <= code2 && code2 <= 46243) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46245) {\n                              if (code2 === 46244) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46245 <= code2 && code2 <= 46271) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46301) {\n                          if (code2 < 46273) {\n                            if (code2 === 46272) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46300) {\n                              if (46273 <= code2 && code2 <= 46299) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46300) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46328) {\n                            if (46301 <= code2 && code2 <= 46327) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46329) {\n                              if (code2 === 46328) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46329 <= code2 && code2 <= 46355) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 46413) {\n                        if (code2 < 46384) {\n                          if (code2 < 46357) {\n                            if (code2 === 46356) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46357 <= code2 && code2 <= 46383) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46385) {\n                            if (code2 === 46384) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46412) {\n                              if (46385 <= code2 && code2 <= 46411) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46412) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46468) {\n                          if (code2 < 46440) {\n                            if (46413 <= code2 && code2 <= 46439) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46441) {\n                              if (code2 === 46440) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46441 <= code2 && code2 <= 46467) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46469) {\n                            if (code2 === 46468) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46496) {\n                              if (46469 <= code2 && code2 <= 46495) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46496) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 47701) {\n                if (code2 < 47112) {\n                  if (code2 < 46804) {\n                    if (code2 < 46637) {\n                      if (code2 < 46580) {\n                        if (code2 < 46525) {\n                          if (code2 < 46524) {\n                            if (46497 <= code2 && code2 <= 46523) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 46524) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46552) {\n                            if (46525 <= code2 && code2 <= 46551) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46553) {\n                              if (code2 === 46552) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46553 <= code2 && code2 <= 46579) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46608) {\n                          if (code2 < 46581) {\n                            if (code2 === 46580) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46581 <= code2 && code2 <= 46607) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46609) {\n                            if (code2 === 46608) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46636) {\n                              if (46609 <= code2 && code2 <= 46635) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46636) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 46720) {\n                        if (code2 < 46665) {\n                          if (code2 < 46664) {\n                            if (46637 <= code2 && code2 <= 46663) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 46664) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46692) {\n                            if (46665 <= code2 && code2 <= 46691) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46693) {\n                              if (code2 === 46692) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46693 <= code2 && code2 <= 46719) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46749) {\n                          if (code2 < 46721) {\n                            if (code2 === 46720) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46748) {\n                              if (46721 <= code2 && code2 <= 46747) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46748) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46776) {\n                            if (46749 <= code2 && code2 <= 46775) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46777) {\n                              if (code2 === 46776) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46777 <= code2 && code2 <= 46803) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 46945) {\n                      if (code2 < 46861) {\n                        if (code2 < 46832) {\n                          if (code2 < 46805) {\n                            if (code2 === 46804) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (46805 <= code2 && code2 <= 46831) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 46833) {\n                            if (code2 === 46832) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46860) {\n                              if (46833 <= code2 && code2 <= 46859) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46860) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 46916) {\n                          if (code2 < 46888) {\n                            if (46861 <= code2 && code2 <= 46887) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 46889) {\n                              if (code2 === 46888) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (46889 <= code2 && code2 <= 46915) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 46917) {\n                            if (code2 === 46916) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 46944) {\n                              if (46917 <= code2 && code2 <= 46943) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 46944) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47028) {\n                        if (code2 < 46973) {\n                          if (code2 < 46972) {\n                            if (46945 <= code2 && code2 <= 46971) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 46972) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47e3) {\n                            if (46973 <= code2 && code2 <= 46999) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47001) {\n                              if (code2 === 47e3) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47001 <= code2 && code2 <= 47027) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47057) {\n                          if (code2 < 47029) {\n                            if (code2 === 47028) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47056) {\n                              if (47029 <= code2 && code2 <= 47055) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47056) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47084) {\n                            if (47057 <= code2 && code2 <= 47083) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47085) {\n                              if (code2 === 47084) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47085 <= code2 && code2 <= 47111) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 47393) {\n                    if (code2 < 47252) {\n                      if (code2 < 47169) {\n                        if (code2 < 47140) {\n                          if (code2 < 47113) {\n                            if (code2 === 47112) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47113 <= code2 && code2 <= 47139) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47141) {\n                            if (code2 === 47140) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47168) {\n                              if (47141 <= code2 && code2 <= 47167) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47168) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47197) {\n                          if (code2 < 47196) {\n                            if (47169 <= code2 && code2 <= 47195) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 47196) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47224) {\n                            if (47197 <= code2 && code2 <= 47223) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47225) {\n                              if (code2 === 47224) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47225 <= code2 && code2 <= 47251) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47309) {\n                        if (code2 < 47280) {\n                          if (code2 < 47253) {\n                            if (code2 === 47252) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47253 <= code2 && code2 <= 47279) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47281) {\n                            if (code2 === 47280) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47308) {\n                              if (47281 <= code2 && code2 <= 47307) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47308) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47364) {\n                          if (code2 < 47336) {\n                            if (47309 <= code2 && code2 <= 47335) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47337) {\n                              if (code2 === 47336) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47337 <= code2 && code2 <= 47363) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47365) {\n                            if (code2 === 47364) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47392) {\n                              if (47365 <= code2 && code2 <= 47391) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47392) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 47560) {\n                      if (code2 < 47476) {\n                        if (code2 < 47421) {\n                          if (code2 < 47420) {\n                            if (47393 <= code2 && code2 <= 47419) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 47420) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47448) {\n                            if (47421 <= code2 && code2 <= 47447) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47449) {\n                              if (code2 === 47448) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47449 <= code2 && code2 <= 47475) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47505) {\n                          if (code2 < 47477) {\n                            if (code2 === 47476) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47504) {\n                              if (47477 <= code2 && code2 <= 47503) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47504) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47532) {\n                            if (47505 <= code2 && code2 <= 47531) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47533) {\n                              if (code2 === 47532) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47533 <= code2 && code2 <= 47559) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47617) {\n                        if (code2 < 47588) {\n                          if (code2 < 47561) {\n                            if (code2 === 47560) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47561 <= code2 && code2 <= 47587) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47589) {\n                            if (code2 === 47588) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47616) {\n                              if (47589 <= code2 && code2 <= 47615) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47616) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47672) {\n                          if (code2 < 47644) {\n                            if (47617 <= code2 && code2 <= 47643) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47645) {\n                              if (code2 === 47644) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47645 <= code2 && code2 <= 47671) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47673) {\n                            if (code2 === 47672) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47700) {\n                              if (47673 <= code2 && code2 <= 47699) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47700) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 48316) {\n                  if (code2 < 48008) {\n                    if (code2 < 47841) {\n                      if (code2 < 47784) {\n                        if (code2 < 47729) {\n                          if (code2 < 47728) {\n                            if (47701 <= code2 && code2 <= 47727) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 47728) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47756) {\n                            if (47729 <= code2 && code2 <= 47755) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47757) {\n                              if (code2 === 47756) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47757 <= code2 && code2 <= 47783) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47812) {\n                          if (code2 < 47785) {\n                            if (code2 === 47784) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (47785 <= code2 && code2 <= 47811) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47813) {\n                            if (code2 === 47812) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47840) {\n                              if (47813 <= code2 && code2 <= 47839) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47840) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 47924) {\n                        if (code2 < 47869) {\n                          if (code2 < 47868) {\n                            if (47841 <= code2 && code2 <= 47867) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 47868) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 47896) {\n                            if (47869 <= code2 && code2 <= 47895) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47897) {\n                              if (code2 === 47896) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47897 <= code2 && code2 <= 47923) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 47953) {\n                          if (code2 < 47925) {\n                            if (code2 === 47924) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 47952) {\n                              if (47925 <= code2 && code2 <= 47951) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 47952) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 47980) {\n                            if (47953 <= code2 && code2 <= 47979) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 47981) {\n                              if (code2 === 47980) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (47981 <= code2 && code2 <= 48007) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 48149) {\n                      if (code2 < 48065) {\n                        if (code2 < 48036) {\n                          if (code2 < 48009) {\n                            if (code2 === 48008) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48009 <= code2 && code2 <= 48035) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48037) {\n                            if (code2 === 48036) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48064) {\n                              if (48037 <= code2 && code2 <= 48063) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48064) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48120) {\n                          if (code2 < 48092) {\n                            if (48065 <= code2 && code2 <= 48091) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48093) {\n                              if (code2 === 48092) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48093 <= code2 && code2 <= 48119) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48121) {\n                            if (code2 === 48120) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48148) {\n                              if (48121 <= code2 && code2 <= 48147) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48148) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 48232) {\n                        if (code2 < 48177) {\n                          if (code2 < 48176) {\n                            if (48149 <= code2 && code2 <= 48175) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 48176) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48204) {\n                            if (48177 <= code2 && code2 <= 48203) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48205) {\n                              if (code2 === 48204) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48205 <= code2 && code2 <= 48231) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48261) {\n                          if (code2 < 48233) {\n                            if (code2 === 48232) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48260) {\n                              if (48233 <= code2 && code2 <= 48259) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48260) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48288) {\n                            if (48261 <= code2 && code2 <= 48287) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48289) {\n                              if (code2 === 48288) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48289 <= code2 && code2 <= 48315) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 48597) {\n                    if (code2 < 48456) {\n                      if (code2 < 48373) {\n                        if (code2 < 48344) {\n                          if (code2 < 48317) {\n                            if (code2 === 48316) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48317 <= code2 && code2 <= 48343) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48345) {\n                            if (code2 === 48344) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48372) {\n                              if (48345 <= code2 && code2 <= 48371) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48372) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48401) {\n                          if (code2 < 48400) {\n                            if (48373 <= code2 && code2 <= 48399) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 48400) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48428) {\n                            if (48401 <= code2 && code2 <= 48427) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48429) {\n                              if (code2 === 48428) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48429 <= code2 && code2 <= 48455) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 48513) {\n                        if (code2 < 48484) {\n                          if (code2 < 48457) {\n                            if (code2 === 48456) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48457 <= code2 && code2 <= 48483) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48485) {\n                            if (code2 === 48484) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48512) {\n                              if (48485 <= code2 && code2 <= 48511) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48512) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48568) {\n                          if (code2 < 48540) {\n                            if (48513 <= code2 && code2 <= 48539) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48541) {\n                              if (code2 === 48540) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48541 <= code2 && code2 <= 48567) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48569) {\n                            if (code2 === 48568) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48596) {\n                              if (48569 <= code2 && code2 <= 48595) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48596) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 48764) {\n                      if (code2 < 48680) {\n                        if (code2 < 48625) {\n                          if (code2 < 48624) {\n                            if (48597 <= code2 && code2 <= 48623) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 48624) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48652) {\n                            if (48625 <= code2 && code2 <= 48651) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48653) {\n                              if (code2 === 48652) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48653 <= code2 && code2 <= 48679) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48709) {\n                          if (code2 < 48681) {\n                            if (code2 === 48680) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48708) {\n                              if (48681 <= code2 && code2 <= 48707) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48708) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48736) {\n                            if (48709 <= code2 && code2 <= 48735) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48737) {\n                              if (code2 === 48736) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48737 <= code2 && code2 <= 48763) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 48821) {\n                        if (code2 < 48792) {\n                          if (code2 < 48765) {\n                            if (code2 === 48764) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48765 <= code2 && code2 <= 48791) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48793) {\n                            if (code2 === 48792) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48820) {\n                              if (48793 <= code2 && code2 <= 48819) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48820) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 48876) {\n                          if (code2 < 48848) {\n                            if (48821 <= code2 && code2 <= 48847) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48849) {\n                              if (code2 === 48848) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48849 <= code2 && code2 <= 48875) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 48877) {\n                            if (code2 === 48876) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 48904) {\n                              if (48877 <= code2 && code2 <= 48903) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 48904) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          if (code2 < 53720) {\n            if (code2 < 51312) {\n              if (code2 < 50108) {\n                if (code2 < 49493) {\n                  if (code2 < 49212) {\n                    if (code2 < 49045) {\n                      if (code2 < 48988) {\n                        if (code2 < 48933) {\n                          if (code2 < 48932) {\n                            if (48905 <= code2 && code2 <= 48931) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 48932) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 48960) {\n                            if (48933 <= code2 && code2 <= 48959) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 48961) {\n                              if (code2 === 48960) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (48961 <= code2 && code2 <= 48987) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49016) {\n                          if (code2 < 48989) {\n                            if (code2 === 48988) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (48989 <= code2 && code2 <= 49015) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49017) {\n                            if (code2 === 49016) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49044) {\n                              if (49017 <= code2 && code2 <= 49043) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49044) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 49128) {\n                        if (code2 < 49073) {\n                          if (code2 < 49072) {\n                            if (49045 <= code2 && code2 <= 49071) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 49072) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49100) {\n                            if (49073 <= code2 && code2 <= 49099) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49101) {\n                              if (code2 === 49100) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49101 <= code2 && code2 <= 49127) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49157) {\n                          if (code2 < 49129) {\n                            if (code2 === 49128) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49156) {\n                              if (49129 <= code2 && code2 <= 49155) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49156) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49184) {\n                            if (49157 <= code2 && code2 <= 49183) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49185) {\n                              if (code2 === 49184) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49185 <= code2 && code2 <= 49211) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 49352) {\n                      if (code2 < 49269) {\n                        if (code2 < 49240) {\n                          if (code2 < 49213) {\n                            if (code2 === 49212) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49213 <= code2 && code2 <= 49239) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49241) {\n                            if (code2 === 49240) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49268) {\n                              if (49241 <= code2 && code2 <= 49267) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49268) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49297) {\n                          if (code2 < 49296) {\n                            if (49269 <= code2 && code2 <= 49295) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 49296) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49324) {\n                            if (49297 <= code2 && code2 <= 49323) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49325) {\n                              if (code2 === 49324) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49325 <= code2 && code2 <= 49351) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 49409) {\n                        if (code2 < 49380) {\n                          if (code2 < 49353) {\n                            if (code2 === 49352) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49353 <= code2 && code2 <= 49379) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49381) {\n                            if (code2 === 49380) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49408) {\n                              if (49381 <= code2 && code2 <= 49407) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49408) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49464) {\n                          if (code2 < 49436) {\n                            if (49409 <= code2 && code2 <= 49435) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49437) {\n                              if (code2 === 49436) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49437 <= code2 && code2 <= 49463) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49465) {\n                            if (code2 === 49464) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49492) {\n                              if (49465 <= code2 && code2 <= 49491) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49492) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 49800) {\n                    if (code2 < 49633) {\n                      if (code2 < 49576) {\n                        if (code2 < 49521) {\n                          if (code2 < 49520) {\n                            if (49493 <= code2 && code2 <= 49519) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 49520) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49548) {\n                            if (49521 <= code2 && code2 <= 49547) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49549) {\n                              if (code2 === 49548) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49549 <= code2 && code2 <= 49575) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49604) {\n                          if (code2 < 49577) {\n                            if (code2 === 49576) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49577 <= code2 && code2 <= 49603) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49605) {\n                            if (code2 === 49604) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49632) {\n                              if (49605 <= code2 && code2 <= 49631) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49632) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 49716) {\n                        if (code2 < 49661) {\n                          if (code2 < 49660) {\n                            if (49633 <= code2 && code2 <= 49659) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 49660) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49688) {\n                            if (49661 <= code2 && code2 <= 49687) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49689) {\n                              if (code2 === 49688) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49689 <= code2 && code2 <= 49715) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49745) {\n                          if (code2 < 49717) {\n                            if (code2 === 49716) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49744) {\n                              if (49717 <= code2 && code2 <= 49743) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49744) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49772) {\n                            if (49745 <= code2 && code2 <= 49771) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49773) {\n                              if (code2 === 49772) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49773 <= code2 && code2 <= 49799) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 49941) {\n                      if (code2 < 49857) {\n                        if (code2 < 49828) {\n                          if (code2 < 49801) {\n                            if (code2 === 49800) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (49801 <= code2 && code2 <= 49827) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49829) {\n                            if (code2 === 49828) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49856) {\n                              if (49829 <= code2 && code2 <= 49855) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49856) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 49912) {\n                          if (code2 < 49884) {\n                            if (49857 <= code2 && code2 <= 49883) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49885) {\n                              if (code2 === 49884) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49885 <= code2 && code2 <= 49911) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 49913) {\n                            if (code2 === 49912) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 49940) {\n                              if (49913 <= code2 && code2 <= 49939) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 49940) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50024) {\n                        if (code2 < 49969) {\n                          if (code2 < 49968) {\n                            if (49941 <= code2 && code2 <= 49967) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 49968) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 49996) {\n                            if (49969 <= code2 && code2 <= 49995) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 49997) {\n                              if (code2 === 49996) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (49997 <= code2 && code2 <= 50023) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50053) {\n                          if (code2 < 50025) {\n                            if (code2 === 50024) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50052) {\n                              if (50025 <= code2 && code2 <= 50051) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50052) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50080) {\n                            if (50053 <= code2 && code2 <= 50079) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50081) {\n                              if (code2 === 50080) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50081 <= code2 && code2 <= 50107) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 50697) {\n                  if (code2 < 50389) {\n                    if (code2 < 50248) {\n                      if (code2 < 50165) {\n                        if (code2 < 50136) {\n                          if (code2 < 50109) {\n                            if (code2 === 50108) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50109 <= code2 && code2 <= 50135) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50137) {\n                            if (code2 === 50136) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50164) {\n                              if (50137 <= code2 && code2 <= 50163) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50164) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50193) {\n                          if (code2 < 50192) {\n                            if (50165 <= code2 && code2 <= 50191) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 50192) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50220) {\n                            if (50193 <= code2 && code2 <= 50219) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50221) {\n                              if (code2 === 50220) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50221 <= code2 && code2 <= 50247) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50305) {\n                        if (code2 < 50276) {\n                          if (code2 < 50249) {\n                            if (code2 === 50248) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50249 <= code2 && code2 <= 50275) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50277) {\n                            if (code2 === 50276) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50304) {\n                              if (50277 <= code2 && code2 <= 50303) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50304) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50360) {\n                          if (code2 < 50332) {\n                            if (50305 <= code2 && code2 <= 50331) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50333) {\n                              if (code2 === 50332) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50333 <= code2 && code2 <= 50359) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50361) {\n                            if (code2 === 50360) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50388) {\n                              if (50361 <= code2 && code2 <= 50387) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50388) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 50556) {\n                      if (code2 < 50472) {\n                        if (code2 < 50417) {\n                          if (code2 < 50416) {\n                            if (50389 <= code2 && code2 <= 50415) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 50416) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50444) {\n                            if (50417 <= code2 && code2 <= 50443) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50445) {\n                              if (code2 === 50444) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50445 <= code2 && code2 <= 50471) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50501) {\n                          if (code2 < 50473) {\n                            if (code2 === 50472) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50500) {\n                              if (50473 <= code2 && code2 <= 50499) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50500) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50528) {\n                            if (50501 <= code2 && code2 <= 50527) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50529) {\n                              if (code2 === 50528) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50529 <= code2 && code2 <= 50555) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50613) {\n                        if (code2 < 50584) {\n                          if (code2 < 50557) {\n                            if (code2 === 50556) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50557 <= code2 && code2 <= 50583) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50585) {\n                            if (code2 === 50584) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50612) {\n                              if (50585 <= code2 && code2 <= 50611) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50612) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50668) {\n                          if (code2 < 50640) {\n                            if (50613 <= code2 && code2 <= 50639) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50641) {\n                              if (code2 === 50640) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50641 <= code2 && code2 <= 50667) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50669) {\n                            if (code2 === 50668) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50696) {\n                              if (50669 <= code2 && code2 <= 50695) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50696) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 51004) {\n                    if (code2 < 50837) {\n                      if (code2 < 50780) {\n                        if (code2 < 50725) {\n                          if (code2 < 50724) {\n                            if (50697 <= code2 && code2 <= 50723) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 50724) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50752) {\n                            if (50725 <= code2 && code2 <= 50751) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50753) {\n                              if (code2 === 50752) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50753 <= code2 && code2 <= 50779) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50808) {\n                          if (code2 < 50781) {\n                            if (code2 === 50780) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (50781 <= code2 && code2 <= 50807) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50809) {\n                            if (code2 === 50808) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50836) {\n                              if (50809 <= code2 && code2 <= 50835) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50836) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 50920) {\n                        if (code2 < 50865) {\n                          if (code2 < 50864) {\n                            if (50837 <= code2 && code2 <= 50863) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 50864) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 50892) {\n                            if (50865 <= code2 && code2 <= 50891) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50893) {\n                              if (code2 === 50892) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50893 <= code2 && code2 <= 50919) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 50949) {\n                          if (code2 < 50921) {\n                            if (code2 === 50920) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 50948) {\n                              if (50921 <= code2 && code2 <= 50947) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 50948) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 50976) {\n                            if (50949 <= code2 && code2 <= 50975) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 50977) {\n                              if (code2 === 50976) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (50977 <= code2 && code2 <= 51003) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 51145) {\n                      if (code2 < 51061) {\n                        if (code2 < 51032) {\n                          if (code2 < 51005) {\n                            if (code2 === 51004) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51005 <= code2 && code2 <= 51031) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51033) {\n                            if (code2 === 51032) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51060) {\n                              if (51033 <= code2 && code2 <= 51059) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51060) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51116) {\n                          if (code2 < 51088) {\n                            if (51061 <= code2 && code2 <= 51087) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51089) {\n                              if (code2 === 51088) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51089 <= code2 && code2 <= 51115) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51117) {\n                            if (code2 === 51116) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51144) {\n                              if (51117 <= code2 && code2 <= 51143) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51144) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 51228) {\n                        if (code2 < 51173) {\n                          if (code2 < 51172) {\n                            if (51145 <= code2 && code2 <= 51171) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 51172) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51200) {\n                            if (51173 <= code2 && code2 <= 51199) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51201) {\n                              if (code2 === 51200) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51201 <= code2 && code2 <= 51227) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51257) {\n                          if (code2 < 51229) {\n                            if (code2 === 51228) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51256) {\n                              if (51229 <= code2 && code2 <= 51255) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51256) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51284) {\n                            if (51257 <= code2 && code2 <= 51283) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51285) {\n                              if (code2 === 51284) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51285 <= code2 && code2 <= 51311) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 52516) {\n                if (code2 < 51901) {\n                  if (code2 < 51593) {\n                    if (code2 < 51452) {\n                      if (code2 < 51369) {\n                        if (code2 < 51340) {\n                          if (code2 < 51313) {\n                            if (code2 === 51312) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51313 <= code2 && code2 <= 51339) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51341) {\n                            if (code2 === 51340) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51368) {\n                              if (51341 <= code2 && code2 <= 51367) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51368) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51397) {\n                          if (code2 < 51396) {\n                            if (51369 <= code2 && code2 <= 51395) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 51396) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51424) {\n                            if (51397 <= code2 && code2 <= 51423) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51425) {\n                              if (code2 === 51424) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51425 <= code2 && code2 <= 51451) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 51509) {\n                        if (code2 < 51480) {\n                          if (code2 < 51453) {\n                            if (code2 === 51452) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51453 <= code2 && code2 <= 51479) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51481) {\n                            if (code2 === 51480) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51508) {\n                              if (51481 <= code2 && code2 <= 51507) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51508) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51564) {\n                          if (code2 < 51536) {\n                            if (51509 <= code2 && code2 <= 51535) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51537) {\n                              if (code2 === 51536) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51537 <= code2 && code2 <= 51563) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51565) {\n                            if (code2 === 51564) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51592) {\n                              if (51565 <= code2 && code2 <= 51591) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51592) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 51760) {\n                      if (code2 < 51676) {\n                        if (code2 < 51621) {\n                          if (code2 < 51620) {\n                            if (51593 <= code2 && code2 <= 51619) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 51620) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51648) {\n                            if (51621 <= code2 && code2 <= 51647) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51649) {\n                              if (code2 === 51648) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51649 <= code2 && code2 <= 51675) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51705) {\n                          if (code2 < 51677) {\n                            if (code2 === 51676) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51704) {\n                              if (51677 <= code2 && code2 <= 51703) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51704) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51732) {\n                            if (51705 <= code2 && code2 <= 51731) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51733) {\n                              if (code2 === 51732) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51733 <= code2 && code2 <= 51759) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 51817) {\n                        if (code2 < 51788) {\n                          if (code2 < 51761) {\n                            if (code2 === 51760) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51761 <= code2 && code2 <= 51787) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51789) {\n                            if (code2 === 51788) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51816) {\n                              if (51789 <= code2 && code2 <= 51815) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51816) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 51872) {\n                          if (code2 < 51844) {\n                            if (51817 <= code2 && code2 <= 51843) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51845) {\n                              if (code2 === 51844) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51845 <= code2 && code2 <= 51871) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 51873) {\n                            if (code2 === 51872) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 51900) {\n                              if (51873 <= code2 && code2 <= 51899) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 51900) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 52208) {\n                    if (code2 < 52041) {\n                      if (code2 < 51984) {\n                        if (code2 < 51929) {\n                          if (code2 < 51928) {\n                            if (51901 <= code2 && code2 <= 51927) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 51928) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 51956) {\n                            if (51929 <= code2 && code2 <= 51955) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 51957) {\n                              if (code2 === 51956) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (51957 <= code2 && code2 <= 51983) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52012) {\n                          if (code2 < 51985) {\n                            if (code2 === 51984) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (51985 <= code2 && code2 <= 52011) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52013) {\n                            if (code2 === 52012) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52040) {\n                              if (52013 <= code2 && code2 <= 52039) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52040) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 52124) {\n                        if (code2 < 52069) {\n                          if (code2 < 52068) {\n                            if (52041 <= code2 && code2 <= 52067) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 52068) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52096) {\n                            if (52069 <= code2 && code2 <= 52095) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52097) {\n                              if (code2 === 52096) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52097 <= code2 && code2 <= 52123) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52153) {\n                          if (code2 < 52125) {\n                            if (code2 === 52124) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52152) {\n                              if (52125 <= code2 && code2 <= 52151) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52152) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52180) {\n                            if (52153 <= code2 && code2 <= 52179) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52181) {\n                              if (code2 === 52180) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52181 <= code2 && code2 <= 52207) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 52349) {\n                      if (code2 < 52265) {\n                        if (code2 < 52236) {\n                          if (code2 < 52209) {\n                            if (code2 === 52208) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52209 <= code2 && code2 <= 52235) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52237) {\n                            if (code2 === 52236) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52264) {\n                              if (52237 <= code2 && code2 <= 52263) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52264) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52320) {\n                          if (code2 < 52292) {\n                            if (52265 <= code2 && code2 <= 52291) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52293) {\n                              if (code2 === 52292) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52293 <= code2 && code2 <= 52319) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52321) {\n                            if (code2 === 52320) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52348) {\n                              if (52321 <= code2 && code2 <= 52347) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52348) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 52432) {\n                        if (code2 < 52377) {\n                          if (code2 < 52376) {\n                            if (52349 <= code2 && code2 <= 52375) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 52376) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52404) {\n                            if (52377 <= code2 && code2 <= 52403) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52405) {\n                              if (code2 === 52404) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52405 <= code2 && code2 <= 52431) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52461) {\n                          if (code2 < 52433) {\n                            if (code2 === 52432) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52460) {\n                              if (52433 <= code2 && code2 <= 52459) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52460) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52488) {\n                            if (52461 <= code2 && code2 <= 52487) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52489) {\n                              if (code2 === 52488) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52489 <= code2 && code2 <= 52515) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 53105) {\n                  if (code2 < 52797) {\n                    if (code2 < 52656) {\n                      if (code2 < 52573) {\n                        if (code2 < 52544) {\n                          if (code2 < 52517) {\n                            if (code2 === 52516) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52517 <= code2 && code2 <= 52543) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52545) {\n                            if (code2 === 52544) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52572) {\n                              if (52545 <= code2 && code2 <= 52571) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52572) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52601) {\n                          if (code2 < 52600) {\n                            if (52573 <= code2 && code2 <= 52599) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 52600) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52628) {\n                            if (52601 <= code2 && code2 <= 52627) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52629) {\n                              if (code2 === 52628) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52629 <= code2 && code2 <= 52655) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 52713) {\n                        if (code2 < 52684) {\n                          if (code2 < 52657) {\n                            if (code2 === 52656) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52657 <= code2 && code2 <= 52683) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52685) {\n                            if (code2 === 52684) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52712) {\n                              if (52685 <= code2 && code2 <= 52711) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52712) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52768) {\n                          if (code2 < 52740) {\n                            if (52713 <= code2 && code2 <= 52739) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52741) {\n                              if (code2 === 52740) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52741 <= code2 && code2 <= 52767) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52769) {\n                            if (code2 === 52768) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52796) {\n                              if (52769 <= code2 && code2 <= 52795) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52796) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 52964) {\n                      if (code2 < 52880) {\n                        if (code2 < 52825) {\n                          if (code2 < 52824) {\n                            if (52797 <= code2 && code2 <= 52823) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 52824) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52852) {\n                            if (52825 <= code2 && code2 <= 52851) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52853) {\n                              if (code2 === 52852) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52853 <= code2 && code2 <= 52879) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 52909) {\n                          if (code2 < 52881) {\n                            if (code2 === 52880) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 52908) {\n                              if (52881 <= code2 && code2 <= 52907) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 52908) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 52936) {\n                            if (52909 <= code2 && code2 <= 52935) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 52937) {\n                              if (code2 === 52936) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (52937 <= code2 && code2 <= 52963) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53021) {\n                        if (code2 < 52992) {\n                          if (code2 < 52965) {\n                            if (code2 === 52964) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (52965 <= code2 && code2 <= 52991) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 52993) {\n                            if (code2 === 52992) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53020) {\n                              if (52993 <= code2 && code2 <= 53019) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53020) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53076) {\n                          if (code2 < 53048) {\n                            if (53021 <= code2 && code2 <= 53047) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53049) {\n                              if (code2 === 53048) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53049 <= code2 && code2 <= 53075) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53077) {\n                            if (code2 === 53076) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53104) {\n                              if (53077 <= code2 && code2 <= 53103) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53104) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 53412) {\n                    if (code2 < 53245) {\n                      if (code2 < 53188) {\n                        if (code2 < 53133) {\n                          if (code2 < 53132) {\n                            if (53105 <= code2 && code2 <= 53131) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 53132) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53160) {\n                            if (53133 <= code2 && code2 <= 53159) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53161) {\n                              if (code2 === 53160) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53161 <= code2 && code2 <= 53187) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53216) {\n                          if (code2 < 53189) {\n                            if (code2 === 53188) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53189 <= code2 && code2 <= 53215) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53217) {\n                            if (code2 === 53216) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53244) {\n                              if (53217 <= code2 && code2 <= 53243) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53244) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53328) {\n                        if (code2 < 53273) {\n                          if (code2 < 53272) {\n                            if (53245 <= code2 && code2 <= 53271) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 53272) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53300) {\n                            if (53273 <= code2 && code2 <= 53299) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53301) {\n                              if (code2 === 53300) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53301 <= code2 && code2 <= 53327) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53357) {\n                          if (code2 < 53329) {\n                            if (code2 === 53328) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53356) {\n                              if (53329 <= code2 && code2 <= 53355) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53356) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53384) {\n                            if (53357 <= code2 && code2 <= 53383) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53385) {\n                              if (code2 === 53384) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53385 <= code2 && code2 <= 53411) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 53553) {\n                      if (code2 < 53469) {\n                        if (code2 < 53440) {\n                          if (code2 < 53413) {\n                            if (code2 === 53412) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53413 <= code2 && code2 <= 53439) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53441) {\n                            if (code2 === 53440) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53468) {\n                              if (53441 <= code2 && code2 <= 53467) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53468) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53524) {\n                          if (code2 < 53496) {\n                            if (53469 <= code2 && code2 <= 53495) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53497) {\n                              if (code2 === 53496) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53497 <= code2 && code2 <= 53523) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53525) {\n                            if (code2 === 53524) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53552) {\n                              if (53525 <= code2 && code2 <= 53551) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53552) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53636) {\n                        if (code2 < 53581) {\n                          if (code2 < 53580) {\n                            if (53553 <= code2 && code2 <= 53579) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 53580) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53608) {\n                            if (53581 <= code2 && code2 <= 53607) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53609) {\n                              if (code2 === 53608) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53609 <= code2 && code2 <= 53635) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53665) {\n                          if (code2 < 53637) {\n                            if (code2 === 53636) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53664) {\n                              if (53637 <= code2 && code2 <= 53663) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53664) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53692) {\n                            if (53665 <= code2 && code2 <= 53691) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53693) {\n                              if (code2 === 53692) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53693 <= code2 && code2 <= 53719) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 70459) {\n              if (code2 < 54897) {\n                if (code2 < 54308) {\n                  if (code2 < 54001) {\n                    if (code2 < 53860) {\n                      if (code2 < 53777) {\n                        if (code2 < 53748) {\n                          if (code2 < 53721) {\n                            if (code2 === 53720) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53721 <= code2 && code2 <= 53747) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53749) {\n                            if (code2 === 53748) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53776) {\n                              if (53749 <= code2 && code2 <= 53775) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53776) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53805) {\n                          if (code2 < 53804) {\n                            if (53777 <= code2 && code2 <= 53803) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 53804) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53832) {\n                            if (53805 <= code2 && code2 <= 53831) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53833) {\n                              if (code2 === 53832) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53833 <= code2 && code2 <= 53859) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 53917) {\n                        if (code2 < 53888) {\n                          if (code2 < 53861) {\n                            if (code2 === 53860) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (53861 <= code2 && code2 <= 53887) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 53889) {\n                            if (code2 === 53888) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 53916) {\n                              if (53889 <= code2 && code2 <= 53915) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 53916) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 53972) {\n                          if (code2 < 53944) {\n                            if (53917 <= code2 && code2 <= 53943) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 53945) {\n                              if (code2 === 53944) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (53945 <= code2 && code2 <= 53971) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 53973) {\n                            if (code2 === 53972) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54e3) {\n                              if (53973 <= code2 && code2 <= 53999) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54e3) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 54141) {\n                      if (code2 < 54084) {\n                        if (code2 < 54029) {\n                          if (code2 < 54028) {\n                            if (54001 <= code2 && code2 <= 54027) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 54028) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54056) {\n                            if (54029 <= code2 && code2 <= 54055) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54057) {\n                              if (code2 === 54056) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54057 <= code2 && code2 <= 54083) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54112) {\n                          if (code2 < 54085) {\n                            if (code2 === 54084) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54085 <= code2 && code2 <= 54111) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54113) {\n                            if (code2 === 54112) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54140) {\n                              if (54113 <= code2 && code2 <= 54139) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54140) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 54224) {\n                        if (code2 < 54169) {\n                          if (code2 < 54168) {\n                            if (54141 <= code2 && code2 <= 54167) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 54168) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54196) {\n                            if (54169 <= code2 && code2 <= 54195) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54197) {\n                              if (code2 === 54196) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54197 <= code2 && code2 <= 54223) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54253) {\n                          if (code2 < 54225) {\n                            if (code2 === 54224) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54252) {\n                              if (54225 <= code2 && code2 <= 54251) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54252) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54280) {\n                            if (54253 <= code2 && code2 <= 54279) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54281) {\n                              if (code2 === 54280) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54281 <= code2 && code2 <= 54307) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 54589) {\n                    if (code2 < 54448) {\n                      if (code2 < 54365) {\n                        if (code2 < 54336) {\n                          if (code2 < 54309) {\n                            if (code2 === 54308) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54309 <= code2 && code2 <= 54335) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54337) {\n                            if (code2 === 54336) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54364) {\n                              if (54337 <= code2 && code2 <= 54363) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54364) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54393) {\n                          if (code2 < 54392) {\n                            if (54365 <= code2 && code2 <= 54391) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 54392) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54420) {\n                            if (54393 <= code2 && code2 <= 54419) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54421) {\n                              if (code2 === 54420) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54421 <= code2 && code2 <= 54447) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 54505) {\n                        if (code2 < 54476) {\n                          if (code2 < 54449) {\n                            if (code2 === 54448) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54449 <= code2 && code2 <= 54475) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54477) {\n                            if (code2 === 54476) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54504) {\n                              if (54477 <= code2 && code2 <= 54503) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54504) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54560) {\n                          if (code2 < 54532) {\n                            if (54505 <= code2 && code2 <= 54531) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54533) {\n                              if (code2 === 54532) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54533 <= code2 && code2 <= 54559) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54561) {\n                            if (code2 === 54560) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54588) {\n                              if (54561 <= code2 && code2 <= 54587) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54588) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 54756) {\n                      if (code2 < 54672) {\n                        if (code2 < 54617) {\n                          if (code2 < 54616) {\n                            if (54589 <= code2 && code2 <= 54615) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 54616) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54644) {\n                            if (54617 <= code2 && code2 <= 54643) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54645) {\n                              if (code2 === 54644) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54645 <= code2 && code2 <= 54671) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54701) {\n                          if (code2 < 54673) {\n                            if (code2 === 54672) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54700) {\n                              if (54673 <= code2 && code2 <= 54699) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54700) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54728) {\n                            if (54701 <= code2 && code2 <= 54727) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54729) {\n                              if (code2 === 54728) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54729 <= code2 && code2 <= 54755) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 54813) {\n                        if (code2 < 54784) {\n                          if (code2 < 54757) {\n                            if (code2 === 54756) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54757 <= code2 && code2 <= 54783) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54785) {\n                            if (code2 === 54784) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54812) {\n                              if (54785 <= code2 && code2 <= 54811) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54812) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 54868) {\n                          if (code2 < 54840) {\n                            if (54813 <= code2 && code2 <= 54839) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54841) {\n                              if (code2 === 54840) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54841 <= code2 && code2 <= 54867) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 54869) {\n                            if (code2 === 54868) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 54896) {\n                              if (54869 <= code2 && code2 <= 54895) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 54896) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 69632) {\n                  if (code2 < 55216) {\n                    if (code2 < 55037) {\n                      if (code2 < 54980) {\n                        if (code2 < 54925) {\n                          if (code2 < 54924) {\n                            if (54897 <= code2 && code2 <= 54923) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 54924) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 54952) {\n                            if (54925 <= code2 && code2 <= 54951) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 54953) {\n                              if (code2 === 54952) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (54953 <= code2 && code2 <= 54979) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 55008) {\n                          if (code2 < 54981) {\n                            if (code2 === 54980) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (54981 <= code2 && code2 <= 55007) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          }\n                        } else {\n                          if (code2 < 55009) {\n                            if (code2 === 55008) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 55036) {\n                              if (55009 <= code2 && code2 <= 55035) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 55036) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 55120) {\n                        if (code2 < 55065) {\n                          if (code2 < 55064) {\n                            if (55037 <= code2 && code2 <= 55063) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 === 55064) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          }\n                        } else {\n                          if (code2 < 55092) {\n                            if (55065 <= code2 && code2 <= 55091) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 55093) {\n                              if (code2 === 55092) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (55093 <= code2 && code2 <= 55119) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 55149) {\n                          if (code2 < 55121) {\n                            if (code2 === 55120) {\n                              return boundaries_1.CLUSTER_BREAK.LV;\n                            }\n                          } else {\n                            if (code2 < 55148) {\n                              if (55121 <= code2 && code2 <= 55147) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            } else {\n                              if (code2 === 55148) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 55176) {\n                            if (55149 <= code2 && code2 <= 55175) {\n                              return boundaries_1.CLUSTER_BREAK.LVT;\n                            }\n                          } else {\n                            if (code2 < 55177) {\n                              if (code2 === 55176) {\n                                return boundaries_1.CLUSTER_BREAK.LV;\n                              }\n                            } else {\n                              if (55177 <= code2 && code2 <= 55203) {\n                                return boundaries_1.CLUSTER_BREAK.LVT;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 68097) {\n                      if (code2 < 65279) {\n                        if (code2 < 64286) {\n                          if (code2 < 55243) {\n                            if (55216 <= code2 && code2 <= 55238) {\n                              return boundaries_1.CLUSTER_BREAK.V;\n                            }\n                          } else {\n                            if (55243 <= code2 && code2 <= 55291) {\n                              return boundaries_1.CLUSTER_BREAK.T;\n                            }\n                          }\n                        } else {\n                          if (code2 < 65024) {\n                            if (code2 === 64286) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 65056) {\n                              if (65024 <= code2 && code2 <= 65039) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (65056 <= code2 && code2 <= 65071) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 66045) {\n                          if (code2 < 65438) {\n                            if (code2 === 65279) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 65520) {\n                              if (65438 <= code2 && code2 <= 65439) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (65520 <= code2 && code2 <= 65531) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 66272) {\n                            if (code2 === 66045) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 66422) {\n                              if (code2 === 66272) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (66422 <= code2 && code2 <= 66426) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 68325) {\n                        if (code2 < 68108) {\n                          if (code2 < 68101) {\n                            if (68097 <= code2 && code2 <= 68099) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (68101 <= code2 && code2 <= 68102) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 68152) {\n                            if (68108 <= code2 && code2 <= 68111) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 68159) {\n                              if (68152 <= code2 && code2 <= 68154) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 68159) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 69373) {\n                          if (code2 < 68900) {\n                            if (68325 <= code2 && code2 <= 68326) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 69291) {\n                              if (68900 <= code2 && code2 <= 68903) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (69291 <= code2 && code2 <= 69292) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 69446) {\n                            if (69373 <= code2 && code2 <= 69375) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 69506) {\n                              if (69446 <= code2 && code2 <= 69456) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (69506 <= code2 && code2 <= 69509) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 70016) {\n                    if (code2 < 69815) {\n                      if (code2 < 69747) {\n                        if (code2 < 69634) {\n                          if (code2 === 69632) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 69633) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 69688) {\n                            if (code2 === 69634) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 69744) {\n                              if (69688 <= code2 && code2 <= 69702) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 69744) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 69762) {\n                          if (code2 < 69759) {\n                            if (69747 <= code2 && code2 <= 69748) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (69759 <= code2 && code2 <= 69761) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 69808) {\n                            if (code2 === 69762) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 69811) {\n                              if (69808 <= code2 && code2 <= 69810) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (69811 <= code2 && code2 <= 69814) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 69888) {\n                        if (code2 < 69821) {\n                          if (code2 < 69817) {\n                            if (69815 <= code2 && code2 <= 69816) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (69817 <= code2 && code2 <= 69818) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 69826) {\n                            if (code2 === 69821) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 === 69826) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 69837) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 69933) {\n                          if (code2 < 69927) {\n                            if (69888 <= code2 && code2 <= 69890) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 69932) {\n                              if (69927 <= code2 && code2 <= 69931) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 69932) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 69957) {\n                            if (69933 <= code2 && code2 <= 69940) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70003) {\n                              if (69957 <= code2 && code2 <= 69958) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (code2 === 70003) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 70194) {\n                      if (code2 < 70082) {\n                        if (code2 < 70067) {\n                          if (code2 < 70018) {\n                            if (70016 <= code2 && code2 <= 70017) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 70018) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70070) {\n                            if (70067 <= code2 && code2 <= 70069) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 70079) {\n                              if (70070 <= code2 && code2 <= 70078) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70079 <= code2 && code2 <= 70080) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70095) {\n                          if (code2 < 70089) {\n                            if (70082 <= code2 && code2 <= 70083) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 < 70094) {\n                              if (70089 <= code2 && code2 <= 70092) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 70094) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 70188) {\n                            if (code2 === 70095) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70191) {\n                              if (70188 <= code2 && code2 <= 70190) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70191 <= code2 && code2 <= 70193) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 70209) {\n                        if (code2 < 70197) {\n                          if (code2 < 70196) {\n                            if (70194 <= code2 && code2 <= 70195) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 70196) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70198) {\n                            if (code2 === 70197) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 70206) {\n                              if (70198 <= code2 && code2 <= 70199) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 70206) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70371) {\n                          if (code2 < 70367) {\n                            if (code2 === 70209) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70368) {\n                              if (code2 === 70367) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70368 <= code2 && code2 <= 70370) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 70400) {\n                            if (70371 <= code2 && code2 <= 70378) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70402) {\n                              if (70400 <= code2 && code2 <= 70401) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70402 <= code2 && code2 <= 70403) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 72343) {\n                if (code2 < 71339) {\n                  if (code2 < 70841) {\n                    if (code2 < 70512) {\n                      if (code2 < 70471) {\n                        if (code2 < 70463) {\n                          if (code2 < 70462) {\n                            if (70459 <= code2 && code2 <= 70460) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 70462) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70464) {\n                            if (code2 === 70463) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 70465) {\n                              if (code2 === 70464) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (70465 <= code2 && code2 <= 70468) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70487) {\n                          if (code2 < 70475) {\n                            if (70471 <= code2 && code2 <= 70472) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (70475 <= code2 && code2 <= 70477) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70498) {\n                            if (code2 === 70487) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70502) {\n                              if (70498 <= code2 && code2 <= 70499) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70502 <= code2 && code2 <= 70508) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 70725) {\n                        if (code2 < 70712) {\n                          if (code2 < 70709) {\n                            if (70512 <= code2 && code2 <= 70516) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (70709 <= code2 && code2 <= 70711) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70720) {\n                            if (70712 <= code2 && code2 <= 70719) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70722) {\n                              if (70720 <= code2 && code2 <= 70721) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70722 <= code2 && code2 <= 70724) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 70832) {\n                          if (code2 < 70726) {\n                            if (code2 === 70725) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 70726) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 70750) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 70833) {\n                            if (code2 === 70832) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70835) {\n                              if (70833 <= code2 && code2 <= 70834) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70835 <= code2 && code2 <= 70840) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 71096) {\n                      if (code2 < 70847) {\n                        if (code2 < 70843) {\n                          if (code2 === 70841) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 70842) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 70845) {\n                            if (70843 <= code2 && code2 <= 70844) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 70845) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 70846) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71087) {\n                          if (code2 < 70849) {\n                            if (70847 <= code2 && code2 <= 70848) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 70850) {\n                              if (code2 === 70849) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (70850 <= code2 && code2 <= 70851) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 71088) {\n                            if (code2 === 71087) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71090) {\n                              if (71088 <= code2 && code2 <= 71089) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71090 <= code2 && code2 <= 71093) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 71216) {\n                        if (code2 < 71102) {\n                          if (code2 < 71100) {\n                            if (71096 <= code2 && code2 <= 71099) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (71100 <= code2 && code2 <= 71101) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 71103) {\n                            if (code2 === 71102) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 71132) {\n                              if (71103 <= code2 && code2 <= 71104) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (71132 <= code2 && code2 <= 71133) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71229) {\n                          if (code2 < 71219) {\n                            if (71216 <= code2 && code2 <= 71218) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 71227) {\n                              if (71219 <= code2 && code2 <= 71226) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (71227 <= code2 && code2 <= 71228) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 71230) {\n                            if (code2 === 71229) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71231) {\n                              if (code2 === 71230) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71231 <= code2 && code2 <= 71232) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 71999) {\n                    if (code2 < 71463) {\n                      if (code2 < 71350) {\n                        if (code2 < 71341) {\n                          if (code2 === 71339) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                          if (code2 === 71340) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                        } else {\n                          if (code2 < 71342) {\n                            if (code2 === 71341) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71344) {\n                              if (71342 <= code2 && code2 <= 71343) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71344 <= code2 && code2 <= 71349) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71453) {\n                          if (code2 === 71350) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 71351) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 71458) {\n                            if (71453 <= code2 && code2 <= 71455) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71462) {\n                              if (71458 <= code2 && code2 <= 71461) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 71462) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 71984) {\n                        if (code2 < 71727) {\n                          if (code2 < 71724) {\n                            if (71463 <= code2 && code2 <= 71467) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (71724 <= code2 && code2 <= 71726) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 71736) {\n                            if (71727 <= code2 && code2 <= 71735) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71737) {\n                              if (code2 === 71736) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71737 <= code2 && code2 <= 71738) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 71995) {\n                          if (code2 < 71985) {\n                            if (code2 === 71984) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 71991) {\n                              if (71985 <= code2 && code2 <= 71989) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (71991 <= code2 && code2 <= 71992) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 71997) {\n                            if (71995 <= code2 && code2 <= 71996) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 71997) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 71998) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 72193) {\n                      if (code2 < 72145) {\n                        if (code2 < 72001) {\n                          if (code2 === 71999) {\n                            return boundaries_1.CLUSTER_BREAK.PREPEND;\n                          }\n                          if (code2 === 72e3) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                        } else {\n                          if (code2 < 72002) {\n                            if (code2 === 72001) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 === 72002) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 72003) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 72156) {\n                          if (code2 < 72148) {\n                            if (72145 <= code2 && code2 <= 72147) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 72154) {\n                              if (72148 <= code2 && code2 <= 72151) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (72154 <= code2 && code2 <= 72155) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 72160) {\n                            if (72156 <= code2 && code2 <= 72159) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 === 72160) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 72164) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 72263) {\n                        if (code2 < 72249) {\n                          if (code2 < 72243) {\n                            if (72193 <= code2 && code2 <= 72202) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (72243 <= code2 && code2 <= 72248) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 72250) {\n                            if (code2 === 72249) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 72251) {\n                              if (code2 === 72250) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            } else {\n                              if (72251 <= code2 && code2 <= 72254) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 72281) {\n                          if (code2 < 72273) {\n                            if (code2 === 72263) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 72279) {\n                              if (72273 <= code2 && code2 <= 72278) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (72279 <= code2 && code2 <= 72280) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 72324) {\n                            if (72281 <= code2 && code2 <= 72283) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 72330) {\n                              if (72324 <= code2 && code2 <= 72329) {\n                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                              }\n                            } else {\n                              if (72330 <= code2 && code2 <= 72342) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 94033) {\n                  if (code2 < 73104) {\n                    if (code2 < 72881) {\n                      if (code2 < 72766) {\n                        if (code2 < 72751) {\n                          if (code2 < 72344) {\n                            if (code2 === 72343) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (72344 <= code2 && code2 <= 72345) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 72752) {\n                            if (code2 === 72751) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 72760) {\n                              if (72752 <= code2 && code2 <= 72758) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (72760 <= code2 && code2 <= 72765) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 72850) {\n                          if (code2 === 72766) {\n                            return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                          }\n                          if (code2 === 72767) {\n                            return boundaries_1.CLUSTER_BREAK.EXTEND;\n                          }\n                        } else {\n                          if (code2 < 72873) {\n                            if (72850 <= code2 && code2 <= 72871) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 72874) {\n                              if (code2 === 72873) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (72874 <= code2 && code2 <= 72880) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 73018) {\n                        if (code2 < 72884) {\n                          if (code2 < 72882) {\n                            if (code2 === 72881) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (72882 <= code2 && code2 <= 72883) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 72885) {\n                            if (code2 === 72884) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (code2 < 73009) {\n                              if (72885 <= code2 && code2 <= 72886) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (73009 <= code2 && code2 <= 73014) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 73030) {\n                          if (code2 < 73020) {\n                            if (code2 === 73018) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 73023) {\n                              if (73020 <= code2 && code2 <= 73021) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (73023 <= code2 && code2 <= 73029) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 73031) {\n                            if (code2 === 73030) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 < 73098) {\n                              if (code2 === 73031) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (73098 <= code2 && code2 <= 73102) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 73526) {\n                      if (code2 < 73459) {\n                        if (code2 < 73109) {\n                          if (code2 < 73107) {\n                            if (73104 <= code2 && code2 <= 73105) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (73107 <= code2 && code2 <= 73108) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 73110) {\n                            if (code2 === 73109) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 73110) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 73111) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 73474) {\n                          if (code2 < 73461) {\n                            if (73459 <= code2 && code2 <= 73460) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 73472) {\n                              if (73461 <= code2 && code2 <= 73462) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (73472 <= code2 && code2 <= 73473) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 73475) {\n                            if (code2 === 73474) {\n                              return boundaries_1.CLUSTER_BREAK.PREPEND;\n                            }\n                          } else {\n                            if (code2 < 73524) {\n                              if (code2 === 73475) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (73524 <= code2 && code2 <= 73525) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 78896) {\n                        if (code2 < 73536) {\n                          if (code2 < 73534) {\n                            if (73526 <= code2 && code2 <= 73530) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (73534 <= code2 && code2 <= 73535) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 73537) {\n                            if (code2 === 73536) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 73537) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                            if (code2 === 73538) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 92912) {\n                          if (code2 < 78912) {\n                            if (78896 <= code2 && code2 <= 78911) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 78919) {\n                              if (code2 === 78912) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (78919 <= code2 && code2 <= 78933) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 92976) {\n                            if (92912 <= code2 && code2 <= 92916) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 94031) {\n                              if (92976 <= code2 && code2 <= 92982) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 94031) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                } else {\n                  if (code2 < 121476) {\n                    if (code2 < 119143) {\n                      if (code2 < 113824) {\n                        if (code2 < 94180) {\n                          if (code2 < 94095) {\n                            if (94033 <= code2 && code2 <= 94087) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          } else {\n                            if (94095 <= code2 && code2 <= 94098) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 94192) {\n                            if (code2 === 94180) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 113821) {\n                              if (94192 <= code2 && code2 <= 94193) {\n                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                              }\n                            } else {\n                              if (113821 <= code2 && code2 <= 113822) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 118576) {\n                          if (code2 < 118528) {\n                            if (113824 <= code2 && code2 <= 113827) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (118528 <= code2 && code2 <= 118573) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 119141) {\n                            if (118576 <= code2 && code2 <= 118598) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 119141) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                            if (code2 === 119142) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 119173) {\n                        if (code2 < 119150) {\n                          if (code2 < 119149) {\n                            if (119143 <= code2 && code2 <= 119145) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 === 119149) {\n                              return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                            }\n                          }\n                        } else {\n                          if (code2 < 119155) {\n                            if (119150 <= code2 && code2 <= 119154) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 119163) {\n                              if (119155 <= code2 && code2 <= 119162) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (119163 <= code2 && code2 <= 119170) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 121344) {\n                          if (code2 < 119210) {\n                            if (119173 <= code2 && code2 <= 119179) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 119362) {\n                              if (119210 <= code2 && code2 <= 119213) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (119362 <= code2 && code2 <= 119364) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 121403) {\n                            if (121344 <= code2 && code2 <= 121398) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 121461) {\n                              if (121403 <= code2 && code2 <= 121452) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 121461) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  } else {\n                    if (code2 < 123628) {\n                      if (code2 < 122907) {\n                        if (code2 < 121505) {\n                          if (code2 < 121499) {\n                            if (code2 === 121476) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (121499 <= code2 && code2 <= 121503) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 122880) {\n                            if (121505 <= code2 && code2 <= 121519) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 122888) {\n                              if (122880 <= code2 && code2 <= 122886) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (122888 <= code2 && code2 <= 122904) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 123023) {\n                          if (code2 < 122915) {\n                            if (122907 <= code2 && code2 <= 122913) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 122918) {\n                              if (122915 <= code2 && code2 <= 122916) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (122918 <= code2 && code2 <= 122922) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 123184) {\n                            if (code2 === 123023) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 123566) {\n                              if (123184 <= code2 && code2 <= 123190) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (code2 === 123566) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    } else {\n                      if (code2 < 127995) {\n                        if (code2 < 125136) {\n                          if (code2 < 124140) {\n                            if (123628 <= code2 && code2 <= 123631) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (124140 <= code2 && code2 <= 124143) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          }\n                        } else {\n                          if (code2 < 125252) {\n                            if (125136 <= code2 && code2 <= 125142) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 127462) {\n                              if (125252 <= code2 && code2 <= 125258) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (127462 <= code2 && code2 <= 127487) {\n                                return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n                              }\n                            }\n                          }\n                        }\n                      } else {\n                        if (code2 < 917632) {\n                          if (code2 < 917504) {\n                            if (127995 <= code2 && code2 <= 127999) {\n                              return boundaries_1.CLUSTER_BREAK.EXTEND;\n                            }\n                          } else {\n                            if (code2 < 917536) {\n                              if (917504 <= code2 && code2 <= 917535) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            } else {\n                              if (917536 <= code2 && code2 <= 917631) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            }\n                          }\n                        } else {\n                          if (code2 < 917760) {\n                            if (917632 <= code2 && code2 <= 917759) {\n                              return boundaries_1.CLUSTER_BREAK.CONTROL;\n                            }\n                          } else {\n                            if (code2 < 918e3) {\n                              if (917760 <= code2 && code2 <= 917999) {\n                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                              }\n                            } else {\n                              if (918e3 <= code2 && code2 <= 921599) {\n                                return boundaries_1.CLUSTER_BREAK.CONTROL;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return boundaries_1.CLUSTER_BREAK.OTHER;\n      }\n      static getEmojiProperty(code2) {\n        if (code2 < 10160) {\n          if (code2 < 9728) {\n            if (code2 < 9e3) {\n              if (code2 < 8482) {\n                if (code2 < 8252) {\n                  if (code2 === 169) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 174) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 === 8252) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 8265) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                }\n              } else {\n                if (code2 < 8596) {\n                  if (code2 === 8482) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 8505) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 8617) {\n                    if (8596 <= code2 && code2 <= 8601) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 8986) {\n                      if (8617 <= code2 && code2 <= 8618) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (8986 <= code2 && code2 <= 8987) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 9410) {\n                if (code2 < 9167) {\n                  if (code2 === 9e3) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 9096) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 9193) {\n                    if (code2 === 9167) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 9208) {\n                      if (9193 <= code2 && code2 <= 9203) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (9208 <= code2 && code2 <= 9210) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 9654) {\n                  if (code2 < 9642) {\n                    if (code2 === 9410) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (9642 <= code2 && code2 <= 9643) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 9664) {\n                    if (code2 === 9654) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 9723) {\n                      if (code2 === 9664) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (9723 <= code2 && code2 <= 9726) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 10035) {\n              if (code2 < 10004) {\n                if (code2 < 9748) {\n                  if (code2 < 9735) {\n                    if (9728 <= code2 && code2 <= 9733) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (9735 <= code2 && code2 <= 9746) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 9872) {\n                    if (9748 <= code2 && code2 <= 9861) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 9992) {\n                      if (9872 <= code2 && code2 <= 9989) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (9992 <= code2 && code2 <= 10002) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 10013) {\n                  if (code2 === 10004) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 10006) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 10017) {\n                    if (code2 === 10013) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 10017) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                    if (code2 === 10024) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 10067) {\n                if (code2 < 10055) {\n                  if (code2 < 10052) {\n                    if (10035 <= code2 && code2 <= 10036) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 10052) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 10060) {\n                    if (code2 === 10055) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 10060) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                    if (code2 === 10062) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 10083) {\n                  if (code2 < 10071) {\n                    if (10067 <= code2 && code2 <= 10069) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 10071) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 10133) {\n                    if (10083 <= code2 && code2 <= 10087) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 10145) {\n                      if (10133 <= code2 && code2 <= 10135) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (code2 === 10145) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        } else {\n          if (code2 < 127489) {\n            if (code2 < 12951) {\n              if (code2 < 11035) {\n                if (code2 < 10548) {\n                  if (code2 === 10160) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 10175) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 11013) {\n                    if (10548 <= code2 && code2 <= 10549) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (11013 <= code2 && code2 <= 11015) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 11093) {\n                  if (code2 < 11088) {\n                    if (11035 <= code2 && code2 <= 11036) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 11088) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 12336) {\n                    if (code2 === 11093) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 12336) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                    if (code2 === 12349) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 127340) {\n                if (code2 < 126976) {\n                  if (code2 === 12951) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                  if (code2 === 12953) {\n                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                  }\n                } else {\n                  if (code2 < 127245) {\n                    if (126976 <= code2 && code2 <= 127231) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 127279) {\n                      if (127245 <= code2 && code2 <= 127247) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (code2 === 127279) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 127374) {\n                  if (code2 < 127358) {\n                    if (127340 <= code2 && code2 <= 127345) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (127358 <= code2 && code2 <= 127359) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 127377) {\n                    if (code2 === 127374) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 127405) {\n                      if (127377 <= code2 && code2 <= 127386) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (127405 <= code2 && code2 <= 127461) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          } else {\n            if (code2 < 128981) {\n              if (code2 < 127561) {\n                if (code2 < 127535) {\n                  if (code2 < 127514) {\n                    if (127489 <= code2 && code2 <= 127503) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 === 127514) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 127538) {\n                    if (code2 === 127535) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 127548) {\n                      if (127538 <= code2 && code2 <= 127546) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (127548 <= code2 && code2 <= 127551) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 128326) {\n                  if (code2 < 128e3) {\n                    if (127561 <= code2 && code2 <= 127994) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (128e3 <= code2 && code2 <= 128317) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 128640) {\n                    if (128326 <= code2 && code2 <= 128591) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 128884) {\n                      if (128640 <= code2 && code2 <= 128767) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (128884 <= code2 && code2 <= 128895) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            } else {\n              if (code2 < 129198) {\n                if (code2 < 129096) {\n                  if (code2 < 129036) {\n                    if (128981 <= code2 && code2 <= 129023) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (129036 <= code2 && code2 <= 129039) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 129114) {\n                    if (129096 <= code2 && code2 <= 129103) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 129160) {\n                      if (129114 <= code2 && code2 <= 129119) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (129160 <= code2 && code2 <= 129167) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              } else {\n                if (code2 < 129340) {\n                  if (code2 < 129292) {\n                    if (129198 <= code2 && code2 <= 129279) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (129292 <= code2 && code2 <= 129338) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  }\n                } else {\n                  if (code2 < 129351) {\n                    if (129340 <= code2 && code2 <= 129349) {\n                      return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                    }\n                  } else {\n                    if (code2 < 130048) {\n                      if (129351 <= code2 && code2 <= 129791) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    } else {\n                      if (130048 <= code2 && code2 <= 131069) {\n                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        return boundaries_1.CLUSTER_BREAK.OTHER;\n      }\n    };\n    exports.default = Graphemer2;\n  }\n});\n\n// ../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js\"(exports) {\n    \"use strict\";\n\n    var __importDefault = exports && exports.__importDefault || function (mod) {\n      return mod && mod.__esModule ? mod : {\n        \"default\": mod\n      };\n    };\n    Object.defineProperty(exports, \"__esModule\", {\n      value: true\n    });\n    var Graphemer_1 = __importDefault(require_Graphemer());\n    exports.default = Graphemer_1.default;\n  }\n});\n\n// ../../node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js\nvar require_dist = __commonJS({\n  \"../../node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js\"(exports) {\n    (() => {\n      \"use strict\";\n\n      var e = {\n          d: (t2, r2) => {\n            for (var n2 in r2) e.o(r2, n2) && !e.o(t2, n2) && Object.defineProperty(t2, n2, {\n              enumerable: true,\n              get: r2[n2]\n            });\n          },\n          o: (e2, t2) => Object.prototype.hasOwnProperty.call(e2, t2),\n          r: e2 => {\n            typeof Symbol != \"undefined\" && Symbol.toStringTag && Object.defineProperty(e2, Symbol.toStringTag, {\n              value: \"Module\"\n            }), Object.defineProperty(e2, \"__esModule\", {\n              value: true\n            });\n          }\n        },\n        t = {};\n      function r(e2, t2) {\n        return t2 === void 0 && (t2 = \"-\"), new RegExp(\"^(?!0{4}\" + t2 + \"0{2}\" + t2 + \"0{2})((?=[0-9]{4}\" + t2 + \"(((0[^2])|1[0-2])|02(?=\" + t2 + \"(([0-1][0-9])|2[0-8])))\" + t2 + \"[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))\" + t2 + \"02\" + t2 + \"29))([0-9]{4})\" + t2 + \"(?!((0[469])|11)\" + t2 + \"31)((0[1,3-9]|1[0-2])|(02(?!\" + t2 + \"3)))\" + t2 + \"(0[1-9]|[1-2][0-9]|3[0-1])$\").test(e2);\n      }\n      function n(e2) {\n        var t2 = /\\D/.exec(e2);\n        return t2 ? t2[0] : \"\";\n      }\n      function i(e2, t2, r2) {\n        t2 === void 0 && (t2 = \":\"), r2 === void 0 && (r2 = false);\n        var i2 = new RegExp(\"^([0-1]|2(?=([0-3])|4\" + t2 + \"00))[0-9]\" + t2 + \"[0-5][0-9](\" + t2 + \"([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$\");\n        if (!r2 || !/[Z+\\-]/.test(e2)) return i2.test(e2);\n        if (/Z$/.test(e2)) return i2.test(e2.replace(\"Z\", \"\"));\n        var o2 = e2.includes(\"+\"),\n          a2 = e2.split(/[+-]/),\n          u2 = a2[0],\n          d2 = a2[1];\n        return i2.test(u2) && function (e3, t3, r3) {\n          return r3 === void 0 && (r3 = \":\"), new RegExp(t3 ? \"^(0(?!(2\" + r3 + \"4)|0\" + r3 + \"3)|1(?=([0-1]|2(?=\" + r3 + \"[04])|[34](?=\" + r3 + \"0))))([03469](?=\" + r3 + \"[03])|[17](?=\" + r3 + \"0)|2(?=\" + r3 + \"[04])|5(?=\" + r3 + \"[034])|8(?=\" + r3 + \"[04]))\" + r3 + \"([03](?=0)|4(?=5))[05]$\" : \"^(0(?=[^0])|1(?=[0-2]))([39](?=\" + r3 + \"[03])|[0-24-8](?=\" + r3 + \"00))\" + r3 + \"[03]0$\").test(e3);\n        }(d2, o2, n(d2));\n      }\n      function o(e2) {\n        var t2 = e2.split(\"T\"),\n          o2 = t2[0],\n          a2 = t2[1],\n          u2 = r(o2, n(o2));\n        if (!a2) return false;\n        var d2,\n          s = (d2 = a2.match(/([^Z+\\-\\d])(?=\\d+\\1)/), Array.isArray(d2) ? d2[0] : \"\");\n        return u2 && i(a2, s, true);\n      }\n      function a(e2, t2) {\n        return t2 === void 0 && (t2 = \"-\"), new RegExp(\"^[0-9]{4}\" + t2 + \"(0(?=[^0])|1(?=[0-2]))[0-9]$\").test(e2);\n      }\n      e.r(t), e.d(t, {\n        isValidDate: () => r,\n        isValidISODateString: () => o,\n        isValidTime: () => i,\n        isValidYearMonth: () => a\n      });\n      var u = exports;\n      for (var d in t) u[d] = t[d];\n      t.__esModule && Object.defineProperty(u, \"__esModule\", {\n        value: true\n      });\n    })();\n  }\n});\n\n// src/index.ts\nvar src_exports2 = {};\n__export(src_exports2, {\n  APP_BSKY_GRAPH: () => APP_BSKY_GRAPH,\n  AppBskyActorDefs: () => defs_exports5,\n  AppBskyActorGetPreferences: () => getPreferences_exports,\n  AppBskyActorGetProfile: () => getProfile_exports,\n  AppBskyActorGetProfiles: () => getProfiles_exports,\n  AppBskyActorGetSuggestions: () => getSuggestions_exports,\n  AppBskyActorNS: () => AppBskyActorNS,\n  AppBskyActorProfile: () => profile_exports,\n  AppBskyActorPutPreferences: () => putPreferences_exports,\n  AppBskyActorSearchActors: () => searchActors_exports,\n  AppBskyActorSearchActorsTypeahead: () => searchActorsTypeahead_exports,\n  AppBskyEmbedExternal: () => external_exports,\n  AppBskyEmbedImages: () => images_exports,\n  AppBskyEmbedNS: () => AppBskyEmbedNS,\n  AppBskyEmbedRecord: () => record_exports,\n  AppBskyEmbedRecordWithMedia: () => recordWithMedia_exports,\n  AppBskyFeedDefs: () => defs_exports6,\n  AppBskyFeedDescribeFeedGenerator: () => describeFeedGenerator_exports,\n  AppBskyFeedGenerator: () => generator_exports,\n  AppBskyFeedGetActorFeeds: () => getActorFeeds_exports,\n  AppBskyFeedGetActorLikes: () => getActorLikes_exports,\n  AppBskyFeedGetAuthorFeed: () => getAuthorFeed_exports,\n  AppBskyFeedGetFeed: () => getFeed_exports,\n  AppBskyFeedGetFeedGenerator: () => getFeedGenerator_exports,\n  AppBskyFeedGetFeedGenerators: () => getFeedGenerators_exports,\n  AppBskyFeedGetFeedSkeleton: () => getFeedSkeleton_exports,\n  AppBskyFeedGetLikes: () => getLikes_exports,\n  AppBskyFeedGetListFeed: () => getListFeed_exports,\n  AppBskyFeedGetPostThread: () => getPostThread_exports,\n  AppBskyFeedGetPosts: () => getPosts_exports,\n  AppBskyFeedGetRepostedBy: () => getRepostedBy_exports,\n  AppBskyFeedGetSuggestedFeeds: () => getSuggestedFeeds_exports,\n  AppBskyFeedGetTimeline: () => getTimeline_exports,\n  AppBskyFeedLike: () => like_exports,\n  AppBskyFeedNS: () => AppBskyFeedNS,\n  AppBskyFeedPost: () => post_exports,\n  AppBskyFeedRepost: () => repost_exports,\n  AppBskyFeedSearchPosts: () => searchPosts_exports,\n  AppBskyFeedThreadgate: () => threadgate_exports,\n  AppBskyGraphBlock: () => block_exports,\n  AppBskyGraphDefs: () => defs_exports7,\n  AppBskyGraphFollow: () => follow_exports,\n  AppBskyGraphGetBlocks: () => getBlocks_exports2,\n  AppBskyGraphGetFollowers: () => getFollowers_exports,\n  AppBskyGraphGetFollows: () => getFollows_exports,\n  AppBskyGraphGetList: () => getList_exports,\n  AppBskyGraphGetListBlocks: () => getListBlocks_exports,\n  AppBskyGraphGetListMutes: () => getListMutes_exports,\n  AppBskyGraphGetLists: () => getLists_exports,\n  AppBskyGraphGetMutes: () => getMutes_exports,\n  AppBskyGraphGetRelationships: () => getRelationships_exports,\n  AppBskyGraphGetSuggestedFollowsByActor: () => getSuggestedFollowsByActor_exports,\n  AppBskyGraphList: () => list_exports,\n  AppBskyGraphListblock: () => listblock_exports,\n  AppBskyGraphListitem: () => listitem_exports,\n  AppBskyGraphMuteActor: () => muteActor_exports,\n  AppBskyGraphMuteActorList: () => muteActorList_exports,\n  AppBskyGraphNS: () => AppBskyGraphNS,\n  AppBskyGraphUnmuteActor: () => unmuteActor_exports,\n  AppBskyGraphUnmuteActorList: () => unmuteActorList_exports,\n  AppBskyNS: () => AppBskyNS,\n  AppBskyNotificationGetUnreadCount: () => getUnreadCount_exports,\n  AppBskyNotificationListNotifications: () => listNotifications_exports,\n  AppBskyNotificationNS: () => AppBskyNotificationNS,\n  AppBskyNotificationRegisterPush: () => registerPush_exports,\n  AppBskyNotificationUpdateSeen: () => updateSeen_exports,\n  AppBskyRichtextFacet: () => facet_exports,\n  AppBskyRichtextNS: () => AppBskyRichtextNS,\n  AppBskyUnspeccedDefs: () => defs_exports8,\n  AppBskyUnspeccedGetPopularFeedGenerators: () => getPopularFeedGenerators_exports,\n  AppBskyUnspeccedGetTaggedSuggestions: () => getTaggedSuggestions_exports,\n  AppBskyUnspeccedNS: () => AppBskyUnspeccedNS,\n  AppBskyUnspeccedSearchActorsSkeleton: () => searchActorsSkeleton_exports,\n  AppBskyUnspeccedSearchPostsSkeleton: () => searchPostsSkeleton_exports,\n  AppNS: () => AppNS,\n  AtUri: () => AtUri,\n  AtpAgent: () => AtpAgent,\n  AtpBaseClient: () => AtpBaseClient,\n  AtpServiceClient: () => AtpServiceClient,\n  BlobRef: () => BlobRef,\n  BlockRecord: () => BlockRecord,\n  BskyAgent: () => BskyAgent,\n  COM_ATPROTO_ADMIN: () => COM_ATPROTO_ADMIN,\n  COM_ATPROTO_MODERATION: () => COM_ATPROTO_MODERATION,\n  ComAtprotoAdminCreateCommunicationTemplate: () => createCommunicationTemplate_exports,\n  ComAtprotoAdminDefs: () => defs_exports,\n  ComAtprotoAdminDeleteAccount: () => deleteAccount_exports,\n  ComAtprotoAdminDeleteCommunicationTemplate: () => deleteCommunicationTemplate_exports,\n  ComAtprotoAdminDisableAccountInvites: () => disableAccountInvites_exports,\n  ComAtprotoAdminDisableInviteCodes: () => disableInviteCodes_exports,\n  ComAtprotoAdminEmitModerationEvent: () => emitModerationEvent_exports,\n  ComAtprotoAdminEnableAccountInvites: () => enableAccountInvites_exports,\n  ComAtprotoAdminGetAccountInfo: () => getAccountInfo_exports,\n  ComAtprotoAdminGetAccountInfos: () => getAccountInfos_exports,\n  ComAtprotoAdminGetInviteCodes: () => getInviteCodes_exports,\n  ComAtprotoAdminGetModerationEvent: () => getModerationEvent_exports,\n  ComAtprotoAdminGetRecord: () => getRecord_exports,\n  ComAtprotoAdminGetRepo: () => getRepo_exports,\n  ComAtprotoAdminGetSubjectStatus: () => getSubjectStatus_exports,\n  ComAtprotoAdminListCommunicationTemplates: () => listCommunicationTemplates_exports,\n  ComAtprotoAdminNS: () => ComAtprotoAdminNS,\n  ComAtprotoAdminQueryModerationEvents: () => queryModerationEvents_exports,\n  ComAtprotoAdminQueryModerationStatuses: () => queryModerationStatuses_exports,\n  ComAtprotoAdminSearchRepos: () => searchRepos_exports,\n  ComAtprotoAdminSendEmail: () => sendEmail_exports,\n  ComAtprotoAdminUpdateAccountEmail: () => updateAccountEmail_exports,\n  ComAtprotoAdminUpdateAccountHandle: () => updateAccountHandle_exports,\n  ComAtprotoAdminUpdateCommunicationTemplate: () => updateCommunicationTemplate_exports,\n  ComAtprotoAdminUpdateSubjectStatus: () => updateSubjectStatus_exports,\n  ComAtprotoIdentityNS: () => ComAtprotoIdentityNS,\n  ComAtprotoIdentityResolveHandle: () => resolveHandle_exports,\n  ComAtprotoIdentityUpdateHandle: () => updateHandle_exports,\n  ComAtprotoLabelDefs: () => defs_exports2,\n  ComAtprotoLabelNS: () => ComAtprotoLabelNS,\n  ComAtprotoLabelQueryLabels: () => queryLabels_exports,\n  ComAtprotoLabelSubscribeLabels: () => subscribeLabels_exports,\n  ComAtprotoModerationCreateReport: () => createReport_exports,\n  ComAtprotoModerationDefs: () => defs_exports3,\n  ComAtprotoModerationNS: () => ComAtprotoModerationNS,\n  ComAtprotoNS: () => ComAtprotoNS,\n  ComAtprotoRepoApplyWrites: () => applyWrites_exports,\n  ComAtprotoRepoCreateRecord: () => createRecord_exports,\n  ComAtprotoRepoDeleteRecord: () => deleteRecord_exports,\n  ComAtprotoRepoDescribeRepo: () => describeRepo_exports,\n  ComAtprotoRepoGetRecord: () => getRecord_exports2,\n  ComAtprotoRepoListRecords: () => listRecords_exports,\n  ComAtprotoRepoNS: () => ComAtprotoRepoNS,\n  ComAtprotoRepoPutRecord: () => putRecord_exports,\n  ComAtprotoRepoStrongRef: () => strongRef_exports,\n  ComAtprotoRepoUploadBlob: () => uploadBlob_exports,\n  ComAtprotoServerConfirmEmail: () => confirmEmail_exports,\n  ComAtprotoServerCreateAccount: () => createAccount_exports,\n  ComAtprotoServerCreateAppPassword: () => createAppPassword_exports,\n  ComAtprotoServerCreateInviteCode: () => createInviteCode_exports,\n  ComAtprotoServerCreateInviteCodes: () => createInviteCodes_exports,\n  ComAtprotoServerCreateSession: () => createSession_exports,\n  ComAtprotoServerDefs: () => defs_exports4,\n  ComAtprotoServerDeleteAccount: () => deleteAccount_exports2,\n  ComAtprotoServerDeleteSession: () => deleteSession_exports,\n  ComAtprotoServerDescribeServer: () => describeServer_exports,\n  ComAtprotoServerGetAccountInviteCodes: () => getAccountInviteCodes_exports,\n  ComAtprotoServerGetSession: () => getSession_exports,\n  ComAtprotoServerListAppPasswords: () => listAppPasswords_exports,\n  ComAtprotoServerNS: () => ComAtprotoServerNS,\n  ComAtprotoServerRefreshSession: () => refreshSession_exports,\n  ComAtprotoServerRequestAccountDelete: () => requestAccountDelete_exports,\n  ComAtprotoServerRequestEmailConfirmation: () => requestEmailConfirmation_exports,\n  ComAtprotoServerRequestEmailUpdate: () => requestEmailUpdate_exports,\n  ComAtprotoServerRequestPasswordReset: () => requestPasswordReset_exports,\n  ComAtprotoServerReserveSigningKey: () => reserveSigningKey_exports,\n  ComAtprotoServerResetPassword: () => resetPassword_exports,\n  ComAtprotoServerRevokeAppPassword: () => revokeAppPassword_exports,\n  ComAtprotoServerUpdateEmail: () => updateEmail_exports,\n  ComAtprotoSyncGetBlob: () => getBlob_exports,\n  ComAtprotoSyncGetBlocks: () => getBlocks_exports,\n  ComAtprotoSyncGetCheckout: () => getCheckout_exports,\n  ComAtprotoSyncGetHead: () => getHead_exports,\n  ComAtprotoSyncGetLatestCommit: () => getLatestCommit_exports,\n  ComAtprotoSyncGetRecord: () => getRecord_exports3,\n  ComAtprotoSyncGetRepo: () => getRepo_exports2,\n  ComAtprotoSyncListBlobs: () => listBlobs_exports,\n  ComAtprotoSyncListRepos: () => listRepos_exports,\n  ComAtprotoSyncNS: () => ComAtprotoSyncNS,\n  ComAtprotoSyncNotifyOfUpdate: () => notifyOfUpdate_exports,\n  ComAtprotoSyncRequestCrawl: () => requestCrawl_exports,\n  ComAtprotoSyncSubscribeRepos: () => subscribeRepos_exports,\n  ComAtprotoTempCheckSignupQueue: () => checkSignupQueue_exports,\n  ComAtprotoTempFetchLabels: () => fetchLabels_exports,\n  ComAtprotoTempImportRepo: () => importRepo_exports,\n  ComAtprotoTempNS: () => ComAtprotoTempNS,\n  ComAtprotoTempPushBlob: () => pushBlob_exports,\n  ComAtprotoTempRequestPhoneVerification: () => requestPhoneVerification_exports,\n  ComAtprotoTempTransferAccount: () => transferAccount_exports,\n  ComNS: () => ComNS,\n  FollowRecord: () => FollowRecord,\n  GeneratorRecord: () => GeneratorRecord,\n  LABELS: () => LABELS,\n  LABEL_GROUPS: () => LABEL_GROUPS,\n  LikeRecord: () => LikeRecord,\n  ListRecord: () => ListRecord,\n  ListblockRecord: () => ListblockRecord,\n  ListitemRecord: () => ListitemRecord,\n  ModerationDecision: () => ModerationDecision,\n  PostRecord: () => PostRecord,\n  ProfileRecord: () => ProfileRecord,\n  RepostRecord: () => RepostRecord,\n  RichText: () => RichText,\n  RichTextSegment: () => RichTextSegment,\n  ThreadgateRecord: () => ThreadgateRecord,\n  UnicodeString: () => UnicodeString,\n  default: () => AtpAgent,\n  jsonStringToLex: () => jsonStringToLex,\n  jsonToLex: () => jsonToLex,\n  lexToJson: () => lexToJson,\n  moderateFeedGenerator: () => moderateFeedGenerator,\n  moderatePost: () => moderatePost,\n  moderateProfile: () => moderateProfile,\n  moderateUserList: () => moderateUserList,\n  parseLanguage: () => parseLanguage,\n  sanitizeRichText: () => sanitizeRichText,\n  stringifyLex: () => stringifyLex\n});\nmodule.exports = __toCommonJS(src_exports2);\n\n// ../syntax/src/handle.ts\nvar ensureValidHandle = handle2 => {\n  if (!/^[a-zA-Z0-9.-]*$/.test(handle2)) {\n    throw new InvalidHandleError(\"Disallowed characters in handle (ASCII letters, digits, dashes, periods only)\");\n  }\n  if (handle2.length > 253) {\n    throw new InvalidHandleError(\"Handle is too long (253 chars max)\");\n  }\n  const labels = handle2.split(\".\");\n  if (labels.length < 2) {\n    throw new InvalidHandleError(\"Handle domain needs at least two parts\");\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i];\n    if (l.length < 1) {\n      throw new InvalidHandleError(\"Handle parts can not be empty\");\n    }\n    if (l.length > 63) {\n      throw new InvalidHandleError(\"Handle part too long (max 63 chars)\");\n    }\n    if (l.endsWith(\"-\") || l.startsWith(\"-\")) {\n      throw new InvalidHandleError(\"Handle parts can not start or end with hyphens\");\n    }\n    if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {\n      throw new InvalidHandleError(\"Handle final component (TLD) must start with ASCII letter\");\n    }\n  }\n};\nvar InvalidHandleError = class extends Error {};\n\n// ../syntax/src/did.ts\nvar ensureValidDid = did2 => {\n  if (!/^[a-zA-Z0-9._:%-]*$/.test(did2)) {\n    throw new InvalidDidError(\"Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)\");\n  }\n  const parts = did2.split(\":\");\n  if (parts.length < 3) {\n    throw new InvalidDidError(\"DID requires prefix, method, and method-specific content\");\n  }\n  if (parts[0] != \"did\") {\n    throw new InvalidDidError('DID requires \"did:\" prefix');\n  }\n  if (!/^[a-z]+$/.test(parts[1])) {\n    throw new InvalidDidError(\"DID method must be lower-case letters\");\n  }\n  if (did2.endsWith(\":\") || did2.endsWith(\"%\")) {\n    throw new InvalidDidError('DID can not end with \":\" or \"%\"');\n  }\n  if (did2.length > 2 * 1024) {\n    throw new InvalidDidError(\"DID is too long (2048 chars max)\");\n  }\n};\nvar InvalidDidError = class extends Error {};\n\n// ../syntax/src/nsid.ts\nvar NSID = class {\n  constructor(nsid2) {\n    this.segments = [];\n    ensureValidNsid(nsid2);\n    this.segments = nsid2.split(\".\");\n  }\n  static parse(nsid2) {\n    return new NSID(nsid2);\n  }\n  static create(authority, name2) {\n    const segments = [...authority.split(\".\").reverse(), name2].join(\".\");\n    return new NSID(segments);\n  }\n  static isValid(nsid2) {\n    try {\n      NSID.parse(nsid2);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n  get authority() {\n    return this.segments.slice(0, this.segments.length - 1).reverse().join(\".\");\n  }\n  get name() {\n    return this.segments.at(this.segments.length - 1);\n  }\n  toString() {\n    return this.segments.join(\".\");\n  }\n};\nvar ensureValidNsid = nsid2 => {\n  const toCheck = nsid2;\n  if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {\n    throw new InvalidNsidError(\"Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)\");\n  }\n  if (toCheck.length > 253 + 1 + 63) {\n    throw new InvalidNsidError(\"NSID is too long (317 chars max)\");\n  }\n  const labels = toCheck.split(\".\");\n  if (labels.length < 3) {\n    throw new InvalidNsidError(\"NSID needs at least three parts\");\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i];\n    if (l.length < 1) {\n      throw new InvalidNsidError(\"NSID parts can not be empty\");\n    }\n    if (l.length > 63) {\n      throw new InvalidNsidError(\"NSID part too long (max 63 chars)\");\n    }\n    if (l.endsWith(\"-\") || l.startsWith(\"-\")) {\n      throw new InvalidNsidError(\"NSID parts can not start or end with hyphen\");\n    }\n    if (/^[0-9]/.test(l) && i == 0) {\n      throw new InvalidNsidError(\"NSID first part may not start with a digit\");\n    }\n    if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {\n      throw new InvalidNsidError(\"NSID name part must be only letters\");\n    }\n  }\n};\nvar InvalidNsidError = class extends Error {};\n\n// ../syntax/src/aturi_validation.ts\nvar ensureValidAtUri = uri2 => {\n  const uriParts = uri2.split(\"#\");\n  if (uriParts.length > 2) {\n    throw new Error('ATURI can have at most one \"#\", separating fragment out');\n  }\n  const fragmentPart = uriParts[1] || null;\n  uri2 = uriParts[0];\n  if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri2)) {\n    throw new Error(\"Disallowed characters in ATURI (ASCII)\");\n  }\n  const parts = uri2.split(\"/\");\n  if (parts.length >= 3 && (parts[0] != \"at:\" || parts[1].length != 0)) {\n    throw new Error('ATURI must start with \"at://\"');\n  }\n  if (parts.length < 3) {\n    throw new Error(\"ATURI requires at least method and authority sections\");\n  }\n  try {\n    if (parts[2].startsWith(\"did:\")) {\n      ensureValidDid(parts[2]);\n    } else {\n      ensureValidHandle(parts[2]);\n    }\n  } catch {\n    throw new Error(\"ATURI authority must be a valid handle or DID\");\n  }\n  if (parts.length >= 4) {\n    if (parts[3].length == 0) {\n      throw new Error(\"ATURI can not have a slash after authority without a path segment\");\n    }\n    try {\n      ensureValidNsid(parts[3]);\n    } catch {\n      throw new Error(\"ATURI requires first path segment (if supplied) to be valid NSID\");\n    }\n  }\n  if (parts.length >= 5) {\n    if (parts[4].length == 0) {\n      throw new Error(\"ATURI can not have a slash after collection, unless record key is provided\");\n    }\n  }\n  if (parts.length >= 6) {\n    throw new Error(\"ATURI path can have at most two parts, and no trailing slash\");\n  }\n  if (uriParts.length >= 2 && fragmentPart == null) {\n    throw new Error(\"ATURI fragment must be non-empty and start with slash\");\n  }\n  if (fragmentPart != null) {\n    if (fragmentPart.length == 0 || fragmentPart[0] != \"/\") {\n      throw new Error(\"ATURI fragment must be non-empty and start with slash\");\n    }\n    if (!/^\\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\\]/-]*$/.test(fragmentPart)) {\n      throw new Error(\"Disallowed characters in ATURI fragment (ASCII)\");\n    }\n  }\n  if (uri2.length > 8 * 1024) {\n    throw new Error(\"ATURI is far too long\");\n  }\n};\n\n// ../syntax/src/aturi.ts\nvar ATP_URI_REGEX = /^(at:\\/\\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i;\nvar RELATIVE_REGEX = /^(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i;\nvar AtUri = class {\n  constructor(uri2, base3) {\n    let parsed;\n    if (base3) {\n      parsed = parse(base3);\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${base3}`);\n      }\n      const relativep = parseRelative(uri2);\n      if (!relativep) {\n        throw new Error(`Invalid path: ${uri2}`);\n      }\n      Object.assign(parsed, relativep);\n    } else {\n      parsed = parse(uri2);\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${uri2}`);\n      }\n    }\n    this.hash = parsed.hash;\n    this.host = parsed.host;\n    this.pathname = parsed.pathname;\n    this.searchParams = parsed.searchParams;\n  }\n  static make(handleOrDid, collection, rkey) {\n    let str = handleOrDid;\n    if (collection) str += \"/\" + collection;\n    if (rkey) str += \"/\" + rkey;\n    return new AtUri(str);\n  }\n  get protocol() {\n    return \"at:\";\n  }\n  get origin() {\n    return `at://${this.host}`;\n  }\n  get hostname() {\n    return this.host;\n  }\n  set hostname(v) {\n    this.host = v;\n  }\n  get search() {\n    return this.searchParams.toString();\n  }\n  set search(v) {\n    this.searchParams = new URLSearchParams(v);\n  }\n  get collection() {\n    return this.pathname.split(\"/\").filter(Boolean)[0] || \"\";\n  }\n  set collection(v) {\n    const parts = this.pathname.split(\"/\").filter(Boolean);\n    parts[0] = v;\n    this.pathname = parts.join(\"/\");\n  }\n  get rkey() {\n    return this.pathname.split(\"/\").filter(Boolean)[1] || \"\";\n  }\n  set rkey(v) {\n    const parts = this.pathname.split(\"/\").filter(Boolean);\n    if (!parts[0]) parts[0] = \"undefined\";\n    parts[1] = v;\n    this.pathname = parts.join(\"/\");\n  }\n  get href() {\n    return this.toString();\n  }\n  toString() {\n    let path = this.pathname || \"/\";\n    if (!path.startsWith(\"/\")) {\n      path = `/${path}`;\n    }\n    let qs = this.searchParams.toString();\n    if (qs && !qs.startsWith(\"?\")) {\n      qs = `?${qs}`;\n    }\n    let hash = this.hash;\n    if (hash && !hash.startsWith(\"#\")) {\n      hash = `#${hash}`;\n    }\n    return `at://${this.host}${path}${qs}${hash}`;\n  }\n};\nfunction parse(str) {\n  const match = ATP_URI_REGEX.exec(str);\n  if (match) {\n    return {\n      hash: match[5] || \"\",\n      host: match[2] || \"\",\n      pathname: match[3] || \"\",\n      searchParams: new URLSearchParams(match[4] || \"\")\n    };\n  }\n  return void 0;\n}\nfunction parseRelative(str) {\n  const match = RELATIVE_REGEX.exec(str);\n  if (match) {\n    return {\n      hash: match[3] || \"\",\n      pathname: match[1] || \"\",\n      searchParams: new URLSearchParams(match[2] || \"\")\n    };\n  }\n  return void 0;\n}\n\n// ../../node_modules/.pnpm/zod@3.21.4/node_modules/zod/lib/index.mjs\nvar util;\n(function (util2) {\n  util2.assertEqual = val => val;\n  function assertIs(_arg) {}\n  util2.assertIs = assertIs;\n  function assertNever(_x) {\n    throw new Error();\n  }\n  util2.assertNever = assertNever;\n  util2.arrayToEnum = items => {\n    const obj = {};\n    for (const item of items) {\n      obj[item] = item;\n    }\n    return obj;\n  };\n  util2.getValidEnumValues = obj => {\n    const validKeys = util2.objectKeys(obj).filter(k => typeof obj[obj[k]] !== \"number\");\n    const filtered = {};\n    for (const k of validKeys) {\n      filtered[k] = obj[k];\n    }\n    return util2.objectValues(filtered);\n  };\n  util2.objectValues = obj => {\n    return util2.objectKeys(obj).map(function (e) {\n      return obj[e];\n    });\n  };\n  util2.objectKeys = typeof Object.keys === \"function\" ? obj => Object.keys(obj) : object2 => {\n    const keys = [];\n    for (const key in object2) {\n      if (Object.prototype.hasOwnProperty.call(object2, key)) {\n        keys.push(key);\n      }\n    }\n    return keys;\n  };\n  util2.find = (arr, checker) => {\n    for (const item of arr) {\n      if (checker(item)) return item;\n    }\n    return void 0;\n  };\n  util2.isInteger = typeof Number.isInteger === \"function\" ? val => Number.isInteger(val) : val => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n  function joinValues(array2, separator = \" | \") {\n    return array2.map(val => typeof val === \"string\" ? `'${val}'` : val).join(separator);\n  }\n  util2.joinValues = joinValues;\n  util2.jsonStringifyReplacer = (_, value) => {\n    if (typeof value === \"bigint\") {\n      return value.toString();\n    }\n    return value;\n  };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil2) {\n  objectUtil2.mergeShapes = (first, second) => {\n    return {\n      ...first,\n      ...second\n    };\n  };\n})(objectUtil || (objectUtil = {}));\nvar ZodParsedType = util.arrayToEnum([\"string\", \"nan\", \"number\", \"integer\", \"float\", \"boolean\", \"date\", \"bigint\", \"symbol\", \"function\", \"undefined\", \"null\", \"array\", \"object\", \"unknown\", \"promise\", \"void\", \"never\", \"map\", \"set\"]);\nvar getParsedType = data => {\n  const t = typeof data;\n  switch (t) {\n    case \"undefined\":\n      return ZodParsedType.undefined;\n    case \"string\":\n      return ZodParsedType.string;\n    case \"number\":\n      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n    case \"boolean\":\n      return ZodParsedType.boolean;\n    case \"function\":\n      return ZodParsedType.function;\n    case \"bigint\":\n      return ZodParsedType.bigint;\n    case \"symbol\":\n      return ZodParsedType.symbol;\n    case \"object\":\n      if (Array.isArray(data)) {\n        return ZodParsedType.array;\n      }\n      if (data === null) {\n        return ZodParsedType.null;\n      }\n      if (data.then && typeof data.then === \"function\" && data.catch && typeof data.catch === \"function\") {\n        return ZodParsedType.promise;\n      }\n      if (typeof Map !== \"undefined\" && data instanceof Map) {\n        return ZodParsedType.map;\n      }\n      if (typeof Set !== \"undefined\" && data instanceof Set) {\n        return ZodParsedType.set;\n      }\n      if (typeof Date !== \"undefined\" && data instanceof Date) {\n        return ZodParsedType.date;\n      }\n      return ZodParsedType.object;\n    default:\n      return ZodParsedType.unknown;\n  }\n};\nvar ZodIssueCode = util.arrayToEnum([\"invalid_type\", \"invalid_literal\", \"custom\", \"invalid_union\", \"invalid_union_discriminator\", \"invalid_enum_value\", \"unrecognized_keys\", \"invalid_arguments\", \"invalid_return_type\", \"invalid_date\", \"invalid_string\", \"too_small\", \"too_big\", \"invalid_intersection_types\", \"not_multiple_of\", \"not_finite\"]);\nvar quotelessJson = obj => {\n  const json = JSON.stringify(obj, null, 2);\n  return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nvar ZodError = class extends Error {\n  constructor(issues) {\n    super();\n    this.issues = [];\n    this.addIssue = sub => {\n      this.issues = [...this.issues, sub];\n    };\n    this.addIssues = (subs = []) => {\n      this.issues = [...this.issues, ...subs];\n    };\n    const actualProto = new.target.prototype;\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(this, actualProto);\n    } else {\n      this.__proto__ = actualProto;\n    }\n    this.name = \"ZodError\";\n    this.issues = issues;\n  }\n  get errors() {\n    return this.issues;\n  }\n  format(_mapper) {\n    const mapper = _mapper || function (issue) {\n      return issue.message;\n    };\n    const fieldErrors = {\n      _errors: []\n    };\n    const processError = error => {\n      for (const issue of error.issues) {\n        if (issue.code === \"invalid_union\") {\n          issue.unionErrors.map(processError);\n        } else if (issue.code === \"invalid_return_type\") {\n          processError(issue.returnTypeError);\n        } else if (issue.code === \"invalid_arguments\") {\n          processError(issue.argumentsError);\n        } else if (issue.path.length === 0) {\n          fieldErrors._errors.push(mapper(issue));\n        } else {\n          let curr = fieldErrors;\n          let i = 0;\n          while (i < issue.path.length) {\n            const el = issue.path[i];\n            const terminal = i === issue.path.length - 1;\n            if (!terminal) {\n              curr[el] = curr[el] || {\n                _errors: []\n              };\n            } else {\n              curr[el] = curr[el] || {\n                _errors: []\n              };\n              curr[el]._errors.push(mapper(issue));\n            }\n            curr = curr[el];\n            i++;\n          }\n        }\n      }\n    };\n    processError(this);\n    return fieldErrors;\n  }\n  toString() {\n    return this.message;\n  }\n  get message() {\n    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n  }\n  get isEmpty() {\n    return this.issues.length === 0;\n  }\n  flatten(mapper = issue => issue.message) {\n    const fieldErrors = {};\n    const formErrors = [];\n    for (const sub of this.issues) {\n      if (sub.path.length > 0) {\n        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n        fieldErrors[sub.path[0]].push(mapper(sub));\n      } else {\n        formErrors.push(mapper(sub));\n      }\n    }\n    return {\n      formErrors,\n      fieldErrors\n    };\n  }\n  get formErrors() {\n    return this.flatten();\n  }\n};\nZodError.create = issues => {\n  const error = new ZodError(issues);\n  return error;\n};\nvar errorMap = (issue, _ctx) => {\n  let message;\n  switch (issue.code) {\n    case ZodIssueCode.invalid_type:\n      if (issue.received === ZodParsedType.undefined) {\n        message = \"Required\";\n      } else {\n        message = `Expected ${issue.expected}, received ${issue.received}`;\n      }\n      break;\n    case ZodIssueCode.invalid_literal:\n      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n      break;\n    case ZodIssueCode.unrecognized_keys:\n      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n      break;\n    case ZodIssueCode.invalid_union:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_union_discriminator:\n      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n      break;\n    case ZodIssueCode.invalid_enum_value:\n      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n      break;\n    case ZodIssueCode.invalid_arguments:\n      message = `Invalid function arguments`;\n      break;\n    case ZodIssueCode.invalid_return_type:\n      message = `Invalid function return type`;\n      break;\n    case ZodIssueCode.invalid_date:\n      message = `Invalid date`;\n      break;\n    case ZodIssueCode.invalid_string:\n      if (typeof issue.validation === \"object\") {\n        if (\"includes\" in issue.validation) {\n          message = `Invalid input: must include \"${issue.validation.includes}\"`;\n          if (typeof issue.validation.position === \"number\") {\n            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n          }\n        } else if (\"startsWith\" in issue.validation) {\n          message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n        } else if (\"endsWith\" in issue.validation) {\n          message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n        } else {\n          util.assertNever(issue.validation);\n        }\n      } else if (issue.validation !== \"regex\") {\n        message = `Invalid ${issue.validation}`;\n      } else {\n        message = \"Invalid\";\n      }\n      break;\n    case ZodIssueCode.too_small:\n      if (issue.type === \"array\") message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;else if (issue.type === \"string\") message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;else message = \"Invalid input\";\n      break;\n    case ZodIssueCode.too_big:\n      if (issue.type === \"array\") message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;else if (issue.type === \"string\") message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;else if (issue.type === \"number\") message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === \"bigint\") message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;else if (issue.type === \"date\") message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;else message = \"Invalid input\";\n      break;\n    case ZodIssueCode.custom:\n      message = `Invalid input`;\n      break;\n    case ZodIssueCode.invalid_intersection_types:\n      message = `Intersection results could not be merged`;\n      break;\n    case ZodIssueCode.not_multiple_of:\n      message = `Number must be a multiple of ${issue.multipleOf}`;\n      break;\n    case ZodIssueCode.not_finite:\n      message = \"Number must be finite\";\n      break;\n    default:\n      message = _ctx.defaultError;\n      util.assertNever(issue);\n  }\n  return {\n    message\n  };\n};\nvar overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n  overrideErrorMap = map;\n}\nfunction getErrorMap() {\n  return overrideErrorMap;\n}\nvar makeIssue = params2 => {\n  const {\n    data,\n    path,\n    errorMaps,\n    issueData\n  } = params2;\n  const fullPath = [...path, ...(issueData.path || [])];\n  const fullIssue = {\n    ...issueData,\n    path: fullPath\n  };\n  let errorMessage = \"\";\n  const maps = errorMaps.filter(m => !!m).slice().reverse();\n  for (const map of maps) {\n    errorMessage = map(fullIssue, {\n      data,\n      defaultError: errorMessage\n    }).message;\n  }\n  return {\n    ...issueData,\n    path: fullPath,\n    message: issueData.message || errorMessage\n  };\n};\nvar EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n  const issue = makeIssue({\n    issueData,\n    data: ctx.data,\n    path: ctx.path,\n    errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), errorMap].filter(x => !!x)\n  });\n  ctx.common.issues.push(issue);\n}\nvar ParseStatus = class {\n  constructor() {\n    this.value = \"valid\";\n  }\n  dirty() {\n    if (this.value === \"valid\") this.value = \"dirty\";\n  }\n  abort() {\n    if (this.value !== \"aborted\") this.value = \"aborted\";\n  }\n  static mergeArray(status, results) {\n    const arrayValue = [];\n    for (const s of results) {\n      if (s.status === \"aborted\") return INVALID;\n      if (s.status === \"dirty\") status.dirty();\n      arrayValue.push(s.value);\n    }\n    return {\n      status: status.value,\n      value: arrayValue\n    };\n  }\n  static async mergeObjectAsync(status, pairs) {\n    const syncPairs = [];\n    for (const pair of pairs) {\n      syncPairs.push({\n        key: await pair.key,\n        value: await pair.value\n      });\n    }\n    return ParseStatus.mergeObjectSync(status, syncPairs);\n  }\n  static mergeObjectSync(status, pairs) {\n    const finalObject = {};\n    for (const pair of pairs) {\n      const {\n        key,\n        value\n      } = pair;\n      if (key.status === \"aborted\") return INVALID;\n      if (value.status === \"aborted\") return INVALID;\n      if (key.status === \"dirty\") status.dirty();\n      if (value.status === \"dirty\") status.dirty();\n      if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n        finalObject[key.value] = value.value;\n      }\n    }\n    return {\n      status: status.value,\n      value: finalObject\n    };\n  }\n};\nvar INVALID = Object.freeze({\n  status: \"aborted\"\n});\nvar DIRTY = value => ({\n  status: \"dirty\",\n  value\n});\nvar OK = value => ({\n  status: \"valid\",\n  value\n});\nvar isAborted = x => x.status === \"aborted\";\nvar isDirty = x => x.status === \"dirty\";\nvar isValid = x => x.status === \"valid\";\nvar isAsync = x => typeof Promise !== \"undefined\" && x instanceof Promise;\nvar errorUtil;\n(function (errorUtil2) {\n  errorUtil2.errToObj = message => typeof message === \"string\" ? {\n    message\n  } : message || {};\n  errorUtil2.toString = message => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\nvar ParseInputLazyPath = class {\n  constructor(parent, value, path, key) {\n    this._cachedPath = [];\n    this.parent = parent;\n    this.data = value;\n    this._path = path;\n    this._key = key;\n  }\n  get path() {\n    if (!this._cachedPath.length) {\n      if (this._key instanceof Array) {\n        this._cachedPath.push(...this._path, ...this._key);\n      } else {\n        this._cachedPath.push(...this._path, this._key);\n      }\n    }\n    return this._cachedPath;\n  }\n};\nvar handleResult = (ctx, result) => {\n  if (isValid(result)) {\n    return {\n      success: true,\n      data: result.value\n    };\n  } else {\n    if (!ctx.common.issues.length) {\n      throw new Error(\"Validation failed but no issues detected.\");\n    }\n    return {\n      success: false,\n      get error() {\n        if (this._error) return this._error;\n        const error = new ZodError(ctx.common.issues);\n        this._error = error;\n        return this._error;\n      }\n    };\n  }\n};\nfunction processCreateParams(params2) {\n  if (!params2) return {};\n  const {\n    errorMap: errorMap2,\n    invalid_type_error,\n    required_error,\n    description\n  } = params2;\n  if (errorMap2 && (invalid_type_error || required_error)) {\n    throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n  }\n  if (errorMap2) return {\n    errorMap: errorMap2,\n    description\n  };\n  const customMap = (iss, ctx) => {\n    if (iss.code !== \"invalid_type\") return {\n      message: ctx.defaultError\n    };\n    if (typeof ctx.data === \"undefined\") {\n      return {\n        message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError\n      };\n    }\n    return {\n      message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError\n    };\n  };\n  return {\n    errorMap: customMap,\n    description\n  };\n}\nvar ZodType = class {\n  constructor(def2) {\n    this.spa = this.safeParseAsync;\n    this._def = def2;\n    this.parse = this.parse.bind(this);\n    this.safeParse = this.safeParse.bind(this);\n    this.parseAsync = this.parseAsync.bind(this);\n    this.safeParseAsync = this.safeParseAsync.bind(this);\n    this.spa = this.spa.bind(this);\n    this.refine = this.refine.bind(this);\n    this.refinement = this.refinement.bind(this);\n    this.superRefine = this.superRefine.bind(this);\n    this.optional = this.optional.bind(this);\n    this.nullable = this.nullable.bind(this);\n    this.nullish = this.nullish.bind(this);\n    this.array = this.array.bind(this);\n    this.promise = this.promise.bind(this);\n    this.or = this.or.bind(this);\n    this.and = this.and.bind(this);\n    this.transform = this.transform.bind(this);\n    this.brand = this.brand.bind(this);\n    this.default = this.default.bind(this);\n    this.catch = this.catch.bind(this);\n    this.describe = this.describe.bind(this);\n    this.pipe = this.pipe.bind(this);\n    this.isNullable = this.isNullable.bind(this);\n    this.isOptional = this.isOptional.bind(this);\n  }\n  get description() {\n    return this._def.description;\n  }\n  _getType(input) {\n    return getParsedType(input.data);\n  }\n  _getOrReturnCtx(input, ctx) {\n    return ctx || {\n      common: input.parent.common,\n      data: input.data,\n      parsedType: getParsedType(input.data),\n      schemaErrorMap: this._def.errorMap,\n      path: input.path,\n      parent: input.parent\n    };\n  }\n  _processInputParams(input) {\n    return {\n      status: new ParseStatus(),\n      ctx: {\n        common: input.parent.common,\n        data: input.data,\n        parsedType: getParsedType(input.data),\n        schemaErrorMap: this._def.errorMap,\n        path: input.path,\n        parent: input.parent\n      }\n    };\n  }\n  _parseSync(input) {\n    const result = this._parse(input);\n    if (isAsync(result)) {\n      throw new Error(\"Synchronous parse encountered promise.\");\n    }\n    return result;\n  }\n  _parseAsync(input) {\n    const result = this._parse(input);\n    return Promise.resolve(result);\n  }\n  parse(data, params2) {\n    const result = this.safeParse(data, params2);\n    if (result.success) return result.data;\n    throw result.error;\n  }\n  safeParse(data, params2) {\n    var _a;\n    const ctx = {\n      common: {\n        issues: [],\n        async: (_a = params2 === null || params2 === void 0 ? void 0 : params2.async) !== null && _a !== void 0 ? _a : false,\n        contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap\n      },\n      path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const result = this._parseSync({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n    return handleResult(ctx, result);\n  }\n  async parseAsync(data, params2) {\n    const result = await this.safeParseAsync(data, params2);\n    if (result.success) return result.data;\n    throw result.error;\n  }\n  async safeParseAsync(data, params2) {\n    const ctx = {\n      common: {\n        issues: [],\n        contextualErrorMap: params2 === null || params2 === void 0 ? void 0 : params2.errorMap,\n        async: true\n      },\n      path: (params2 === null || params2 === void 0 ? void 0 : params2.path) || [],\n      schemaErrorMap: this._def.errorMap,\n      parent: null,\n      data,\n      parsedType: getParsedType(data)\n    };\n    const maybeAsyncResult = this._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));\n    return handleResult(ctx, result);\n  }\n  refine(check, message) {\n    const getIssueProperties = val => {\n      if (typeof message === \"string\" || typeof message === \"undefined\") {\n        return {\n          message\n        };\n      } else if (typeof message === \"function\") {\n        return message(val);\n      } else {\n        return message;\n      }\n    };\n    return this._refinement((val, ctx) => {\n      const result = check(val);\n      const setError = () => ctx.addIssue({\n        code: ZodIssueCode.custom,\n        ...getIssueProperties(val)\n      });\n      if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n        return result.then(data => {\n          if (!data) {\n            setError();\n            return false;\n          } else {\n            return true;\n          }\n        });\n      }\n      if (!result) {\n        setError();\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  refinement(check, refinementData) {\n    return this._refinement((val, ctx) => {\n      if (!check(val)) {\n        ctx.addIssue(typeof refinementData === \"function\" ? refinementData(val, ctx) : refinementData);\n        return false;\n      } else {\n        return true;\n      }\n    });\n  }\n  _refinement(refinement) {\n    return new ZodEffects({\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: {\n        type: \"refinement\",\n        refinement\n      }\n    });\n  }\n  superRefine(refinement) {\n    return this._refinement(refinement);\n  }\n  optional() {\n    return ZodOptional.create(this, this._def);\n  }\n  nullable() {\n    return ZodNullable.create(this, this._def);\n  }\n  nullish() {\n    return this.nullable().optional();\n  }\n  array() {\n    return ZodArray.create(this, this._def);\n  }\n  promise() {\n    return ZodPromise.create(this, this._def);\n  }\n  or(option) {\n    return ZodUnion.create([this, option], this._def);\n  }\n  and(incoming) {\n    return ZodIntersection.create(this, incoming, this._def);\n  }\n  transform(transform) {\n    return new ZodEffects({\n      ...processCreateParams(this._def),\n      schema: this,\n      typeName: ZodFirstPartyTypeKind.ZodEffects,\n      effect: {\n        type: \"transform\",\n        transform\n      }\n    });\n  }\n  default(def2) {\n    const defaultValueFunc = typeof def2 === \"function\" ? def2 : () => def2;\n    return new ZodDefault({\n      ...processCreateParams(this._def),\n      innerType: this,\n      defaultValue: defaultValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodDefault\n    });\n  }\n  brand() {\n    return new ZodBranded({\n      typeName: ZodFirstPartyTypeKind.ZodBranded,\n      type: this,\n      ...processCreateParams(this._def)\n    });\n  }\n  catch(def2) {\n    const catchValueFunc = typeof def2 === \"function\" ? def2 : () => def2;\n    return new ZodCatch({\n      ...processCreateParams(this._def),\n      innerType: this,\n      catchValue: catchValueFunc,\n      typeName: ZodFirstPartyTypeKind.ZodCatch\n    });\n  }\n  describe(description) {\n    const This = this.constructor;\n    return new This({\n      ...this._def,\n      description\n    });\n  }\n  pipe(target) {\n    return ZodPipeline.create(this, target);\n  }\n  isOptional() {\n    return this.safeParse(void 0).success;\n  }\n  isNullable() {\n    return this.safeParse(null).success;\n  }\n};\nvar cuidRegex = /^c[^\\s-]{8,}$/i;\nvar cuid2Regex = /^[a-z][a-z0-9]*$/;\nvar ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;\nvar uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\nvar emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\nvar emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;\nvar ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nvar ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\nvar datetimeRegex = args => {\n  if (args.precision) {\n    if (args.offset) {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n    } else {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n    }\n  } else if (args.precision === 0) {\n    if (args.offset) {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n    } else {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n    }\n  } else {\n    if (args.offset) {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n    } else {\n      return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n    }\n  }\n};\nfunction isValidIP(ip, version2) {\n  if ((version2 === \"v4\" || !version2) && ipv4Regex.test(ip)) {\n    return true;\n  }\n  if ((version2 === \"v6\" || !version2) && ipv6Regex.test(ip)) {\n    return true;\n  }\n  return false;\n}\nvar ZodString = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._regex = (regex, validation, message) => this.refinement(data => regex.test(data), {\n      validation,\n      code: ZodIssueCode.invalid_string,\n      ...errorUtil.errToObj(message)\n    });\n    this.nonempty = message => this.min(1, errorUtil.errToObj(message));\n    this.trim = () => new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, {\n        kind: \"trim\"\n      }]\n    });\n    this.toLowerCase = () => new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, {\n        kind: \"toLowerCase\"\n      }]\n    });\n    this.toUpperCase = () => new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, {\n        kind: \"toUpperCase\"\n      }]\n    });\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = String(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.string) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.string,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx = void 0;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.length < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.length > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"string\",\n            inclusive: true,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"length\") {\n        const tooBig = input.data.length > check.value;\n        const tooSmall = input.data.length < check.value;\n        if (tooBig || tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          if (tooBig) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_big,\n              maximum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          } else if (tooSmall) {\n            addIssueToContext(ctx, {\n              code: ZodIssueCode.too_small,\n              minimum: check.value,\n              type: \"string\",\n              inclusive: true,\n              exact: true,\n              message: check.message\n            });\n          }\n          status.dirty();\n        }\n      } else if (check.kind === \"email\") {\n        if (!emailRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"email\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"emoji\") {\n        if (!emojiRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"emoji\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"uuid\") {\n        if (!uuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"uuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid\") {\n        if (!cuidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"cuid2\") {\n        if (!cuid2Regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"cuid2\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ulid\") {\n        if (!ulidRegex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ulid\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"url\") {\n        try {\n          new URL(input.data);\n        } catch (_a) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"url\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"regex\") {\n        check.regex.lastIndex = 0;\n        const testResult = check.regex.test(input.data);\n        if (!testResult) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"regex\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"trim\") {\n        input.data = input.data.trim();\n      } else if (check.kind === \"includes\") {\n        if (!input.data.includes(check.value, check.position)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: {\n              includes: check.value,\n              position: check.position\n            },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"toLowerCase\") {\n        input.data = input.data.toLowerCase();\n      } else if (check.kind === \"toUpperCase\") {\n        input.data = input.data.toUpperCase();\n      } else if (check.kind === \"startsWith\") {\n        if (!input.data.startsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: {\n              startsWith: check.value\n            },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"endsWith\") {\n        if (!input.data.endsWith(check.value)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: {\n              endsWith: check.value\n            },\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"datetime\") {\n        const regex = datetimeRegex(check);\n        if (!regex.test(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_string,\n            validation: \"datetime\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"ip\") {\n        if (!isValidIP(input.data, check.version)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            validation: \"ip\",\n            code: ZodIssueCode.invalid_string,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: input.data\n    };\n  }\n  _addCheck(check) {\n    return new ZodString({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  email(message) {\n    return this._addCheck({\n      kind: \"email\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  url(message) {\n    return this._addCheck({\n      kind: \"url\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  emoji(message) {\n    return this._addCheck({\n      kind: \"emoji\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  uuid(message) {\n    return this._addCheck({\n      kind: \"uuid\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  cuid(message) {\n    return this._addCheck({\n      kind: \"cuid\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  cuid2(message) {\n    return this._addCheck({\n      kind: \"cuid2\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  ulid(message) {\n    return this._addCheck({\n      kind: \"ulid\",\n      ...errorUtil.errToObj(message)\n    });\n  }\n  ip(options) {\n    return this._addCheck({\n      kind: \"ip\",\n      ...errorUtil.errToObj(options)\n    });\n  }\n  datetime(options) {\n    var _a;\n    if (typeof options === \"string\") {\n      return this._addCheck({\n        kind: \"datetime\",\n        precision: null,\n        offset: false,\n        message: options\n      });\n    }\n    return this._addCheck({\n      kind: \"datetime\",\n      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  regex(regex, message) {\n    return this._addCheck({\n      kind: \"regex\",\n      regex,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  includes(value, options) {\n    return this._addCheck({\n      kind: \"includes\",\n      value,\n      position: options === null || options === void 0 ? void 0 : options.position,\n      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)\n    });\n  }\n  startsWith(value, message) {\n    return this._addCheck({\n      kind: \"startsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  endsWith(value, message) {\n    return this._addCheck({\n      kind: \"endsWith\",\n      value,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  min(minLength, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  max(maxLength, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxLength,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  length(len, message) {\n    return this._addCheck({\n      kind: \"length\",\n      value: len,\n      ...errorUtil.errToObj(message)\n    });\n  }\n  get isDatetime() {\n    return !!this._def.checks.find(ch => ch.kind === \"datetime\");\n  }\n  get isEmail() {\n    return !!this._def.checks.find(ch => ch.kind === \"email\");\n  }\n  get isURL() {\n    return !!this._def.checks.find(ch => ch.kind === \"url\");\n  }\n  get isEmoji() {\n    return !!this._def.checks.find(ch => ch.kind === \"emoji\");\n  }\n  get isUUID() {\n    return !!this._def.checks.find(ch => ch.kind === \"uuid\");\n  }\n  get isCUID() {\n    return !!this._def.checks.find(ch => ch.kind === \"cuid\");\n  }\n  get isCUID2() {\n    return !!this._def.checks.find(ch => ch.kind === \"cuid2\");\n  }\n  get isULID() {\n    return !!this._def.checks.find(ch => ch.kind === \"ulid\");\n  }\n  get isIP() {\n    return !!this._def.checks.find(ch => ch.kind === \"ip\");\n  }\n  get minLength() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min) min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxLength() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max) max = ch.value;\n      }\n    }\n    return max;\n  }\n};\nZodString.create = params2 => {\n  var _a;\n  return new ZodString({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodString,\n    coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,\n    ...processCreateParams(params2)\n  });\n};\nfunction floatSafeRemainder(val, step) {\n  const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n  const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n  const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n  const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n  return valInt % stepInt / Math.pow(10, decCount);\n}\nvar ZodNumber = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n    this.step = this.multipleOf;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Number(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.number) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.number,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    let ctx = void 0;\n    const status = new ParseStatus();\n    for (const check of this._def.checks) {\n      if (check.kind === \"int\") {\n        if (!util.isInteger(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: \"integer\",\n            received: \"float\",\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            minimum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            maximum: check.value,\n            type: \"number\",\n            inclusive: check.inclusive,\n            exact: false,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (floatSafeRemainder(input.data, check.value) !== 0) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"finite\") {\n        if (!Number.isFinite(input.data)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_finite,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: input.data\n    };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [...this._def.checks, {\n        kind,\n        value,\n        inclusive,\n        message: errorUtil.toString(message)\n      }]\n    });\n  }\n  _addCheck(check) {\n    return new ZodNumber({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  int(message) {\n    return this._addCheck({\n      kind: \"int\",\n      message: errorUtil.toString(message)\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: 0,\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  finite(message) {\n    return this._addCheck({\n      kind: \"finite\",\n      message: errorUtil.toString(message)\n    });\n  }\n  safe(message) {\n    return this._addCheck({\n      kind: \"min\",\n      inclusive: true,\n      value: Number.MIN_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    })._addCheck({\n      kind: \"max\",\n      inclusive: true,\n      value: Number.MAX_SAFE_INTEGER,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min) min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max) max = ch.value;\n      }\n    }\n    return max;\n  }\n  get isInt() {\n    return !!this._def.checks.find(ch => ch.kind === \"int\" || ch.kind === \"multipleOf\" && util.isInteger(ch.value));\n  }\n  get isFinite() {\n    let max = null,\n      min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"finite\" || ch.kind === \"int\" || ch.kind === \"multipleOf\") {\n        return true;\n      } else if (ch.kind === \"min\") {\n        if (min === null || ch.value > min) min = ch.value;\n      } else if (ch.kind === \"max\") {\n        if (max === null || ch.value < max) max = ch.value;\n      }\n    }\n    return Number.isFinite(min) && Number.isFinite(max);\n  }\n};\nZodNumber.create = params2 => {\n  return new ZodNumber({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodNumber,\n    coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodBigInt = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.min = this.gte;\n    this.max = this.lte;\n  }\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = BigInt(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.bigint) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.bigint,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    let ctx = void 0;\n    const status = new ParseStatus();\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;\n        if (tooSmall) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            type: \"bigint\",\n            minimum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;\n        if (tooBig) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            type: \"bigint\",\n            maximum: check.value,\n            inclusive: check.inclusive,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"multipleOf\") {\n        if (input.data % check.value !== BigInt(0)) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.not_multiple_of,\n            multipleOf: check.value,\n            message: check.message\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: input.data\n    };\n  }\n  gte(value, message) {\n    return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n  }\n  gt(value, message) {\n    return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n  }\n  lte(value, message) {\n    return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n  }\n  lt(value, message) {\n    return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n  }\n  setLimit(kind, value, inclusive, message) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [...this._def.checks, {\n        kind,\n        value,\n        inclusive,\n        message: errorUtil.toString(message)\n      }]\n    });\n  }\n  _addCheck(check) {\n    return new ZodBigInt({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  positive(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  negative(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: false,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonpositive(message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  nonnegative(message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: BigInt(0),\n      inclusive: true,\n      message: errorUtil.toString(message)\n    });\n  }\n  multipleOf(value, message) {\n    return this._addCheck({\n      kind: \"multipleOf\",\n      value,\n      message: errorUtil.toString(message)\n    });\n  }\n  get minValue() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min) min = ch.value;\n      }\n    }\n    return min;\n  }\n  get maxValue() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max) max = ch.value;\n      }\n    }\n    return max;\n  }\n};\nZodBigInt.create = params2 => {\n  var _a;\n  return new ZodBigInt({\n    checks: [],\n    typeName: ZodFirstPartyTypeKind.ZodBigInt,\n    coerce: (_a = params2 === null || params2 === void 0 ? void 0 : params2.coerce) !== null && _a !== void 0 ? _a : false,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodBoolean = class extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = Boolean(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.boolean) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.boolean,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodBoolean.create = params2 => {\n  return new ZodBoolean({\n    typeName: ZodFirstPartyTypeKind.ZodBoolean,\n    coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodDate = class extends ZodType {\n  _parse(input) {\n    if (this._def.coerce) {\n      input.data = new Date(input.data);\n    }\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.date) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.date,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    if (isNaN(input.data.getTime())) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_date\n      });\n      return INVALID;\n    }\n    const status = new ParseStatus();\n    let ctx = void 0;\n    for (const check of this._def.checks) {\n      if (check.kind === \"min\") {\n        if (input.data.getTime() < check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_small,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            minimum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else if (check.kind === \"max\") {\n        if (input.data.getTime() > check.value) {\n          ctx = this._getOrReturnCtx(input, ctx);\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.too_big,\n            message: check.message,\n            inclusive: true,\n            exact: false,\n            maximum: check.value,\n            type: \"date\"\n          });\n          status.dirty();\n        }\n      } else {\n        util.assertNever(check);\n      }\n    }\n    return {\n      status: status.value,\n      value: new Date(input.data.getTime())\n    };\n  }\n  _addCheck(check) {\n    return new ZodDate({\n      ...this._def,\n      checks: [...this._def.checks, check]\n    });\n  }\n  min(minDate, message) {\n    return this._addCheck({\n      kind: \"min\",\n      value: minDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  max(maxDate, message) {\n    return this._addCheck({\n      kind: \"max\",\n      value: maxDate.getTime(),\n      message: errorUtil.toString(message)\n    });\n  }\n  get minDate() {\n    let min = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"min\") {\n        if (min === null || ch.value > min) min = ch.value;\n      }\n    }\n    return min != null ? new Date(min) : null;\n  }\n  get maxDate() {\n    let max = null;\n    for (const ch of this._def.checks) {\n      if (ch.kind === \"max\") {\n        if (max === null || ch.value < max) max = ch.value;\n      }\n    }\n    return max != null ? new Date(max) : null;\n  }\n};\nZodDate.create = params2 => {\n  return new ZodDate({\n    checks: [],\n    coerce: (params2 === null || params2 === void 0 ? void 0 : params2.coerce) || false,\n    typeName: ZodFirstPartyTypeKind.ZodDate,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodSymbol = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.symbol) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.symbol,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodSymbol.create = params2 => {\n  return new ZodSymbol({\n    typeName: ZodFirstPartyTypeKind.ZodSymbol,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodUndefined = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.undefined,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodUndefined.create = params2 => {\n  return new ZodUndefined({\n    typeName: ZodFirstPartyTypeKind.ZodUndefined,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNull = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.null) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.null,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodNull.create = params2 => {\n  return new ZodNull({\n    typeName: ZodFirstPartyTypeKind.ZodNull,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodAny = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._any = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n};\nZodAny.create = params2 => {\n  return new ZodAny({\n    typeName: ZodFirstPartyTypeKind.ZodAny,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodUnknown = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._unknown = true;\n  }\n  _parse(input) {\n    return OK(input.data);\n  }\n};\nZodUnknown.create = params2 => {\n  return new ZodUnknown({\n    typeName: ZodFirstPartyTypeKind.ZodUnknown,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNever = class extends ZodType {\n  _parse(input) {\n    const ctx = this._getOrReturnCtx(input);\n    addIssueToContext(ctx, {\n      code: ZodIssueCode.invalid_type,\n      expected: ZodParsedType.never,\n      received: ctx.parsedType\n    });\n    return INVALID;\n  }\n};\nZodNever.create = params2 => {\n  return new ZodNever({\n    typeName: ZodFirstPartyTypeKind.ZodNever,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodVoid = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.undefined) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.void,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n};\nZodVoid.create = params2 => {\n  return new ZodVoid({\n    typeName: ZodFirstPartyTypeKind.ZodVoid,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodArray = class extends ZodType {\n  _parse(input) {\n    const {\n      ctx,\n      status\n    } = this._processInputParams(input);\n    const def2 = this._def;\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (def2.exactLength !== null) {\n      const tooBig = ctx.data.length > def2.exactLength.value;\n      const tooSmall = ctx.data.length < def2.exactLength.value;\n      if (tooBig || tooSmall) {\n        addIssueToContext(ctx, {\n          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n          minimum: tooSmall ? def2.exactLength.value : void 0,\n          maximum: tooBig ? def2.exactLength.value : void 0,\n          type: \"array\",\n          inclusive: true,\n          exact: true,\n          message: def2.exactLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def2.minLength !== null) {\n      if (ctx.data.length < def2.minLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def2.minLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def2.minLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (def2.maxLength !== null) {\n      if (ctx.data.length > def2.maxLength.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def2.maxLength.value,\n          type: \"array\",\n          inclusive: true,\n          exact: false,\n          message: def2.maxLength.message\n        });\n        status.dirty();\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.all([...ctx.data].map((item, i) => {\n        return def2.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n      })).then(result2 => {\n        return ParseStatus.mergeArray(status, result2);\n      });\n    }\n    const result = [...ctx.data].map((item, i) => {\n      return def2.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n    });\n    return ParseStatus.mergeArray(status, result);\n  }\n  get element() {\n    return this._def.type;\n  }\n  min(minLength, message) {\n    return new ZodArray({\n      ...this._def,\n      minLength: {\n        value: minLength,\n        message: errorUtil.toString(message)\n      }\n    });\n  }\n  max(maxLength, message) {\n    return new ZodArray({\n      ...this._def,\n      maxLength: {\n        value: maxLength,\n        message: errorUtil.toString(message)\n      }\n    });\n  }\n  length(len, message) {\n    return new ZodArray({\n      ...this._def,\n      exactLength: {\n        value: len,\n        message: errorUtil.toString(message)\n      }\n    });\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n};\nZodArray.create = (schema2, params2) => {\n  return new ZodArray({\n    type: schema2,\n    minLength: null,\n    maxLength: null,\n    exactLength: null,\n    typeName: ZodFirstPartyTypeKind.ZodArray,\n    ...processCreateParams(params2)\n  });\n};\nfunction deepPartialify(schema2) {\n  if (schema2 instanceof ZodObject) {\n    const newShape = {};\n    for (const key in schema2.shape) {\n      const fieldSchema = schema2.shape[key];\n      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n    }\n    return new ZodObject({\n      ...schema2._def,\n      shape: () => newShape\n    });\n  } else if (schema2 instanceof ZodArray) {\n    return new ZodArray({\n      ...schema2._def,\n      type: deepPartialify(schema2.element)\n    });\n  } else if (schema2 instanceof ZodOptional) {\n    return ZodOptional.create(deepPartialify(schema2.unwrap()));\n  } else if (schema2 instanceof ZodNullable) {\n    return ZodNullable.create(deepPartialify(schema2.unwrap()));\n  } else if (schema2 instanceof ZodTuple) {\n    return ZodTuple.create(schema2.items.map(item => deepPartialify(item)));\n  } else {\n    return schema2;\n  }\n}\nvar ZodObject = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this._cached = null;\n    this.nonstrict = this.passthrough;\n    this.augment = this.extend;\n  }\n  _getCached() {\n    if (this._cached !== null) return this._cached;\n    const shape = this._def.shape();\n    const keys = util.objectKeys(shape);\n    return this._cached = {\n      shape,\n      keys\n    };\n  }\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.object) {\n      const ctx2 = this._getOrReturnCtx(input);\n      addIssueToContext(ctx2, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx2.parsedType\n      });\n      return INVALID;\n    }\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    const {\n      shape,\n      keys: shapeKeys\n    } = this._getCached();\n    const extraKeys = [];\n    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === \"strip\")) {\n      for (const key in ctx.data) {\n        if (!shapeKeys.includes(key)) {\n          extraKeys.push(key);\n        }\n      }\n    }\n    const pairs = [];\n    for (const key of shapeKeys) {\n      const keyValidator = shape[key];\n      const value = ctx.data[key];\n      pairs.push({\n        key: {\n          status: \"valid\",\n          value: key\n        },\n        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n        alwaysSet: key in ctx.data\n      });\n    }\n    if (this._def.catchall instanceof ZodNever) {\n      const unknownKeys = this._def.unknownKeys;\n      if (unknownKeys === \"passthrough\") {\n        for (const key of extraKeys) {\n          pairs.push({\n            key: {\n              status: \"valid\",\n              value: key\n            },\n            value: {\n              status: \"valid\",\n              value: ctx.data[key]\n            }\n          });\n        }\n      } else if (unknownKeys === \"strict\") {\n        if (extraKeys.length > 0) {\n          addIssueToContext(ctx, {\n            code: ZodIssueCode.unrecognized_keys,\n            keys: extraKeys\n          });\n          status.dirty();\n        }\n      } else if (unknownKeys === \"strip\") ;else {\n        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n      }\n    } else {\n      const catchall = this._def.catchall;\n      for (const key of extraKeys) {\n        const value = ctx.data[key];\n        pairs.push({\n          key: {\n            status: \"valid\",\n            value: key\n          },\n          value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n          alwaysSet: key in ctx.data\n        });\n      }\n    }\n    if (ctx.common.async) {\n      return Promise.resolve().then(async () => {\n        const syncPairs = [];\n        for (const pair of pairs) {\n          const key = await pair.key;\n          syncPairs.push({\n            key,\n            value: await pair.value,\n            alwaysSet: pair.alwaysSet\n          });\n        }\n        return syncPairs;\n      }).then(syncPairs => {\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n      });\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get shape() {\n    return this._def.shape();\n  }\n  strict(message) {\n    errorUtil.errToObj;\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strict\",\n      ...(message !== void 0 ? {\n        errorMap: (issue, ctx) => {\n          var _a, _b, _c, _d;\n          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n          if (issue.code === \"unrecognized_keys\") return {\n            message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError\n          };\n          return {\n            message: defaultError\n          };\n        }\n      } : {})\n    });\n  }\n  strip() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"strip\"\n    });\n  }\n  passthrough() {\n    return new ZodObject({\n      ...this._def,\n      unknownKeys: \"passthrough\"\n    });\n  }\n  extend(augmentation) {\n    return new ZodObject({\n      ...this._def,\n      shape: () => ({\n        ...this._def.shape(),\n        ...augmentation\n      })\n    });\n  }\n  merge(merging) {\n    const merged = new ZodObject({\n      unknownKeys: merging._def.unknownKeys,\n      catchall: merging._def.catchall,\n      shape: () => ({\n        ...this._def.shape(),\n        ...merging._def.shape()\n      }),\n      typeName: ZodFirstPartyTypeKind.ZodObject\n    });\n    return merged;\n  }\n  setKey(key, schema2) {\n    return this.augment({\n      [key]: schema2\n    });\n  }\n  catchall(index) {\n    return new ZodObject({\n      ...this._def,\n      catchall: index\n    });\n  }\n  pick(mask) {\n    const shape = {};\n    util.objectKeys(mask).forEach(key => {\n      if (mask[key] && this.shape[key]) {\n        shape[key] = this.shape[key];\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  omit(mask) {\n    const shape = {};\n    util.objectKeys(this.shape).forEach(key => {\n      if (!mask[key]) {\n        shape[key] = this.shape[key];\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => shape\n    });\n  }\n  deepPartial() {\n    return deepPartialify(this);\n  }\n  partial(mask) {\n    const newShape = {};\n    util.objectKeys(this.shape).forEach(key => {\n      const fieldSchema = this.shape[key];\n      if (mask && !mask[key]) {\n        newShape[key] = fieldSchema;\n      } else {\n        newShape[key] = fieldSchema.optional();\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  required(mask) {\n    const newShape = {};\n    util.objectKeys(this.shape).forEach(key => {\n      if (mask && !mask[key]) {\n        newShape[key] = this.shape[key];\n      } else {\n        const fieldSchema = this.shape[key];\n        let newField = fieldSchema;\n        while (newField instanceof ZodOptional) {\n          newField = newField._def.innerType;\n        }\n        newShape[key] = newField;\n      }\n    });\n    return new ZodObject({\n      ...this._def,\n      shape: () => newShape\n    });\n  }\n  keyof() {\n    return createZodEnum(util.objectKeys(this.shape));\n  }\n};\nZodObject.create = (shape, params2) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params2)\n  });\n};\nZodObject.strictCreate = (shape, params2) => {\n  return new ZodObject({\n    shape: () => shape,\n    unknownKeys: \"strict\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params2)\n  });\n};\nZodObject.lazycreate = (shape, params2) => {\n  return new ZodObject({\n    shape,\n    unknownKeys: \"strip\",\n    catchall: ZodNever.create(),\n    typeName: ZodFirstPartyTypeKind.ZodObject,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodUnion = class extends ZodType {\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    const options = this._def.options;\n    function handleResults(results) {\n      for (const result of results) {\n        if (result.result.status === \"valid\") {\n          return result.result;\n        }\n      }\n      for (const result of results) {\n        if (result.result.status === \"dirty\") {\n          ctx.common.issues.push(...result.ctx.common.issues);\n          return result.result;\n        }\n      }\n      const unionErrors = results.map(result => new ZodError(result.ctx.common.issues));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return Promise.all(options.map(async option => {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        return {\n          result: await option._parseAsync({\n            data: ctx.data,\n            path: ctx.path,\n            parent: childCtx\n          }),\n          ctx: childCtx\n        };\n      })).then(handleResults);\n    } else {\n      let dirty = void 0;\n      const issues = [];\n      for (const option of options) {\n        const childCtx = {\n          ...ctx,\n          common: {\n            ...ctx.common,\n            issues: []\n          },\n          parent: null\n        };\n        const result = option._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: childCtx\n        });\n        if (result.status === \"valid\") {\n          return result;\n        } else if (result.status === \"dirty\" && !dirty) {\n          dirty = {\n            result,\n            ctx: childCtx\n          };\n        }\n        if (childCtx.common.issues.length) {\n          issues.push(childCtx.common.issues);\n        }\n      }\n      if (dirty) {\n        ctx.common.issues.push(...dirty.ctx.common.issues);\n        return dirty.result;\n      }\n      const unionErrors = issues.map(issues2 => new ZodError(issues2));\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union,\n        unionErrors\n      });\n      return INVALID;\n    }\n  }\n  get options() {\n    return this._def.options;\n  }\n};\nZodUnion.create = (types, params2) => {\n  return new ZodUnion({\n    options: types,\n    typeName: ZodFirstPartyTypeKind.ZodUnion,\n    ...processCreateParams(params2)\n  });\n};\nvar getDiscriminator = type => {\n  if (type instanceof ZodLazy) {\n    return getDiscriminator(type.schema);\n  } else if (type instanceof ZodEffects) {\n    return getDiscriminator(type.innerType());\n  } else if (type instanceof ZodLiteral) {\n    return [type.value];\n  } else if (type instanceof ZodEnum) {\n    return type.options;\n  } else if (type instanceof ZodNativeEnum) {\n    return Object.keys(type.enum);\n  } else if (type instanceof ZodDefault) {\n    return getDiscriminator(type._def.innerType);\n  } else if (type instanceof ZodUndefined) {\n    return [void 0];\n  } else if (type instanceof ZodNull) {\n    return [null];\n  } else {\n    return null;\n  }\n};\nvar ZodDiscriminatedUnion = class extends ZodType {\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const discriminator = this.discriminator;\n    const discriminatorValue = ctx.data[discriminator];\n    const option = this.optionsMap.get(discriminatorValue);\n    if (!option) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_union_discriminator,\n        options: Array.from(this.optionsMap.keys()),\n        path: [discriminator]\n      });\n      return INVALID;\n    }\n    if (ctx.common.async) {\n      return option._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    } else {\n      return option._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n    }\n  }\n  get discriminator() {\n    return this._def.discriminator;\n  }\n  get options() {\n    return this._def.options;\n  }\n  get optionsMap() {\n    return this._def.optionsMap;\n  }\n  static create(discriminator, options, params2) {\n    const optionsMap = /* @__PURE__ */new Map();\n    for (const type of options) {\n      const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n      if (!discriminatorValues) {\n        throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n      }\n      for (const value of discriminatorValues) {\n        if (optionsMap.has(value)) {\n          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n        }\n        optionsMap.set(value, type);\n      }\n    }\n    return new ZodDiscriminatedUnion({\n      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n      discriminator,\n      options,\n      optionsMap,\n      ...processCreateParams(params2)\n    });\n  }\n};\nfunction mergeValues(a, b) {\n  const aType = getParsedType(a);\n  const bType = getParsedType(b);\n  if (a === b) {\n    return {\n      valid: true,\n      data: a\n    };\n  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n    const bKeys = util.objectKeys(b);\n    const sharedKeys = util.objectKeys(a).filter(key => bKeys.indexOf(key) !== -1);\n    const newObj = {\n      ...a,\n      ...b\n    };\n    for (const key of sharedKeys) {\n      const sharedValue = mergeValues(a[key], b[key]);\n      if (!sharedValue.valid) {\n        return {\n          valid: false\n        };\n      }\n      newObj[key] = sharedValue.data;\n    }\n    return {\n      valid: true,\n      data: newObj\n    };\n  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n    if (a.length !== b.length) {\n      return {\n        valid: false\n      };\n    }\n    const newArray = [];\n    for (let index = 0; index < a.length; index++) {\n      const itemA = a[index];\n      const itemB = b[index];\n      const sharedValue = mergeValues(itemA, itemB);\n      if (!sharedValue.valid) {\n        return {\n          valid: false\n        };\n      }\n      newArray.push(sharedValue.data);\n    }\n    return {\n      valid: true,\n      data: newArray\n    };\n  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {\n    return {\n      valid: true,\n      data: a\n    };\n  } else {\n    return {\n      valid: false\n    };\n  }\n}\nvar ZodIntersection = class extends ZodType {\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    const handleParsed = (parsedLeft, parsedRight) => {\n      if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n        return INVALID;\n      }\n      const merged = mergeValues(parsedLeft.value, parsedRight.value);\n      if (!merged.valid) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.invalid_intersection_types\n        });\n        return INVALID;\n      }\n      if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n        status.dirty();\n      }\n      return {\n        status: status.value,\n        value: merged.data\n      };\n    };\n    if (ctx.common.async) {\n      return Promise.all([this._def.left._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }), this._def.right._parseAsync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      })]).then(([left, right]) => handleParsed(left, right));\n    } else {\n      return handleParsed(this._def.left._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }), this._def.right._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      }));\n    }\n  }\n};\nZodIntersection.create = (left, right, params2) => {\n  return new ZodIntersection({\n    left,\n    right,\n    typeName: ZodFirstPartyTypeKind.ZodIntersection,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodTuple = class extends ZodType {\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.array) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.array,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    if (ctx.data.length < this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_small,\n        minimum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      return INVALID;\n    }\n    const rest = this._def.rest;\n    if (!rest && ctx.data.length > this._def.items.length) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.too_big,\n        maximum: this._def.items.length,\n        inclusive: true,\n        exact: false,\n        type: \"array\"\n      });\n      status.dirty();\n    }\n    const items = [...ctx.data].map((item, itemIndex) => {\n      const schema2 = this._def.items[itemIndex] || this._def.rest;\n      if (!schema2) return null;\n      return schema2._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n    }).filter(x => !!x);\n    if (ctx.common.async) {\n      return Promise.all(items).then(results => {\n        return ParseStatus.mergeArray(status, results);\n      });\n    } else {\n      return ParseStatus.mergeArray(status, items);\n    }\n  }\n  get items() {\n    return this._def.items;\n  }\n  rest(rest) {\n    return new ZodTuple({\n      ...this._def,\n      rest\n    });\n  }\n};\nZodTuple.create = (schemas2, params2) => {\n  if (!Array.isArray(schemas2)) {\n    throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n  }\n  return new ZodTuple({\n    items: schemas2,\n    typeName: ZodFirstPartyTypeKind.ZodTuple,\n    rest: null,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodRecord = class extends ZodType {\n  get keySchema() {\n    return this._def.keyType;\n  }\n  get valueSchema() {\n    return this._def.valueType;\n  }\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.object) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.object,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const pairs = [];\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    for (const key in ctx.data) {\n      pairs.push({\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key))\n      });\n    }\n    if (ctx.common.async) {\n      return ParseStatus.mergeObjectAsync(status, pairs);\n    } else {\n      return ParseStatus.mergeObjectSync(status, pairs);\n    }\n  }\n  get element() {\n    return this._def.valueType;\n  }\n  static create(first, second, third) {\n    if (second instanceof ZodType) {\n      return new ZodRecord({\n        keyType: first,\n        valueType: second,\n        typeName: ZodFirstPartyTypeKind.ZodRecord,\n        ...processCreateParams(third)\n      });\n    }\n    return new ZodRecord({\n      keyType: ZodString.create(),\n      valueType: first,\n      typeName: ZodFirstPartyTypeKind.ZodRecord,\n      ...processCreateParams(second)\n    });\n  }\n};\nvar ZodMap = class extends ZodType {\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.map) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.map,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const keyType = this._def.keyType;\n    const valueType = this._def.valueType;\n    const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n      return {\n        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"]))\n      };\n    });\n    if (ctx.common.async) {\n      const finalMap = /* @__PURE__ */new Map();\n      return Promise.resolve().then(async () => {\n        for (const pair of pairs) {\n          const key = await pair.key;\n          const value = await pair.value;\n          if (key.status === \"aborted\" || value.status === \"aborted\") {\n            return INVALID;\n          }\n          if (key.status === \"dirty\" || value.status === \"dirty\") {\n            status.dirty();\n          }\n          finalMap.set(key.value, value.value);\n        }\n        return {\n          status: status.value,\n          value: finalMap\n        };\n      });\n    } else {\n      const finalMap = /* @__PURE__ */new Map();\n      for (const pair of pairs) {\n        const key = pair.key;\n        const value = pair.value;\n        if (key.status === \"aborted\" || value.status === \"aborted\") {\n          return INVALID;\n        }\n        if (key.status === \"dirty\" || value.status === \"dirty\") {\n          status.dirty();\n        }\n        finalMap.set(key.value, value.value);\n      }\n      return {\n        status: status.value,\n        value: finalMap\n      };\n    }\n  }\n};\nZodMap.create = (keyType, valueType, params2) => {\n  return new ZodMap({\n    valueType,\n    keyType,\n    typeName: ZodFirstPartyTypeKind.ZodMap,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodSet = class extends ZodType {\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.set) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.set,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const def2 = this._def;\n    if (def2.minSize !== null) {\n      if (ctx.data.size < def2.minSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_small,\n          minimum: def2.minSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def2.minSize.message\n        });\n        status.dirty();\n      }\n    }\n    if (def2.maxSize !== null) {\n      if (ctx.data.size > def2.maxSize.value) {\n        addIssueToContext(ctx, {\n          code: ZodIssueCode.too_big,\n          maximum: def2.maxSize.value,\n          type: \"set\",\n          inclusive: true,\n          exact: false,\n          message: def2.maxSize.message\n        });\n        status.dirty();\n      }\n    }\n    const valueType = this._def.valueType;\n    function finalizeSet(elements2) {\n      const parsedSet = /* @__PURE__ */new Set();\n      for (const element of elements2) {\n        if (element.status === \"aborted\") return INVALID;\n        if (element.status === \"dirty\") status.dirty();\n        parsedSet.add(element.value);\n      }\n      return {\n        status: status.value,\n        value: parsedSet\n      };\n    }\n    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n    if (ctx.common.async) {\n      return Promise.all(elements).then(elements2 => finalizeSet(elements2));\n    } else {\n      return finalizeSet(elements);\n    }\n  }\n  min(minSize, message) {\n    return new ZodSet({\n      ...this._def,\n      minSize: {\n        value: minSize,\n        message: errorUtil.toString(message)\n      }\n    });\n  }\n  max(maxSize, message) {\n    return new ZodSet({\n      ...this._def,\n      maxSize: {\n        value: maxSize,\n        message: errorUtil.toString(message)\n      }\n    });\n  }\n  size(size, message) {\n    return this.min(size, message).max(size, message);\n  }\n  nonempty(message) {\n    return this.min(1, message);\n  }\n};\nZodSet.create = (valueType, params2) => {\n  return new ZodSet({\n    valueType,\n    minSize: null,\n    maxSize: null,\n    typeName: ZodFirstPartyTypeKind.ZodSet,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodFunction = class extends ZodType {\n  constructor() {\n    super(...arguments);\n    this.validate = this.implement;\n  }\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.function) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.function,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    function makeArgsIssue(args, error) {\n      return makeIssue({\n        data: args,\n        path: ctx.path,\n        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), errorMap].filter(x => !!x),\n        issueData: {\n          code: ZodIssueCode.invalid_arguments,\n          argumentsError: error\n        }\n      });\n    }\n    function makeReturnsIssue(returns, error) {\n      return makeIssue({\n        data: returns,\n        path: ctx.path,\n        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), errorMap].filter(x => !!x),\n        issueData: {\n          code: ZodIssueCode.invalid_return_type,\n          returnTypeError: error\n        }\n      });\n    }\n    const params2 = {\n      errorMap: ctx.common.contextualErrorMap\n    };\n    const fn = ctx.data;\n    if (this._def.returns instanceof ZodPromise) {\n      return OK(async (...args) => {\n        const error = new ZodError([]);\n        const parsedArgs = await this._def.args.parseAsync(args, params2).catch(e => {\n          error.addIssue(makeArgsIssue(args, e));\n          throw error;\n        });\n        const result = await fn(...parsedArgs);\n        const parsedReturns = await this._def.returns._def.type.parseAsync(result, params2).catch(e => {\n          error.addIssue(makeReturnsIssue(result, e));\n          throw error;\n        });\n        return parsedReturns;\n      });\n    } else {\n      return OK((...args) => {\n        const parsedArgs = this._def.args.safeParse(args, params2);\n        if (!parsedArgs.success) {\n          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n        }\n        const result = fn(...parsedArgs.data);\n        const parsedReturns = this._def.returns.safeParse(result, params2);\n        if (!parsedReturns.success) {\n          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n        }\n        return parsedReturns.data;\n      });\n    }\n  }\n  parameters() {\n    return this._def.args;\n  }\n  returnType() {\n    return this._def.returns;\n  }\n  args(...items) {\n    return new ZodFunction({\n      ...this._def,\n      args: ZodTuple.create(items).rest(ZodUnknown.create())\n    });\n  }\n  returns(returnType) {\n    return new ZodFunction({\n      ...this._def,\n      returns: returnType\n    });\n  }\n  implement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  strictImplement(func) {\n    const validatedFunc = this.parse(func);\n    return validatedFunc;\n  }\n  static create(args, returns, params2) {\n    return new ZodFunction({\n      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),\n      returns: returns || ZodUnknown.create(),\n      typeName: ZodFirstPartyTypeKind.ZodFunction,\n      ...processCreateParams(params2)\n    });\n  }\n};\nvar ZodLazy = class extends ZodType {\n  get schema() {\n    return this._def.getter();\n  }\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    const lazySchema = this._def.getter();\n    return lazySchema._parse({\n      data: ctx.data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n};\nZodLazy.create = (getter, params2) => {\n  return new ZodLazy({\n    getter,\n    typeName: ZodFirstPartyTypeKind.ZodLazy,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodLiteral = class extends ZodType {\n  _parse(input) {\n    if (input.data !== this._def.value) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_literal,\n        expected: this._def.value\n      });\n      return INVALID;\n    }\n    return {\n      status: \"valid\",\n      value: input.data\n    };\n  }\n  get value() {\n    return this._def.value;\n  }\n};\nZodLiteral.create = (value, params2) => {\n  return new ZodLiteral({\n    value,\n    typeName: ZodFirstPartyTypeKind.ZodLiteral,\n    ...processCreateParams(params2)\n  });\n};\nfunction createZodEnum(values, params2) {\n  return new ZodEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodEnum,\n    ...processCreateParams(params2)\n  });\n}\nvar ZodEnum = class extends ZodType {\n  _parse(input) {\n    if (typeof input.data !== \"string\") {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (this._def.values.indexOf(input.data) === -1) {\n      const ctx = this._getOrReturnCtx(input);\n      const expectedValues = this._def.values;\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get options() {\n    return this._def.values;\n  }\n  get enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Values() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  get Enum() {\n    const enumValues = {};\n    for (const val of this._def.values) {\n      enumValues[val] = val;\n    }\n    return enumValues;\n  }\n  extract(values) {\n    return ZodEnum.create(values);\n  }\n  exclude(values) {\n    return ZodEnum.create(this.options.filter(opt => !values.includes(opt)));\n  }\n};\nZodEnum.create = createZodEnum;\nvar ZodNativeEnum = class extends ZodType {\n  _parse(input) {\n    const nativeEnumValues = util.getValidEnumValues(this._def.values);\n    const ctx = this._getOrReturnCtx(input);\n    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        expected: util.joinValues(expectedValues),\n        received: ctx.parsedType,\n        code: ZodIssueCode.invalid_type\n      });\n      return INVALID;\n    }\n    if (nativeEnumValues.indexOf(input.data) === -1) {\n      const expectedValues = util.objectValues(nativeEnumValues);\n      addIssueToContext(ctx, {\n        received: ctx.data,\n        code: ZodIssueCode.invalid_enum_value,\n        options: expectedValues\n      });\n      return INVALID;\n    }\n    return OK(input.data);\n  }\n  get enum() {\n    return this._def.values;\n  }\n};\nZodNativeEnum.create = (values, params2) => {\n  return new ZodNativeEnum({\n    values,\n    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodPromise = class extends ZodType {\n  unwrap() {\n    return this._def.type;\n  }\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.promise,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);\n    return OK(promisified.then(data => {\n      return this._def.type.parseAsync(data, {\n        path: ctx.path,\n        errorMap: ctx.common.contextualErrorMap\n      });\n    }));\n  }\n};\nZodPromise.create = (schema2, params2) => {\n  return new ZodPromise({\n    type: schema2,\n    typeName: ZodFirstPartyTypeKind.ZodPromise,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodEffects = class extends ZodType {\n  innerType() {\n    return this._def.schema;\n  }\n  sourceType() {\n    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;\n  }\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    const effect = this._def.effect || null;\n    if (effect.type === \"preprocess\") {\n      const processed = effect.transform(ctx.data);\n      if (ctx.common.async) {\n        return Promise.resolve(processed).then(processed2 => {\n          return this._def.schema._parseAsync({\n            data: processed2,\n            path: ctx.path,\n            parent: ctx\n          });\n        });\n      } else {\n        return this._def.schema._parseSync({\n          data: processed,\n          path: ctx.path,\n          parent: ctx\n        });\n      }\n    }\n    const checkCtx = {\n      addIssue: arg => {\n        addIssueToContext(ctx, arg);\n        if (arg.fatal) {\n          status.abort();\n        } else {\n          status.dirty();\n        }\n      },\n      get path() {\n        return ctx.path;\n      }\n    };\n    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n    if (effect.type === \"refinement\") {\n      const executeRefinement = acc => {\n        const result = effect.refinement(acc, checkCtx);\n        if (ctx.common.async) {\n          return Promise.resolve(result);\n        }\n        if (result instanceof Promise) {\n          throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n        }\n        return acc;\n      };\n      if (ctx.common.async === false) {\n        const inner = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inner.status === \"aborted\") return INVALID;\n        if (inner.status === \"dirty\") status.dirty();\n        executeRefinement(inner.value);\n        return {\n          status: status.value,\n          value: inner.value\n        };\n      } else {\n        return this._def.schema._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        }).then(inner => {\n          if (inner.status === \"aborted\") return INVALID;\n          if (inner.status === \"dirty\") status.dirty();\n          return executeRefinement(inner.value).then(() => {\n            return {\n              status: status.value,\n              value: inner.value\n            };\n          });\n        });\n      }\n    }\n    if (effect.type === \"transform\") {\n      if (ctx.common.async === false) {\n        const base3 = this._def.schema._parseSync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (!isValid(base3)) return base3;\n        const result = effect.transform(base3.value, checkCtx);\n        if (result instanceof Promise) {\n          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n        }\n        return {\n          status: status.value,\n          value: result\n        };\n      } else {\n        return this._def.schema._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        }).then(base3 => {\n          if (!isValid(base3)) return base3;\n          return Promise.resolve(effect.transform(base3.value, checkCtx)).then(result => ({\n            status: status.value,\n            value: result\n          }));\n        });\n      }\n    }\n    util.assertNever(effect);\n  }\n};\nZodEffects.create = (schema2, effect, params2) => {\n  return new ZodEffects({\n    schema: schema2,\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    effect,\n    ...processCreateParams(params2)\n  });\n};\nZodEffects.createWithPreprocess = (preprocess, schema2, params2) => {\n  return new ZodEffects({\n    schema: schema2,\n    effect: {\n      type: \"preprocess\",\n      transform: preprocess\n    },\n    typeName: ZodFirstPartyTypeKind.ZodEffects,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodOptional = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.undefined) {\n      return OK(void 0);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n};\nZodOptional.create = (type, params2) => {\n  return new ZodOptional({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodOptional,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNullable = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType === ZodParsedType.null) {\n      return OK(null);\n    }\n    return this._def.innerType._parse(input);\n  }\n  unwrap() {\n    return this._def.innerType;\n  }\n};\nZodNullable.create = (type, params2) => {\n  return new ZodNullable({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodNullable,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodDefault = class extends ZodType {\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    let data = ctx.data;\n    if (ctx.parsedType === ZodParsedType.undefined) {\n      data = this._def.defaultValue();\n    }\n    return this._def.innerType._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  removeDefault() {\n    return this._def.innerType;\n  }\n};\nZodDefault.create = (type, params2) => {\n  return new ZodDefault({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodDefault,\n    defaultValue: typeof params2.default === \"function\" ? params2.default : () => params2.default,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodCatch = class extends ZodType {\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    const newCtx = {\n      ...ctx,\n      common: {\n        ...ctx.common,\n        issues: []\n      }\n    };\n    const result = this._def.innerType._parse({\n      data: newCtx.data,\n      path: newCtx.path,\n      parent: {\n        ...newCtx\n      }\n    });\n    if (isAsync(result)) {\n      return result.then(result2 => {\n        return {\n          status: \"valid\",\n          value: result2.status === \"valid\" ? result2.value : this._def.catchValue({\n            get error() {\n              return new ZodError(newCtx.common.issues);\n            },\n            input: newCtx.data\n          })\n        };\n      });\n    } else {\n      return {\n        status: \"valid\",\n        value: result.status === \"valid\" ? result.value : this._def.catchValue({\n          get error() {\n            return new ZodError(newCtx.common.issues);\n          },\n          input: newCtx.data\n        })\n      };\n    }\n  }\n  removeCatch() {\n    return this._def.innerType;\n  }\n};\nZodCatch.create = (type, params2) => {\n  return new ZodCatch({\n    innerType: type,\n    typeName: ZodFirstPartyTypeKind.ZodCatch,\n    catchValue: typeof params2.catch === \"function\" ? params2.catch : () => params2.catch,\n    ...processCreateParams(params2)\n  });\n};\nvar ZodNaN = class extends ZodType {\n  _parse(input) {\n    const parsedType = this._getType(input);\n    if (parsedType !== ZodParsedType.nan) {\n      const ctx = this._getOrReturnCtx(input);\n      addIssueToContext(ctx, {\n        code: ZodIssueCode.invalid_type,\n        expected: ZodParsedType.nan,\n        received: ctx.parsedType\n      });\n      return INVALID;\n    }\n    return {\n      status: \"valid\",\n      value: input.data\n    };\n  }\n};\nZodNaN.create = params2 => {\n  return new ZodNaN({\n    typeName: ZodFirstPartyTypeKind.ZodNaN,\n    ...processCreateParams(params2)\n  });\n};\nvar BRAND = Symbol(\"zod_brand\");\nvar ZodBranded = class extends ZodType {\n  _parse(input) {\n    const {\n      ctx\n    } = this._processInputParams(input);\n    const data = ctx.data;\n    return this._def.type._parse({\n      data,\n      path: ctx.path,\n      parent: ctx\n    });\n  }\n  unwrap() {\n    return this._def.type;\n  }\n};\nvar ZodPipeline = class extends ZodType {\n  _parse(input) {\n    const {\n      status,\n      ctx\n    } = this._processInputParams(input);\n    if (ctx.common.async) {\n      const handleAsync = async () => {\n        const inResult = await this._def.in._parseAsync({\n          data: ctx.data,\n          path: ctx.path,\n          parent: ctx\n        });\n        if (inResult.status === \"aborted\") return INVALID;\n        if (inResult.status === \"dirty\") {\n          status.dirty();\n          return DIRTY(inResult.value);\n        } else {\n          return this._def.out._parseAsync({\n            data: inResult.value,\n            path: ctx.path,\n            parent: ctx\n          });\n        }\n      };\n      return handleAsync();\n    } else {\n      const inResult = this._def.in._parseSync({\n        data: ctx.data,\n        path: ctx.path,\n        parent: ctx\n      });\n      if (inResult.status === \"aborted\") return INVALID;\n      if (inResult.status === \"dirty\") {\n        status.dirty();\n        return {\n          status: \"dirty\",\n          value: inResult.value\n        };\n      } else {\n        return this._def.out._parseSync({\n          data: inResult.value,\n          path: ctx.path,\n          parent: ctx\n        });\n      }\n    }\n  }\n  static create(a, b) {\n    return new ZodPipeline({\n      in: a,\n      out: b,\n      typeName: ZodFirstPartyTypeKind.ZodPipeline\n    });\n  }\n};\nvar custom = (check, params2 = {}, fatal) => {\n  if (check) return ZodAny.create().superRefine((data, ctx) => {\n    var _a, _b;\n    if (!check(data)) {\n      const p = typeof params2 === \"function\" ? params2(data) : typeof params2 === \"string\" ? {\n        message: params2\n      } : params2;\n      const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n      const p2 = typeof p === \"string\" ? {\n        message: p\n      } : p;\n      ctx.addIssue({\n        code: \"custom\",\n        ...p2,\n        fatal: _fatal\n      });\n    }\n  });\n  return ZodAny.create();\n};\nvar late = {\n  object: ZodObject.lazycreate\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind2) {\n  ZodFirstPartyTypeKind2[\"ZodString\"] = \"ZodString\";\n  ZodFirstPartyTypeKind2[\"ZodNumber\"] = \"ZodNumber\";\n  ZodFirstPartyTypeKind2[\"ZodNaN\"] = \"ZodNaN\";\n  ZodFirstPartyTypeKind2[\"ZodBigInt\"] = \"ZodBigInt\";\n  ZodFirstPartyTypeKind2[\"ZodBoolean\"] = \"ZodBoolean\";\n  ZodFirstPartyTypeKind2[\"ZodDate\"] = \"ZodDate\";\n  ZodFirstPartyTypeKind2[\"ZodSymbol\"] = \"ZodSymbol\";\n  ZodFirstPartyTypeKind2[\"ZodUndefined\"] = \"ZodUndefined\";\n  ZodFirstPartyTypeKind2[\"ZodNull\"] = \"ZodNull\";\n  ZodFirstPartyTypeKind2[\"ZodAny\"] = \"ZodAny\";\n  ZodFirstPartyTypeKind2[\"ZodUnknown\"] = \"ZodUnknown\";\n  ZodFirstPartyTypeKind2[\"ZodNever\"] = \"ZodNever\";\n  ZodFirstPartyTypeKind2[\"ZodVoid\"] = \"ZodVoid\";\n  ZodFirstPartyTypeKind2[\"ZodArray\"] = \"ZodArray\";\n  ZodFirstPartyTypeKind2[\"ZodObject\"] = \"ZodObject\";\n  ZodFirstPartyTypeKind2[\"ZodUnion\"] = \"ZodUnion\";\n  ZodFirstPartyTypeKind2[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n  ZodFirstPartyTypeKind2[\"ZodIntersection\"] = \"ZodIntersection\";\n  ZodFirstPartyTypeKind2[\"ZodTuple\"] = \"ZodTuple\";\n  ZodFirstPartyTypeKind2[\"ZodRecord\"] = \"ZodRecord\";\n  ZodFirstPartyTypeKind2[\"ZodMap\"] = \"ZodMap\";\n  ZodFirstPartyTypeKind2[\"ZodSet\"] = \"ZodSet\";\n  ZodFirstPartyTypeKind2[\"ZodFunction\"] = \"ZodFunction\";\n  ZodFirstPartyTypeKind2[\"ZodLazy\"] = \"ZodLazy\";\n  ZodFirstPartyTypeKind2[\"ZodLiteral\"] = \"ZodLiteral\";\n  ZodFirstPartyTypeKind2[\"ZodEnum\"] = \"ZodEnum\";\n  ZodFirstPartyTypeKind2[\"ZodEffects\"] = \"ZodEffects\";\n  ZodFirstPartyTypeKind2[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n  ZodFirstPartyTypeKind2[\"ZodOptional\"] = \"ZodOptional\";\n  ZodFirstPartyTypeKind2[\"ZodNullable\"] = \"ZodNullable\";\n  ZodFirstPartyTypeKind2[\"ZodDefault\"] = \"ZodDefault\";\n  ZodFirstPartyTypeKind2[\"ZodCatch\"] = \"ZodCatch\";\n  ZodFirstPartyTypeKind2[\"ZodPromise\"] = \"ZodPromise\";\n  ZodFirstPartyTypeKind2[\"ZodBranded\"] = \"ZodBranded\";\n  ZodFirstPartyTypeKind2[\"ZodPipeline\"] = \"ZodPipeline\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nvar instanceOfType = (cls, params2 = {\n  message: `Input not instance of ${cls.name}`\n}) => custom(data => data instanceof cls, params2);\nvar stringType = ZodString.create;\nvar numberType = ZodNumber.create;\nvar nanType = ZodNaN.create;\nvar bigIntType = ZodBigInt.create;\nvar booleanType = ZodBoolean.create;\nvar dateType = ZodDate.create;\nvar symbolType = ZodSymbol.create;\nvar undefinedType = ZodUndefined.create;\nvar nullType = ZodNull.create;\nvar anyType = ZodAny.create;\nvar unknownType = ZodUnknown.create;\nvar neverType = ZodNever.create;\nvar voidType = ZodVoid.create;\nvar arrayType = ZodArray.create;\nvar objectType = ZodObject.create;\nvar strictObjectType = ZodObject.strictCreate;\nvar unionType = ZodUnion.create;\nvar discriminatedUnionType = ZodDiscriminatedUnion.create;\nvar intersectionType = ZodIntersection.create;\nvar tupleType = ZodTuple.create;\nvar recordType = ZodRecord.create;\nvar mapType = ZodMap.create;\nvar setType = ZodSet.create;\nvar functionType = ZodFunction.create;\nvar lazyType = ZodLazy.create;\nvar literalType = ZodLiteral.create;\nvar enumType = ZodEnum.create;\nvar nativeEnumType = ZodNativeEnum.create;\nvar promiseType = ZodPromise.create;\nvar effectsType = ZodEffects.create;\nvar optionalType = ZodOptional.create;\nvar nullableType = ZodNullable.create;\nvar preprocessType = ZodEffects.createWithPreprocess;\nvar pipelineType = ZodPipeline.create;\nvar ostring = () => stringType().optional();\nvar onumber = () => numberType().optional();\nvar oboolean = () => booleanType().optional();\nvar coerce = {\n  string: arg => ZodString.create({\n    ...arg,\n    coerce: true\n  }),\n  number: arg => ZodNumber.create({\n    ...arg,\n    coerce: true\n  }),\n  boolean: arg => ZodBoolean.create({\n    ...arg,\n    coerce: true\n  }),\n  bigint: arg => ZodBigInt.create({\n    ...arg,\n    coerce: true\n  }),\n  date: arg => ZodDate.create({\n    ...arg,\n    coerce: true\n  })\n};\nvar NEVER = INVALID;\nvar z = /* @__PURE__ */Object.freeze({\n  __proto__: null,\n  defaultErrorMap: errorMap,\n  setErrorMap,\n  getErrorMap,\n  makeIssue,\n  EMPTY_PATH,\n  addIssueToContext,\n  ParseStatus,\n  INVALID,\n  DIRTY,\n  OK,\n  isAborted,\n  isDirty,\n  isValid,\n  isAsync,\n  get util() {\n    return util;\n  },\n  get objectUtil() {\n    return objectUtil;\n  },\n  ZodParsedType,\n  getParsedType,\n  ZodType,\n  ZodString,\n  ZodNumber,\n  ZodBigInt,\n  ZodBoolean,\n  ZodDate,\n  ZodSymbol,\n  ZodUndefined,\n  ZodNull,\n  ZodAny,\n  ZodUnknown,\n  ZodNever,\n  ZodVoid,\n  ZodArray,\n  ZodObject,\n  ZodUnion,\n  ZodDiscriminatedUnion,\n  ZodIntersection,\n  ZodTuple,\n  ZodRecord,\n  ZodMap,\n  ZodSet,\n  ZodFunction,\n  ZodLazy,\n  ZodLiteral,\n  ZodEnum,\n  ZodNativeEnum,\n  ZodPromise,\n  ZodEffects,\n  ZodTransformer: ZodEffects,\n  ZodOptional,\n  ZodNullable,\n  ZodDefault,\n  ZodCatch,\n  ZodNaN,\n  BRAND,\n  ZodBranded,\n  ZodPipeline,\n  custom,\n  Schema: ZodType,\n  ZodSchema: ZodType,\n  late,\n  get ZodFirstPartyTypeKind() {\n    return ZodFirstPartyTypeKind;\n  },\n  coerce,\n  any: anyType,\n  array: arrayType,\n  bigint: bigIntType,\n  boolean: booleanType,\n  date: dateType,\n  discriminatedUnion: discriminatedUnionType,\n  effect: effectsType,\n  \"enum\": enumType,\n  \"function\": functionType,\n  \"instanceof\": instanceOfType,\n  intersection: intersectionType,\n  lazy: lazyType,\n  literal: literalType,\n  map: mapType,\n  nan: nanType,\n  nativeEnum: nativeEnumType,\n  never: neverType,\n  \"null\": nullType,\n  nullable: nullableType,\n  number: numberType,\n  object: objectType,\n  oboolean,\n  onumber,\n  optional: optionalType,\n  ostring,\n  pipeline: pipelineType,\n  preprocess: preprocessType,\n  promise: promiseType,\n  record: recordType,\n  set: setType,\n  strictObject: strictObjectType,\n  string: stringType,\n  symbol: symbolType,\n  transformer: effectsType,\n  tuple: tupleType,\n  \"undefined\": undefinedType,\n  union: unionType,\n  unknown: unknownType,\n  \"void\": voidType,\n  NEVER,\n  ZodIssueCode,\n  quotelessJson,\n  ZodError\n});\n\n// ../common-web/src/check.ts\nvar check_exports = {};\n__export(check_exports, {\n  assure: () => assure,\n  is: () => is,\n  isObject: () => isObject\n});\nvar is = (obj, def2) => {\n  return def2.safeParse(obj).success;\n};\nvar assure = (def2, obj) => {\n  return def2.parse(obj);\n};\nvar isObject = obj => {\n  return typeof obj === \"object\" && obj !== null;\n};\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/varint.js\nvar encode_1 = encode;\nvar MSB = 128;\nvar REST = 127;\nvar MSBALL = ~REST;\nvar INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128;\nvar REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0,\n    offset = offset || 0,\n    shift = 0,\n    counter = offset,\n    b,\n    l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError(\"Could not decode varint\");\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nvar varint_default = _brrp_varint;\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/varint.js\nvar decode2 = (data, offset = 0) => {\n  const code2 = varint_default.decode(data, offset);\n  return [code2, varint_default.decode.bytes];\n};\nvar encodeTo = (int, target, offset = 0) => {\n  varint_default.encode(int, target, offset);\n  return target;\n};\nvar encodingLength = int => {\n  return varint_default.encodingLength(int);\n};\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bytes.js\nvar empty = new Uint8Array(0);\nvar equals = (aa, bb) => {\n  if (aa === bb) return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nvar coerce2 = o => {\n  if (o instanceof Uint8Array && o.constructor.name === \"Uint8Array\") return o;\n  if (o instanceof ArrayBuffer) return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error(\"Unknown type, must be binary type\");\n};\nvar fromString = str => new TextEncoder().encode(str);\nvar toString = b => new TextDecoder().decode(b);\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/digest.js\nvar create = (code2, digest2) => {\n  const size = digest2.byteLength;\n  const sizeOffset = encodingLength(code2);\n  const digestOffset = sizeOffset + encodingLength(size);\n  const bytes2 = new Uint8Array(digestOffset + size);\n  encodeTo(code2, bytes2, 0);\n  encodeTo(size, bytes2, sizeOffset);\n  bytes2.set(digest2, digestOffset);\n  return new Digest(code2, size, digest2, bytes2);\n};\nvar decode3 = multihash => {\n  const bytes2 = coerce2(multihash);\n  const [code2, sizeOffset] = decode2(bytes2);\n  const [size, digestOffset] = decode2(bytes2.subarray(sizeOffset));\n  const digest2 = bytes2.subarray(sizeOffset + digestOffset);\n  if (digest2.byteLength !== size) {\n    throw new Error(\"Incorrect length\");\n  }\n  return new Digest(code2, size, digest2, bytes2);\n};\nvar equals2 = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equals(a.bytes, b.bytes);\n  }\n};\nvar Digest = class {\n  constructor(code2, size, digest2, bytes2) {\n    this.code = code2;\n    this.size = size;\n    this.digest = digest2;\n    this.bytes = bytes2;\n  }\n};\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js\nvar base58_exports = {};\n__export(base58_exports, {\n  base58btc: () => base58btc,\n  base58flickr: () => base58flickr\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/vendor/base-x.js\nfunction base(ALPHABET, name2) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError(\"Alphabet too long\");\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + \" is ambiguous\");\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode5(source) {\n    if (source instanceof Uint8Array) ;else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError(\"Expected Uint8Array\");\n    }\n    if (source.length === 0) {\n      return \"\";\n    }\n    var zeroes = 0;\n    var length2 = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i2 = 0;\n      for (var it1 = size - 1; (carry !== 0 || i2 < length2) && it1 !== -1; it1--, i2++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error(\"Non-zero carry\");\n      }\n      length2 = i2;\n      pbegin++;\n    }\n    var it2 = size - length2;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== \"string\") {\n      throw new TypeError(\"Expected String\");\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === \" \") {\n      return;\n    }\n    var zeroes = 0;\n    var length2 = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i2 = 0;\n      for (var it3 = size - 1; (carry !== 0 || i2 < length2) && it3 !== -1; it3--, i2++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error(\"Non-zero carry\");\n      }\n      length2 = i2;\n      psz++;\n    }\n    if (source[psz] === \" \") {\n      return;\n    }\n    var it4 = size - length2;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j2 = zeroes;\n    while (it4 !== size) {\n      vch[j2++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode6(string3) {\n    var buffer = decodeUnsafe(string3);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${name2} character`);\n  }\n  return {\n    encode: encode5,\n    decodeUnsafe,\n    decode: decode6\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nvar base_x_default = _brrp__multiformats_scope_baseX;\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base.js\nvar Encoder = class {\n  constructor(name2, prefix, baseEncode) {\n    this.name = name2;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes2) {\n    if (bytes2 instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes2)}`;\n    } else {\n      throw Error(\"Unknown type, must be binary type\");\n    }\n  }\n};\nvar Decoder = class {\n  constructor(name2, prefix, baseDecode) {\n    this.name = name2;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === void 0) {\n      throw new Error(\"Invalid prefix character\");\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === \"string\") {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error(\"Can only multibase decode strings\");\n    }\n  }\n  or(decoder2) {\n    return or(this, decoder2);\n  }\n};\nvar ComposedDecoder = class {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder2) {\n    return or(this, decoder2);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder2 = this.decoders[prefix];\n    if (decoder2) {\n      return decoder2.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n  }\n};\nvar or = (left, right) => new ComposedDecoder({\n  ...(left.decoders || {\n    [left.prefix]: left\n  }),\n  ...(right.decoders || {\n    [right.prefix]: right\n  })\n});\nvar Codec = class {\n  constructor(name2, prefix, baseEncode, baseDecode) {\n    this.name = name2;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name2, prefix, baseEncode);\n    this.decoder = new Decoder(name2, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n};\nvar from = ({\n  name: name2,\n  prefix,\n  encode: encode5,\n  decode: decode6\n}) => new Codec(name2, prefix, encode5, decode6);\nvar baseX = ({\n  prefix,\n  name: name2,\n  alphabet: alphabet2\n}) => {\n  const {\n    encode: encode5,\n    decode: decode6\n  } = base_x_default(alphabet2, name2);\n  return from({\n    prefix,\n    name: name2,\n    encode: encode5,\n    decode: text => coerce2(decode6(text))\n  });\n};\nvar decode4 = (string3, alphabet2, bitsPerChar, name2) => {\n  const codes = {};\n  for (let i = 0; i < alphabet2.length; ++i) {\n    codes[alphabet2[i]] = i;\n  }\n  let end = string3.length;\n  while (string3[end - 1] === \"=\") {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string3[i]];\n    if (value === void 0) {\n      throw new SyntaxError(`Non-${name2} character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError(\"Unexpected end of data\");\n  }\n  return out;\n};\nvar encode2 = (data, alphabet2, bitsPerChar) => {\n  const pad = alphabet2[alphabet2.length - 1] === \"=\";\n  const mask = (1 << bitsPerChar) - 1;\n  let out = \"\";\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet2[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet2[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += \"=\";\n    }\n  }\n  return out;\n};\nvar rfc4648 = ({\n  name: name2,\n  prefix,\n  bitsPerChar,\n  alphabet: alphabet2\n}) => {\n  return from({\n    prefix,\n    name: name2,\n    encode(input) {\n      return encode2(input, alphabet2, bitsPerChar);\n    },\n    decode(input) {\n      return decode4(input, alphabet2, bitsPerChar, name2);\n    }\n  });\n};\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base58.js\nvar base58btc = baseX({\n  name: \"base58btc\",\n  prefix: \"z\",\n  alphabet: \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\"\n});\nvar base58flickr = baseX({\n  name: \"base58flickr\",\n  prefix: \"Z\",\n  alphabet: \"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ\"\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base32.js\nvar base32_exports = {};\n__export(base32_exports, {\n  base32: () => base32,\n  base32hex: () => base32hex,\n  base32hexpad: () => base32hexpad,\n  base32hexpadupper: () => base32hexpadupper,\n  base32hexupper: () => base32hexupper,\n  base32pad: () => base32pad,\n  base32padupper: () => base32padupper,\n  base32upper: () => base32upper,\n  base32z: () => base32z\n});\nvar base32 = rfc4648({\n  prefix: \"b\",\n  name: \"base32\",\n  alphabet: \"abcdefghijklmnopqrstuvwxyz234567\",\n  bitsPerChar: 5\n});\nvar base32upper = rfc4648({\n  prefix: \"B\",\n  name: \"base32upper\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\",\n  bitsPerChar: 5\n});\nvar base32pad = rfc4648({\n  prefix: \"c\",\n  name: \"base32pad\",\n  alphabet: \"abcdefghijklmnopqrstuvwxyz234567=\",\n  bitsPerChar: 5\n});\nvar base32padupper = rfc4648({\n  prefix: \"C\",\n  name: \"base32padupper\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=\",\n  bitsPerChar: 5\n});\nvar base32hex = rfc4648({\n  prefix: \"v\",\n  name: \"base32hex\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuv\",\n  bitsPerChar: 5\n});\nvar base32hexupper = rfc4648({\n  prefix: \"V\",\n  name: \"base32hexupper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV\",\n  bitsPerChar: 5\n});\nvar base32hexpad = rfc4648({\n  prefix: \"t\",\n  name: \"base32hexpad\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuv=\",\n  bitsPerChar: 5\n});\nvar base32hexpadupper = rfc4648({\n  prefix: \"T\",\n  name: \"base32hexpadupper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUV=\",\n  bitsPerChar: 5\n});\nvar base32z = rfc4648({\n  prefix: \"h\",\n  name: \"base32z\",\n  alphabet: \"ybndrfg8ejkmcpqxot1uwisza345h769\",\n  bitsPerChar: 5\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/cid.js\nvar CID = class {\n  constructor(version2, code2, multihash, bytes2) {\n    this.code = code2;\n    this.version = version2;\n    this.multihash = multihash;\n    this.bytes = bytes2;\n    this.byteOffset = bytes2.byteOffset;\n    this.byteLength = bytes2.byteLength;\n    this.asCID = this;\n    this._baseCache = /* @__PURE__ */new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n      case 0:\n        {\n          return this;\n        }\n      default:\n        {\n          const {\n            code: code2,\n            multihash\n          } = this;\n          if (code2 !== DAG_PB_CODE) {\n            throw new Error(\"Cannot convert a non dag-pb CID to CIDv0\");\n          }\n          if (multihash.code !== SHA_256_CODE) {\n            throw new Error(\"Cannot convert non sha2-256 multihash CID to CIDv0\");\n          }\n          return CID.createV0(multihash);\n        }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n      case 0:\n        {\n          const {\n            code: code2,\n            digest: digest2\n          } = this.multihash;\n          const multihash = create(code2, digest2);\n          return CID.createV1(this.code, multihash);\n        }\n      case 1:\n        {\n          return this;\n        }\n      default:\n        {\n          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n        }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && equals2(this.multihash, other.multihash);\n  }\n  toString(base3) {\n    const {\n      bytes: bytes2,\n      version: version2,\n      _baseCache\n    } = this;\n    switch (version2) {\n      case 0:\n        return toStringV0(bytes2, _baseCache, base3 || base58btc.encoder);\n      default:\n        return toStringV1(bytes2, _baseCache, base3 || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return \"CID\";\n  }\n  [Symbol.for(\"nodejs.util.inspect.custom\")]() {\n    return \"CID(\" + this.toString() + \")\";\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error(\"Deprecated, use .toString()\");\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error(\"Deprecated .buffer property, use .bytes to get Uint8Array instead\");\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {\n        version: version2,\n        code: code2,\n        multihash,\n        bytes: bytes2\n      } = value;\n      return new CID(version2, code2, multihash, bytes2 || encodeCID(version2, code2, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {\n        version: version2,\n        multihash,\n        code: code2\n      } = value;\n      const digest2 = decode3(multihash);\n      return CID.create(version2, code2, digest2);\n    } else {\n      return null;\n    }\n  }\n  static create(version2, code2, digest2) {\n    if (typeof code2 !== \"number\") {\n      throw new Error(\"String codecs are no longer supported\");\n    }\n    switch (version2) {\n      case 0:\n        {\n          if (code2 !== DAG_PB_CODE) {\n            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n          } else {\n            return new CID(version2, code2, digest2, digest2.bytes);\n          }\n        }\n      case 1:\n        {\n          const bytes2 = encodeCID(version2, code2, digest2.bytes);\n          return new CID(version2, code2, digest2, bytes2);\n        }\n      default:\n        {\n          throw new Error(\"Invalid version\");\n        }\n    }\n  }\n  static createV0(digest2) {\n    return CID.create(0, DAG_PB_CODE, digest2);\n  }\n  static createV1(code2, digest2) {\n    return CID.create(1, code2, digest2);\n  }\n  static decode(bytes2) {\n    const [cid2, remainder] = CID.decodeFirst(bytes2);\n    if (remainder.length) {\n      throw new Error(\"Incorrect length\");\n    }\n    return cid2;\n  }\n  static decodeFirst(bytes2) {\n    const specs = CID.inspectBytes(bytes2);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce2(bytes2.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error(\"Incorrect length\");\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest2 = new Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid2 = specs.version === 0 ? CID.createV0(digest2) : CID.createV1(specs.codec, digest2);\n    return [cid2, bytes2.subarray(specs.size)];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length2] = decode2(initialBytes.subarray(offset));\n      offset += length2;\n      return i;\n    };\n    let version2 = next();\n    let codec = DAG_PB_CODE;\n    if (version2 === 18) {\n      version2 = 0;\n      offset = 0;\n    } else if (version2 === 1) {\n      codec = next();\n    }\n    if (version2 !== 0 && version2 !== 1) {\n      throw new RangeError(`Invalid CID version ${version2}`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version: version2,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base3) {\n    const [prefix, bytes2] = parseCIDtoBytes(source, base3);\n    const cid2 = CID.decode(bytes2);\n    cid2._baseCache.set(prefix, source);\n    return cid2;\n  }\n};\nvar parseCIDtoBytes = (source, base3) => {\n  switch (source[0]) {\n    case \"Q\":\n      {\n        const decoder2 = base3 || base58btc;\n        return [base58btc.prefix, decoder2.decode(`${base58btc.prefix}${source}`)];\n      }\n    case base58btc.prefix:\n      {\n        const decoder2 = base3 || base58btc;\n        return [base58btc.prefix, decoder2.decode(source)];\n      }\n    case base32.prefix:\n      {\n        const decoder2 = base3 || base32;\n        return [base32.prefix, decoder2.decode(source)];\n      }\n    default:\n      {\n        if (base3 == null) {\n          throw Error(\"To parse non base32 or base58btc encoded CID multibase decoder must be provided\");\n        }\n        return [source[0], base3.decode(source)];\n      }\n  }\n};\nvar toStringV0 = (bytes2, cache, base3) => {\n  const {\n    prefix\n  } = base3;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base3.name} encoding`);\n  }\n  const cid2 = cache.get(prefix);\n  if (cid2 == null) {\n    const cid3 = base3.encode(bytes2).slice(1);\n    cache.set(prefix, cid3);\n    return cid3;\n  } else {\n    return cid2;\n  }\n};\nvar toStringV1 = (bytes2, cache, base3) => {\n  const {\n    prefix\n  } = base3;\n  const cid2 = cache.get(prefix);\n  if (cid2 == null) {\n    const cid3 = base3.encode(bytes2);\n    cache.set(prefix, cid3);\n    return cid3;\n  } else {\n    return cid2;\n  }\n};\nvar DAG_PB_CODE = 112;\nvar SHA_256_CODE = 18;\nvar encodeCID = (version2, code2, multihash) => {\n  const codeOffset = encodingLength(version2);\n  const hashOffset = codeOffset + encodingLength(code2);\n  const bytes2 = new Uint8Array(hashOffset + multihash.byteLength);\n  encodeTo(version2, bytes2, 0);\n  encodeTo(code2, bytes2, codeOffset);\n  bytes2.set(multihash, hashOffset);\n  return bytes2;\n};\nvar cidSymbol = Symbol.for(\"@ipld/js-cid/CID\");\nvar readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nvar hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nvar version = \"0.0.0-dev\";\nvar deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nvar IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/identity.js\nvar identity_exports = {};\n__export(identity_exports, {\n  identity: () => identity\n});\nvar identity = from({\n  prefix: \"\\0\",\n  name: \"identity\",\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base2.js\nvar base2_exports = {};\n__export(base2_exports, {\n  base2: () => base2\n});\nvar base2 = rfc4648({\n  prefix: \"0\",\n  name: \"base2\",\n  alphabet: \"01\",\n  bitsPerChar: 1\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base8.js\nvar base8_exports = {};\n__export(base8_exports, {\n  base8: () => base8\n});\nvar base8 = rfc4648({\n  prefix: \"7\",\n  name: \"base8\",\n  alphabet: \"01234567\",\n  bitsPerChar: 3\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base10.js\nvar base10_exports = {};\n__export(base10_exports, {\n  base10: () => base10\n});\nvar base10 = baseX({\n  prefix: \"9\",\n  name: \"base10\",\n  alphabet: \"0123456789\"\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base16.js\nvar base16_exports = {};\n__export(base16_exports, {\n  base16: () => base16,\n  base16upper: () => base16upper\n});\nvar base16 = rfc4648({\n  prefix: \"f\",\n  name: \"base16\",\n  alphabet: \"0123456789abcdef\",\n  bitsPerChar: 4\n});\nvar base16upper = rfc4648({\n  prefix: \"F\",\n  name: \"base16upper\",\n  alphabet: \"0123456789ABCDEF\",\n  bitsPerChar: 4\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base36.js\nvar base36_exports = {};\n__export(base36_exports, {\n  base36: () => base36,\n  base36upper: () => base36upper\n});\nvar base36 = baseX({\n  prefix: \"k\",\n  name: \"base36\",\n  alphabet: \"0123456789abcdefghijklmnopqrstuvwxyz\"\n});\nvar base36upper = baseX({\n  prefix: \"K\",\n  name: \"base36upper\",\n  alphabet: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base64.js\nvar base64_exports = {};\n__export(base64_exports, {\n  base64: () => base64,\n  base64pad: () => base64pad,\n  base64url: () => base64url,\n  base64urlpad: () => base64urlpad\n});\nvar base64 = rfc4648({\n  prefix: \"m\",\n  name: \"base64\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n  bitsPerChar: 6\n});\nvar base64pad = rfc4648({\n  prefix: \"M\",\n  name: \"base64pad\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  bitsPerChar: 6\n});\nvar base64url = rfc4648({\n  prefix: \"u\",\n  name: \"base64url\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n  bitsPerChar: 6\n});\nvar base64urlpad = rfc4648({\n  prefix: \"U\",\n  name: \"base64urlpad\",\n  alphabet: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\",\n  bitsPerChar: 6\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/bases/base256emoji.js\nvar base256emoji_exports = {};\n__export(base256emoji_exports, {\n  base256emoji: () => base256emoji\n});\nvar alphabet = Array.from(\"\\u{1F680}\\u{1FA90}\\u2604\\u{1F6F0}\\u{1F30C}\\u{1F311}\\u{1F312}\\u{1F313}\\u{1F314}\\u{1F315}\\u{1F316}\\u{1F317}\\u{1F318}\\u{1F30D}\\u{1F30F}\\u{1F30E}\\u{1F409}\\u2600\\u{1F4BB}\\u{1F5A5}\\u{1F4BE}\\u{1F4BF}\\u{1F602}\\u2764\\u{1F60D}\\u{1F923}\\u{1F60A}\\u{1F64F}\\u{1F495}\\u{1F62D}\\u{1F618}\\u{1F44D}\\u{1F605}\\u{1F44F}\\u{1F601}\\u{1F525}\\u{1F970}\\u{1F494}\\u{1F496}\\u{1F499}\\u{1F622}\\u{1F914}\\u{1F606}\\u{1F644}\\u{1F4AA}\\u{1F609}\\u263A\\u{1F44C}\\u{1F917}\\u{1F49C}\\u{1F614}\\u{1F60E}\\u{1F607}\\u{1F339}\\u{1F926}\\u{1F389}\\u{1F49E}\\u270C\\u2728\\u{1F937}\\u{1F631}\\u{1F60C}\\u{1F338}\\u{1F64C}\\u{1F60B}\\u{1F497}\\u{1F49A}\\u{1F60F}\\u{1F49B}\\u{1F642}\\u{1F493}\\u{1F929}\\u{1F604}\\u{1F600}\\u{1F5A4}\\u{1F603}\\u{1F4AF}\\u{1F648}\\u{1F447}\\u{1F3B6}\\u{1F612}\\u{1F92D}\\u2763\\u{1F61C}\\u{1F48B}\\u{1F440}\\u{1F62A}\\u{1F611}\\u{1F4A5}\\u{1F64B}\\u{1F61E}\\u{1F629}\\u{1F621}\\u{1F92A}\\u{1F44A}\\u{1F973}\\u{1F625}\\u{1F924}\\u{1F449}\\u{1F483}\\u{1F633}\\u270B\\u{1F61A}\\u{1F61D}\\u{1F634}\\u{1F31F}\\u{1F62C}\\u{1F643}\\u{1F340}\\u{1F337}\\u{1F63B}\\u{1F613}\\u2B50\\u2705\\u{1F97A}\\u{1F308}\\u{1F608}\\u{1F918}\\u{1F4A6}\\u2714\\u{1F623}\\u{1F3C3}\\u{1F490}\\u2639\\u{1F38A}\\u{1F498}\\u{1F620}\\u261D\\u{1F615}\\u{1F33A}\\u{1F382}\\u{1F33B}\\u{1F610}\\u{1F595}\\u{1F49D}\\u{1F64A}\\u{1F639}\\u{1F5E3}\\u{1F4AB}\\u{1F480}\\u{1F451}\\u{1F3B5}\\u{1F91E}\\u{1F61B}\\u{1F534}\\u{1F624}\\u{1F33C}\\u{1F62B}\\u26BD\\u{1F919}\\u2615\\u{1F3C6}\\u{1F92B}\\u{1F448}\\u{1F62E}\\u{1F646}\\u{1F37B}\\u{1F343}\\u{1F436}\\u{1F481}\\u{1F632}\\u{1F33F}\\u{1F9E1}\\u{1F381}\\u26A1\\u{1F31E}\\u{1F388}\\u274C\\u270A\\u{1F44B}\\u{1F630}\\u{1F928}\\u{1F636}\\u{1F91D}\\u{1F6B6}\\u{1F4B0}\\u{1F353}\\u{1F4A2}\\u{1F91F}\\u{1F641}\\u{1F6A8}\\u{1F4A8}\\u{1F92C}\\u2708\\u{1F380}\\u{1F37A}\\u{1F913}\\u{1F619}\\u{1F49F}\\u{1F331}\\u{1F616}\\u{1F476}\\u{1F974}\\u25B6\\u27A1\\u2753\\u{1F48E}\\u{1F4B8}\\u2B07\\u{1F628}\\u{1F31A}\\u{1F98B}\\u{1F637}\\u{1F57A}\\u26A0\\u{1F645}\\u{1F61F}\\u{1F635}\\u{1F44E}\\u{1F932}\\u{1F920}\\u{1F927}\\u{1F4CC}\\u{1F535}\\u{1F485}\\u{1F9D0}\\u{1F43E}\\u{1F352}\\u{1F617}\\u{1F911}\\u{1F30A}\\u{1F92F}\\u{1F437}\\u260E\\u{1F4A7}\\u{1F62F}\\u{1F486}\\u{1F446}\\u{1F3A4}\\u{1F647}\\u{1F351}\\u2744\\u{1F334}\\u{1F4A3}\\u{1F438}\\u{1F48C}\\u{1F4CD}\\u{1F940}\\u{1F922}\\u{1F445}\\u{1F4A1}\\u{1F4A9}\\u{1F450}\\u{1F4F8}\\u{1F47B}\\u{1F910}\\u{1F92E}\\u{1F3BC}\\u{1F975}\\u{1F6A9}\\u{1F34E}\\u{1F34A}\\u{1F47C}\\u{1F48D}\\u{1F4E3}\\u{1F942}\");\nvar alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nvar alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode3(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, \"\");\n}\nfunction decode5(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === void 0) {\n      throw new Error(`Non-base256emoji character: ${char}`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nvar base256emoji = from({\n  prefix: \"\\u{1F680}\",\n  name: \"base256emoji\",\n  encode: encode3,\n  decode: decode5\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js\nvar sha2_browser_exports = {};\n__export(sha2_browser_exports, {\n  sha256: () => sha256,\n  sha512: () => sha512\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/hasher.js\nvar from2 = ({\n  name: name2,\n  code: code2,\n  encode: encode5\n}) => new Hasher(name2, code2, encode5);\nvar Hasher = class {\n  constructor(name2, code2, encode5) {\n    this.name = name2;\n    this.code = code2;\n    this.encode = encode5;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? create(this.code, result) : result.then(digest2 => create(this.code, digest2));\n    } else {\n      throw Error(\"Unknown type, must be binary type\");\n    }\n  }\n};\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/sha2-browser.js\nvar sha = name2 => async data => new Uint8Array(await crypto.subtle.digest(name2, data));\nvar sha256 = from2({\n  name: \"sha2-256\",\n  code: 18,\n  encode: sha(\"SHA-256\")\n});\nvar sha512 = from2({\n  name: \"sha2-512\",\n  code: 19,\n  encode: sha(\"SHA-512\")\n});\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/hashes/identity.js\nvar identity_exports2 = {};\n__export(identity_exports2, {\n  identity: () => identity2\n});\nvar code = 0;\nvar name = \"identity\";\nvar encode4 = coerce2;\nvar digest = input => create(code, encode4(input));\nvar identity2 = {\n  code,\n  name,\n  encode: encode4,\n  digest\n};\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/codecs/json.js\nvar textEncoder = new TextEncoder();\nvar textDecoder = new TextDecoder();\n\n// ../../node_modules/.pnpm/multiformats@9.9.0/node_modules/multiformats/esm/src/basics.js\nvar bases = {\n  ...identity_exports,\n  ...base2_exports,\n  ...base8_exports,\n  ...base10_exports,\n  ...base16_exports,\n  ...base32_exports,\n  ...base36_exports,\n  ...base58_exports,\n  ...base64_exports,\n  ...base256emoji_exports\n};\nvar hashes = {\n  ...sha2_browser_exports,\n  ...identity_exports2\n};\n\n// ../../node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/util/bases.js\nfunction createCodec(name2, prefix, encode5, decode6) {\n  return {\n    name: name2,\n    prefix,\n    encoder: {\n      name: name2,\n      prefix,\n      encode: encode5\n    },\n    decoder: {\n      decode: decode6\n    }\n  };\n}\nvar string = createCodec(\"utf8\", \"u\", buf => {\n  const decoder2 = new TextDecoder(\"utf8\");\n  return \"u\" + decoder2.decode(buf);\n}, str => {\n  const encoder2 = new TextEncoder();\n  return encoder2.encode(str.substring(1));\n});\nvar ascii = createCodec(\"ascii\", \"a\", buf => {\n  let string3 = \"a\";\n  for (let i = 0; i < buf.length; i++) {\n    string3 += String.fromCharCode(buf[i]);\n  }\n  return string3;\n}, str => {\n  str = str.substring(1);\n  const buf = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nvar BASES = {\n  utf8: string,\n  \"utf-8\": string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii,\n  binary: ascii,\n  ...bases\n};\nvar bases_default = BASES;\n\n// ../../node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/from-string.js\nfunction fromString2(string3, encoding = \"utf8\") {\n  const base3 = bases_default[encoding];\n  if (!base3) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  return base3.decoder.decode(`${base3.prefix}${string3}`);\n}\n\n// ../../node_modules/.pnpm/uint8arrays@3.0.0/node_modules/uint8arrays/esm/src/to-string.js\nfunction toString2(array2, encoding = \"utf8\") {\n  const base3 = bases_default[encoding];\n  if (!base3) {\n    throw new Error(`Unsupported encoding \"${encoding}\"`);\n  }\n  return base3.encoder.encode(array2).substring(1);\n}\n\n// ../common-web/src/ipld.ts\nvar jsonToIpld = val => {\n  if (Array.isArray(val)) {\n    return val.map(item => jsonToIpld(item));\n  }\n  if (val && typeof val === \"object\") {\n    if (typeof val[\"$link\"] === \"string\" && Object.keys(val).length === 1) {\n      return CID.parse(val[\"$link\"]);\n    }\n    if (typeof val[\"$bytes\"] === \"string\" && Object.keys(val).length === 1) {\n      return fromString2(val[\"$bytes\"], \"base64\");\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = jsonToIpld(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\nvar ipldToJson = val => {\n  if (Array.isArray(val)) {\n    return val.map(item => ipldToJson(item));\n  }\n  if (val && typeof val === \"object\") {\n    if (val instanceof Uint8Array) {\n      return {\n        $bytes: toString2(val, \"base64\")\n      };\n    }\n    if (CID.asCID(val)) {\n      return {\n        $link: val.toString()\n      };\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToJson(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\n\n// ../common-web/src/types.ts\nvar cidSchema = z.any().refine(obj => CID.asCID(obj) !== null, {\n  message: \"Not a CID\"\n}).transform(obj => CID.asCID(obj));\nvar schema = {\n  cid: cidSchema,\n  bytes: z.instanceof(Uint8Array),\n  string: z.string(),\n  array: z.array(z.unknown()),\n  map: z.record(z.string(), z.unknown()),\n  unknown: z.unknown()\n};\nvar def = {\n  cid: {\n    name: \"cid\",\n    schema: schema.cid\n  },\n  bytes: {\n    name: \"bytes\",\n    schema: schema.bytes\n  },\n  string: {\n    name: \"string\",\n    schema: schema.string\n  },\n  map: {\n    name: \"map\",\n    schema: schema.map\n  },\n  unknown: {\n    name: \"unknown\",\n    schema: schema.unknown\n  }\n};\n\n// ../common-web/src/times.ts\nvar SECOND = 1e3;\nvar MINUTE = SECOND * 60;\nvar HOUR = MINUTE * 60;\nvar DAY = HOUR * 24;\n\n// ../common-web/src/strings.ts\nvar import_graphemer = __toESM(require_lib());\nvar utf8Len = str => {\n  return new TextEncoder().encode(str).byteLength;\n};\nvar graphemeLen = str => {\n  const splitter = new import_graphemer.default();\n  return splitter.countGraphemes(str);\n};\nvar parseLanguage = langTag => {\n  const parsed = langTag.match(bcp47Regexp);\n  if (!parsed?.groups) return null;\n  const parts = parsed.groups;\n  return {\n    grandfathered: parts.grandfathered,\n    language: parts.language,\n    extlang: parts.extlang,\n    script: parts.script,\n    region: parts.region,\n    variant: parts.variant,\n    extension: parts.extension,\n    privateUse: parts.privateUseA || parts.privateUseB\n  };\n};\nvar validateLanguage = langTag => {\n  return bcp47Regexp.test(langTag);\n};\nvar bcp47Regexp = /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/;\n\n// ../common-web/src/did-doc.ts\nvar isValidDidDoc = doc => {\n  return didDocument.safeParse(doc).success;\n};\nvar getDid = doc => {\n  const id = doc.id;\n  if (typeof id !== \"string\") {\n    throw new Error(\"No `id` on document\");\n  }\n  return id;\n};\nvar getPdsEndpoint = doc => {\n  return getServiceEndpoint(doc, {\n    id: \"#atproto_pds\",\n    type: \"AtprotoPersonalDataServer\"\n  });\n};\nvar getServiceEndpoint = (doc, opts) => {\n  const did2 = getDid(doc);\n  let services = doc.service;\n  if (!services) return void 0;\n  if (typeof services !== \"object\") return void 0;\n  if (!Array.isArray(services)) {\n    services = [services];\n  }\n  const found = services.find(service2 => service2.id === opts.id || service2.id === `${did2}${opts.id}`);\n  if (!found) return void 0;\n  if (found.type !== opts.type) {\n    return void 0;\n  }\n  if (typeof found.serviceEndpoint !== \"string\") {\n    return void 0;\n  }\n  return validateUrl(found.serviceEndpoint);\n};\nvar validateUrl = urlStr => {\n  let url;\n  try {\n    url = new URL(urlStr);\n  } catch {\n    return void 0;\n  }\n  if (![\"http:\", \"https:\"].includes(url.protocol)) {\n    return void 0;\n  } else if (!url.hostname) {\n    return void 0;\n  } else {\n    return urlStr;\n  }\n};\nvar verificationMethod = z.object({\n  id: z.string(),\n  type: z.string(),\n  controller: z.string(),\n  publicKeyMultibase: z.string().optional()\n});\nvar service = z.object({\n  id: z.string(),\n  type: z.string(),\n  serviceEndpoint: z.union([z.string(), z.record(z.unknown())])\n});\nvar didDocument = z.object({\n  id: z.string(),\n  alsoKnownAs: z.array(z.string()).optional(),\n  verificationMethod: z.array(verificationMethod).optional(),\n  service: z.array(service).optional()\n});\n\n// ../lexicon/src/validators/formats.ts\nvar import_iso_datestring_validator = __toESM(require_dist());\nfunction datetime(path, value) {\n  try {\n    if (!(0, import_iso_datestring_validator.isValidISODateString)(value)) {\n      throw new Error();\n    }\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction uri(path, value) {\n  const isUri = value.match(/^\\w+:(?:\\/\\/)?[^\\s/][^\\s]*$/) !== null;\n  if (!isUri) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a uri`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction atUri(path, value) {\n  try {\n    ensureValidAtUri(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid at-uri`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction did(path, value) {\n  try {\n    ensureValidDid(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid did`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction handle(path, value) {\n  try {\n    ensureValidHandle(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid handle`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction atIdentifier(path, value) {\n  const isDid = did(path, value);\n  if (!isDid.success) {\n    const isHandle2 = handle(path, value);\n    if (!isHandle2.success) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be a valid did or a handle`)\n      };\n    }\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction nsid(path, value) {\n  try {\n    ensureValidNsid(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid nsid`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction cid(path, value) {\n  try {\n    CID.parse(value);\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a cid string`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction language(path, value) {\n  if (validateLanguage(value)) {\n    return {\n      success: true,\n      value\n    };\n  }\n  return {\n    success: false,\n    error: new ValidationError(`${path} must be a well-formed BCP 47 language tag`)\n  };\n}\n\n// ../lexicon/src/validators/primitives.ts\nfunction validate(lexicons2, path, def2, value) {\n  switch (def2.type) {\n    case \"boolean\":\n      return boolean(lexicons2, path, def2, value);\n    case \"integer\":\n      return integer(lexicons2, path, def2, value);\n    case \"string\":\n      return string2(lexicons2, path, def2, value);\n    case \"bytes\":\n      return bytes(lexicons2, path, def2, value);\n    case \"cid-link\":\n      return cidLink(lexicons2, path, def2, value);\n    case \"unknown\":\n      return unknown(lexicons2, path, def2, value);\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)\n      };\n  }\n}\nfunction boolean(lexicons2, path, def2, value) {\n  def2 = def2;\n  const type = typeof value;\n  if (type === \"undefined\") {\n    if (typeof def2.default === \"boolean\") {\n      return {\n        success: true,\n        value: def2.default\n      };\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`)\n    };\n  } else if (type !== \"boolean\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`)\n    };\n  }\n  if (typeof def2.const === \"boolean\") {\n    if (value !== def2.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def2.const}`)\n      };\n    }\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction integer(lexicons2, path, def2, value) {\n  def2 = def2;\n  const type = typeof value;\n  if (type === \"undefined\") {\n    if (typeof def2.default === \"number\") {\n      return {\n        success: true,\n        value: def2.default\n      };\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`)\n    };\n  } else if (!Number.isInteger(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`)\n    };\n  }\n  if (typeof def2.const === \"number\") {\n    if (value !== def2.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def2.const}`)\n      };\n    }\n  }\n  if (Array.isArray(def2.enum)) {\n    if (!def2.enum.includes(value)) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be one of (${def2.enum.join(\"|\")})`)\n      };\n    }\n  }\n  if (typeof def2.maximum === \"number\") {\n    if (value > def2.maximum) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} can not be greater than ${def2.maximum}`)\n      };\n    }\n  }\n  if (typeof def2.minimum === \"number\") {\n    if (value < def2.minimum) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} can not be less than ${def2.minimum}`)\n      };\n    }\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction string2(lexicons2, path, def2, value) {\n  def2 = def2;\n  if (typeof value === \"undefined\") {\n    if (typeof def2.default === \"string\") {\n      return {\n        success: true,\n        value: def2.default\n      };\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`)\n    };\n  } else if (typeof value !== \"string\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`)\n    };\n  }\n  if (typeof def2.const === \"string\") {\n    if (value !== def2.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def2.const}`)\n      };\n    }\n  }\n  if (Array.isArray(def2.enum)) {\n    if (!def2.enum.includes(value)) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be one of (${def2.enum.join(\"|\")})`)\n      };\n    }\n  }\n  if (typeof def2.maxLength === \"number\") {\n    if (utf8Len(value) > def2.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not be longer than ${def2.maxLength} characters`)\n      };\n    }\n  }\n  if (typeof def2.minLength === \"number\") {\n    if (utf8Len(value) < def2.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not be shorter than ${def2.minLength} characters`)\n      };\n    }\n  }\n  if (typeof def2.maxGraphemes === \"number\") {\n    if (graphemeLen(value) > def2.maxGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not be longer than ${def2.maxGraphemes} graphemes`)\n      };\n    }\n  }\n  if (typeof def2.minGraphemes === \"number\") {\n    if (graphemeLen(value) < def2.minGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not be shorter than ${def2.minGraphemes} graphemes`)\n      };\n    }\n  }\n  if (typeof def2.format === \"string\") {\n    switch (def2.format) {\n      case \"datetime\":\n        return datetime(path, value);\n      case \"uri\":\n        return uri(path, value);\n      case \"at-uri\":\n        return atUri(path, value);\n      case \"did\":\n        return did(path, value);\n      case \"handle\":\n        return handle(path, value);\n      case \"at-identifier\":\n        return atIdentifier(path, value);\n      case \"nsid\":\n        return nsid(path, value);\n      case \"cid\":\n        return cid(path, value);\n      case \"language\":\n        return language(path, value);\n    }\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction bytes(lexicons2, path, def2, value) {\n  def2 = def2;\n  if (!value || !(value instanceof Uint8Array)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a byte array`)\n    };\n  }\n  if (typeof def2.maxLength === \"number\") {\n    if (value.byteLength > def2.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not be larger than ${def2.maxLength} bytes`)\n      };\n    }\n  }\n  if (typeof def2.minLength === \"number\") {\n    if (value.byteLength < def2.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not be smaller than ${def2.minLength} bytes`)\n      };\n    }\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction cidLink(lexicons2, path, def2, value) {\n  if (CID.asCID(value) === null) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a CID`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction unknown(lexicons2, path, def2, value) {\n  if (!value || typeof value !== \"object\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\n\n// ../lexicon/src/blob-refs.ts\nvar typedJsonBlobRef = z.object({\n  $type: z.literal(\"blob\"),\n  ref: schema.cid,\n  mimeType: z.string(),\n  size: z.number()\n}).strict();\nvar untypedJsonBlobRef = z.object({\n  cid: z.string(),\n  mimeType: z.string()\n}).strict();\nvar jsonBlobRef = z.union([typedJsonBlobRef, untypedJsonBlobRef]);\nvar BlobRef = class {\n  constructor(ref, mimeType, size, original) {\n    this.ref = ref;\n    this.mimeType = mimeType;\n    this.size = size;\n    this.original = original ?? {\n      $type: \"blob\",\n      ref,\n      mimeType,\n      size\n    };\n  }\n  static asBlobRef(obj) {\n    if (check_exports.is(obj, jsonBlobRef)) {\n      return BlobRef.fromJsonRef(obj);\n    }\n    return null;\n  }\n  static fromJsonRef(json) {\n    if (check_exports.is(json, typedJsonBlobRef)) {\n      return new BlobRef(json.ref, json.mimeType, json.size);\n    } else {\n      return new BlobRef(CID.parse(json.cid), json.mimeType, -1, json);\n    }\n  }\n  ipld() {\n    return {\n      $type: \"blob\",\n      ref: this.ref,\n      mimeType: this.mimeType,\n      size: this.size\n    };\n  }\n  toJSON() {\n    return ipldToJson(this.ipld());\n  }\n};\n\n// ../lexicon/src/validators/blob.ts\nfunction blob(lexicons2, path, def2, value) {\n  if (!value || !(value instanceof BlobRef)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} should be a blob ref`)\n    };\n  }\n  return {\n    success: true,\n    value\n  };\n}\n\n// ../lexicon/src/validators/complex.ts\nfunction validate2(lexicons2, path, def2, value) {\n  switch (def2.type) {\n    case \"boolean\":\n      return boolean(lexicons2, path, def2, value);\n    case \"integer\":\n      return integer(lexicons2, path, def2, value);\n    case \"string\":\n      return string2(lexicons2, path, def2, value);\n    case \"bytes\":\n      return bytes(lexicons2, path, def2, value);\n    case \"cid-link\":\n      return cidLink(lexicons2, path, def2, value);\n    case \"unknown\":\n      return unknown(lexicons2, path, def2, value);\n    case \"object\":\n      return object(lexicons2, path, def2, value);\n    case \"array\":\n      return array(lexicons2, path, def2, value);\n    case \"blob\":\n      return blob(lexicons2, path, def2, value);\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def2.type}`)\n      };\n  }\n}\nfunction array(lexicons2, path, def2, value) {\n  if (!Array.isArray(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an array`)\n    };\n  }\n  if (typeof def2.maxLength === \"number\") {\n    if (value.length > def2.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not have more than ${def2.maxLength} elements`)\n      };\n    }\n  }\n  if (typeof def2.minLength === \"number\") {\n    if (value.length < def2.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must not have fewer than ${def2.minLength} elements`)\n      };\n    }\n  }\n  const itemsDef = def2.items;\n  for (let i = 0; i < value.length; i++) {\n    const itemValue = value[i];\n    const itemPath = `${path}/${i}`;\n    const res = validateOneOf(lexicons2, itemPath, itemsDef, itemValue);\n    if (!res.success) {\n      return res;\n    }\n  }\n  return {\n    success: true,\n    value\n  };\n}\nfunction object(lexicons2, path, def2, value) {\n  def2 = def2;\n  if (!value || typeof value !== \"object\") {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`)\n    };\n  }\n  const requiredProps = new Set(def2.required);\n  const nullableProps = new Set(def2.nullable);\n  let resultValue = value;\n  if (typeof def2.properties === \"object\") {\n    for (const key in def2.properties) {\n      if (value[key] === null && nullableProps.has(key)) {\n        continue;\n      }\n      const propDef = def2.properties[key];\n      const propPath = `${path}/${key}`;\n      const validated = validateOneOf(lexicons2, propPath, propDef, value[key]);\n      const propValue = validated.success ? validated.value : value[key];\n      const propIsUndefined = typeof propValue === \"undefined\";\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`)\n        };\n      } else if (!propIsUndefined && !validated.success) {\n        return validated;\n      }\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          resultValue = {\n            ...value\n          };\n        }\n        resultValue[key] = propValue;\n      }\n    }\n  }\n  return {\n    success: true,\n    value: resultValue\n  };\n}\n\n// ../lexicon/src/util.ts\nfunction toLexUri(str, baseUri) {\n  if (str.split(\"#\").length > 2) {\n    throw new Error(\"Uri can only have one hash segment\");\n  }\n  if (str.startsWith(\"lex:\")) {\n    return str;\n  }\n  if (str.startsWith(\"#\")) {\n    if (!baseUri) {\n      throw new Error(`Unable to resolve uri without anchor: ${str}`);\n    }\n    return `${baseUri}${str}`;\n  }\n  return `lex:${str}`;\n}\nfunction validateOneOf(lexicons2, path, def2, value, mustBeObj = false) {\n  let error;\n  let concreteDefs;\n  if (def2.type === \"union\") {\n    if (!isDiscriminatedObject(value)) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be an object which includes the \"$type\" property`)\n      };\n    }\n    if (!refsContainType(def2.refs, value.$type)) {\n      if (def2.closed) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} $type must be one of ${def2.refs.join(\", \")}`)\n        };\n      }\n      return {\n        success: true,\n        value\n      };\n    } else {\n      concreteDefs = toConcreteTypes(lexicons2, {\n        type: \"ref\",\n        ref: value.$type\n      });\n    }\n  } else {\n    concreteDefs = toConcreteTypes(lexicons2, def2);\n  }\n  for (const concreteDef of concreteDefs) {\n    const result = mustBeObj ? object(lexicons2, path, concreteDef, value) : validate2(lexicons2, path, concreteDef, value);\n    if (result.success) {\n      return result;\n    }\n    error ?? (error = result.error);\n  }\n  if (concreteDefs.length > 1) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} did not match any of the expected definitions`)\n    };\n  }\n  return {\n    success: false,\n    error\n  };\n}\nfunction assertValidOneOf(lexicons2, path, def2, value, mustBeObj = false) {\n  const res = validateOneOf(lexicons2, path, def2, value, mustBeObj);\n  if (!res.success) throw res.error;\n  return res.value;\n}\nfunction toConcreteTypes(lexicons2, def2) {\n  if (def2.type === \"ref\") {\n    return [lexicons2.getDefOrThrow(def2.ref)];\n  } else if (def2.type === \"union\") {\n    return def2.refs.map(ref => lexicons2.getDefOrThrow(ref)).flat();\n  } else {\n    return [def2];\n  }\n}\nfunction requiredPropertiesRefinement(object2, ctx) {\n  if (object2.required === void 0) {\n    return;\n  }\n  if (!Array.isArray(object2.required)) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.invalid_type,\n      received: typeof object2.required,\n      expected: \"array\"\n    });\n    return;\n  }\n  if (object2.properties === void 0) {\n    if (object2.required.length > 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Required fields defined but no properties defined`\n      });\n    }\n    return;\n  }\n  for (const field of object2.required) {\n    if (object2.properties[field] === void 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Required field \"${field}\" not defined`\n      });\n    }\n  }\n}\nvar refsContainType = (refs, type) => {\n  const lexUri = toLexUri(type);\n  if (refs.includes(lexUri)) {\n    return true;\n  }\n  if (lexUri.endsWith(\"#main\")) {\n    return refs.includes(lexUri.replace(\"#main\", \"\"));\n  } else {\n    return refs.includes(lexUri + \"#main\");\n  }\n};\n\n// ../lexicon/src/types.ts\nvar lexBoolean = z.object({\n  type: z.literal(\"boolean\"),\n  description: z.string().optional(),\n  default: z.boolean().optional(),\n  const: z.boolean().optional()\n}).strict();\nvar lexInteger = z.object({\n  type: z.literal(\"integer\"),\n  description: z.string().optional(),\n  default: z.number().int().optional(),\n  minimum: z.number().int().optional(),\n  maximum: z.number().int().optional(),\n  enum: z.number().int().array().optional(),\n  const: z.number().int().optional()\n}).strict();\nvar lexStringFormat = z.enum([\"datetime\", \"uri\", \"at-uri\", \"did\", \"handle\", \"at-identifier\", \"nsid\", \"cid\", \"language\"]);\nvar lexString = z.object({\n  type: z.literal(\"string\"),\n  format: lexStringFormat.optional(),\n  description: z.string().optional(),\n  default: z.string().optional(),\n  minLength: z.number().int().optional(),\n  maxLength: z.number().int().optional(),\n  minGraphemes: z.number().int().optional(),\n  maxGraphemes: z.number().int().optional(),\n  enum: z.string().array().optional(),\n  const: z.string().optional(),\n  knownValues: z.string().array().optional()\n}).strict();\nvar lexUnknown = z.object({\n  type: z.literal(\"unknown\"),\n  description: z.string().optional()\n}).strict();\nvar lexPrimitive = z.discriminatedUnion(\"type\", [lexBoolean, lexInteger, lexString, lexUnknown]);\nvar lexBytes = z.object({\n  type: z.literal(\"bytes\"),\n  description: z.string().optional(),\n  maxLength: z.number().optional(),\n  minLength: z.number().optional()\n}).strict();\nvar lexCidLink = z.object({\n  type: z.literal(\"cid-link\"),\n  description: z.string().optional()\n}).strict();\nvar lexIpldType = z.discriminatedUnion(\"type\", [lexBytes, lexCidLink]);\nvar lexRef = z.object({\n  type: z.literal(\"ref\"),\n  description: z.string().optional(),\n  ref: z.string()\n}).strict();\nvar lexRefUnion = z.object({\n  type: z.literal(\"union\"),\n  description: z.string().optional(),\n  refs: z.string().array(),\n  closed: z.boolean().optional()\n}).strict();\nvar lexRefVariant = z.discriminatedUnion(\"type\", [lexRef, lexRefUnion]);\nvar lexBlob = z.object({\n  type: z.literal(\"blob\"),\n  description: z.string().optional(),\n  accept: z.string().array().optional(),\n  maxSize: z.number().optional()\n}).strict();\nvar lexArray = z.object({\n  type: z.literal(\"array\"),\n  description: z.string().optional(),\n  items: z.union([lexPrimitive, lexIpldType, lexBlob, lexRefVariant]),\n  minLength: z.number().int().optional(),\n  maxLength: z.number().int().optional()\n}).strict();\nvar lexPrimitiveArray = lexArray.merge(z.object({\n  items: lexPrimitive\n}).strict());\nvar lexToken = z.object({\n  type: z.literal(\"token\"),\n  description: z.string().optional()\n}).strict();\nvar lexObject = z.object({\n  type: z.literal(\"object\"),\n  description: z.string().optional(),\n  required: z.string().array().optional(),\n  nullable: z.string().array().optional(),\n  properties: z.record(z.union([lexRefVariant, lexIpldType, lexArray, lexBlob, lexPrimitive]))\n}).strict().superRefine(requiredPropertiesRefinement);\nvar lexXrpcParameters = z.object({\n  type: z.literal(\"params\"),\n  description: z.string().optional(),\n  required: z.string().array().optional(),\n  properties: z.record(z.union([lexPrimitive, lexPrimitiveArray]))\n}).strict().superRefine(requiredPropertiesRefinement);\nvar lexXrpcBody = z.object({\n  description: z.string().optional(),\n  encoding: z.string(),\n  schema: z.union([lexRefVariant, lexObject]).optional()\n}).strict();\nvar lexXrpcSubscriptionMessage = z.object({\n  description: z.string().optional(),\n  schema: z.union([lexRefVariant, lexObject]).optional()\n}).strict();\nvar lexXrpcError = z.object({\n  name: z.string(),\n  description: z.string().optional()\n}).strict();\nvar lexXrpcQuery = z.object({\n  type: z.literal(\"query\"),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  output: lexXrpcBody.optional(),\n  errors: lexXrpcError.array().optional()\n}).strict();\nvar lexXrpcProcedure = z.object({\n  type: z.literal(\"procedure\"),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  input: lexXrpcBody.optional(),\n  output: lexXrpcBody.optional(),\n  errors: lexXrpcError.array().optional()\n}).strict();\nvar lexXrpcSubscription = z.object({\n  type: z.literal(\"subscription\"),\n  description: z.string().optional(),\n  parameters: lexXrpcParameters.optional(),\n  message: lexXrpcSubscriptionMessage.optional(),\n  errors: lexXrpcError.array().optional()\n}).strict();\nvar lexRecord = z.object({\n  type: z.literal(\"record\"),\n  description: z.string().optional(),\n  key: z.string().optional(),\n  record: lexObject\n}).strict();\nvar lexUserType = z.custom(val => {\n  if (!val || typeof val !== \"object\") {\n    return;\n  }\n  if (val[\"type\"] === void 0) {\n    return;\n  }\n  switch (val[\"type\"]) {\n    case \"record\":\n      return lexRecord.parse(val);\n    case \"query\":\n      return lexXrpcQuery.parse(val);\n    case \"procedure\":\n      return lexXrpcProcedure.parse(val);\n    case \"subscription\":\n      return lexXrpcSubscription.parse(val);\n    case \"blob\":\n      return lexBlob.parse(val);\n    case \"array\":\n      return lexArray.parse(val);\n    case \"token\":\n      return lexToken.parse(val);\n    case \"object\":\n      return lexObject.parse(val);\n    case \"boolean\":\n      return lexBoolean.parse(val);\n    case \"integer\":\n      return lexInteger.parse(val);\n    case \"string\":\n      return lexString.parse(val);\n    case \"bytes\":\n      return lexBytes.parse(val);\n    case \"cid-link\":\n      return lexCidLink.parse(val);\n    case \"unknown\":\n      return lexUnknown.parse(val);\n  }\n}, val => {\n  if (!val || typeof val !== \"object\") {\n    return {\n      message: \"Must be an object\",\n      fatal: true\n    };\n  }\n  if (val[\"type\"] === void 0) {\n    return {\n      message: \"Must have a type\",\n      fatal: true\n    };\n  }\n  return {\n    message: `Invalid type: ${val[\"type\"]} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,\n    fatal: true\n  };\n});\nvar lexiconDoc = z.object({\n  lexicon: z.literal(1),\n  id: z.string().refine(v => NSID.isValid(v), {\n    message: \"Must be a valid NSID\"\n  }),\n  revision: z.number().optional(),\n  description: z.string().optional(),\n  defs: z.record(lexUserType)\n}).strict().superRefine((doc, ctx) => {\n  for (const defId in doc.defs) {\n    const def2 = doc.defs[defId];\n    if (defId !== \"main\" && (def2.type === \"record\" || def2.type === \"procedure\" || def2.type === \"query\" || def2.type === \"subscription\")) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Records, procedures, queries, and subscriptions must be the main definition.`\n      });\n    }\n  }\n});\nfunction isObj(obj) {\n  return obj !== null && typeof obj === \"object\";\n}\nfunction hasProp(data, prop) {\n  return prop in data;\n}\nvar discriminatedObject = z.object({\n  $type: z.string()\n});\nfunction isDiscriminatedObject(value) {\n  return discriminatedObject.safeParse(value).success;\n}\nvar ValidationError = class extends Error {};\nvar InvalidLexiconError = class extends Error {};\nvar LexiconDefNotFoundError = class extends Error {};\n\n// ../lexicon/src/validators/xrpc.ts\nfunction params(lexicons2, path, def2, val) {\n  const value = val && typeof val === \"object\" ? val : {};\n  const requiredProps = new Set(def2.required ?? []);\n  let resultValue = value;\n  if (typeof def2.properties === \"object\") {\n    for (const key in def2.properties) {\n      const propDef = def2.properties[key];\n      const validated = propDef.type === \"array\" ? array(lexicons2, key, propDef, value[key]) : validate(lexicons2, key, propDef, value[key]);\n      const propValue = validated.success ? validated.value : value[key];\n      const propIsUndefined = typeof propValue === \"undefined\";\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`)\n        };\n      } else if (!propIsUndefined && !validated.success) {\n        return validated;\n      }\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          resultValue = {\n            ...value\n          };\n        }\n        resultValue[key] = propValue;\n      }\n    }\n  }\n  return {\n    success: true,\n    value: resultValue\n  };\n}\n\n// ../lexicon/src/validation.ts\nfunction assertValidRecord(lexicons2, def2, value) {\n  const res = object(lexicons2, \"Record\", def2.record, value);\n  if (!res.success) throw res.error;\n  return res.value;\n}\nfunction assertValidXrpcParams(lexicons2, def2, value) {\n  if (def2.parameters) {\n    const res = params(lexicons2, \"Params\", def2.parameters, value);\n    if (!res.success) throw res.error;\n    return res.value;\n  }\n}\nfunction assertValidXrpcInput(lexicons2, def2, value) {\n  if (def2.input?.schema) {\n    return assertValidOneOf(lexicons2, \"Input\", def2.input.schema, value, true);\n  }\n}\nfunction assertValidXrpcOutput(lexicons2, def2, value) {\n  if (def2.output?.schema) {\n    return assertValidOneOf(lexicons2, \"Output\", def2.output.schema, value, true);\n  }\n}\nfunction assertValidXrpcMessage(lexicons2, def2, value) {\n  if (def2.message?.schema) {\n    return assertValidOneOf(lexicons2, \"Message\", def2.message.schema, value, true);\n  }\n}\n\n// ../lexicon/src/lexicons.ts\nvar Lexicons = class {\n  constructor(docs) {\n    this.docs = /* @__PURE__ */new Map();\n    this.defs = /* @__PURE__ */new Map();\n    if (docs?.length) {\n      for (const doc of docs) {\n        this.add(doc);\n      }\n    }\n  }\n  add(doc) {\n    const uri2 = toLexUri(doc.id);\n    if (this.docs.has(uri2)) {\n      throw new Error(`${uri2} has already been registered`);\n    }\n    resolveRefUris(doc, uri2);\n    this.docs.set(uri2, doc);\n    for (const [defUri, def2] of iterDefs(doc)) {\n      this.defs.set(defUri, def2);\n    }\n  }\n  remove(uri2) {\n    uri2 = toLexUri(uri2);\n    const doc = this.docs.get(uri2);\n    if (!doc) {\n      throw new Error(`Unable to remove \"${uri2}\": does not exist`);\n    }\n    for (const [defUri, _def] of iterDefs(doc)) {\n      this.defs.delete(defUri);\n    }\n    this.docs.delete(uri2);\n  }\n  get(uri2) {\n    uri2 = toLexUri(uri2);\n    return this.docs.get(uri2);\n  }\n  getDef(uri2) {\n    uri2 = toLexUri(uri2);\n    return this.defs.get(uri2);\n  }\n  getDefOrThrow(uri2, types) {\n    const def2 = this.getDef(uri2);\n    if (!def2) {\n      throw new LexiconDefNotFoundError(`Lexicon not found: ${uri2}`);\n    }\n    if (types && !types.includes(def2.type)) {\n      throw new InvalidLexiconError(`Not a ${types.join(\" or \")} lexicon: ${uri2}`);\n    }\n    return def2;\n  }\n  validate(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"record\", \"object\"]);\n    if (!isObj(value)) {\n      throw new ValidationError(`Value must be an object`);\n    }\n    if (def2.type === \"record\") {\n      return object(this, \"Record\", def2.record, value);\n    } else if (def2.type === \"object\") {\n      return object(this, \"Object\", def2, value);\n    } else {\n      throw new InvalidLexiconError(\"Definition must be a record or object\");\n    }\n  }\n  assertValidRecord(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"record\"]);\n    if (!isObj(value)) {\n      throw new ValidationError(`Record must be an object`);\n    }\n    if (!hasProp(value, \"$type\") || typeof value.$type !== \"string\") {\n      throw new ValidationError(`Record/$type must be a string`);\n    }\n    const $type = value.$type || \"\";\n    if (toLexUri($type) !== lexUri) {\n      throw new ValidationError(`Invalid $type: must be ${lexUri}, got ${$type}`);\n    }\n    return assertValidRecord(this, def2, value);\n  }\n  assertValidXrpcParams(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"query\", \"procedure\", \"subscription\"]);\n    return assertValidXrpcParams(this, def2, value);\n  }\n  assertValidXrpcInput(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"procedure\"]);\n    return assertValidXrpcInput(this, def2, value);\n  }\n  assertValidXrpcOutput(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"query\", \"procedure\"]);\n    return assertValidXrpcOutput(this, def2, value);\n  }\n  assertValidXrpcMessage(lexUri, value) {\n    lexUri = toLexUri(lexUri);\n    const def2 = this.getDefOrThrow(lexUri, [\"subscription\"]);\n    return assertValidXrpcMessage(this, def2, value);\n  }\n  resolveLexUri(lexUri, ref) {\n    lexUri = toLexUri(lexUri);\n    return toLexUri(ref, lexUri);\n  }\n};\nfunction* iterDefs(doc) {\n  for (const defId in doc.defs) {\n    yield [`lex:${doc.id}#${defId}`, doc.defs[defId]];\n    if (defId === \"main\") {\n      yield [`lex:${doc.id}`, doc.defs[defId]];\n    }\n  }\n}\nfunction resolveRefUris(obj, baseUri) {\n  for (const k in obj) {\n    if (obj.type === \"ref\") {\n      obj.ref = toLexUri(obj.ref, baseUri);\n    } else if (obj.type === \"union\") {\n      obj.refs = obj.refs.map(ref => toLexUri(ref, baseUri));\n    } else if (Array.isArray(obj[k])) {\n      obj[k] = obj[k].map(item => {\n        if (typeof item === \"string\") {\n          return item.startsWith(\"#\") ? toLexUri(item, baseUri) : item;\n        } else if (item && typeof item === \"object\") {\n          return resolveRefUris(item, baseUri);\n        }\n        return item;\n      });\n    } else if (obj[k] && typeof obj[k] === \"object\") {\n      obj[k] = resolveRefUris(obj[k], baseUri);\n    }\n  }\n  return obj;\n}\n\n// ../lexicon/src/serialize.ts\nvar lexToIpld = val => {\n  if (Array.isArray(val)) {\n    return val.map(item => lexToIpld(item));\n  }\n  if (val && typeof val === \"object\") {\n    if (val instanceof BlobRef) {\n      return val.original;\n    }\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val;\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = lexToIpld(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\nvar ipldToLex = val => {\n  if (Array.isArray(val)) {\n    return val.map(item => ipldToLex(item));\n  }\n  if (val && typeof val === \"object\") {\n    if ((val[\"$type\"] === \"blob\" || typeof val[\"cid\"] === \"string\" && typeof val[\"mimeType\"] === \"string\") && check_exports.is(val, jsonBlobRef)) {\n      return BlobRef.fromJsonRef(val);\n    }\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val;\n    }\n    const toReturn = {};\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToLex(val[key]);\n    }\n    return toReturn;\n  }\n  return val;\n};\nvar lexToJson = val => {\n  return ipldToJson(lexToIpld(val));\n};\nvar stringifyLex = val => {\n  return JSON.stringify(lexToJson(val));\n};\nvar jsonToLex = val => {\n  return ipldToLex(jsonToIpld(val));\n};\nvar jsonStringToLex = val => {\n  return jsonToLex(JSON.parse(val));\n};\n\n// ../xrpc/src/types.ts\nvar errorResponseBody = z.object({\n  error: z.string().optional(),\n  message: z.string().optional()\n});\nvar ResponseType = /* @__PURE__ */(ResponseType2 => {\n  ResponseType2[ResponseType2[\"Unknown\"] = 1] = \"Unknown\";\n  ResponseType2[ResponseType2[\"InvalidResponse\"] = 2] = \"InvalidResponse\";\n  ResponseType2[ResponseType2[\"Success\"] = 200] = \"Success\";\n  ResponseType2[ResponseType2[\"InvalidRequest\"] = 400] = \"InvalidRequest\";\n  ResponseType2[ResponseType2[\"AuthRequired\"] = 401] = \"AuthRequired\";\n  ResponseType2[ResponseType2[\"Forbidden\"] = 403] = \"Forbidden\";\n  ResponseType2[ResponseType2[\"XRPCNotSupported\"] = 404] = \"XRPCNotSupported\";\n  ResponseType2[ResponseType2[\"PayloadTooLarge\"] = 413] = \"PayloadTooLarge\";\n  ResponseType2[ResponseType2[\"RateLimitExceeded\"] = 429] = \"RateLimitExceeded\";\n  ResponseType2[ResponseType2[\"InternalServerError\"] = 500] = \"InternalServerError\";\n  ResponseType2[ResponseType2[\"MethodNotImplemented\"] = 501] = \"MethodNotImplemented\";\n  ResponseType2[ResponseType2[\"UpstreamFailure\"] = 502] = \"UpstreamFailure\";\n  ResponseType2[ResponseType2[\"NotEnoughResources\"] = 503] = \"NotEnoughResources\";\n  ResponseType2[ResponseType2[\"UpstreamTimeout\"] = 504] = \"UpstreamTimeout\";\n  return ResponseType2;\n})(ResponseType || {});\nvar ResponseTypeNames = {\n  [2 /* InvalidResponse */]: \"InvalidResponse\",\n  [200 /* Success */]: \"Success\",\n  [400 /* InvalidRequest */]: \"InvalidRequest\",\n  [401 /* AuthRequired */]: \"AuthenticationRequired\",\n  [403 /* Forbidden */]: \"Forbidden\",\n  [404 /* XRPCNotSupported */]: \"XRPCNotSupported\",\n  [413 /* PayloadTooLarge */]: \"PayloadTooLarge\",\n  [429 /* RateLimitExceeded */]: \"RateLimitExceeded\",\n  [500 /* InternalServerError */]: \"InternalServerError\",\n  [501 /* MethodNotImplemented */]: \"MethodNotImplemented\",\n  [502 /* UpstreamFailure */]: \"UpstreamFailure\",\n  [503 /* NotEnoughResources */]: \"NotEnoughResources\",\n  [504 /* UpstreamTimeout */]: \"UpstreamTimeout\"\n};\nvar ResponseTypeStrings = {\n  [2 /* InvalidResponse */]: \"Invalid Response\",\n  [200 /* Success */]: \"Success\",\n  [400 /* InvalidRequest */]: \"Invalid Request\",\n  [401 /* AuthRequired */]: \"Authentication Required\",\n  [403 /* Forbidden */]: \"Forbidden\",\n  [404 /* XRPCNotSupported */]: \"XRPC Not Supported\",\n  [413 /* PayloadTooLarge */]: \"Payload Too Large\",\n  [429 /* RateLimitExceeded */]: \"Rate Limit Exceeded\",\n  [500 /* InternalServerError */]: \"Internal Server Error\",\n  [501 /* MethodNotImplemented */]: \"Method Not Implemented\",\n  [502 /* UpstreamFailure */]: \"Upstream Failure\",\n  [503 /* NotEnoughResources */]: \"Not Enough Resources\",\n  [504 /* UpstreamTimeout */]: \"Upstream Timeout\"\n};\nvar XRPCResponse = class {\n  constructor(data, headers) {\n    this.data = data;\n    this.headers = headers;\n    this.success = true;\n  }\n};\nvar XRPCError = class extends Error {\n  constructor(status, error, message, headers) {\n    super(message || error || ResponseTypeStrings[status]);\n    this.status = status;\n    this.error = error;\n    this.success = false;\n    if (!this.error) {\n      this.error = ResponseTypeNames[status];\n    }\n    this.headers = headers;\n  }\n};\nvar XRPCInvalidResponseError = class extends XRPCError {\n  constructor(lexiconNsid, validationError, responseBody) {\n    super(2 /* InvalidResponse */, ResponseTypeStrings[2 /* InvalidResponse */], `The server gave an invalid response and may be out of date.`);\n    this.lexiconNsid = lexiconNsid;\n    this.validationError = validationError;\n    this.responseBody = responseBody;\n  }\n};\n\n// ../xrpc/src/util.ts\nfunction getMethodSchemaHTTPMethod(schema2) {\n  if (schema2.type === \"procedure\") {\n    return \"post\";\n  }\n  return \"get\";\n}\nfunction constructMethodCallUri(nsid2, schema2, serviceUri, params2) {\n  const uri2 = new URL(serviceUri);\n  uri2.pathname = `/xrpc/${nsid2}`;\n  if (params2) {\n    for (const [key, value] of Object.entries(params2)) {\n      const paramSchema = schema2.parameters?.properties?.[key];\n      if (!paramSchema) {\n        throw new Error(`Invalid query parameter: ${key}`);\n      }\n      if (value !== void 0) {\n        if (paramSchema.type === \"array\") {\n          const vals = [];\n          vals.concat(value).forEach(val => {\n            uri2.searchParams.append(key, encodeQueryParam(paramSchema.items.type, val));\n          });\n        } else {\n          uri2.searchParams.set(key, encodeQueryParam(paramSchema.type, value));\n        }\n      }\n    }\n  }\n  return uri2.toString();\n}\nfunction encodeQueryParam(type, value) {\n  if (type === \"string\" || type === \"unknown\") {\n    return String(value);\n  }\n  if (type === \"float\") {\n    return String(Number(value));\n  } else if (type === \"integer\") {\n    return String(Number(value) | 0);\n  } else if (type === \"boolean\") {\n    return value ? \"true\" : \"false\";\n  } else if (type === \"datetime\") {\n    if (value instanceof Date) {\n      return value.toISOString();\n    }\n    return String(value);\n  }\n  throw new Error(`Unsupported query param type: ${type}`);\n}\nfunction normalizeHeaders(headers) {\n  const normalized = {};\n  for (const [header, value] of Object.entries(headers)) {\n    normalized[header.toLowerCase()] = value;\n  }\n  return normalized;\n}\nfunction constructMethodCallHeaders(schema2, data, opts) {\n  const headers = opts?.headers || {};\n  if (schema2.type === \"procedure\") {\n    if (opts?.encoding) {\n      headers[\"Content-Type\"] = opts.encoding;\n    }\n    if (data && typeof data === \"object\") {\n      if (!headers[\"Content-Type\"]) {\n        headers[\"Content-Type\"] = \"application/json\";\n      }\n    }\n  }\n  return headers;\n}\nfunction encodeMethodCallBody(headers, data) {\n  if (!headers[\"content-type\"] || typeof data === \"undefined\") {\n    return void 0;\n  }\n  if (data instanceof ArrayBuffer) {\n    return data;\n  }\n  if (headers[\"content-type\"].startsWith(\"text/\")) {\n    return new TextEncoder().encode(data.toString());\n  }\n  if (headers[\"content-type\"].startsWith(\"application/json\")) {\n    return new TextEncoder().encode(stringifyLex(data));\n  }\n  return data;\n}\nfunction httpResponseCodeToEnum(status) {\n  let resCode;\n  if (status in ResponseType) {\n    resCode = status;\n  } else if (status >= 100 && status < 200) {\n    resCode = 404 /* XRPCNotSupported */;\n  } else if (status >= 200 && status < 300) {\n    resCode = 200 /* Success */;\n  } else if (status >= 300 && status < 400) {\n    resCode = 404 /* XRPCNotSupported */;\n  } else if (status >= 400 && status < 500) {\n    resCode = 400 /* InvalidRequest */;\n  } else {\n    resCode = 500 /* InternalServerError */;\n  }\n  return resCode;\n}\nfunction httpResponseBodyParse(mimeType, data) {\n  if (mimeType) {\n    if (mimeType.includes(\"application/json\") && data?.byteLength) {\n      try {\n        const str = new TextDecoder().decode(data);\n        return jsonStringToLex(str);\n      } catch (e) {\n        throw new XRPCError(2 /* InvalidResponse */, `Failed to parse response body: ${String(e)}`);\n      }\n    }\n    if (mimeType.startsWith(\"text/\") && data?.byteLength) {\n      try {\n        return new TextDecoder().decode(data);\n      } catch (e) {\n        throw new XRPCError(2 /* InvalidResponse */, `Failed to parse response body: ${String(e)}`);\n      }\n    }\n  }\n  if (data instanceof ArrayBuffer) {\n    return new Uint8Array(data);\n  }\n  return data;\n}\n\n// ../xrpc/src/client.ts\nvar Client = class {\n  constructor() {\n    this.fetch = defaultFetchHandler;\n    this.lex = new Lexicons();\n  }\n  async call(serviceUri, methodNsid, params2, data, opts) {\n    return this.service(serviceUri).call(methodNsid, params2, data, opts);\n  }\n  service(serviceUri) {\n    return new ServiceClient(this, serviceUri);\n  }\n  addLexicon(doc) {\n    this.lex.add(doc);\n  }\n  addLexicons(docs) {\n    for (const doc of docs) {\n      this.addLexicon(doc);\n    }\n  }\n  removeLexicon(uri2) {\n    this.lex.remove(uri2);\n  }\n};\nvar ServiceClient = class {\n  constructor(baseClient, serviceUri) {\n    this.headers = {};\n    this.baseClient = baseClient;\n    this.uri = typeof serviceUri === \"string\" ? new URL(serviceUri) : serviceUri;\n  }\n  setHeader(key, value) {\n    this.headers[key] = value;\n  }\n  unsetHeader(key) {\n    delete this.headers[key];\n  }\n  async call(methodNsid, params2, data, opts) {\n    const def2 = this.baseClient.lex.getDefOrThrow(methodNsid);\n    if (!def2 || def2.type !== \"query\" && def2.type !== \"procedure\") {\n      throw new Error(`Invalid lexicon: ${methodNsid}. Must be a query or procedure.`);\n    }\n    const httpMethod = getMethodSchemaHTTPMethod(def2);\n    const httpUri = constructMethodCallUri(methodNsid, def2, this.uri, params2);\n    const httpHeaders = constructMethodCallHeaders(def2, data, {\n      headers: {\n        ...this.headers,\n        ...opts?.headers\n      },\n      encoding: opts?.encoding\n    });\n    const res = await this.baseClient.fetch(httpUri, httpMethod, httpHeaders, data);\n    const resCode = httpResponseCodeToEnum(res.status);\n    if (resCode === 200 /* Success */) {\n      try {\n        this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body);\n      } catch (e) {\n        if (e instanceof ValidationError) {\n          throw new XRPCInvalidResponseError(methodNsid, e, res.body);\n        } else {\n          throw e;\n        }\n      }\n      return new XRPCResponse(res.body, res.headers);\n    } else {\n      if (res.body && isErrorResponseBody(res.body)) {\n        throw new XRPCError(resCode, res.body.error, res.body.message, res.headers);\n      } else {\n        throw new XRPCError(resCode);\n      }\n    }\n  }\n};\nasync function defaultFetchHandler(httpUri, httpMethod, httpHeaders, httpReqBody) {\n  try {\n    const headers = normalizeHeaders(httpHeaders);\n    const reqInit = {\n      method: httpMethod,\n      headers,\n      body: encodeMethodCallBody(headers, httpReqBody),\n      duplex: \"half\"\n    };\n    const res = await fetch(httpUri, reqInit);\n    const resBody = await res.arrayBuffer();\n    return {\n      status: res.status,\n      headers: Object.fromEntries(res.headers.entries()),\n      body: httpResponseBodyParse(res.headers.get(\"content-type\"), resBody)\n    };\n  } catch (e) {\n    throw new XRPCError(1 /* Unknown */, String(e));\n  }\n}\nfunction isErrorResponseBody(v) {\n  return errorResponseBody.safeParse(v).success;\n}\n\n// ../xrpc/src/index.ts\nvar defaultInst = new Client();\n\n// src/client/lexicons.ts\nvar schemaDict = {\n  ComAtprotoAdminCreateCommunicationTemplate: {\n    lexicon: 1,\n    id: \"com.atproto.admin.createCommunicationTemplate\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to create a new, re-usable communication (email for now) template.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\", \"contentMarkdown\", \"name\"],\n            properties: {\n              name: {\n                type: \"string\",\n                description: \"Name of the template.\"\n              },\n              contentMarkdown: {\n                type: \"string\",\n                description: \"Content of the template, markdown supported, can contain variable placeholders.\"\n              },\n              subject: {\n                type: \"string\",\n                description: \"Subject of the message, used in emails.\"\n              },\n              createdBy: {\n                type: \"string\",\n                format: \"did\",\n                description: \"DID of the user who is creating the template.\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#communicationTemplateView\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDefs: {\n    lexicon: 1,\n    id: \"com.atproto.admin.defs\",\n    defs: {\n      statusAttr: {\n        type: \"object\",\n        required: [\"applied\"],\n        properties: {\n          applied: {\n            type: \"boolean\"\n          },\n          ref: {\n            type: \"string\"\n          }\n        }\n      },\n      modEventView: {\n        type: \"object\",\n        required: [\"id\", \"event\", \"subject\", \"subjectBlobCids\", \"createdBy\", \"createdAt\"],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          event: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#modEventTakedown\", \"lex:com.atproto.admin.defs#modEventReverseTakedown\", \"lex:com.atproto.admin.defs#modEventComment\", \"lex:com.atproto.admin.defs#modEventReport\", \"lex:com.atproto.admin.defs#modEventLabel\", \"lex:com.atproto.admin.defs#modEventAcknowledge\", \"lex:com.atproto.admin.defs#modEventEscalate\", \"lex:com.atproto.admin.defs#modEventMute\", \"lex:com.atproto.admin.defs#modEventEmail\", \"lex:com.atproto.admin.defs#modEventResolveAppeal\"]\n          },\n          subject: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\"]\n          },\n          subjectBlobCids: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          createdBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          creatorHandle: {\n            type: \"string\"\n          },\n          subjectHandle: {\n            type: \"string\"\n          }\n        }\n      },\n      modEventViewDetail: {\n        type: \"object\",\n        required: [\"id\", \"event\", \"subject\", \"subjectBlobs\", \"createdBy\", \"createdAt\"],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          event: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#modEventTakedown\", \"lex:com.atproto.admin.defs#modEventReverseTakedown\", \"lex:com.atproto.admin.defs#modEventComment\", \"lex:com.atproto.admin.defs#modEventReport\", \"lex:com.atproto.admin.defs#modEventLabel\", \"lex:com.atproto.admin.defs#modEventAcknowledge\", \"lex:com.atproto.admin.defs#modEventEscalate\", \"lex:com.atproto.admin.defs#modEventMute\", \"lex:com.atproto.admin.defs#modEventEmail\", \"lex:com.atproto.admin.defs#modEventResolveAppeal\"]\n          },\n          subject: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#repoView\", \"lex:com.atproto.admin.defs#repoViewNotFound\", \"lex:com.atproto.admin.defs#recordView\", \"lex:com.atproto.admin.defs#recordViewNotFound\"]\n          },\n          subjectBlobs: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#blobView\"\n            }\n          },\n          createdBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      reportView: {\n        type: \"object\",\n        required: [\"id\", \"reasonType\", \"subject\", \"reportedBy\", \"createdAt\", \"resolvedByActionIds\"],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          reasonType: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.moderation.defs#reasonType\"\n          },\n          comment: {\n            type: \"string\"\n          },\n          subjectRepoHandle: {\n            type: \"string\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\"]\n          },\n          reportedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          resolvedByActionIds: {\n            type: \"array\",\n            items: {\n              type: \"integer\"\n            }\n          }\n        }\n      },\n      subjectStatusView: {\n        type: \"object\",\n        required: [\"id\", \"subject\", \"createdAt\", \"updatedAt\", \"reviewState\"],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\"]\n          },\n          subjectBlobCids: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"cid\"\n            }\n          },\n          subjectRepoHandle: {\n            type: \"string\"\n          },\n          updatedAt: {\n            type: \"string\",\n            format: \"datetime\",\n            description: \"Timestamp referencing when the last update was made to the moderation status of the subject\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\",\n            description: \"Timestamp referencing the first moderation status impacting event was emitted on the subject\"\n          },\n          reviewState: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#subjectReviewState\"\n          },\n          comment: {\n            type: \"string\",\n            description: \"Sticky comment on the subject.\"\n          },\n          muteUntil: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          lastReviewedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          lastReviewedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          lastReportedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          lastAppealedAt: {\n            type: \"string\",\n            format: \"datetime\",\n            description: \"Timestamp referencing when the author of the subject appealed a moderation action\"\n          },\n          takendown: {\n            type: \"boolean\"\n          },\n          appealed: {\n            type: \"boolean\",\n            description: \"True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.\"\n          },\n          suspendUntil: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      reportViewDetail: {\n        type: \"object\",\n        required: [\"id\", \"reasonType\", \"subject\", \"reportedBy\", \"createdAt\", \"resolvedByActions\"],\n        properties: {\n          id: {\n            type: \"integer\"\n          },\n          reasonType: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.moderation.defs#reasonType\"\n          },\n          comment: {\n            type: \"string\"\n          },\n          subject: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#repoView\", \"lex:com.atproto.admin.defs#repoViewNotFound\", \"lex:com.atproto.admin.defs#recordView\", \"lex:com.atproto.admin.defs#recordViewNotFound\"]\n          },\n          subjectStatus: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#subjectStatusView\"\n          },\n          reportedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          resolvedByActions: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#modEventView\"\n            }\n          }\n        }\n      },\n      repoView: {\n        type: \"object\",\n        required: [\"did\", \"handle\", \"relatedRecords\", \"indexedAt\", \"moderation\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          email: {\n            type: \"string\"\n          },\n          relatedRecords: {\n            type: \"array\",\n            items: {\n              type: \"unknown\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderation\"\n          },\n          invitedBy: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.defs#inviteCode\"\n          },\n          invitesDisabled: {\n            type: \"boolean\"\n          },\n          inviteNote: {\n            type: \"string\"\n          }\n        }\n      },\n      repoViewDetail: {\n        type: \"object\",\n        required: [\"did\", \"handle\", \"relatedRecords\", \"indexedAt\", \"moderation\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          email: {\n            type: \"string\"\n          },\n          relatedRecords: {\n            type: \"array\",\n            items: {\n              type: \"unknown\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderationDetail\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          invitedBy: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.defs#inviteCode\"\n          },\n          invites: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.server.defs#inviteCode\"\n            }\n          },\n          invitesDisabled: {\n            type: \"boolean\"\n          },\n          inviteNote: {\n            type: \"string\"\n          },\n          emailConfirmedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      accountView: {\n        type: \"object\",\n        required: [\"did\", \"handle\", \"indexedAt\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          email: {\n            type: \"string\"\n          },\n          relatedRecords: {\n            type: \"array\",\n            items: {\n              type: \"unknown\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          invitedBy: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.defs#inviteCode\"\n          },\n          invites: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.server.defs#inviteCode\"\n            }\n          },\n          invitesDisabled: {\n            type: \"boolean\"\n          },\n          emailConfirmedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          inviteNote: {\n            type: \"string\"\n          }\n        }\n      },\n      repoViewNotFound: {\n        type: \"object\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      },\n      repoRef: {\n        type: \"object\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      },\n      repoBlobRef: {\n        type: \"object\",\n        required: [\"did\", \"cid\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          recordUri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      recordView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"value\", \"blobCids\", \"indexedAt\", \"moderation\", \"repo\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          value: {\n            type: \"unknown\"\n          },\n          blobCids: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"cid\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderation\"\n          },\n          repo: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#repoView\"\n          }\n        }\n      },\n      recordViewDetail: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"value\", \"blobs\", \"indexedAt\", \"moderation\", \"repo\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          value: {\n            type: \"unknown\"\n          },\n          blobs: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.admin.defs#blobView\"\n            }\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderationDetail\"\n          },\n          repo: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#repoView\"\n          }\n        }\n      },\n      recordViewNotFound: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      moderation: {\n        type: \"object\",\n        properties: {\n          subjectStatus: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#subjectStatusView\"\n          }\n        }\n      },\n      moderationDetail: {\n        type: \"object\",\n        properties: {\n          subjectStatus: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#subjectStatusView\"\n          }\n        }\n      },\n      blobView: {\n        type: \"object\",\n        required: [\"cid\", \"mimeType\", \"size\", \"createdAt\"],\n        properties: {\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          mimeType: {\n            type: \"string\"\n          },\n          size: {\n            type: \"integer\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          details: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.admin.defs#imageDetails\", \"lex:com.atproto.admin.defs#videoDetails\"]\n          },\n          moderation: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#moderation\"\n          }\n        }\n      },\n      imageDetails: {\n        type: \"object\",\n        required: [\"width\", \"height\"],\n        properties: {\n          width: {\n            type: \"integer\"\n          },\n          height: {\n            type: \"integer\"\n          }\n        }\n      },\n      videoDetails: {\n        type: \"object\",\n        required: [\"width\", \"height\", \"length\"],\n        properties: {\n          width: {\n            type: \"integer\"\n          },\n          height: {\n            type: \"integer\"\n          },\n          length: {\n            type: \"integer\"\n          }\n        }\n      },\n      subjectReviewState: {\n        type: \"string\",\n        knownValues: [\"lex:com.atproto.admin.defs#reviewOpen\", \"lex:com.atproto.admin.defs#reviewEscalated\", \"lex:com.atproto.admin.defs#reviewClosed\"]\n      },\n      reviewOpen: {\n        type: \"token\",\n        description: \"Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator\"\n      },\n      reviewEscalated: {\n        type: \"token\",\n        description: \"Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator\"\n      },\n      reviewClosed: {\n        type: \"token\",\n        description: \"Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator\"\n      },\n      modEventTakedown: {\n        type: \"object\",\n        description: \"Take down a subject permanently or temporarily\",\n        properties: {\n          comment: {\n            type: \"string\"\n          },\n          durationInHours: {\n            type: \"integer\",\n            description: \"Indicates how long the takedown should be in effect before automatically expiring.\"\n          }\n        }\n      },\n      modEventReverseTakedown: {\n        type: \"object\",\n        description: \"Revert take down action on a subject\",\n        properties: {\n          comment: {\n            type: \"string\",\n            description: \"Describe reasoning behind the reversal.\"\n          }\n        }\n      },\n      modEventResolveAppeal: {\n        type: \"object\",\n        description: \"Resolve appeal on a subject\",\n        properties: {\n          comment: {\n            type: \"string\",\n            description: \"Describe resolution.\"\n          }\n        }\n      },\n      modEventComment: {\n        type: \"object\",\n        description: \"Add a comment to a subject\",\n        required: [\"comment\"],\n        properties: {\n          comment: {\n            type: \"string\"\n          },\n          sticky: {\n            type: \"boolean\",\n            description: \"Make the comment persistent on the subject\"\n          }\n        }\n      },\n      modEventReport: {\n        type: \"object\",\n        description: \"Report a subject\",\n        required: [\"reportType\"],\n        properties: {\n          comment: {\n            type: \"string\"\n          },\n          reportType: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.moderation.defs#reasonType\"\n          }\n        }\n      },\n      modEventLabel: {\n        type: \"object\",\n        description: \"Apply/Negate labels on a subject\",\n        required: [\"createLabelVals\", \"negateLabelVals\"],\n        properties: {\n          comment: {\n            type: \"string\"\n          },\n          createLabelVals: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          },\n          negateLabelVals: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          }\n        }\n      },\n      modEventAcknowledge: {\n        type: \"object\",\n        properties: {\n          comment: {\n            type: \"string\"\n          }\n        }\n      },\n      modEventEscalate: {\n        type: \"object\",\n        properties: {\n          comment: {\n            type: \"string\"\n          }\n        }\n      },\n      modEventMute: {\n        type: \"object\",\n        description: \"Mute incoming reports on a subject\",\n        required: [\"durationInHours\"],\n        properties: {\n          comment: {\n            type: \"string\"\n          },\n          durationInHours: {\n            type: \"integer\",\n            description: \"Indicates how long the subject should remain muted.\"\n          }\n        }\n      },\n      modEventUnmute: {\n        type: \"object\",\n        description: \"Unmute action on a subject\",\n        properties: {\n          comment: {\n            type: \"string\",\n            description: \"Describe reasoning behind the reversal.\"\n          }\n        }\n      },\n      modEventEmail: {\n        type: \"object\",\n        description: \"Keep a log of outgoing email to a user\",\n        required: [\"subjectLine\"],\n        properties: {\n          subjectLine: {\n            type: \"string\",\n            description: \"The subject line of the email sent to the user.\"\n          },\n          comment: {\n            type: \"string\",\n            description: \"Additional comment about the outgoing comm.\"\n          }\n        }\n      },\n      communicationTemplateView: {\n        type: \"object\",\n        required: [\"id\", \"name\", \"contentMarkdown\", \"disabled\", \"lastUpdatedBy\", \"createdAt\", \"updatedAt\"],\n        properties: {\n          id: {\n            type: \"string\"\n          },\n          name: {\n            type: \"string\",\n            description: \"Name of the template.\"\n          },\n          subject: {\n            type: \"string\",\n            description: \"Content of the template, can contain markdown and variable placeholders.\"\n          },\n          contentMarkdown: {\n            type: \"string\",\n            description: \"Subject of the message, used in emails.\"\n          },\n          disabled: {\n            type: \"boolean\"\n          },\n          lastUpdatedBy: {\n            type: \"string\",\n            format: \"did\",\n            description: \"DID of the user who last updated the template.\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          updatedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDeleteAccount: {\n    lexicon: 1,\n    id: \"com.atproto.admin.deleteAccount\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete a user account as an administrator.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDeleteCommunicationTemplate: {\n    lexicon: 1,\n    id: \"com.atproto.admin.deleteCommunicationTemplate\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete a communication template.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"id\"],\n            properties: {\n              id: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDisableAccountInvites: {\n    lexicon: 1,\n    id: \"com.atproto.admin.disableAccountInvites\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Disable an account from receiving new invite codes, but does not invalidate existing codes.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"account\"],\n            properties: {\n              account: {\n                type: \"string\",\n                format: \"did\"\n              },\n              note: {\n                type: \"string\",\n                description: \"Optional reason for disabled invites.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminDisableInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.admin.disableInviteCodes\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Disable some set of codes and/or all codes associated with a set of users.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            properties: {\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              },\n              accounts: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminEmitModerationEvent: {\n    lexicon: 1,\n    id: \"com.atproto.admin.emitModerationEvent\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Take a moderation action on an actor.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"event\", \"subject\", \"createdBy\"],\n            properties: {\n              event: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#modEventTakedown\", \"lex:com.atproto.admin.defs#modEventAcknowledge\", \"lex:com.atproto.admin.defs#modEventEscalate\", \"lex:com.atproto.admin.defs#modEventComment\", \"lex:com.atproto.admin.defs#modEventLabel\", \"lex:com.atproto.admin.defs#modEventReport\", \"lex:com.atproto.admin.defs#modEventMute\", \"lex:com.atproto.admin.defs#modEventReverseTakedown\", \"lex:com.atproto.admin.defs#modEventUnmute\", \"lex:com.atproto.admin.defs#modEventEmail\"]\n              },\n              subject: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\"]\n              },\n              subjectBlobCids: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"cid\"\n                }\n              },\n              createdBy: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#modEventView\"\n          }\n        },\n        errors: [{\n          name: \"SubjectHasAction\"\n        }]\n      }\n    }\n  },\n  ComAtprotoAdminEnableAccountInvites: {\n    lexicon: 1,\n    id: \"com.atproto.admin.enableAccountInvites\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Re-enable an account's ability to receive invite codes.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"account\"],\n            properties: {\n              account: {\n                type: \"string\",\n                format: \"did\"\n              },\n              note: {\n                type: \"string\",\n                description: \"Optional reason for enabled invites.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetAccountInfo: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getAccountInfo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get details about an account.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#accountView\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetAccountInfos: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getAccountInfos\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get details about some accounts.\",\n        parameters: {\n          type: \"params\",\n          required: [\"dids\"],\n          properties: {\n            dids: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"infos\"],\n            properties: {\n              infos: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#accountView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getInviteCodes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get an admin view of invite codes.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            sort: {\n              type: \"string\",\n              knownValues: [\"recent\", \"usage\"],\n              default: \"recent\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 500,\n              default: 100\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codes\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.defs#inviteCode\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetModerationEvent: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getModerationEvent\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get details about a moderation event.\",\n        parameters: {\n          type: \"params\",\n          required: [\"id\"],\n          properties: {\n            id: {\n              type: \"integer\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#modEventViewDetail\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminGetRecord: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getRecord\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get details about a record.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#recordViewDetail\"\n          }\n        },\n        errors: [{\n          name: \"RecordNotFound\"\n        }]\n      }\n    }\n  },\n  ComAtprotoAdminGetRepo: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getRepo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get details about a repository.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#repoViewDetail\"\n          }\n        },\n        errors: [{\n          name: \"RepoNotFound\"\n        }]\n      }\n    }\n  },\n  ComAtprotoAdminGetSubjectStatus: {\n    lexicon: 1,\n    id: \"com.atproto.admin.getSubjectStatus\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get the service-specific admin status of a subject (account, record, or blob).\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\"\n            },\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            blob: {\n              type: \"string\",\n              format: \"cid\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\"],\n            properties: {\n              subject: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\", \"lex:com.atproto.admin.defs#repoBlobRef\"]\n              },\n              takedown: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.admin.defs#statusAttr\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminListCommunicationTemplates: {\n    lexicon: 1,\n    id: \"com.atproto.admin.listCommunicationTemplates\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get list of all communication templates.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"communicationTemplates\"],\n            properties: {\n              communicationTemplates: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#communicationTemplateView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminQueryModerationEvents: {\n    lexicon: 1,\n    id: \"com.atproto.admin.queryModerationEvents\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List moderation events related to a subject.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            types: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"The types of events (fully qualified string in the format of com.atproto.admin#modEvent<name>) to filter by. If not specified, all events are returned.\"\n            },\n            createdBy: {\n              type: \"string\",\n              format: \"did\"\n            },\n            sortDirection: {\n              type: \"string\",\n              default: \"desc\",\n              enum: [\"asc\", \"desc\"],\n              description: \"Sort direction for the events. Defaults to descending order of created at timestamp.\"\n            },\n            createdAfter: {\n              type: \"string\",\n              format: \"datetime\",\n              description: \"Retrieve events created after a given timestamp\"\n            },\n            createdBefore: {\n              type: \"string\",\n              format: \"datetime\",\n              description: \"Retrieve events created before a given timestamp\"\n            },\n            subject: {\n              type: \"string\",\n              format: \"uri\"\n            },\n            includeAllUserRecords: {\n              type: \"boolean\",\n              default: false,\n              description: \"If true, events on all record types (posts, lists, profile etc.) owned by the did are returned\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            hasComment: {\n              type: \"boolean\",\n              description: \"If true, only events with comments are returned\"\n            },\n            comment: {\n              type: \"string\",\n              description: \"If specified, only events with comments containing the keyword are returned\"\n            },\n            addedLabels: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"If specified, only events where all of these labels were added are returned\"\n            },\n            removedLabels: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"If specified, only events where all of these labels were removed are returned\"\n            },\n            reportTypes: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              }\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"events\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              events: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#modEventView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminQueryModerationStatuses: {\n    lexicon: 1,\n    id: \"com.atproto.admin.queryModerationStatuses\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"View moderation statuses of subjects (record or repo).\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"uri\"\n            },\n            comment: {\n              type: \"string\",\n              description: \"Search subjects by keyword from comments\"\n            },\n            reportedAfter: {\n              type: \"string\",\n              format: \"datetime\",\n              description: \"Search subjects reported after a given timestamp\"\n            },\n            reportedBefore: {\n              type: \"string\",\n              format: \"datetime\",\n              description: \"Search subjects reported before a given timestamp\"\n            },\n            reviewedAfter: {\n              type: \"string\",\n              format: \"datetime\",\n              description: \"Search subjects reviewed after a given timestamp\"\n            },\n            reviewedBefore: {\n              type: \"string\",\n              format: \"datetime\",\n              description: \"Search subjects reviewed before a given timestamp\"\n            },\n            includeMuted: {\n              type: \"boolean\",\n              description: \"By default, we don't include muted subjects in the results. Set this to true to include them.\"\n            },\n            reviewState: {\n              type: \"string\",\n              description: \"Specify when fetching subjects in a certain state\"\n            },\n            ignoreSubjects: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"uri\"\n              }\n            },\n            lastReviewedBy: {\n              type: \"string\",\n              format: \"did\",\n              description: \"Get all subject statuses that were reviewed by a specific moderator\"\n            },\n            sortField: {\n              type: \"string\",\n              default: \"lastReportedAt\",\n              enum: [\"lastReviewedAt\", \"lastReportedAt\"]\n            },\n            sortDirection: {\n              type: \"string\",\n              default: \"desc\",\n              enum: [\"asc\", \"desc\"]\n            },\n            takendown: {\n              type: \"boolean\",\n              description: \"Get subjects that were taken down\"\n            },\n            appealed: {\n              type: \"boolean\",\n              description: \"Get subjects in unresolved appealed status\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subjectStatuses\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              subjectStatuses: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#subjectStatusView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminSearchRepos: {\n    lexicon: 1,\n    id: \"com.atproto.admin.searchRepos\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find repositories based on a search term.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            term: {\n              type: \"string\",\n              description: \"DEPRECATED: use 'q' instead\"\n            },\n            q: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repos\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              repos: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.admin.defs#repoView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminSendEmail: {\n    lexicon: 1,\n    id: \"com.atproto.admin.sendEmail\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Send email to a user's account email address.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"recipientDid\", \"content\", \"senderDid\"],\n            properties: {\n              recipientDid: {\n                type: \"string\",\n                format: \"did\"\n              },\n              content: {\n                type: \"string\"\n              },\n              subject: {\n                type: \"string\"\n              },\n              senderDid: {\n                type: \"string\",\n                format: \"did\"\n              },\n              comment: {\n                type: \"string\",\n                description: \"Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"sent\"],\n            properties: {\n              sent: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminUpdateAccountEmail: {\n    lexicon: 1,\n    id: \"com.atproto.admin.updateAccountEmail\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to update an account's email.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"account\", \"email\"],\n            properties: {\n              account: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              email: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminUpdateAccountHandle: {\n    lexicon: 1,\n    id: \"com.atproto.admin.updateAccountHandle\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to update an account's handle.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\", \"handle\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminUpdateCommunicationTemplate: {\n    lexicon: 1,\n    id: \"com.atproto.admin.updateCommunicationTemplate\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"id\"],\n            properties: {\n              id: {\n                type: \"string\",\n                description: \"ID of the template to be updated.\"\n              },\n              name: {\n                type: \"string\",\n                description: \"Name of the template.\"\n              },\n              contentMarkdown: {\n                type: \"string\",\n                description: \"Content of the template, markdown supported, can contain variable placeholders.\"\n              },\n              subject: {\n                type: \"string\",\n                description: \"Subject of the message, used in emails.\"\n              },\n              updatedBy: {\n                type: \"string\",\n                format: \"did\",\n                description: \"DID of the user who is updating the template.\"\n              },\n              disabled: {\n                type: \"boolean\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.admin.defs#communicationTemplateView\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoAdminUpdateSubjectStatus: {\n    lexicon: 1,\n    id: \"com.atproto.admin.updateSubjectStatus\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Update the service-specific admin status of a subject (account, record, or blob).\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\"],\n            properties: {\n              subject: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\", \"lex:com.atproto.admin.defs#repoBlobRef\"]\n              },\n              takedown: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.admin.defs#statusAttr\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\"],\n            properties: {\n              subject: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\", \"lex:com.atproto.admin.defs#repoBlobRef\"]\n              },\n              takedown: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.admin.defs#statusAttr\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoIdentityResolveHandle: {\n    lexicon: 1,\n    id: \"com.atproto.identity.resolveHandle\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Provides the DID of a repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"handle\"],\n          properties: {\n            handle: {\n              type: \"string\",\n              format: \"handle\",\n              description: \"The handle to resolve.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoIdentityUpdateHandle: {\n    lexicon: 1,\n    id: \"com.atproto.identity.updateHandle\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Updates the handle of the account.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\"],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoLabelDefs: {\n    lexicon: 1,\n    id: \"com.atproto.label.defs\",\n    defs: {\n      label: {\n        type: \"object\",\n        description: \"Metadata tag on an atproto resource (eg, repo or record).\",\n        required: [\"src\", \"uri\", \"val\", \"cts\"],\n        properties: {\n          src: {\n            type: \"string\",\n            format: \"did\",\n            description: \"DID of the actor who created this label.\"\n          },\n          uri: {\n            type: \"string\",\n            format: \"uri\",\n            description: \"AT URI of the record, repository (account), or other resource that this label applies to.\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\",\n            description: \"Optionally, CID specifying the specific version of 'uri' resource this label applies to.\"\n          },\n          val: {\n            type: \"string\",\n            maxLength: 128,\n            description: \"The short string name of the value or type of this label.\"\n          },\n          neg: {\n            type: \"boolean\",\n            description: \"If true, this is a negation label, overwriting a previous label.\"\n          },\n          cts: {\n            type: \"string\",\n            format: \"datetime\",\n            description: \"Timestamp when this label was created.\"\n          }\n        }\n      },\n      selfLabels: {\n        type: \"object\",\n        description: \"Metadata tags on an atproto record, published by the author within the record.\",\n        required: [\"values\"],\n        properties: {\n          values: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#selfLabel\"\n            },\n            maxLength: 10\n          }\n        }\n      },\n      selfLabel: {\n        type: \"object\",\n        description: \"Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.\",\n        required: [\"val\"],\n        properties: {\n          val: {\n            type: \"string\",\n            maxLength: 128,\n            description: \"The short string name of the value or type of this label.\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoLabelQueryLabels: {\n    lexicon: 1,\n    id: \"com.atproto.label.queryLabels\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find labels relevant to the provided URI patterns.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uriPatterns\"],\n          properties: {\n            uriPatterns: {\n              type: \"array\",\n              items: {\n                type: \"string\"\n              },\n              description: \"List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.\"\n            },\n            sources: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"did\"\n              },\n              description: \"Optional list of label sources (DIDs) to filter on.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 250,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"labels\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              labels: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.label.defs#label\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoLabelSubscribeLabels: {\n    lexicon: 1,\n    id: \"com.atproto.label.subscribeLabels\",\n    defs: {\n      main: {\n        type: \"subscription\",\n        description: \"Subscribe to label updates.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            cursor: {\n              type: \"integer\",\n              description: \"The last known event to backfill from.\"\n            }\n          }\n        },\n        message: {\n          schema: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.label.subscribeLabels#labels\", \"lex:com.atproto.label.subscribeLabels#info\"]\n          }\n        },\n        errors: [{\n          name: \"FutureCursor\"\n        }]\n      },\n      labels: {\n        type: \"object\",\n        required: [\"seq\", \"labels\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      info: {\n        type: \"object\",\n        required: [\"name\"],\n        properties: {\n          name: {\n            type: \"string\",\n            knownValues: [\"OutdatedCursor\"]\n          },\n          message: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoModerationCreateReport: {\n    lexicon: 1,\n    id: \"com.atproto.moderation.createReport\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Report a repo or a record.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"reasonType\", \"subject\"],\n            properties: {\n              reasonType: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.moderation.defs#reasonType\"\n              },\n              reason: {\n                type: \"string\"\n              },\n              subject: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\"]\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"id\", \"reasonType\", \"subject\", \"reportedBy\", \"createdAt\"],\n            properties: {\n              id: {\n                type: \"integer\"\n              },\n              reasonType: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.moderation.defs#reasonType\"\n              },\n              reason: {\n                type: \"string\",\n                maxGraphemes: 2e3,\n                maxLength: 2e4\n              },\n              subject: {\n                type: \"union\",\n                refs: [\"lex:com.atproto.admin.defs#repoRef\", \"lex:com.atproto.repo.strongRef\"]\n              },\n              reportedBy: {\n                type: \"string\",\n                format: \"did\"\n              },\n              createdAt: {\n                type: \"string\",\n                format: \"datetime\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoModerationDefs: {\n    lexicon: 1,\n    id: \"com.atproto.moderation.defs\",\n    defs: {\n      reasonType: {\n        type: \"string\",\n        knownValues: [\"com.atproto.moderation.defs#reasonSpam\", \"com.atproto.moderation.defs#reasonViolation\", \"com.atproto.moderation.defs#reasonMisleading\", \"com.atproto.moderation.defs#reasonSexual\", \"com.atproto.moderation.defs#reasonRude\", \"com.atproto.moderation.defs#reasonOther\", \"com.atproto.moderation.defs#reasonAppeal\"]\n      },\n      reasonSpam: {\n        type: \"token\",\n        description: \"Spam: frequent unwanted promotion, replies, mentions\"\n      },\n      reasonViolation: {\n        type: \"token\",\n        description: \"Direct violation of server rules, laws, terms of service\"\n      },\n      reasonMisleading: {\n        type: \"token\",\n        description: \"Misleading identity, affiliation, or content\"\n      },\n      reasonSexual: {\n        type: \"token\",\n        description: \"Unwanted or mislabeled sexual content\"\n      },\n      reasonRude: {\n        type: \"token\",\n        description: \"Rude, harassing, explicit, or otherwise unwelcoming behavior\"\n      },\n      reasonOther: {\n        type: \"token\",\n        description: \"Other: reports not falling under another report category\"\n      },\n      reasonAppeal: {\n        type: \"token\",\n        description: \"Appeal: appeal a previously taken moderation action\"\n      }\n    }\n  },\n  ComAtprotoRepoApplyWrites: {\n    lexicon: 1,\n    id: \"com.atproto.repo.applyWrites\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Apply a batch transaction of creates, updates, and deletes.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"writes\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              validate: {\n                type: \"boolean\",\n                default: true,\n                description: \"Flag for validating the records.\"\n              },\n              writes: {\n                type: \"array\",\n                items: {\n                  type: \"union\",\n                  refs: [\"lex:com.atproto.repo.applyWrites#create\", \"lex:com.atproto.repo.applyWrites#update\", \"lex:com.atproto.repo.applyWrites#delete\"],\n                  closed: true\n                }\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"InvalidSwap\"\n        }]\n      },\n      create: {\n        type: \"object\",\n        description: \"Create a new record.\",\n        required: [\"collection\", \"value\"],\n        properties: {\n          collection: {\n            type: \"string\",\n            format: \"nsid\"\n          },\n          rkey: {\n            type: \"string\",\n            maxLength: 15\n          },\n          value: {\n            type: \"unknown\"\n          }\n        }\n      },\n      update: {\n        type: \"object\",\n        description: \"Update an existing record.\",\n        required: [\"collection\", \"rkey\", \"value\"],\n        properties: {\n          collection: {\n            type: \"string\",\n            format: \"nsid\"\n          },\n          rkey: {\n            type: \"string\"\n          },\n          value: {\n            type: \"unknown\"\n          }\n        }\n      },\n      delete: {\n        type: \"object\",\n        description: \"Delete an existing record.\",\n        required: [\"collection\", \"rkey\"],\n        properties: {\n          collection: {\n            type: \"string\",\n            format: \"nsid\"\n          },\n          rkey: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoCreateRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.createRecord\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create a new record.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"collection\", \"record\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              collection: {\n                type: \"string\",\n                format: \"nsid\",\n                description: \"The NSID of the record collection.\"\n              },\n              rkey: {\n                type: \"string\",\n                description: \"The key of the record.\",\n                maxLength: 15\n              },\n              validate: {\n                type: \"boolean\",\n                default: true,\n                description: \"Flag for validating the record.\"\n              },\n              record: {\n                type: \"unknown\",\n                description: \"The record to create.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by CID.\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"cid\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"InvalidSwap\"\n        }]\n      }\n    }\n  },\n  ComAtprotoRepoDeleteRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.deleteRecord\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete a record, or ensure it doesn't exist.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"collection\", \"rkey\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              collection: {\n                type: \"string\",\n                format: \"nsid\",\n                description: \"The NSID of the record collection.\"\n              },\n              rkey: {\n                type: \"string\",\n                description: \"The key of the record.\"\n              },\n              swapRecord: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous record by CID.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by CID.\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"InvalidSwap\"\n        }]\n      }\n    }\n  },\n  ComAtprotoRepoDescribeRepo: {\n    lexicon: 1,\n    id: \"com.atproto.repo.describeRepo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about the repo, including the list of collections.\",\n        parameters: {\n          type: \"params\",\n          required: [\"repo\"],\n          properties: {\n            repo: {\n              type: \"string\",\n              format: \"at-identifier\",\n              description: \"The handle or DID of the repo.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\", \"did\", \"didDoc\", \"collections\", \"handleIsCorrect\"],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              didDoc: {\n                type: \"unknown\"\n              },\n              collections: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"nsid\"\n                }\n              },\n              handleIsCorrect: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoGetRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.getRecord\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a record.\",\n        parameters: {\n          type: \"params\",\n          required: [\"repo\", \"collection\", \"rkey\"],\n          properties: {\n            repo: {\n              type: \"string\",\n              format: \"at-identifier\",\n              description: \"The handle or DID of the repo.\"\n            },\n            collection: {\n              type: \"string\",\n              format: \"nsid\",\n              description: \"The NSID of the record collection.\"\n            },\n            rkey: {\n              type: \"string\",\n              description: \"The key of the record.\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The CID of the version of the record. If not specified, then return the most recent version.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"value\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              value: {\n                type: \"unknown\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoListRecords: {\n    lexicon: 1,\n    id: \"com.atproto.repo.listRecords\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List a range of records in a collection.\",\n        parameters: {\n          type: \"params\",\n          required: [\"repo\", \"collection\"],\n          properties: {\n            repo: {\n              type: \"string\",\n              format: \"at-identifier\",\n              description: \"The handle or DID of the repo.\"\n            },\n            collection: {\n              type: \"string\",\n              format: \"nsid\",\n              description: \"The NSID of the record type.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n              description: \"The number of records to return.\"\n            },\n            cursor: {\n              type: \"string\"\n            },\n            rkeyStart: {\n              type: \"string\",\n              description: \"DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)\"\n            },\n            rkeyEnd: {\n              type: \"string\",\n              description: \"DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)\"\n            },\n            reverse: {\n              type: \"boolean\",\n              description: \"Flag to reverse the order of the returned records.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"records\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              records: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.repo.listRecords#record\"\n                }\n              }\n            }\n          }\n        }\n      },\n      record: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"value\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          value: {\n            type: \"unknown\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoPutRecord: {\n    lexicon: 1,\n    id: \"com.atproto.repo.putRecord\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Write a record, creating or updating it as needed.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repo\", \"collection\", \"rkey\", \"record\"],\n            nullable: [\"swapRecord\"],\n            properties: {\n              repo: {\n                type: \"string\",\n                format: \"at-identifier\",\n                description: \"The handle or DID of the repo.\"\n              },\n              collection: {\n                type: \"string\",\n                format: \"nsid\",\n                description: \"The NSID of the record collection.\"\n              },\n              rkey: {\n                type: \"string\",\n                description: \"The key of the record.\",\n                maxLength: 15\n              },\n              validate: {\n                type: \"boolean\",\n                default: true,\n                description: \"Flag for validating the record.\"\n              },\n              record: {\n                type: \"unknown\",\n                description: \"The record to write.\"\n              },\n              swapRecord: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous record by CID.\"\n              },\n              swapCommit: {\n                type: \"string\",\n                format: \"cid\",\n                description: \"Compare and swap with the previous commit by CID.\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"cid\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"InvalidSwap\"\n        }]\n      }\n    }\n  },\n  ComAtprotoRepoStrongRef: {\n    lexicon: 1,\n    id: \"com.atproto.repo.strongRef\",\n    description: \"A URI with a content-hash fingerprint.\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"uri\", \"cid\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoRepoUploadBlob: {\n    lexicon: 1,\n    id: \"com.atproto.repo.uploadBlob\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Upload a new blob to be added to repo in a later request.\",\n        input: {\n          encoding: \"*/*\"\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"blob\"],\n            properties: {\n              blob: {\n                type: \"blob\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerConfirmEmail: {\n    lexicon: 1,\n    id: \"com.atproto.server.confirmEmail\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Confirm an email using a token from com.atproto.server.requestEmailConfirmation.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"email\", \"token\"],\n            properties: {\n              email: {\n                type: \"string\"\n              },\n              token: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"AccountNotFound\"\n        }, {\n          name: \"ExpiredToken\"\n        }, {\n          name: \"InvalidToken\"\n        }, {\n          name: \"InvalidEmail\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerCreateAccount: {\n    lexicon: 1,\n    id: \"com.atproto.server.createAccount\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an account.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\"],\n            properties: {\n              email: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              inviteCode: {\n                type: \"string\"\n              },\n              verificationCode: {\n                type: \"string\"\n              },\n              verificationPhone: {\n                type: \"string\"\n              },\n              password: {\n                type: \"string\"\n              },\n              recoveryKey: {\n                type: \"string\"\n              },\n              plcOp: {\n                type: \"unknown\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              didDoc: {\n                type: \"unknown\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"InvalidHandle\"\n        }, {\n          name: \"InvalidPassword\"\n        }, {\n          name: \"InvalidInviteCode\"\n        }, {\n          name: \"HandleNotAvailable\"\n        }, {\n          name: \"UnsupportedDomain\"\n        }, {\n          name: \"UnresolvableDid\"\n        }, {\n          name: \"IncompatibleDidDoc\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerCreateAppPassword: {\n    lexicon: 1,\n    id: \"com.atproto.server.createAppPassword\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an App Password.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"name\"],\n            properties: {\n              name: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.server.createAppPassword#appPassword\"\n          }\n        },\n        errors: [{\n          name: \"AccountTakedown\"\n        }]\n      },\n      appPassword: {\n        type: \"object\",\n        required: [\"name\", \"password\", \"createdAt\"],\n        properties: {\n          name: {\n            type: \"string\"\n          },\n          password: {\n            type: \"string\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateInviteCode: {\n    lexicon: 1,\n    id: \"com.atproto.server.createInviteCode\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an invite code.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"useCount\"],\n            properties: {\n              useCount: {\n                type: \"integer\"\n              },\n              forAccount: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"code\"],\n            properties: {\n              code: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.server.createInviteCodes\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create invite codes.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codeCount\", \"useCount\"],\n            properties: {\n              codeCount: {\n                type: \"integer\",\n                default: 1\n              },\n              useCount: {\n                type: \"integer\"\n              },\n              forAccounts: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"did\"\n                }\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codes\"],\n            properties: {\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.createInviteCodes#accountCodes\"\n                }\n              }\n            }\n          }\n        }\n      },\n      accountCodes: {\n        type: \"object\",\n        required: [\"account\", \"codes\"],\n        properties: {\n          account: {\n            type: \"string\"\n          },\n          codes: {\n            type: \"array\",\n            items: {\n              type: \"string\"\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerCreateSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.createSession\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Create an authentication session.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"identifier\", \"password\"],\n            properties: {\n              identifier: {\n                type: \"string\",\n                description: \"Handle or other identifier supported by the server for the authenticating user.\"\n              },\n              password: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              didDoc: {\n                type: \"unknown\"\n              },\n              email: {\n                type: \"string\"\n              },\n              emailConfirmed: {\n                type: \"boolean\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"AccountTakedown\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerDefs: {\n    lexicon: 1,\n    id: \"com.atproto.server.defs\",\n    defs: {\n      inviteCode: {\n        type: \"object\",\n        required: [\"code\", \"available\", \"disabled\", \"forAccount\", \"createdBy\", \"createdAt\", \"uses\"],\n        properties: {\n          code: {\n            type: \"string\"\n          },\n          available: {\n            type: \"integer\"\n          },\n          disabled: {\n            type: \"boolean\"\n          },\n          forAccount: {\n            type: \"string\"\n          },\n          createdBy: {\n            type: \"string\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          uses: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.server.defs#inviteCodeUse\"\n            }\n          }\n        }\n      },\n      inviteCodeUse: {\n        type: \"object\",\n        required: [\"usedBy\", \"usedAt\"],\n        properties: {\n          usedBy: {\n            type: \"string\",\n            format: \"did\"\n          },\n          usedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerDeleteAccount: {\n    lexicon: 1,\n    id: \"com.atproto.server.deleteAccount\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete an actor's account with a token and password.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\", \"password\", \"token\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              password: {\n                type: \"string\"\n              },\n              token: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"ExpiredToken\"\n        }, {\n          name: \"InvalidToken\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerDeleteSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.deleteSession\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Delete the current session.\"\n      }\n    }\n  },\n  ComAtprotoServerDescribeServer: {\n    lexicon: 1,\n    id: \"com.atproto.server.describeServer\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a document describing the service's accounts configuration.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"availableUserDomains\"],\n            properties: {\n              inviteCodeRequired: {\n                type: \"boolean\"\n              },\n              phoneVerificationRequired: {\n                type: \"boolean\"\n              },\n              availableUserDomains: {\n                type: \"array\",\n                items: {\n                  type: \"string\"\n                }\n              },\n              links: {\n                type: \"ref\",\n                ref: \"lex:com.atproto.server.describeServer#links\"\n              }\n            }\n          }\n        }\n      },\n      links: {\n        type: \"object\",\n        properties: {\n          privacyPolicy: {\n            type: \"string\"\n          },\n          termsOfService: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerGetAccountInviteCodes: {\n    lexicon: 1,\n    id: \"com.atproto.server.getAccountInviteCodes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get all invite codes for a given account.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            includeUsed: {\n              type: \"boolean\",\n              default: true\n            },\n            createAvailable: {\n              type: \"boolean\",\n              default: true\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"codes\"],\n            properties: {\n              codes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.defs#inviteCode\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"DuplicateCreate\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerGetSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.getSession\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about the current session.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\", \"did\"],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              email: {\n                type: \"string\"\n              },\n              emailConfirmed: {\n                type: \"boolean\"\n              },\n              didDoc: {\n                type: \"unknown\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerListAppPasswords: {\n    lexicon: 1,\n    id: \"com.atproto.server.listAppPasswords\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List all App Passwords.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"passwords\"],\n            properties: {\n              passwords: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.server.listAppPasswords#appPassword\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"AccountTakedown\"\n        }]\n      },\n      appPassword: {\n        type: \"object\",\n        required: [\"name\", \"createdAt\"],\n        properties: {\n          name: {\n            type: \"string\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerRefreshSession: {\n    lexicon: 1,\n    id: \"com.atproto.server.refreshSession\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Refresh an authentication session.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              didDoc: {\n                type: \"unknown\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"AccountTakedown\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerRequestAccountDelete: {\n    lexicon: 1,\n    id: \"com.atproto.server.requestAccountDelete\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Initiate a user account deletion via email.\"\n      }\n    }\n  },\n  ComAtprotoServerRequestEmailConfirmation: {\n    lexicon: 1,\n    id: \"com.atproto.server.requestEmailConfirmation\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Request an email with a code to confirm ownership of email.\"\n      }\n    }\n  },\n  ComAtprotoServerRequestEmailUpdate: {\n    lexicon: 1,\n    id: \"com.atproto.server.requestEmailUpdate\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Request a token in order to update email.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"tokenRequired\"],\n            properties: {\n              tokenRequired: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerRequestPasswordReset: {\n    lexicon: 1,\n    id: \"com.atproto.server.requestPasswordReset\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Initiate a user account password reset via email.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"email\"],\n            properties: {\n              email: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerReserveSigningKey: {\n    lexicon: 1,\n    id: \"com.atproto.server.reserveSigningKey\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Reserve a repo signing key for account creation.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            properties: {\n              did: {\n                type: \"string\",\n                description: \"The did to reserve a new did:key for\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"signingKey\"],\n            properties: {\n              signingKey: {\n                type: \"string\",\n                description: \"Public signing key in the form of a did:key.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerResetPassword: {\n    lexicon: 1,\n    id: \"com.atproto.server.resetPassword\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Reset a user account password using a token.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"token\", \"password\"],\n            properties: {\n              token: {\n                type: \"string\"\n              },\n              password: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"ExpiredToken\"\n        }, {\n          name: \"InvalidToken\"\n        }]\n      }\n    }\n  },\n  ComAtprotoServerRevokeAppPassword: {\n    lexicon: 1,\n    id: \"com.atproto.server.revokeAppPassword\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Revoke an App Password by name.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"name\"],\n            properties: {\n              name: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoServerUpdateEmail: {\n    lexicon: 1,\n    id: \"com.atproto.server.updateEmail\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Update an account's email.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"email\"],\n            properties: {\n              email: {\n                type: \"string\"\n              },\n              token: {\n                type: \"string\",\n                description: \"Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"ExpiredToken\"\n        }, {\n          name: \"InvalidToken\"\n        }, {\n          name: \"TokenRequired\"\n        }]\n      }\n    }\n  },\n  ComAtprotoSyncGetBlob: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getBlob\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a blob associated with a given repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\", \"cid\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"The CID of the blob to fetch\"\n            }\n          }\n        },\n        output: {\n          encoding: \"*/*\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetBlocks: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getBlocks\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get blocks from a given repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\", \"cids\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            cids: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetCheckout: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getCheckout\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"DEPRECATED - please use com.atproto.sync.getRepo instead\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetHead: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getHead\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"DEPRECATED - please use com.atproto.sync.getLatestCommit instead\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"root\"],\n            properties: {\n              root: {\n                type: \"string\",\n                format: \"cid\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"HeadNotFound\"\n        }]\n      }\n    }\n  },\n  ComAtprotoSyncGetLatestCommit: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getLatestCommit\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get the current commit CID & revision of the repo.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"cid\", \"rev\"],\n            properties: {\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              rev: {\n                type: \"string\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"RepoNotFound\"\n        }]\n      }\n    }\n  },\n  ComAtprotoSyncGetRecord: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getRecord\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get blocks needed for existence or non-existence of record.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\", \"collection\", \"rkey\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            collection: {\n              type: \"string\",\n              format: \"nsid\"\n            },\n            rkey: {\n              type: \"string\"\n            },\n            commit: {\n              type: \"string\",\n              format: \"cid\",\n              description: \"An optional past commit CID.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncGetRepo: {\n    lexicon: 1,\n    id: \"com.atproto.sync.getRepo\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Gets the DID's repo, optionally catching up from a specific revision.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            since: {\n              type: \"string\",\n              description: \"The revision of the repo to catch up from.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/vnd.ipld.car\"\n        }\n      }\n    }\n  },\n  ComAtprotoSyncListBlobs: {\n    lexicon: 1,\n    id: \"com.atproto.sync.listBlobs\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List blob CIDs since some revision.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            },\n            since: {\n              type: \"string\",\n              description: \"Optional revision of the repo to list blobs since.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 1e3,\n              default: 500\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"cids\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              cids: {\n                type: \"array\",\n                items: {\n                  type: \"string\",\n                  format: \"cid\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncListRepos: {\n    lexicon: 1,\n    id: \"com.atproto.sync.listRepos\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"List DIDs and root CIDs of hosted repos.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 1e3,\n              default: 500\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"repos\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              repos: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.sync.listRepos#repo\"\n                }\n              }\n            }\n          }\n        }\n      },\n      repo: {\n        type: \"object\",\n        required: [\"did\", \"head\", \"rev\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          head: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          rev: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncNotifyOfUpdate: {\n    lexicon: 1,\n    id: \"com.atproto.sync.notifyOfUpdate\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Notify a crawling service of a recent update; often when a long break between updates causes the connection with the crawling service to break.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"hostname\"],\n            properties: {\n              hostname: {\n                type: \"string\",\n                description: \"Hostname of the service that is notifying of update.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncRequestCrawl: {\n    lexicon: 1,\n    id: \"com.atproto.sync.requestCrawl\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Request a service to persistently crawl hosted repos.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"hostname\"],\n            properties: {\n              hostname: {\n                type: \"string\",\n                description: \"Hostname of the service that is requesting to be crawled.\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoSyncSubscribeRepos: {\n    lexicon: 1,\n    id: \"com.atproto.sync.subscribeRepos\",\n    defs: {\n      main: {\n        type: \"subscription\",\n        description: \"Subscribe to repo updates.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            cursor: {\n              type: \"integer\",\n              description: \"The last known event to backfill from.\"\n            }\n          }\n        },\n        message: {\n          schema: {\n            type: \"union\",\n            refs: [\"lex:com.atproto.sync.subscribeRepos#commit\", \"lex:com.atproto.sync.subscribeRepos#handle\", \"lex:com.atproto.sync.subscribeRepos#migrate\", \"lex:com.atproto.sync.subscribeRepos#tombstone\", \"lex:com.atproto.sync.subscribeRepos#info\"]\n          }\n        },\n        errors: [{\n          name: \"FutureCursor\"\n        }, {\n          name: \"ConsumerTooSlow\"\n        }]\n      },\n      commit: {\n        type: \"object\",\n        required: [\"seq\", \"rebase\", \"tooBig\", \"repo\", \"commit\", \"rev\", \"since\", \"blocks\", \"ops\", \"blobs\", \"time\"],\n        nullable: [\"prev\", \"since\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          rebase: {\n            type: \"boolean\"\n          },\n          tooBig: {\n            type: \"boolean\"\n          },\n          repo: {\n            type: \"string\",\n            format: \"did\"\n          },\n          commit: {\n            type: \"cid-link\"\n          },\n          prev: {\n            type: \"cid-link\"\n          },\n          rev: {\n            type: \"string\",\n            description: \"The rev of the emitted commit.\"\n          },\n          since: {\n            type: \"string\",\n            description: \"The rev of the last emitted commit from this repo.\"\n          },\n          blocks: {\n            type: \"bytes\",\n            description: \"CAR file containing relevant blocks.\",\n            maxLength: 1e6\n          },\n          ops: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.sync.subscribeRepos#repoOp\"\n            },\n            maxLength: 200\n          },\n          blobs: {\n            type: \"array\",\n            items: {\n              type: \"cid-link\"\n            }\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      handle: {\n        type: \"object\",\n        required: [\"seq\", \"did\", \"handle\", \"time\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      migrate: {\n        type: \"object\",\n        required: [\"seq\", \"did\", \"migrateTo\", \"time\"],\n        nullable: [\"migrateTo\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          migrateTo: {\n            type: \"string\"\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      tombstone: {\n        type: \"object\",\n        required: [\"seq\", \"did\", \"time\"],\n        properties: {\n          seq: {\n            type: \"integer\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          time: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      info: {\n        type: \"object\",\n        required: [\"name\"],\n        properties: {\n          name: {\n            type: \"string\",\n            knownValues: [\"OutdatedCursor\"]\n          },\n          message: {\n            type: \"string\"\n          }\n        }\n      },\n      repoOp: {\n        type: \"object\",\n        description: \"A repo operation, ie a write of a single record. For creates and updates, CID is the record's CID as of this operation. For deletes, it's null.\",\n        required: [\"action\", \"path\", \"cid\"],\n        nullable: [\"cid\"],\n        properties: {\n          action: {\n            type: \"string\",\n            knownValues: [\"create\", \"update\", \"delete\"]\n          },\n          path: {\n            type: \"string\"\n          },\n          cid: {\n            type: \"cid-link\"\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoTempCheckSignupQueue: {\n    lexicon: 1,\n    id: \"com.atproto.temp.checkSignupQueue\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Check accounts location in signup queue.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"activated\"],\n            properties: {\n              activated: {\n                type: \"boolean\"\n              },\n              placeInQueue: {\n                type: \"integer\"\n              },\n              estimatedTimeMs: {\n                type: \"integer\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoTempFetchLabels: {\n    lexicon: 1,\n    id: \"com.atproto.temp.fetchLabels\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Fetch all labels from a labeler created after a certain date.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            since: {\n              type: \"integer\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 250,\n              default: 50\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"labels\"],\n            properties: {\n              labels: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:com.atproto.label.defs#label\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoTempImportRepo: {\n    lexicon: 1,\n    id: \"com.atproto.temp.importRepo\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Gets the did's repo, optionally catching up from a specific revision.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            }\n          }\n        },\n        input: {\n          encoding: \"application/vnd.ipld.car\"\n        },\n        output: {\n          encoding: \"text/plain\"\n        }\n      }\n    }\n  },\n  ComAtprotoTempPushBlob: {\n    lexicon: 1,\n    id: \"com.atproto.temp.pushBlob\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Gets the did's repo, optionally catching up from a specific revision.\",\n        parameters: {\n          type: \"params\",\n          required: [\"did\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\",\n              description: \"The DID of the repo.\"\n            }\n          }\n        },\n        input: {\n          encoding: \"*/*\"\n        }\n      }\n    }\n  },\n  ComAtprotoTempRequestPhoneVerification: {\n    lexicon: 1,\n    id: \"com.atproto.temp.requestPhoneVerification\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Request a verification code to be sent to the supplied phone number\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"phoneNumber\"],\n            properties: {\n              phoneNumber: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  ComAtprotoTempTransferAccount: {\n    lexicon: 1,\n    id: \"com.atproto.temp.transferAccount\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Transfer an account.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"handle\", \"did\", \"plcOp\"],\n            properties: {\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              plcOp: {\n                type: \"unknown\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"accessJwt\", \"refreshJwt\", \"handle\", \"did\"],\n            properties: {\n              accessJwt: {\n                type: \"string\"\n              },\n              refreshJwt: {\n                type: \"string\"\n              },\n              handle: {\n                type: \"string\",\n                format: \"handle\"\n              },\n              did: {\n                type: \"string\",\n                format: \"did\"\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"InvalidHandle\"\n        }, {\n          name: \"InvalidPassword\"\n        }, {\n          name: \"InvalidInviteCode\"\n        }, {\n          name: \"HandleNotAvailable\"\n        }, {\n          name: \"UnsupportedDomain\"\n        }, {\n          name: \"UnresolvableDid\"\n        }, {\n          name: \"IncompatibleDidDoc\"\n        }]\n      }\n    }\n  },\n  AppBskyActorDefs: {\n    lexicon: 1,\n    id: \"app.bsky.actor.defs\",\n    description: \"A reference to an actor in the network.\",\n    defs: {\n      profileViewBasic: {\n        type: \"object\",\n        required: [\"did\", \"handle\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          displayName: {\n            type: \"string\",\n            maxGraphemes: 64,\n            maxLength: 640\n          },\n          avatar: {\n            type: \"string\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      profileView: {\n        type: \"object\",\n        required: [\"did\", \"handle\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          displayName: {\n            type: \"string\",\n            maxGraphemes: 64,\n            maxLength: 640\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 256,\n            maxLength: 2560\n          },\n          avatar: {\n            type: \"string\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      profileViewDetailed: {\n        type: \"object\",\n        required: [\"did\", \"handle\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          handle: {\n            type: \"string\",\n            format: \"handle\"\n          },\n          displayName: {\n            type: \"string\",\n            maxGraphemes: 64,\n            maxLength: 640\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 256,\n            maxLength: 2560\n          },\n          avatar: {\n            type: \"string\"\n          },\n          banner: {\n            type: \"string\"\n          },\n          followersCount: {\n            type: \"integer\"\n          },\n          followsCount: {\n            type: \"integer\"\n          },\n          postsCount: {\n            type: \"integer\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      },\n      viewerState: {\n        type: \"object\",\n        properties: {\n          muted: {\n            type: \"boolean\"\n          },\n          mutedByList: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewBasic\"\n          },\n          blockedBy: {\n            type: \"boolean\"\n          },\n          blocking: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          blockingByList: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewBasic\"\n          },\n          following: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          followedBy: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      preferences: {\n        type: \"array\",\n        items: {\n          type: \"union\",\n          refs: [\"lex:app.bsky.actor.defs#adultContentPref\", \"lex:app.bsky.actor.defs#contentLabelPref\", \"lex:app.bsky.actor.defs#savedFeedsPref\", \"lex:app.bsky.actor.defs#personalDetailsPref\", \"lex:app.bsky.actor.defs#feedViewPref\", \"lex:app.bsky.actor.defs#threadViewPref\", \"lex:app.bsky.actor.defs#interestsPref\"]\n        }\n      },\n      adultContentPref: {\n        type: \"object\",\n        required: [\"enabled\"],\n        properties: {\n          enabled: {\n            type: \"boolean\",\n            default: false\n          }\n        }\n      },\n      contentLabelPref: {\n        type: \"object\",\n        required: [\"label\", \"visibility\"],\n        properties: {\n          label: {\n            type: \"string\"\n          },\n          visibility: {\n            type: \"string\",\n            knownValues: [\"show\", \"warn\", \"hide\"]\n          }\n        }\n      },\n      savedFeedsPref: {\n        type: \"object\",\n        required: [\"pinned\", \"saved\"],\n        properties: {\n          pinned: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"at-uri\"\n            }\n          },\n          saved: {\n            type: \"array\",\n            items: {\n              type: \"string\",\n              format: \"at-uri\"\n            }\n          }\n        }\n      },\n      personalDetailsPref: {\n        type: \"object\",\n        properties: {\n          birthDate: {\n            type: \"string\",\n            format: \"datetime\",\n            description: \"The birth date of account owner.\"\n          }\n        }\n      },\n      feedViewPref: {\n        type: \"object\",\n        required: [\"feed\"],\n        properties: {\n          feed: {\n            type: \"string\",\n            description: \"The URI of the feed, or an identifier which describes the feed.\"\n          },\n          hideReplies: {\n            type: \"boolean\",\n            description: \"Hide replies in the feed.\"\n          },\n          hideRepliesByUnfollowed: {\n            type: \"boolean\",\n            description: \"Hide replies in the feed if they are not by followed users.\"\n          },\n          hideRepliesByLikeCount: {\n            type: \"integer\",\n            description: \"Hide replies in the feed if they do not have this number of likes.\"\n          },\n          hideReposts: {\n            type: \"boolean\",\n            description: \"Hide reposts in the feed.\"\n          },\n          hideQuotePosts: {\n            type: \"boolean\",\n            description: \"Hide quote posts in the feed.\"\n          }\n        }\n      },\n      threadViewPref: {\n        type: \"object\",\n        properties: {\n          sort: {\n            type: \"string\",\n            description: \"Sorting mode for threads.\",\n            knownValues: [\"oldest\", \"newest\", \"most-likes\", \"random\"]\n          },\n          prioritizeFollowedUsers: {\n            type: \"boolean\",\n            description: \"Show followed users at the top of all replies.\"\n          }\n        }\n      },\n      interestsPref: {\n        type: \"object\",\n        required: [\"tags\"],\n        properties: {\n          tags: {\n            type: \"array\",\n            maxLength: 100,\n            items: {\n              type: \"string\",\n              maxLength: 640,\n              maxGraphemes: 64\n            },\n            description: \"A list of tags which describe the account owner's interests gathered during onboarding.\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetPreferences: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getPreferences\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get private preferences attached to the account.\",\n        parameters: {\n          type: \"params\",\n          properties: {}\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"preferences\"],\n            properties: {\n              preferences: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#preferences\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetProfile: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getProfile\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get detailed profile view of an actor.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewDetailed\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetProfiles: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getProfiles\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get detailed profile views of multiple actors.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actors\"],\n          properties: {\n            actors: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"at-identifier\"\n              },\n              maxLength: 25\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"profiles\"],\n            properties: {\n              profiles: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileViewDetailed\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorGetSuggestions: {\n    lexicon: 1,\n    id: \"app.bsky.actor.getSuggestions\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of suggested actors, used for discovery.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorProfile: {\n    lexicon: 1,\n    id: \"app.bsky.actor.profile\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a profile.\",\n        key: \"literal:self\",\n        record: {\n          type: \"object\",\n          properties: {\n            displayName: {\n              type: \"string\",\n              maxGraphemes: 64,\n              maxLength: 640\n            },\n            description: {\n              type: \"string\",\n              maxGraphemes: 256,\n              maxLength: 2560\n            },\n            avatar: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            banner: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorPutPreferences: {\n    lexicon: 1,\n    id: \"app.bsky.actor.putPreferences\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Set the private preferences attached to the account.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"preferences\"],\n            properties: {\n              preferences: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#preferences\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorSearchActors: {\n    lexicon: 1,\n    id: \"app.bsky.actor.searchActors\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find actors (profiles) matching search criteria.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            term: {\n              type: \"string\",\n              description: \"DEPRECATED: use 'q' instead.\"\n            },\n            q: {\n              type: \"string\",\n              description: \"Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 25\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyActorSearchActorsTypeahead: {\n    lexicon: 1,\n    id: \"app.bsky.actor.searchActorsTypeahead\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find actor suggestions for a prefix search term.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            term: {\n              type: \"string\",\n              description: \"DEPRECATED: use 'q' instead.\"\n            },\n            q: {\n              type: \"string\",\n              description: \"Search query prefix; not a full query string.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 10\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedExternal: {\n    lexicon: 1,\n    id: \"app.bsky.embed.external\",\n    description: \"A representation of some externally linked content, embedded in another form of content.\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"external\"],\n        properties: {\n          external: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.external#external\"\n          }\n        }\n      },\n      external: {\n        type: \"object\",\n        required: [\"uri\", \"title\", \"description\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"uri\"\n          },\n          title: {\n            type: \"string\"\n          },\n          description: {\n            type: \"string\"\n          },\n          thumb: {\n            type: \"blob\",\n            accept: [\"image/*\"],\n            maxSize: 1e6\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"external\"],\n        properties: {\n          external: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.external#viewExternal\"\n          }\n        }\n      },\n      viewExternal: {\n        type: \"object\",\n        required: [\"uri\", \"title\", \"description\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"uri\"\n          },\n          title: {\n            type: \"string\"\n          },\n          description: {\n            type: \"string\"\n          },\n          thumb: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedImages: {\n    lexicon: 1,\n    id: \"app.bsky.embed.images\",\n    description: \"A set of images embedded in some other form of content.\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"images\"],\n        properties: {\n          images: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.embed.images#image\"\n            },\n            maxLength: 4\n          }\n        }\n      },\n      image: {\n        type: \"object\",\n        required: [\"image\", \"alt\"],\n        properties: {\n          image: {\n            type: \"blob\",\n            accept: [\"image/*\"],\n            maxSize: 1e6\n          },\n          alt: {\n            type: \"string\"\n          },\n          aspectRatio: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.images#aspectRatio\"\n          }\n        }\n      },\n      aspectRatio: {\n        type: \"object\",\n        description: \"width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.\",\n        required: [\"width\", \"height\"],\n        properties: {\n          width: {\n            type: \"integer\",\n            minimum: 1\n          },\n          height: {\n            type: \"integer\",\n            minimum: 1\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"images\"],\n        properties: {\n          images: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.embed.images#viewImage\"\n            },\n            maxLength: 4\n          }\n        }\n      },\n      viewImage: {\n        type: \"object\",\n        required: [\"thumb\", \"fullsize\", \"alt\"],\n        properties: {\n          thumb: {\n            type: \"string\"\n          },\n          fullsize: {\n            type: \"string\"\n          },\n          alt: {\n            type: \"string\"\n          },\n          aspectRatio: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.images#aspectRatio\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedRecord: {\n    lexicon: 1,\n    id: \"app.bsky.embed.record\",\n    description: \"A representation of a record embedded in another form of content.\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"record\"],\n        properties: {\n          record: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.repo.strongRef\"\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"record\"],\n        properties: {\n          record: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.embed.record#viewRecord\", \"lex:app.bsky.embed.record#viewNotFound\", \"lex:app.bsky.embed.record#viewBlocked\", \"lex:app.bsky.feed.defs#generatorView\", \"lex:app.bsky.graph.defs#listView\"]\n          }\n        }\n      },\n      viewRecord: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"author\", \"value\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n          },\n          value: {\n            type: \"unknown\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          embeds: {\n            type: \"array\",\n            items: {\n              type: \"union\",\n              refs: [\"lex:app.bsky.embed.images#view\", \"lex:app.bsky.embed.external#view\", \"lex:app.bsky.embed.record#view\", \"lex:app.bsky.embed.recordWithMedia#view\"]\n            }\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      viewNotFound: {\n        type: \"object\",\n        required: [\"uri\", \"notFound\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          notFound: {\n            type: \"boolean\",\n            const: true\n          }\n        }\n      },\n      viewBlocked: {\n        type: \"object\",\n        required: [\"uri\", \"blocked\", \"author\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          blocked: {\n            type: \"boolean\",\n            const: true\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#blockedAuthor\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyEmbedRecordWithMedia: {\n    lexicon: 1,\n    id: \"app.bsky.embed.recordWithMedia\",\n    description: \"A representation of a record embedded in another form of content, alongside other compatible embeds.\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"record\", \"media\"],\n        properties: {\n          record: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.record\"\n          },\n          media: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.embed.images\", \"lex:app.bsky.embed.external\"]\n          }\n        }\n      },\n      view: {\n        type: \"object\",\n        required: [\"record\", \"media\"],\n        properties: {\n          record: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.embed.record#view\"\n          },\n          media: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.embed.images#view\", \"lex:app.bsky.embed.external#view\"]\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedDefs: {\n    lexicon: 1,\n    id: \"app.bsky.feed.defs\",\n    defs: {\n      postView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"author\", \"record\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n          },\n          record: {\n            type: \"unknown\"\n          },\n          embed: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.embed.images#view\", \"lex:app.bsky.embed.external#view\", \"lex:app.bsky.embed.record#view\", \"lex:app.bsky.embed.recordWithMedia#view\"]\n          },\n          replyCount: {\n            type: \"integer\"\n          },\n          repostCount: {\n            type: \"integer\"\n          },\n          likeCount: {\n            type: \"integer\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#viewerState\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          },\n          threadgate: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#threadgateView\"\n          }\n        }\n      },\n      viewerState: {\n        type: \"object\",\n        properties: {\n          repost: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          like: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          replyDisabled: {\n            type: \"boolean\"\n          }\n        }\n      },\n      feedViewPost: {\n        type: \"object\",\n        required: [\"post\"],\n        properties: {\n          post: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#postView\"\n          },\n          reply: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#replyRef\"\n          },\n          reason: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#reasonRepost\"]\n          }\n        }\n      },\n      replyRef: {\n        type: \"object\",\n        required: [\"root\", \"parent\"],\n        properties: {\n          root: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#postView\", \"lex:app.bsky.feed.defs#notFoundPost\", \"lex:app.bsky.feed.defs#blockedPost\"]\n          },\n          parent: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#postView\", \"lex:app.bsky.feed.defs#notFoundPost\", \"lex:app.bsky.feed.defs#blockedPost\"]\n          }\n        }\n      },\n      reasonRepost: {\n        type: \"object\",\n        required: [\"by\", \"indexedAt\"],\n        properties: {\n          by: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileViewBasic\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      threadViewPost: {\n        type: \"object\",\n        required: [\"post\"],\n        properties: {\n          post: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#postView\"\n          },\n          parent: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#threadViewPost\", \"lex:app.bsky.feed.defs#notFoundPost\", \"lex:app.bsky.feed.defs#blockedPost\"]\n          },\n          replies: {\n            type: \"array\",\n            items: {\n              type: \"union\",\n              refs: [\"lex:app.bsky.feed.defs#threadViewPost\", \"lex:app.bsky.feed.defs#notFoundPost\", \"lex:app.bsky.feed.defs#blockedPost\"]\n            }\n          }\n        }\n      },\n      notFoundPost: {\n        type: \"object\",\n        required: [\"uri\", \"notFound\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          notFound: {\n            type: \"boolean\",\n            const: true\n          }\n        }\n      },\n      blockedPost: {\n        type: \"object\",\n        required: [\"uri\", \"blocked\", \"author\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          blocked: {\n            type: \"boolean\",\n            const: true\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#blockedAuthor\"\n          }\n        }\n      },\n      blockedAuthor: {\n        type: \"object\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#viewerState\"\n          }\n        }\n      },\n      generatorView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"did\", \"creator\", \"displayName\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          creator: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          },\n          displayName: {\n            type: \"string\"\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 300,\n            maxLength: 3e3\n          },\n          descriptionFacets: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.richtext.facet\"\n            }\n          },\n          avatar: {\n            type: \"string\"\n          },\n          likeCount: {\n            type: \"integer\",\n            minimum: 0\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.defs#generatorViewerState\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      generatorViewerState: {\n        type: \"object\",\n        properties: {\n          like: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      skeletonFeedPost: {\n        type: \"object\",\n        required: [\"post\"],\n        properties: {\n          post: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          reason: {\n            type: \"union\",\n            refs: [\"lex:app.bsky.feed.defs#skeletonReasonRepost\"]\n          }\n        }\n      },\n      skeletonReasonRepost: {\n        type: \"object\",\n        required: [\"repost\"],\n        properties: {\n          repost: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      threadgateView: {\n        type: \"object\",\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          record: {\n            type: \"unknown\"\n          },\n          lists: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.graph.defs#listViewBasic\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedDescribeFeedGenerator: {\n    lexicon: 1,\n    id: \"app.bsky.feed.describeFeedGenerator\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about a feed generator, including policies and offered feed URIs.\",\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"did\", \"feeds\"],\n            properties: {\n              did: {\n                type: \"string\",\n                format: \"did\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.describeFeedGenerator#feed\"\n                }\n              },\n              links: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.feed.describeFeedGenerator#links\"\n              }\n            }\n          }\n        }\n      },\n      feed: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      links: {\n        type: \"object\",\n        properties: {\n          privacyPolicy: {\n            type: \"string\"\n          },\n          termsOfService: {\n            type: \"string\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGenerator: {\n    lexicon: 1,\n    id: \"app.bsky.feed.generator\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of the existence of a feed generator.\",\n        key: \"any\",\n        record: {\n          type: \"object\",\n          required: [\"did\", \"displayName\", \"createdAt\"],\n          properties: {\n            did: {\n              type: \"string\",\n              format: \"did\"\n            },\n            displayName: {\n              type: \"string\",\n              maxGraphemes: 24,\n              maxLength: 240\n            },\n            description: {\n              type: \"string\",\n              maxGraphemes: 300,\n              maxLength: 3e3\n            },\n            descriptionFacets: {\n              type: \"array\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.richtext.facet\"\n              }\n            },\n            avatar: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetActorFeeds: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getActorFeeds\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of feeds created by the actor.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetActorLikes: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getActorLikes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of posts liked by an actor.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"BlockedActor\"\n        }, {\n          name: \"BlockedByActor\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedGetAuthorFeed: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getAuthorFeed\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a view of an actor's feed.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            filter: {\n              type: \"string\",\n              knownValues: [\"posts_with_replies\", \"posts_no_replies\", \"posts_with_media\", \"posts_and_author_threads\"],\n              default: \"posts_with_replies\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"BlockedActor\"\n        }, {\n          name: \"BlockedByActor\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedGetFeed: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeed\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a hydrated feed from an actor's selected feed generator.\",\n        parameters: {\n          type: \"params\",\n          required: [\"feed\"],\n          properties: {\n            feed: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"UnknownFeed\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedGetFeedGenerator: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeedGenerator\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about a feed generator.\",\n        parameters: {\n          type: \"params\",\n          required: [\"feed\"],\n          properties: {\n            feed: {\n              type: \"string\",\n              format: \"at-uri\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"view\", \"isOnline\", \"isValid\"],\n            properties: {\n              view: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.feed.defs#generatorView\"\n              },\n              isOnline: {\n                type: \"boolean\"\n              },\n              isValid: {\n                type: \"boolean\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetFeedGenerators: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeedGenerators\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get information about a list of feed generators.\",\n        parameters: {\n          type: \"params\",\n          required: [\"feeds\"],\n          properties: {\n            feeds: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"at-uri\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetFeedSkeleton: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getFeedSkeleton\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a skeleton of a feed provided by a feed generator.\",\n        parameters: {\n          type: \"params\",\n          required: [\"feed\"],\n          properties: {\n            feed: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#skeletonFeedPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"UnknownFeed\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedGetLikes: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getLikes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get the list of likes.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"likes\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              likes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.getLikes#like\"\n                }\n              }\n            }\n          }\n        }\n      },\n      like: {\n        type: \"object\",\n        required: [\"indexedAt\", \"createdAt\", \"actor\"],\n        properties: {\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          createdAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          actor: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetListFeed: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getListFeed\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a view of a recent posts from actors in a list.\",\n        parameters: {\n          type: \"params\",\n          required: [\"list\"],\n          properties: {\n            list: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"UnknownList\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedGetPostThread: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getPostThread\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get posts in a thread.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            depth: {\n              type: \"integer\",\n              default: 6,\n              minimum: 0,\n              maximum: 1e3\n            },\n            parentHeight: {\n              type: \"integer\",\n              default: 80,\n              minimum: 0,\n              maximum: 1e3\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"thread\"],\n            properties: {\n              thread: {\n                type: \"union\",\n                refs: [\"lex:app.bsky.feed.defs#threadViewPost\", \"lex:app.bsky.feed.defs#notFoundPost\", \"lex:app.bsky.feed.defs#blockedPost\"]\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"NotFound\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedGetPosts: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getPosts\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a view of an actor's feed.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uris\"],\n          properties: {\n            uris: {\n              type: \"array\",\n              items: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              maxLength: 25\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"posts\"],\n            properties: {\n              posts: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#postView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetRepostedBy: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getRepostedBy\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of reposts.\",\n        parameters: {\n          type: \"params\",\n          required: [\"uri\"],\n          properties: {\n            uri: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            cid: {\n              type: \"string\",\n              format: \"cid\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"uri\", \"repostedBy\"],\n            properties: {\n              uri: {\n                type: \"string\",\n                format: \"at-uri\"\n              },\n              cid: {\n                type: \"string\",\n                format: \"cid\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              repostedBy: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetSuggestedFeeds: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getSuggestedFeeds\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of suggested feeds for the viewer.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedGetTimeline: {\n    lexicon: 1,\n    id: \"app.bsky.feed.getTimeline\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a view of the actor's home timeline.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            algorithm: {\n              type: \"string\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feed\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feed: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#feedViewPost\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedLike: {\n    lexicon: 1,\n    id: \"app.bsky.feed.like\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a like.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.repo.strongRef\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedPost: {\n    lexicon: 1,\n    id: \"app.bsky.feed.post\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a post.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"text\", \"createdAt\"],\n          properties: {\n            text: {\n              type: \"string\",\n              maxLength: 3e3,\n              maxGraphemes: 300\n            },\n            entities: {\n              type: \"array\",\n              description: \"Deprecated: replaced by app.bsky.richtext.facet.\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.feed.post#entity\"\n              }\n            },\n            facets: {\n              type: \"array\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.richtext.facet\"\n              }\n            },\n            reply: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.feed.post#replyRef\"\n            },\n            embed: {\n              type: \"union\",\n              refs: [\"lex:app.bsky.embed.images\", \"lex:app.bsky.embed.external\", \"lex:app.bsky.embed.record\", \"lex:app.bsky.embed.recordWithMedia\"]\n            },\n            langs: {\n              type: \"array\",\n              maxLength: 3,\n              items: {\n                type: \"string\",\n                format: \"language\"\n              }\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            },\n            tags: {\n              type: \"array\",\n              maxLength: 8,\n              items: {\n                type: \"string\",\n                maxLength: 640,\n                maxGraphemes: 64\n              },\n              description: \"Additional non-inline tags describing this post.\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      },\n      replyRef: {\n        type: \"object\",\n        required: [\"root\", \"parent\"],\n        properties: {\n          root: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.repo.strongRef\"\n          },\n          parent: {\n            type: \"ref\",\n            ref: \"lex:com.atproto.repo.strongRef\"\n          }\n        }\n      },\n      entity: {\n        type: \"object\",\n        description: \"Deprecated: use facets instead.\",\n        required: [\"index\", \"type\", \"value\"],\n        properties: {\n          index: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.feed.post#textSlice\"\n          },\n          type: {\n            type: \"string\",\n            description: \"Expected values are 'mention' and 'link'.\"\n          },\n          value: {\n            type: \"string\"\n          }\n        }\n      },\n      textSlice: {\n        type: \"object\",\n        description: \"Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.\",\n        required: [\"start\", \"end\"],\n        properties: {\n          start: {\n            type: \"integer\",\n            minimum: 0\n          },\n          end: {\n            type: \"integer\",\n            minimum: 0\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedRepost: {\n    lexicon: 1,\n    id: \"app.bsky.feed.repost\",\n    defs: {\n      main: {\n        description: \"A declaration of a repost.\",\n        type: \"record\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.repo.strongRef\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyFeedSearchPosts: {\n    lexicon: 1,\n    id: \"app.bsky.feed.searchPosts\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Find posts matching search criteria.\",\n        parameters: {\n          type: \"params\",\n          required: [\"q\"],\n          properties: {\n            q: {\n              type: \"string\",\n              description: \"Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 25\n            },\n            cursor: {\n              type: \"string\",\n              description: \"Optional pagination mechanism; may not necessarily allow scrolling through entire result set.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"posts\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              hitsTotal: {\n                type: \"integer\",\n                description: \"Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.\"\n              },\n              posts: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#postView\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"BadQueryString\"\n        }]\n      }\n    }\n  },\n  AppBskyFeedThreadgate: {\n    lexicon: 1,\n    id: \"app.bsky.feed.threadgate\",\n    defs: {\n      main: {\n        type: \"record\",\n        key: \"tid\",\n        description: \"Defines interaction gating rules for a thread. The rkey of the threadgate record should match the rkey of the thread's root post.\",\n        record: {\n          type: \"object\",\n          required: [\"post\", \"createdAt\"],\n          properties: {\n            post: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            allow: {\n              type: \"array\",\n              maxLength: 5,\n              items: {\n                type: \"union\",\n                refs: [\"lex:app.bsky.feed.threadgate#mentionRule\", \"lex:app.bsky.feed.threadgate#followingRule\", \"lex:app.bsky.feed.threadgate#listRule\"]\n              }\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      },\n      mentionRule: {\n        type: \"object\",\n        description: \"Allow replies from actors mentioned in your post.\",\n        properties: {}\n      },\n      followingRule: {\n        type: \"object\",\n        description: \"Allow replies from actors you follow.\",\n        properties: {}\n      },\n      listRule: {\n        type: \"object\",\n        description: \"Allow replies from actors on a list.\",\n        required: [\"list\"],\n        properties: {\n          list: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphBlock: {\n    lexicon: 1,\n    id: \"app.bsky.graph.block\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a block.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"did\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphDefs: {\n    lexicon: 1,\n    id: \"app.bsky.graph.defs\",\n    defs: {\n      listViewBasic: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"name\", \"purpose\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          name: {\n            type: \"string\",\n            maxLength: 64,\n            minLength: 1\n          },\n          purpose: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listPurpose\"\n          },\n          avatar: {\n            type: \"string\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewerState\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      listView: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"creator\", \"name\", \"purpose\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          creator: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          },\n          name: {\n            type: \"string\",\n            maxLength: 64,\n            minLength: 1\n          },\n          purpose: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listPurpose\"\n          },\n          description: {\n            type: \"string\",\n            maxGraphemes: 300,\n            maxLength: 3e3\n          },\n          descriptionFacets: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.richtext.facet\"\n            }\n          },\n          avatar: {\n            type: \"string\"\n          },\n          viewer: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.graph.defs#listViewerState\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          }\n        }\n      },\n      listItemView: {\n        type: \"object\",\n        required: [\"uri\", \"subject\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          subject: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          }\n        }\n      },\n      listPurpose: {\n        type: \"string\",\n        knownValues: [\"app.bsky.graph.defs#modlist\", \"app.bsky.graph.defs#curatelist\"]\n      },\n      modlist: {\n        type: \"token\",\n        description: \"A list of actors to apply an aggregate moderation action (mute/block) on.\"\n      },\n      curatelist: {\n        type: \"token\",\n        description: \"A list of actors used for curation purposes such as list feeds or interaction gating.\"\n      },\n      listViewerState: {\n        type: \"object\",\n        properties: {\n          muted: {\n            type: \"boolean\"\n          },\n          blocked: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      notFoundActor: {\n        type: \"object\",\n        description: \"indicates that a handle or DID could not be resolved\",\n        required: [\"actor\", \"notFound\"],\n        properties: {\n          actor: {\n            type: \"string\",\n            format: \"at-identifier\"\n          },\n          notFound: {\n            type: \"boolean\",\n            const: true\n          }\n        }\n      },\n      relationship: {\n        type: \"object\",\n        description: \"lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          },\n          following: {\n            type: \"string\",\n            format: \"at-uri\",\n            description: \"if the actor follows this DID, this is the AT-URI of the follow record\"\n          },\n          followedBy: {\n            type: \"string\",\n            format: \"at-uri\",\n            description: \"if the actor is followed by this DID, contains the AT-URI of the follow record\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphFollow: {\n    lexicon: 1,\n    id: \"app.bsky.graph.follow\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a social follow.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"did\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetBlocks: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getBlocks\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of who the actor is blocking.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"blocks\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              blocks: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetFollowers: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getFollowers\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of an actor's followers.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\", \"followers\"],\n            properties: {\n              subject: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#profileView\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              followers: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetFollows: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getFollows\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of who the actor follows.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"subject\", \"follows\"],\n            properties: {\n              subject: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.actor.defs#profileView\"\n              },\n              cursor: {\n                type: \"string\"\n              },\n              follows: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getList\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of actors.\",\n        parameters: {\n          type: \"params\",\n          required: [\"list\"],\n          properties: {\n            list: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"list\", \"items\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              list: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.graph.defs#listView\"\n              },\n              items: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listItemView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetListBlocks: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getListBlocks\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get lists that the actor is blocking.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"lists\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              lists: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetListMutes: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getListMutes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get lists that the actor is muting.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"lists\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              lists: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetLists: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getLists\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of lists that belong to an actor.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"lists\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              lists: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.graph.defs#listView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetMutes: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getMutes\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of who the actor mutes.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"mutes\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              mutes: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphGetRelationships: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getRelationships\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Enumerates public relationships between one account, and a list of other accounts\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            },\n            others: {\n              type: \"array\",\n              maxLength: 30,\n              items: {\n                type: \"string\",\n                format: \"at-identifier\"\n              }\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"relationships\"],\n            properties: {\n              actor: {\n                type: \"string\",\n                format: \"did\"\n              },\n              relationships: {\n                type: \"array\",\n                items: {\n                  type: \"union\",\n                  refs: [\"lex:app.bsky.graph.defs#relationship\", \"lex:app.bsky.graph.defs#notFoundActor\"]\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"ActorNotFound\",\n          description: \"the primary actor at-identifier could not be resolved\"\n        }]\n      }\n    }\n  },\n  AppBskyGraphGetSuggestedFollowsByActor: {\n    lexicon: 1,\n    id: \"app.bsky.graph.getSuggestedFollowsByActor\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get suggested follows related to a given actor.\",\n        parameters: {\n          type: \"params\",\n          required: [\"actor\"],\n          properties: {\n            actor: {\n              type: \"string\",\n              format: \"at-identifier\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"suggestions\"],\n            properties: {\n              suggestions: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.actor.defs#profileView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.list\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A declaration of a list of actors.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"name\", \"purpose\", \"createdAt\"],\n          properties: {\n            purpose: {\n              type: \"ref\",\n              ref: \"lex:app.bsky.graph.defs#listPurpose\"\n            },\n            name: {\n              type: \"string\",\n              maxLength: 64,\n              minLength: 1\n            },\n            description: {\n              type: \"string\",\n              maxGraphemes: 300,\n              maxLength: 3e3\n            },\n            descriptionFacets: {\n              type: \"array\",\n              items: {\n                type: \"ref\",\n                ref: \"lex:app.bsky.richtext.facet\"\n              }\n            },\n            avatar: {\n              type: \"blob\",\n              accept: [\"image/png\", \"image/jpeg\"],\n              maxSize: 1e6\n            },\n            labels: {\n              type: \"union\",\n              refs: [\"lex:com.atproto.label.defs#selfLabels\"]\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphListblock: {\n    lexicon: 1,\n    id: \"app.bsky.graph.listblock\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"A block of an entire list of actors.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphListitem: {\n    lexicon: 1,\n    id: \"app.bsky.graph.listitem\",\n    defs: {\n      main: {\n        type: \"record\",\n        description: \"An item under a declared list of actors.\",\n        key: \"tid\",\n        record: {\n          type: \"object\",\n          required: [\"subject\", \"list\", \"createdAt\"],\n          properties: {\n            subject: {\n              type: \"string\",\n              format: \"did\"\n            },\n            list: {\n              type: \"string\",\n              format: \"at-uri\"\n            },\n            createdAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphMuteActor: {\n    lexicon: 1,\n    id: \"app.bsky.graph.muteActor\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Mute an actor by DID or handle.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actor\"],\n            properties: {\n              actor: {\n                type: \"string\",\n                format: \"at-identifier\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphMuteActorList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.muteActorList\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Mute a list of actors.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"list\"],\n            properties: {\n              list: {\n                type: \"string\",\n                format: \"at-uri\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphUnmuteActor: {\n    lexicon: 1,\n    id: \"app.bsky.graph.unmuteActor\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Unmute an actor by DID or handle.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actor\"],\n            properties: {\n              actor: {\n                type: \"string\",\n                format: \"at-identifier\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyGraphUnmuteActorList: {\n    lexicon: 1,\n    id: \"app.bsky.graph.unmuteActorList\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Unmute a list of actors.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"list\"],\n            properties: {\n              list: {\n                type: \"string\",\n                format: \"at-uri\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationGetUnreadCount: {\n    lexicon: 1,\n    id: \"app.bsky.notification.getUnreadCount\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get the count of unread notifications.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            seenAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"count\"],\n            properties: {\n              count: {\n                type: \"integer\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationListNotifications: {\n    lexicon: 1,\n    id: \"app.bsky.notification.listNotifications\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of notifications.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            seenAt: {\n              type: \"string\",\n              format: \"datetime\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"notifications\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              notifications: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.notification.listNotifications#notification\"\n                }\n              },\n              seenAt: {\n                type: \"string\",\n                format: \"datetime\"\n              }\n            }\n          }\n        }\n      },\n      notification: {\n        type: \"object\",\n        required: [\"uri\", \"cid\", \"author\", \"reason\", \"record\", \"isRead\", \"indexedAt\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          cid: {\n            type: \"string\",\n            format: \"cid\"\n          },\n          author: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.actor.defs#profileView\"\n          },\n          reason: {\n            type: \"string\",\n            description: \"Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.\",\n            knownValues: [\"like\", \"repost\", \"follow\", \"mention\", \"reply\", \"quote\"]\n          },\n          reasonSubject: {\n            type: \"string\",\n            format: \"at-uri\"\n          },\n          record: {\n            type: \"unknown\"\n          },\n          isRead: {\n            type: \"boolean\"\n          },\n          indexedAt: {\n            type: \"string\",\n            format: \"datetime\"\n          },\n          labels: {\n            type: \"array\",\n            items: {\n              type: \"ref\",\n              ref: \"lex:com.atproto.label.defs#label\"\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationRegisterPush: {\n    lexicon: 1,\n    id: \"app.bsky.notification.registerPush\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Register for push notifications with a service.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"serviceDid\", \"token\", \"platform\", \"appId\"],\n            properties: {\n              serviceDid: {\n                type: \"string\",\n                format: \"did\"\n              },\n              token: {\n                type: \"string\"\n              },\n              platform: {\n                type: \"string\",\n                knownValues: [\"ios\", \"android\", \"web\"]\n              },\n              appId: {\n                type: \"string\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyNotificationUpdateSeen: {\n    lexicon: 1,\n    id: \"app.bsky.notification.updateSeen\",\n    defs: {\n      main: {\n        type: \"procedure\",\n        description: \"Notify server that the user has seen notifications.\",\n        input: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"seenAt\"],\n            properties: {\n              seenAt: {\n                type: \"string\",\n                format: \"datetime\"\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyRichtextFacet: {\n    lexicon: 1,\n    id: \"app.bsky.richtext.facet\",\n    defs: {\n      main: {\n        type: \"object\",\n        required: [\"index\", \"features\"],\n        properties: {\n          index: {\n            type: \"ref\",\n            ref: \"lex:app.bsky.richtext.facet#byteSlice\"\n          },\n          features: {\n            type: \"array\",\n            items: {\n              type: \"union\",\n              refs: [\"lex:app.bsky.richtext.facet#mention\", \"lex:app.bsky.richtext.facet#link\", \"lex:app.bsky.richtext.facet#tag\"]\n            }\n          }\n        }\n      },\n      mention: {\n        type: \"object\",\n        description: \"A facet feature for actor mentions.\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      },\n      link: {\n        type: \"object\",\n        description: \"A facet feature for links.\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"uri\"\n          }\n        }\n      },\n      tag: {\n        type: \"object\",\n        description: \"A hashtag.\",\n        required: [\"tag\"],\n        properties: {\n          tag: {\n            type: \"string\",\n            maxLength: 640,\n            maxGraphemes: 64\n          }\n        }\n      },\n      byteSlice: {\n        type: \"object\",\n        description: \"A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.\",\n        required: [\"byteStart\", \"byteEnd\"],\n        properties: {\n          byteStart: {\n            type: \"integer\",\n            minimum: 0\n          },\n          byteEnd: {\n            type: \"integer\",\n            minimum: 0\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedDefs: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.defs\",\n    defs: {\n      skeletonSearchPost: {\n        type: \"object\",\n        required: [\"uri\"],\n        properties: {\n          uri: {\n            type: \"string\",\n            format: \"at-uri\"\n          }\n        }\n      },\n      skeletonSearchActor: {\n        type: \"object\",\n        required: [\"did\"],\n        properties: {\n          did: {\n            type: \"string\",\n            format: \"did\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedGetPopularFeedGenerators: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.getPopularFeedGenerators\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"An unspecced view of globally popular feed generators.\",\n        parameters: {\n          type: \"params\",\n          properties: {\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 50\n            },\n            cursor: {\n              type: \"string\"\n            },\n            query: {\n              type: \"string\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"feeds\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              feeds: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.feed.defs#generatorView\"\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedGetTaggedSuggestions: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.getTaggedSuggestions\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Get a list of suggestions (feeds and users) tagged with categories\",\n        parameters: {\n          type: \"params\",\n          properties: {}\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"suggestions\"],\n            properties: {\n              suggestions: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.unspecced.getTaggedSuggestions#suggestion\"\n                }\n              }\n            }\n          }\n        }\n      },\n      suggestion: {\n        type: \"object\",\n        required: [\"tag\", \"subjectType\", \"subject\"],\n        properties: {\n          tag: {\n            type: \"string\"\n          },\n          subjectType: {\n            type: \"string\",\n            knownValues: [\"actor\", \"feed\"]\n          },\n          subject: {\n            type: \"string\",\n            format: \"uri\"\n          }\n        }\n      }\n    }\n  },\n  AppBskyUnspeccedSearchActorsSkeleton: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.searchActorsSkeleton\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Backend Actors (profile) search, returns only skeleton.\",\n        parameters: {\n          type: \"params\",\n          required: [\"q\"],\n          properties: {\n            q: {\n              type: \"string\",\n              description: \"Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.\"\n            },\n            typeahead: {\n              type: \"boolean\",\n              description: \"If true, acts as fast/simple 'typeahead' query.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 25\n            },\n            cursor: {\n              type: \"string\",\n              description: \"Optional pagination mechanism; may not necessarily allow scrolling through entire result set.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"actors\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              hitsTotal: {\n                type: \"integer\",\n                description: \"Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.\"\n              },\n              actors: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.unspecced.defs#skeletonSearchActor\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"BadQueryString\"\n        }]\n      }\n    }\n  },\n  AppBskyUnspeccedSearchPostsSkeleton: {\n    lexicon: 1,\n    id: \"app.bsky.unspecced.searchPostsSkeleton\",\n    defs: {\n      main: {\n        type: \"query\",\n        description: \"Backend Posts search, returns only skeleton\",\n        parameters: {\n          type: \"params\",\n          required: [\"q\"],\n          properties: {\n            q: {\n              type: \"string\",\n              description: \"Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.\"\n            },\n            limit: {\n              type: \"integer\",\n              minimum: 1,\n              maximum: 100,\n              default: 25\n            },\n            cursor: {\n              type: \"string\",\n              description: \"Optional pagination mechanism; may not necessarily allow scrolling through entire result set.\"\n            }\n          }\n        },\n        output: {\n          encoding: \"application/json\",\n          schema: {\n            type: \"object\",\n            required: [\"posts\"],\n            properties: {\n              cursor: {\n                type: \"string\"\n              },\n              hitsTotal: {\n                type: \"integer\",\n                description: \"Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.\"\n              },\n              posts: {\n                type: \"array\",\n                items: {\n                  type: \"ref\",\n                  ref: \"lex:app.bsky.unspecced.defs#skeletonSearchPost\"\n                }\n              }\n            }\n          }\n        },\n        errors: [{\n          name: \"BadQueryString\"\n        }]\n      }\n    }\n  }\n};\nvar schemas = Object.values(schemaDict);\nvar lexicons = new Lexicons(schemas);\n\n// src/client/types/com/atproto/admin/createCommunicationTemplate.ts\nvar createCommunicationTemplate_exports = {};\n__export(createCommunicationTemplate_exports, {\n  toKnownErr: () => toKnownErr\n});\nfunction toKnownErr(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/deleteAccount.ts\nvar deleteAccount_exports = {};\n__export(deleteAccount_exports, {\n  toKnownErr: () => toKnownErr2\n});\nfunction toKnownErr2(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/deleteCommunicationTemplate.ts\nvar deleteCommunicationTemplate_exports = {};\n__export(deleteCommunicationTemplate_exports, {\n  toKnownErr: () => toKnownErr3\n});\nfunction toKnownErr3(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/disableAccountInvites.ts\nvar disableAccountInvites_exports = {};\n__export(disableAccountInvites_exports, {\n  toKnownErr: () => toKnownErr4\n});\nfunction toKnownErr4(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/disableInviteCodes.ts\nvar disableInviteCodes_exports = {};\n__export(disableInviteCodes_exports, {\n  toKnownErr: () => toKnownErr5\n});\nfunction toKnownErr5(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/emitModerationEvent.ts\nvar emitModerationEvent_exports = {};\n__export(emitModerationEvent_exports, {\n  SubjectHasActionError: () => SubjectHasActionError,\n  toKnownErr: () => toKnownErr6\n});\nvar SubjectHasActionError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr6(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"SubjectHasAction\") return new SubjectHasActionError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/enableAccountInvites.ts\nvar enableAccountInvites_exports = {};\n__export(enableAccountInvites_exports, {\n  toKnownErr: () => toKnownErr7\n});\nfunction toKnownErr7(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getAccountInfo.ts\nvar getAccountInfo_exports = {};\n__export(getAccountInfo_exports, {\n  toKnownErr: () => toKnownErr8\n});\nfunction toKnownErr8(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getAccountInfos.ts\nvar getAccountInfos_exports = {};\n__export(getAccountInfos_exports, {\n  toKnownErr: () => toKnownErr9\n});\nfunction toKnownErr9(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getInviteCodes.ts\nvar getInviteCodes_exports = {};\n__export(getInviteCodes_exports, {\n  toKnownErr: () => toKnownErr10\n});\nfunction toKnownErr10(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getModerationEvent.ts\nvar getModerationEvent_exports = {};\n__export(getModerationEvent_exports, {\n  toKnownErr: () => toKnownErr11\n});\nfunction toKnownErr11(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getRecord.ts\nvar getRecord_exports = {};\n__export(getRecord_exports, {\n  RecordNotFoundError: () => RecordNotFoundError,\n  toKnownErr: () => toKnownErr12\n});\nvar RecordNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr12(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"RecordNotFound\") return new RecordNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getRepo.ts\nvar getRepo_exports = {};\n__export(getRepo_exports, {\n  RepoNotFoundError: () => RepoNotFoundError,\n  toKnownErr: () => toKnownErr13\n});\nvar RepoNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr13(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"RepoNotFound\") return new RepoNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/getSubjectStatus.ts\nvar getSubjectStatus_exports = {};\n__export(getSubjectStatus_exports, {\n  toKnownErr: () => toKnownErr14\n});\nfunction toKnownErr14(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/listCommunicationTemplates.ts\nvar listCommunicationTemplates_exports = {};\n__export(listCommunicationTemplates_exports, {\n  toKnownErr: () => toKnownErr15\n});\nfunction toKnownErr15(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/queryModerationEvents.ts\nvar queryModerationEvents_exports = {};\n__export(queryModerationEvents_exports, {\n  toKnownErr: () => toKnownErr16\n});\nfunction toKnownErr16(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/queryModerationStatuses.ts\nvar queryModerationStatuses_exports = {};\n__export(queryModerationStatuses_exports, {\n  toKnownErr: () => toKnownErr17\n});\nfunction toKnownErr17(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/searchRepos.ts\nvar searchRepos_exports = {};\n__export(searchRepos_exports, {\n  toKnownErr: () => toKnownErr18\n});\nfunction toKnownErr18(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/sendEmail.ts\nvar sendEmail_exports = {};\n__export(sendEmail_exports, {\n  toKnownErr: () => toKnownErr19\n});\nfunction toKnownErr19(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/updateAccountEmail.ts\nvar updateAccountEmail_exports = {};\n__export(updateAccountEmail_exports, {\n  toKnownErr: () => toKnownErr20\n});\nfunction toKnownErr20(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/updateAccountHandle.ts\nvar updateAccountHandle_exports = {};\n__export(updateAccountHandle_exports, {\n  toKnownErr: () => toKnownErr21\n});\nfunction toKnownErr21(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/updateCommunicationTemplate.ts\nvar updateCommunicationTemplate_exports = {};\n__export(updateCommunicationTemplate_exports, {\n  toKnownErr: () => toKnownErr22\n});\nfunction toKnownErr22(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/admin/updateSubjectStatus.ts\nvar updateSubjectStatus_exports = {};\n__export(updateSubjectStatus_exports, {\n  toKnownErr: () => toKnownErr23\n});\nfunction toKnownErr23(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/identity/resolveHandle.ts\nvar resolveHandle_exports = {};\n__export(resolveHandle_exports, {\n  toKnownErr: () => toKnownErr24\n});\nfunction toKnownErr24(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/identity/updateHandle.ts\nvar updateHandle_exports = {};\n__export(updateHandle_exports, {\n  toKnownErr: () => toKnownErr25\n});\nfunction toKnownErr25(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/label/queryLabels.ts\nvar queryLabels_exports = {};\n__export(queryLabels_exports, {\n  toKnownErr: () => toKnownErr26\n});\nfunction toKnownErr26(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/moderation/createReport.ts\nvar createReport_exports = {};\n__export(createReport_exports, {\n  toKnownErr: () => toKnownErr27\n});\nfunction toKnownErr27(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/repo/applyWrites.ts\nvar applyWrites_exports = {};\n__export(applyWrites_exports, {\n  InvalidSwapError: () => InvalidSwapError,\n  isCreate: () => isCreate,\n  isDelete: () => isDelete,\n  isUpdate: () => isUpdate,\n  toKnownErr: () => toKnownErr28,\n  validateCreate: () => validateCreate,\n  validateDelete: () => validateDelete,\n  validateUpdate: () => validateUpdate\n});\n\n// src/client/util.ts\nfunction isObj2(v) {\n  return typeof v === \"object\" && v !== null;\n}\nfunction hasProp2(data, prop) {\n  return prop in data;\n}\n\n// src/client/types/com/atproto/repo/applyWrites.ts\nvar InvalidSwapError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr28(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\") return new InvalidSwapError(e);\n  }\n  return e;\n}\nfunction isCreate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.applyWrites#create\";\n}\nfunction validateCreate(v) {\n  return lexicons.validate(\"com.atproto.repo.applyWrites#create\", v);\n}\nfunction isUpdate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.applyWrites#update\";\n}\nfunction validateUpdate(v) {\n  return lexicons.validate(\"com.atproto.repo.applyWrites#update\", v);\n}\nfunction isDelete(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.applyWrites#delete\";\n}\nfunction validateDelete(v) {\n  return lexicons.validate(\"com.atproto.repo.applyWrites#delete\", v);\n}\n\n// src/client/types/com/atproto/repo/createRecord.ts\nvar createRecord_exports = {};\n__export(createRecord_exports, {\n  InvalidSwapError: () => InvalidSwapError2,\n  toKnownErr: () => toKnownErr29\n});\nvar InvalidSwapError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr29(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\") return new InvalidSwapError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/deleteRecord.ts\nvar deleteRecord_exports = {};\n__export(deleteRecord_exports, {\n  InvalidSwapError: () => InvalidSwapError3,\n  toKnownErr: () => toKnownErr30\n});\nvar InvalidSwapError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr30(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\") return new InvalidSwapError3(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/describeRepo.ts\nvar describeRepo_exports = {};\n__export(describeRepo_exports, {\n  toKnownErr: () => toKnownErr31\n});\nfunction toKnownErr31(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/repo/getRecord.ts\nvar getRecord_exports2 = {};\n__export(getRecord_exports2, {\n  toKnownErr: () => toKnownErr32\n});\nfunction toKnownErr32(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/repo/listRecords.ts\nvar listRecords_exports = {};\n__export(listRecords_exports, {\n  isRecord: () => isRecord,\n  toKnownErr: () => toKnownErr33,\n  validateRecord: () => validateRecord\n});\nfunction toKnownErr33(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isRecord(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.repo.listRecords#record\";\n}\nfunction validateRecord(v) {\n  return lexicons.validate(\"com.atproto.repo.listRecords#record\", v);\n}\n\n// src/client/types/com/atproto/repo/putRecord.ts\nvar putRecord_exports = {};\n__export(putRecord_exports, {\n  InvalidSwapError: () => InvalidSwapError4,\n  toKnownErr: () => toKnownErr34\n});\nvar InvalidSwapError4 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr34(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidSwap\") return new InvalidSwapError4(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/repo/uploadBlob.ts\nvar uploadBlob_exports = {};\n__export(uploadBlob_exports, {\n  toKnownErr: () => toKnownErr35\n});\nfunction toKnownErr35(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/confirmEmail.ts\nvar confirmEmail_exports = {};\n__export(confirmEmail_exports, {\n  AccountNotFoundError: () => AccountNotFoundError,\n  ExpiredTokenError: () => ExpiredTokenError,\n  InvalidEmailError: () => InvalidEmailError,\n  InvalidTokenError: () => InvalidTokenError,\n  toKnownErr: () => toKnownErr36\n});\nvar AccountNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar ExpiredTokenError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidTokenError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidEmailError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr36(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountNotFound\") return new AccountNotFoundError(e);\n    if (e.error === \"ExpiredToken\") return new ExpiredTokenError(e);\n    if (e.error === \"InvalidToken\") return new InvalidTokenError(e);\n    if (e.error === \"InvalidEmail\") return new InvalidEmailError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/createAccount.ts\nvar createAccount_exports = {};\n__export(createAccount_exports, {\n  HandleNotAvailableError: () => HandleNotAvailableError,\n  IncompatibleDidDocError: () => IncompatibleDidDocError,\n  InvalidHandleError: () => InvalidHandleError2,\n  InvalidInviteCodeError: () => InvalidInviteCodeError,\n  InvalidPasswordError: () => InvalidPasswordError,\n  UnresolvableDidError: () => UnresolvableDidError,\n  UnsupportedDomainError: () => UnsupportedDomainError,\n  toKnownErr: () => toKnownErr37\n});\nvar InvalidHandleError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidPasswordError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidInviteCodeError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar HandleNotAvailableError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar UnsupportedDomainError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar UnresolvableDidError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar IncompatibleDidDocError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr37(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidHandle\") return new InvalidHandleError2(e);\n    if (e.error === \"InvalidPassword\") return new InvalidPasswordError(e);\n    if (e.error === \"InvalidInviteCode\") return new InvalidInviteCodeError(e);\n    if (e.error === \"HandleNotAvailable\") return new HandleNotAvailableError(e);\n    if (e.error === \"UnsupportedDomain\") return new UnsupportedDomainError(e);\n    if (e.error === \"UnresolvableDid\") return new UnresolvableDidError(e);\n    if (e.error === \"IncompatibleDidDoc\") return new IncompatibleDidDocError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/createAppPassword.ts\nvar createAppPassword_exports = {};\n__export(createAppPassword_exports, {\n  AccountTakedownError: () => AccountTakedownError,\n  isAppPassword: () => isAppPassword,\n  toKnownErr: () => toKnownErr38,\n  validateAppPassword: () => validateAppPassword\n});\nvar AccountTakedownError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr38(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\") return new AccountTakedownError(e);\n  }\n  return e;\n}\nfunction isAppPassword(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.createAppPassword#appPassword\";\n}\nfunction validateAppPassword(v) {\n  return lexicons.validate(\"com.atproto.server.createAppPassword#appPassword\", v);\n}\n\n// src/client/types/com/atproto/server/createInviteCode.ts\nvar createInviteCode_exports = {};\n__export(createInviteCode_exports, {\n  toKnownErr: () => toKnownErr39\n});\nfunction toKnownErr39(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/createInviteCodes.ts\nvar createInviteCodes_exports = {};\n__export(createInviteCodes_exports, {\n  isAccountCodes: () => isAccountCodes,\n  toKnownErr: () => toKnownErr40,\n  validateAccountCodes: () => validateAccountCodes\n});\nfunction toKnownErr40(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isAccountCodes(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.createInviteCodes#accountCodes\";\n}\nfunction validateAccountCodes(v) {\n  return lexicons.validate(\"com.atproto.server.createInviteCodes#accountCodes\", v);\n}\n\n// src/client/types/com/atproto/server/createSession.ts\nvar createSession_exports = {};\n__export(createSession_exports, {\n  AccountTakedownError: () => AccountTakedownError2,\n  toKnownErr: () => toKnownErr41\n});\nvar AccountTakedownError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr41(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\") return new AccountTakedownError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/deleteAccount.ts\nvar deleteAccount_exports2 = {};\n__export(deleteAccount_exports2, {\n  ExpiredTokenError: () => ExpiredTokenError2,\n  InvalidTokenError: () => InvalidTokenError2,\n  toKnownErr: () => toKnownErr42\n});\nvar ExpiredTokenError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidTokenError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr42(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"ExpiredToken\") return new ExpiredTokenError2(e);\n    if (e.error === \"InvalidToken\") return new InvalidTokenError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/deleteSession.ts\nvar deleteSession_exports = {};\n__export(deleteSession_exports, {\n  toKnownErr: () => toKnownErr43\n});\nfunction toKnownErr43(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/describeServer.ts\nvar describeServer_exports = {};\n__export(describeServer_exports, {\n  isLinks: () => isLinks,\n  toKnownErr: () => toKnownErr44,\n  validateLinks: () => validateLinks\n});\nfunction toKnownErr44(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isLinks(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.describeServer#links\";\n}\nfunction validateLinks(v) {\n  return lexicons.validate(\"com.atproto.server.describeServer#links\", v);\n}\n\n// src/client/types/com/atproto/server/getAccountInviteCodes.ts\nvar getAccountInviteCodes_exports = {};\n__export(getAccountInviteCodes_exports, {\n  DuplicateCreateError: () => DuplicateCreateError,\n  toKnownErr: () => toKnownErr45\n});\nvar DuplicateCreateError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr45(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"DuplicateCreate\") return new DuplicateCreateError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/getSession.ts\nvar getSession_exports = {};\n__export(getSession_exports, {\n  toKnownErr: () => toKnownErr46\n});\nfunction toKnownErr46(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/listAppPasswords.ts\nvar listAppPasswords_exports = {};\n__export(listAppPasswords_exports, {\n  AccountTakedownError: () => AccountTakedownError3,\n  isAppPassword: () => isAppPassword2,\n  toKnownErr: () => toKnownErr47,\n  validateAppPassword: () => validateAppPassword2\n});\nvar AccountTakedownError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr47(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\") return new AccountTakedownError3(e);\n  }\n  return e;\n}\nfunction isAppPassword2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.listAppPasswords#appPassword\";\n}\nfunction validateAppPassword2(v) {\n  return lexicons.validate(\"com.atproto.server.listAppPasswords#appPassword\", v);\n}\n\n// src/client/types/com/atproto/server/refreshSession.ts\nvar refreshSession_exports = {};\n__export(refreshSession_exports, {\n  AccountTakedownError: () => AccountTakedownError4,\n  toKnownErr: () => toKnownErr48\n});\nvar AccountTakedownError4 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr48(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"AccountTakedown\") return new AccountTakedownError4(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/requestAccountDelete.ts\nvar requestAccountDelete_exports = {};\n__export(requestAccountDelete_exports, {\n  toKnownErr: () => toKnownErr49\n});\nfunction toKnownErr49(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/requestEmailConfirmation.ts\nvar requestEmailConfirmation_exports = {};\n__export(requestEmailConfirmation_exports, {\n  toKnownErr: () => toKnownErr50\n});\nfunction toKnownErr50(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/requestEmailUpdate.ts\nvar requestEmailUpdate_exports = {};\n__export(requestEmailUpdate_exports, {\n  toKnownErr: () => toKnownErr51\n});\nfunction toKnownErr51(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/requestPasswordReset.ts\nvar requestPasswordReset_exports = {};\n__export(requestPasswordReset_exports, {\n  toKnownErr: () => toKnownErr52\n});\nfunction toKnownErr52(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/reserveSigningKey.ts\nvar reserveSigningKey_exports = {};\n__export(reserveSigningKey_exports, {\n  toKnownErr: () => toKnownErr53\n});\nfunction toKnownErr53(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/resetPassword.ts\nvar resetPassword_exports = {};\n__export(resetPassword_exports, {\n  ExpiredTokenError: () => ExpiredTokenError3,\n  InvalidTokenError: () => InvalidTokenError3,\n  toKnownErr: () => toKnownErr54\n});\nvar ExpiredTokenError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidTokenError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr54(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"ExpiredToken\") return new ExpiredTokenError3(e);\n    if (e.error === \"InvalidToken\") return new InvalidTokenError3(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/server/revokeAppPassword.ts\nvar revokeAppPassword_exports = {};\n__export(revokeAppPassword_exports, {\n  toKnownErr: () => toKnownErr55\n});\nfunction toKnownErr55(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/server/updateEmail.ts\nvar updateEmail_exports = {};\n__export(updateEmail_exports, {\n  ExpiredTokenError: () => ExpiredTokenError4,\n  InvalidTokenError: () => InvalidTokenError4,\n  TokenRequiredError: () => TokenRequiredError,\n  toKnownErr: () => toKnownErr56\n});\nvar ExpiredTokenError4 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidTokenError4 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar TokenRequiredError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr56(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"ExpiredToken\") return new ExpiredTokenError4(e);\n    if (e.error === \"InvalidToken\") return new InvalidTokenError4(e);\n    if (e.error === \"TokenRequired\") return new TokenRequiredError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getBlob.ts\nvar getBlob_exports = {};\n__export(getBlob_exports, {\n  toKnownErr: () => toKnownErr57\n});\nfunction toKnownErr57(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getBlocks.ts\nvar getBlocks_exports = {};\n__export(getBlocks_exports, {\n  toKnownErr: () => toKnownErr58\n});\nfunction toKnownErr58(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getCheckout.ts\nvar getCheckout_exports = {};\n__export(getCheckout_exports, {\n  toKnownErr: () => toKnownErr59\n});\nfunction toKnownErr59(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getHead.ts\nvar getHead_exports = {};\n__export(getHead_exports, {\n  HeadNotFoundError: () => HeadNotFoundError,\n  toKnownErr: () => toKnownErr60\n});\nvar HeadNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr60(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"HeadNotFound\") return new HeadNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getLatestCommit.ts\nvar getLatestCommit_exports = {};\n__export(getLatestCommit_exports, {\n  RepoNotFoundError: () => RepoNotFoundError2,\n  toKnownErr: () => toKnownErr61\n});\nvar RepoNotFoundError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr61(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"RepoNotFound\") return new RepoNotFoundError2(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getRecord.ts\nvar getRecord_exports3 = {};\n__export(getRecord_exports3, {\n  toKnownErr: () => toKnownErr62\n});\nfunction toKnownErr62(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/getRepo.ts\nvar getRepo_exports2 = {};\n__export(getRepo_exports2, {\n  toKnownErr: () => toKnownErr63\n});\nfunction toKnownErr63(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/listBlobs.ts\nvar listBlobs_exports = {};\n__export(listBlobs_exports, {\n  toKnownErr: () => toKnownErr64\n});\nfunction toKnownErr64(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/listRepos.ts\nvar listRepos_exports = {};\n__export(listRepos_exports, {\n  isRepo: () => isRepo,\n  toKnownErr: () => toKnownErr65,\n  validateRepo: () => validateRepo\n});\nfunction toKnownErr65(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isRepo(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.listRepos#repo\";\n}\nfunction validateRepo(v) {\n  return lexicons.validate(\"com.atproto.sync.listRepos#repo\", v);\n}\n\n// src/client/types/com/atproto/sync/notifyOfUpdate.ts\nvar notifyOfUpdate_exports = {};\n__export(notifyOfUpdate_exports, {\n  toKnownErr: () => toKnownErr66\n});\nfunction toKnownErr66(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/sync/requestCrawl.ts\nvar requestCrawl_exports = {};\n__export(requestCrawl_exports, {\n  toKnownErr: () => toKnownErr67\n});\nfunction toKnownErr67(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/temp/checkSignupQueue.ts\nvar checkSignupQueue_exports = {};\n__export(checkSignupQueue_exports, {\n  toKnownErr: () => toKnownErr68\n});\nfunction toKnownErr68(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/temp/fetchLabels.ts\nvar fetchLabels_exports = {};\n__export(fetchLabels_exports, {\n  toKnownErr: () => toKnownErr69\n});\nfunction toKnownErr69(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/temp/importRepo.ts\nvar importRepo_exports = {};\n__export(importRepo_exports, {\n  toKnownErr: () => toKnownErr70\n});\nfunction toKnownErr70(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/temp/pushBlob.ts\nvar pushBlob_exports = {};\n__export(pushBlob_exports, {\n  toKnownErr: () => toKnownErr71\n});\nfunction toKnownErr71(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/temp/requestPhoneVerification.ts\nvar requestPhoneVerification_exports = {};\n__export(requestPhoneVerification_exports, {\n  toKnownErr: () => toKnownErr72\n});\nfunction toKnownErr72(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/com/atproto/temp/transferAccount.ts\nvar transferAccount_exports = {};\n__export(transferAccount_exports, {\n  HandleNotAvailableError: () => HandleNotAvailableError2,\n  IncompatibleDidDocError: () => IncompatibleDidDocError2,\n  InvalidHandleError: () => InvalidHandleError3,\n  InvalidInviteCodeError: () => InvalidInviteCodeError2,\n  InvalidPasswordError: () => InvalidPasswordError2,\n  UnresolvableDidError: () => UnresolvableDidError2,\n  UnsupportedDomainError: () => UnsupportedDomainError2,\n  toKnownErr: () => toKnownErr73\n});\nvar InvalidHandleError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidPasswordError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar InvalidInviteCodeError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar HandleNotAvailableError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar UnsupportedDomainError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar UnresolvableDidError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar IncompatibleDidDocError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr73(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"InvalidHandle\") return new InvalidHandleError3(e);\n    if (e.error === \"InvalidPassword\") return new InvalidPasswordError2(e);\n    if (e.error === \"InvalidInviteCode\") return new InvalidInviteCodeError2(e);\n    if (e.error === \"HandleNotAvailable\") return new HandleNotAvailableError2(e);\n    if (e.error === \"UnsupportedDomain\") return new UnsupportedDomainError2(e);\n    if (e.error === \"UnresolvableDid\") return new UnresolvableDidError2(e);\n    if (e.error === \"IncompatibleDidDoc\") return new IncompatibleDidDocError2(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getPreferences.ts\nvar getPreferences_exports = {};\n__export(getPreferences_exports, {\n  toKnownErr: () => toKnownErr74\n});\nfunction toKnownErr74(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getProfile.ts\nvar getProfile_exports = {};\n__export(getProfile_exports, {\n  toKnownErr: () => toKnownErr75\n});\nfunction toKnownErr75(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getProfiles.ts\nvar getProfiles_exports = {};\n__export(getProfiles_exports, {\n  toKnownErr: () => toKnownErr76\n});\nfunction toKnownErr76(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/actor/getSuggestions.ts\nvar getSuggestions_exports = {};\n__export(getSuggestions_exports, {\n  toKnownErr: () => toKnownErr77\n});\nfunction toKnownErr77(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/actor/putPreferences.ts\nvar putPreferences_exports = {};\n__export(putPreferences_exports, {\n  toKnownErr: () => toKnownErr78\n});\nfunction toKnownErr78(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/actor/searchActors.ts\nvar searchActors_exports = {};\n__export(searchActors_exports, {\n  toKnownErr: () => toKnownErr79\n});\nfunction toKnownErr79(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/actor/searchActorsTypeahead.ts\nvar searchActorsTypeahead_exports = {};\n__export(searchActorsTypeahead_exports, {\n  toKnownErr: () => toKnownErr80\n});\nfunction toKnownErr80(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/describeFeedGenerator.ts\nvar describeFeedGenerator_exports = {};\n__export(describeFeedGenerator_exports, {\n  isFeed: () => isFeed,\n  isLinks: () => isLinks2,\n  toKnownErr: () => toKnownErr81,\n  validateFeed: () => validateFeed,\n  validateLinks: () => validateLinks2\n});\nfunction toKnownErr81(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isFeed(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.describeFeedGenerator#feed\";\n}\nfunction validateFeed(v) {\n  return lexicons.validate(\"app.bsky.feed.describeFeedGenerator#feed\", v);\n}\nfunction isLinks2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.describeFeedGenerator#links\";\n}\nfunction validateLinks2(v) {\n  return lexicons.validate(\"app.bsky.feed.describeFeedGenerator#links\", v);\n}\n\n// src/client/types/app/bsky/feed/getActorFeeds.ts\nvar getActorFeeds_exports = {};\n__export(getActorFeeds_exports, {\n  toKnownErr: () => toKnownErr82\n});\nfunction toKnownErr82(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getActorLikes.ts\nvar getActorLikes_exports = {};\n__export(getActorLikes_exports, {\n  BlockedActorError: () => BlockedActorError,\n  BlockedByActorError: () => BlockedByActorError,\n  toKnownErr: () => toKnownErr83\n});\nvar BlockedActorError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar BlockedByActorError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr83(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"BlockedActor\") return new BlockedActorError(e);\n    if (e.error === \"BlockedByActor\") return new BlockedByActorError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getAuthorFeed.ts\nvar getAuthorFeed_exports = {};\n__export(getAuthorFeed_exports, {\n  BlockedActorError: () => BlockedActorError2,\n  BlockedByActorError: () => BlockedByActorError2,\n  toKnownErr: () => toKnownErr84\n});\nvar BlockedActorError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nvar BlockedByActorError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr84(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"BlockedActor\") return new BlockedActorError2(e);\n    if (e.error === \"BlockedByActor\") return new BlockedByActorError2(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeed.ts\nvar getFeed_exports = {};\n__export(getFeed_exports, {\n  UnknownFeedError: () => UnknownFeedError,\n  toKnownErr: () => toKnownErr85\n});\nvar UnknownFeedError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr85(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"UnknownFeed\") return new UnknownFeedError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeedGenerator.ts\nvar getFeedGenerator_exports = {};\n__export(getFeedGenerator_exports, {\n  toKnownErr: () => toKnownErr86\n});\nfunction toKnownErr86(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeedGenerators.ts\nvar getFeedGenerators_exports = {};\n__export(getFeedGenerators_exports, {\n  toKnownErr: () => toKnownErr87\n});\nfunction toKnownErr87(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getFeedSkeleton.ts\nvar getFeedSkeleton_exports = {};\n__export(getFeedSkeleton_exports, {\n  UnknownFeedError: () => UnknownFeedError2,\n  toKnownErr: () => toKnownErr88\n});\nvar UnknownFeedError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr88(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"UnknownFeed\") return new UnknownFeedError2(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getLikes.ts\nvar getLikes_exports = {};\n__export(getLikes_exports, {\n  isLike: () => isLike,\n  toKnownErr: () => toKnownErr89,\n  validateLike: () => validateLike\n});\nfunction toKnownErr89(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isLike(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.getLikes#like\";\n}\nfunction validateLike(v) {\n  return lexicons.validate(\"app.bsky.feed.getLikes#like\", v);\n}\n\n// src/client/types/app/bsky/feed/getListFeed.ts\nvar getListFeed_exports = {};\n__export(getListFeed_exports, {\n  UnknownListError: () => UnknownListError,\n  toKnownErr: () => toKnownErr90\n});\nvar UnknownListError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr90(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"UnknownList\") return new UnknownListError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getPostThread.ts\nvar getPostThread_exports = {};\n__export(getPostThread_exports, {\n  NotFoundError: () => NotFoundError,\n  toKnownErr: () => toKnownErr91\n});\nvar NotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr91(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"NotFound\") return new NotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getPosts.ts\nvar getPosts_exports = {};\n__export(getPosts_exports, {\n  toKnownErr: () => toKnownErr92\n});\nfunction toKnownErr92(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getRepostedBy.ts\nvar getRepostedBy_exports = {};\n__export(getRepostedBy_exports, {\n  toKnownErr: () => toKnownErr93\n});\nfunction toKnownErr93(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getSuggestedFeeds.ts\nvar getSuggestedFeeds_exports = {};\n__export(getSuggestedFeeds_exports, {\n  toKnownErr: () => toKnownErr94\n});\nfunction toKnownErr94(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/getTimeline.ts\nvar getTimeline_exports = {};\n__export(getTimeline_exports, {\n  toKnownErr: () => toKnownErr95\n});\nfunction toKnownErr95(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/feed/searchPosts.ts\nvar searchPosts_exports = {};\n__export(searchPosts_exports, {\n  BadQueryStringError: () => BadQueryStringError,\n  toKnownErr: () => toKnownErr96\n});\nvar BadQueryStringError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr96(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"BadQueryString\") return new BadQueryStringError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getBlocks.ts\nvar getBlocks_exports2 = {};\n__export(getBlocks_exports2, {\n  toKnownErr: () => toKnownErr97\n});\nfunction toKnownErr97(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getFollowers.ts\nvar getFollowers_exports = {};\n__export(getFollowers_exports, {\n  toKnownErr: () => toKnownErr98\n});\nfunction toKnownErr98(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getFollows.ts\nvar getFollows_exports = {};\n__export(getFollows_exports, {\n  toKnownErr: () => toKnownErr99\n});\nfunction toKnownErr99(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getList.ts\nvar getList_exports = {};\n__export(getList_exports, {\n  toKnownErr: () => toKnownErr100\n});\nfunction toKnownErr100(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getListBlocks.ts\nvar getListBlocks_exports = {};\n__export(getListBlocks_exports, {\n  toKnownErr: () => toKnownErr101\n});\nfunction toKnownErr101(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getListMutes.ts\nvar getListMutes_exports = {};\n__export(getListMutes_exports, {\n  toKnownErr: () => toKnownErr102\n});\nfunction toKnownErr102(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getLists.ts\nvar getLists_exports = {};\n__export(getLists_exports, {\n  toKnownErr: () => toKnownErr103\n});\nfunction toKnownErr103(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getMutes.ts\nvar getMutes_exports = {};\n__export(getMutes_exports, {\n  toKnownErr: () => toKnownErr104\n});\nfunction toKnownErr104(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getRelationships.ts\nvar getRelationships_exports = {};\n__export(getRelationships_exports, {\n  ActorNotFoundError: () => ActorNotFoundError,\n  toKnownErr: () => toKnownErr105\n});\nvar ActorNotFoundError = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr105(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"ActorNotFound\") return new ActorNotFoundError(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/graph/getSuggestedFollowsByActor.ts\nvar getSuggestedFollowsByActor_exports = {};\n__export(getSuggestedFollowsByActor_exports, {\n  toKnownErr: () => toKnownErr106\n});\nfunction toKnownErr106(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/muteActor.ts\nvar muteActor_exports = {};\n__export(muteActor_exports, {\n  toKnownErr: () => toKnownErr107\n});\nfunction toKnownErr107(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/muteActorList.ts\nvar muteActorList_exports = {};\n__export(muteActorList_exports, {\n  toKnownErr: () => toKnownErr108\n});\nfunction toKnownErr108(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/unmuteActor.ts\nvar unmuteActor_exports = {};\n__export(unmuteActor_exports, {\n  toKnownErr: () => toKnownErr109\n});\nfunction toKnownErr109(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/graph/unmuteActorList.ts\nvar unmuteActorList_exports = {};\n__export(unmuteActorList_exports, {\n  toKnownErr: () => toKnownErr110\n});\nfunction toKnownErr110(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/notification/getUnreadCount.ts\nvar getUnreadCount_exports = {};\n__export(getUnreadCount_exports, {\n  toKnownErr: () => toKnownErr111\n});\nfunction toKnownErr111(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/notification/listNotifications.ts\nvar listNotifications_exports = {};\n__export(listNotifications_exports, {\n  isNotification: () => isNotification,\n  toKnownErr: () => toKnownErr112,\n  validateNotification: () => validateNotification\n});\nfunction toKnownErr112(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isNotification(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.notification.listNotifications#notification\";\n}\nfunction validateNotification(v) {\n  return lexicons.validate(\"app.bsky.notification.listNotifications#notification\", v);\n}\n\n// src/client/types/app/bsky/notification/registerPush.ts\nvar registerPush_exports = {};\n__export(registerPush_exports, {\n  toKnownErr: () => toKnownErr113\n});\nfunction toKnownErr113(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/notification/updateSeen.ts\nvar updateSeen_exports = {};\n__export(updateSeen_exports, {\n  toKnownErr: () => toKnownErr114\n});\nfunction toKnownErr114(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/getPopularFeedGenerators.ts\nvar getPopularFeedGenerators_exports = {};\n__export(getPopularFeedGenerators_exports, {\n  toKnownErr: () => toKnownErr115\n});\nfunction toKnownErr115(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/getTaggedSuggestions.ts\nvar getTaggedSuggestions_exports = {};\n__export(getTaggedSuggestions_exports, {\n  isSuggestion: () => isSuggestion,\n  toKnownErr: () => toKnownErr116,\n  validateSuggestion: () => validateSuggestion\n});\nfunction toKnownErr116(e) {\n  if (e instanceof XRPCError) {}\n  return e;\n}\nfunction isSuggestion(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.unspecced.getTaggedSuggestions#suggestion\";\n}\nfunction validateSuggestion(v) {\n  return lexicons.validate(\"app.bsky.unspecced.getTaggedSuggestions#suggestion\", v);\n}\n\n// src/client/types/app/bsky/unspecced/searchActorsSkeleton.ts\nvar searchActorsSkeleton_exports = {};\n__export(searchActorsSkeleton_exports, {\n  BadQueryStringError: () => BadQueryStringError2,\n  toKnownErr: () => toKnownErr117\n});\nvar BadQueryStringError2 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr117(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"BadQueryString\") return new BadQueryStringError2(e);\n  }\n  return e;\n}\n\n// src/client/types/app/bsky/unspecced/searchPostsSkeleton.ts\nvar searchPostsSkeleton_exports = {};\n__export(searchPostsSkeleton_exports, {\n  BadQueryStringError: () => BadQueryStringError3,\n  toKnownErr: () => toKnownErr118\n});\nvar BadQueryStringError3 = class extends XRPCError {\n  constructor(src2) {\n    super(src2.status, src2.error, src2.message, src2.headers);\n  }\n};\nfunction toKnownErr118(e) {\n  if (e instanceof XRPCError) {\n    if (e.error === \"BadQueryString\") return new BadQueryStringError3(e);\n  }\n  return e;\n}\n\n// src/client/types/com/atproto/admin/defs.ts\nvar defs_exports = {};\n__export(defs_exports, {\n  REVIEWCLOSED: () => REVIEWCLOSED,\n  REVIEWESCALATED: () => REVIEWESCALATED,\n  REVIEWOPEN: () => REVIEWOPEN,\n  isAccountView: () => isAccountView,\n  isBlobView: () => isBlobView,\n  isCommunicationTemplateView: () => isCommunicationTemplateView,\n  isImageDetails: () => isImageDetails,\n  isModEventAcknowledge: () => isModEventAcknowledge,\n  isModEventComment: () => isModEventComment,\n  isModEventEmail: () => isModEventEmail,\n  isModEventEscalate: () => isModEventEscalate,\n  isModEventLabel: () => isModEventLabel,\n  isModEventMute: () => isModEventMute,\n  isModEventReport: () => isModEventReport,\n  isModEventResolveAppeal: () => isModEventResolveAppeal,\n  isModEventReverseTakedown: () => isModEventReverseTakedown,\n  isModEventTakedown: () => isModEventTakedown,\n  isModEventUnmute: () => isModEventUnmute,\n  isModEventView: () => isModEventView,\n  isModEventViewDetail: () => isModEventViewDetail,\n  isModeration: () => isModeration,\n  isModerationDetail: () => isModerationDetail,\n  isRecordView: () => isRecordView,\n  isRecordViewDetail: () => isRecordViewDetail,\n  isRecordViewNotFound: () => isRecordViewNotFound,\n  isRepoBlobRef: () => isRepoBlobRef,\n  isRepoRef: () => isRepoRef,\n  isRepoView: () => isRepoView,\n  isRepoViewDetail: () => isRepoViewDetail,\n  isRepoViewNotFound: () => isRepoViewNotFound,\n  isReportView: () => isReportView,\n  isReportViewDetail: () => isReportViewDetail,\n  isStatusAttr: () => isStatusAttr,\n  isSubjectStatusView: () => isSubjectStatusView,\n  isVideoDetails: () => isVideoDetails,\n  validateAccountView: () => validateAccountView,\n  validateBlobView: () => validateBlobView,\n  validateCommunicationTemplateView: () => validateCommunicationTemplateView,\n  validateImageDetails: () => validateImageDetails,\n  validateModEventAcknowledge: () => validateModEventAcknowledge,\n  validateModEventComment: () => validateModEventComment,\n  validateModEventEmail: () => validateModEventEmail,\n  validateModEventEscalate: () => validateModEventEscalate,\n  validateModEventLabel: () => validateModEventLabel,\n  validateModEventMute: () => validateModEventMute,\n  validateModEventReport: () => validateModEventReport,\n  validateModEventResolveAppeal: () => validateModEventResolveAppeal,\n  validateModEventReverseTakedown: () => validateModEventReverseTakedown,\n  validateModEventTakedown: () => validateModEventTakedown,\n  validateModEventUnmute: () => validateModEventUnmute,\n  validateModEventView: () => validateModEventView,\n  validateModEventViewDetail: () => validateModEventViewDetail,\n  validateModeration: () => validateModeration,\n  validateModerationDetail: () => validateModerationDetail,\n  validateRecordView: () => validateRecordView,\n  validateRecordViewDetail: () => validateRecordViewDetail,\n  validateRecordViewNotFound: () => validateRecordViewNotFound,\n  validateRepoBlobRef: () => validateRepoBlobRef,\n  validateRepoRef: () => validateRepoRef,\n  validateRepoView: () => validateRepoView,\n  validateRepoViewDetail: () => validateRepoViewDetail,\n  validateRepoViewNotFound: () => validateRepoViewNotFound,\n  validateReportView: () => validateReportView,\n  validateReportViewDetail: () => validateReportViewDetail,\n  validateStatusAttr: () => validateStatusAttr,\n  validateSubjectStatusView: () => validateSubjectStatusView,\n  validateVideoDetails: () => validateVideoDetails\n});\nfunction isStatusAttr(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#statusAttr\";\n}\nfunction validateStatusAttr(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#statusAttr\", v);\n}\nfunction isModEventView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventView\";\n}\nfunction validateModEventView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventView\", v);\n}\nfunction isModEventViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventViewDetail\";\n}\nfunction validateModEventViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventViewDetail\", v);\n}\nfunction isReportView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#reportView\";\n}\nfunction validateReportView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#reportView\", v);\n}\nfunction isSubjectStatusView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#subjectStatusView\";\n}\nfunction validateSubjectStatusView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#subjectStatusView\", v);\n}\nfunction isReportViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#reportViewDetail\";\n}\nfunction validateReportViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#reportViewDetail\", v);\n}\nfunction isRepoView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoView\";\n}\nfunction validateRepoView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoView\", v);\n}\nfunction isRepoViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoViewDetail\";\n}\nfunction validateRepoViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoViewDetail\", v);\n}\nfunction isAccountView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#accountView\";\n}\nfunction validateAccountView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#accountView\", v);\n}\nfunction isRepoViewNotFound(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoViewNotFound\";\n}\nfunction validateRepoViewNotFound(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoViewNotFound\", v);\n}\nfunction isRepoRef(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoRef\";\n}\nfunction validateRepoRef(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoRef\", v);\n}\nfunction isRepoBlobRef(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#repoBlobRef\";\n}\nfunction validateRepoBlobRef(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#repoBlobRef\", v);\n}\nfunction isRecordView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#recordView\";\n}\nfunction validateRecordView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#recordView\", v);\n}\nfunction isRecordViewDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#recordViewDetail\";\n}\nfunction validateRecordViewDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#recordViewDetail\", v);\n}\nfunction isRecordViewNotFound(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#recordViewNotFound\";\n}\nfunction validateRecordViewNotFound(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#recordViewNotFound\", v);\n}\nfunction isModeration(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#moderation\";\n}\nfunction validateModeration(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#moderation\", v);\n}\nfunction isModerationDetail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#moderationDetail\";\n}\nfunction validateModerationDetail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#moderationDetail\", v);\n}\nfunction isBlobView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#blobView\";\n}\nfunction validateBlobView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#blobView\", v);\n}\nfunction isImageDetails(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#imageDetails\";\n}\nfunction validateImageDetails(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#imageDetails\", v);\n}\nfunction isVideoDetails(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#videoDetails\";\n}\nfunction validateVideoDetails(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#videoDetails\", v);\n}\nvar REVIEWOPEN = \"com.atproto.admin.defs#reviewOpen\";\nvar REVIEWESCALATED = \"com.atproto.admin.defs#reviewEscalated\";\nvar REVIEWCLOSED = \"com.atproto.admin.defs#reviewClosed\";\nfunction isModEventTakedown(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventTakedown\";\n}\nfunction validateModEventTakedown(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventTakedown\", v);\n}\nfunction isModEventReverseTakedown(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventReverseTakedown\";\n}\nfunction validateModEventReverseTakedown(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventReverseTakedown\", v);\n}\nfunction isModEventResolveAppeal(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventResolveAppeal\";\n}\nfunction validateModEventResolveAppeal(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventResolveAppeal\", v);\n}\nfunction isModEventComment(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventComment\";\n}\nfunction validateModEventComment(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventComment\", v);\n}\nfunction isModEventReport(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventReport\";\n}\nfunction validateModEventReport(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventReport\", v);\n}\nfunction isModEventLabel(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventLabel\";\n}\nfunction validateModEventLabel(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventLabel\", v);\n}\nfunction isModEventAcknowledge(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventAcknowledge\";\n}\nfunction validateModEventAcknowledge(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventAcknowledge\", v);\n}\nfunction isModEventEscalate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventEscalate\";\n}\nfunction validateModEventEscalate(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventEscalate\", v);\n}\nfunction isModEventMute(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventMute\";\n}\nfunction validateModEventMute(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventMute\", v);\n}\nfunction isModEventUnmute(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventUnmute\";\n}\nfunction validateModEventUnmute(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventUnmute\", v);\n}\nfunction isModEventEmail(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#modEventEmail\";\n}\nfunction validateModEventEmail(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#modEventEmail\", v);\n}\nfunction isCommunicationTemplateView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.admin.defs#communicationTemplateView\";\n}\nfunction validateCommunicationTemplateView(v) {\n  return lexicons.validate(\"com.atproto.admin.defs#communicationTemplateView\", v);\n}\n\n// src/client/types/com/atproto/label/defs.ts\nvar defs_exports2 = {};\n__export(defs_exports2, {\n  isLabel: () => isLabel,\n  isSelfLabel: () => isSelfLabel,\n  isSelfLabels: () => isSelfLabels,\n  validateLabel: () => validateLabel,\n  validateSelfLabel: () => validateSelfLabel,\n  validateSelfLabels: () => validateSelfLabels\n});\nfunction isLabel(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.defs#label\";\n}\nfunction validateLabel(v) {\n  return lexicons.validate(\"com.atproto.label.defs#label\", v);\n}\nfunction isSelfLabels(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.defs#selfLabels\";\n}\nfunction validateSelfLabels(v) {\n  return lexicons.validate(\"com.atproto.label.defs#selfLabels\", v);\n}\nfunction isSelfLabel(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.defs#selfLabel\";\n}\nfunction validateSelfLabel(v) {\n  return lexicons.validate(\"com.atproto.label.defs#selfLabel\", v);\n}\n\n// src/client/types/com/atproto/label/subscribeLabels.ts\nvar subscribeLabels_exports = {};\n__export(subscribeLabels_exports, {\n  isInfo: () => isInfo,\n  isLabels: () => isLabels,\n  validateInfo: () => validateInfo,\n  validateLabels: () => validateLabels\n});\nfunction isLabels(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.subscribeLabels#labels\";\n}\nfunction validateLabels(v) {\n  return lexicons.validate(\"com.atproto.label.subscribeLabels#labels\", v);\n}\nfunction isInfo(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.label.subscribeLabels#info\";\n}\nfunction validateInfo(v) {\n  return lexicons.validate(\"com.atproto.label.subscribeLabels#info\", v);\n}\n\n// src/client/types/com/atproto/moderation/defs.ts\nvar defs_exports3 = {};\n__export(defs_exports3, {\n  REASONAPPEAL: () => REASONAPPEAL,\n  REASONMISLEADING: () => REASONMISLEADING,\n  REASONOTHER: () => REASONOTHER,\n  REASONRUDE: () => REASONRUDE,\n  REASONSEXUAL: () => REASONSEXUAL,\n  REASONSPAM: () => REASONSPAM,\n  REASONVIOLATION: () => REASONVIOLATION\n});\nvar REASONSPAM = \"com.atproto.moderation.defs#reasonSpam\";\nvar REASONVIOLATION = \"com.atproto.moderation.defs#reasonViolation\";\nvar REASONMISLEADING = \"com.atproto.moderation.defs#reasonMisleading\";\nvar REASONSEXUAL = \"com.atproto.moderation.defs#reasonSexual\";\nvar REASONRUDE = \"com.atproto.moderation.defs#reasonRude\";\nvar REASONOTHER = \"com.atproto.moderation.defs#reasonOther\";\nvar REASONAPPEAL = \"com.atproto.moderation.defs#reasonAppeal\";\n\n// src/client/types/com/atproto/repo/strongRef.ts\nvar strongRef_exports = {};\n__export(strongRef_exports, {\n  isMain: () => isMain,\n  validateMain: () => validateMain\n});\nfunction isMain(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"com.atproto.repo.strongRef#main\" || v.$type === \"com.atproto.repo.strongRef\");\n}\nfunction validateMain(v) {\n  return lexicons.validate(\"com.atproto.repo.strongRef#main\", v);\n}\n\n// src/client/types/com/atproto/server/defs.ts\nvar defs_exports4 = {};\n__export(defs_exports4, {\n  isInviteCode: () => isInviteCode,\n  isInviteCodeUse: () => isInviteCodeUse,\n  validateInviteCode: () => validateInviteCode,\n  validateInviteCodeUse: () => validateInviteCodeUse\n});\nfunction isInviteCode(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.defs#inviteCode\";\n}\nfunction validateInviteCode(v) {\n  return lexicons.validate(\"com.atproto.server.defs#inviteCode\", v);\n}\nfunction isInviteCodeUse(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.server.defs#inviteCodeUse\";\n}\nfunction validateInviteCodeUse(v) {\n  return lexicons.validate(\"com.atproto.server.defs#inviteCodeUse\", v);\n}\n\n// src/client/types/com/atproto/sync/subscribeRepos.ts\nvar subscribeRepos_exports = {};\n__export(subscribeRepos_exports, {\n  isCommit: () => isCommit,\n  isHandle: () => isHandle,\n  isInfo: () => isInfo2,\n  isMigrate: () => isMigrate,\n  isRepoOp: () => isRepoOp,\n  isTombstone: () => isTombstone,\n  validateCommit: () => validateCommit,\n  validateHandle: () => validateHandle,\n  validateInfo: () => validateInfo2,\n  validateMigrate: () => validateMigrate,\n  validateRepoOp: () => validateRepoOp,\n  validateTombstone: () => validateTombstone\n});\nfunction isCommit(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#commit\";\n}\nfunction validateCommit(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#commit\", v);\n}\nfunction isHandle(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#handle\";\n}\nfunction validateHandle(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#handle\", v);\n}\nfunction isMigrate(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#migrate\";\n}\nfunction validateMigrate(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#migrate\", v);\n}\nfunction isTombstone(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#tombstone\";\n}\nfunction validateTombstone(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#tombstone\", v);\n}\nfunction isInfo2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#info\";\n}\nfunction validateInfo2(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#info\", v);\n}\nfunction isRepoOp(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"com.atproto.sync.subscribeRepos#repoOp\";\n}\nfunction validateRepoOp(v) {\n  return lexicons.validate(\"com.atproto.sync.subscribeRepos#repoOp\", v);\n}\n\n// src/client/types/app/bsky/actor/defs.ts\nvar defs_exports5 = {};\n__export(defs_exports5, {\n  isAdultContentPref: () => isAdultContentPref,\n  isContentLabelPref: () => isContentLabelPref,\n  isFeedViewPref: () => isFeedViewPref,\n  isInterestsPref: () => isInterestsPref,\n  isPersonalDetailsPref: () => isPersonalDetailsPref,\n  isProfileView: () => isProfileView,\n  isProfileViewBasic: () => isProfileViewBasic,\n  isProfileViewDetailed: () => isProfileViewDetailed,\n  isSavedFeedsPref: () => isSavedFeedsPref,\n  isThreadViewPref: () => isThreadViewPref,\n  isViewerState: () => isViewerState,\n  validateAdultContentPref: () => validateAdultContentPref,\n  validateContentLabelPref: () => validateContentLabelPref,\n  validateFeedViewPref: () => validateFeedViewPref,\n  validateInterestsPref: () => validateInterestsPref,\n  validatePersonalDetailsPref: () => validatePersonalDetailsPref,\n  validateProfileView: () => validateProfileView,\n  validateProfileViewBasic: () => validateProfileViewBasic,\n  validateProfileViewDetailed: () => validateProfileViewDetailed,\n  validateSavedFeedsPref: () => validateSavedFeedsPref,\n  validateThreadViewPref: () => validateThreadViewPref,\n  validateViewerState: () => validateViewerState\n});\nfunction isProfileViewBasic(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#profileViewBasic\";\n}\nfunction validateProfileViewBasic(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#profileViewBasic\", v);\n}\nfunction isProfileView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#profileView\";\n}\nfunction validateProfileView(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#profileView\", v);\n}\nfunction isProfileViewDetailed(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#profileViewDetailed\";\n}\nfunction validateProfileViewDetailed(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#profileViewDetailed\", v);\n}\nfunction isViewerState(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#viewerState\";\n}\nfunction validateViewerState(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#viewerState\", v);\n}\nfunction isAdultContentPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#adultContentPref\";\n}\nfunction validateAdultContentPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#adultContentPref\", v);\n}\nfunction isContentLabelPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#contentLabelPref\";\n}\nfunction validateContentLabelPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#contentLabelPref\", v);\n}\nfunction isSavedFeedsPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#savedFeedsPref\";\n}\nfunction validateSavedFeedsPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#savedFeedsPref\", v);\n}\nfunction isPersonalDetailsPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#personalDetailsPref\";\n}\nfunction validatePersonalDetailsPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#personalDetailsPref\", v);\n}\nfunction isFeedViewPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#feedViewPref\";\n}\nfunction validateFeedViewPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#feedViewPref\", v);\n}\nfunction isThreadViewPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#threadViewPref\";\n}\nfunction validateThreadViewPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#threadViewPref\", v);\n}\nfunction isInterestsPref(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.actor.defs#interestsPref\";\n}\nfunction validateInterestsPref(v) {\n  return lexicons.validate(\"app.bsky.actor.defs#interestsPref\", v);\n}\n\n// src/client/types/app/bsky/actor/profile.ts\nvar profile_exports = {};\n__export(profile_exports, {\n  isRecord: () => isRecord2,\n  validateRecord: () => validateRecord2\n});\nfunction isRecord2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.actor.profile#main\" || v.$type === \"app.bsky.actor.profile\");\n}\nfunction validateRecord2(v) {\n  return lexicons.validate(\"app.bsky.actor.profile#main\", v);\n}\n\n// src/client/types/app/bsky/embed/external.ts\nvar external_exports = {};\n__export(external_exports, {\n  isExternal: () => isExternal,\n  isMain: () => isMain2,\n  isView: () => isView,\n  isViewExternal: () => isViewExternal,\n  validateExternal: () => validateExternal,\n  validateMain: () => validateMain2,\n  validateView: () => validateView,\n  validateViewExternal: () => validateViewExternal\n});\nfunction isMain2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.external#main\" || v.$type === \"app.bsky.embed.external\");\n}\nfunction validateMain2(v) {\n  return lexicons.validate(\"app.bsky.embed.external#main\", v);\n}\nfunction isExternal(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.external#external\";\n}\nfunction validateExternal(v) {\n  return lexicons.validate(\"app.bsky.embed.external#external\", v);\n}\nfunction isView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.external#view\";\n}\nfunction validateView(v) {\n  return lexicons.validate(\"app.bsky.embed.external#view\", v);\n}\nfunction isViewExternal(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.external#viewExternal\";\n}\nfunction validateViewExternal(v) {\n  return lexicons.validate(\"app.bsky.embed.external#viewExternal\", v);\n}\n\n// src/client/types/app/bsky/embed/images.ts\nvar images_exports = {};\n__export(images_exports, {\n  isAspectRatio: () => isAspectRatio,\n  isImage: () => isImage,\n  isMain: () => isMain3,\n  isView: () => isView2,\n  isViewImage: () => isViewImage,\n  validateAspectRatio: () => validateAspectRatio,\n  validateImage: () => validateImage,\n  validateMain: () => validateMain3,\n  validateView: () => validateView2,\n  validateViewImage: () => validateViewImage\n});\nfunction isMain3(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.images#main\" || v.$type === \"app.bsky.embed.images\");\n}\nfunction validateMain3(v) {\n  return lexicons.validate(\"app.bsky.embed.images#main\", v);\n}\nfunction isImage(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#image\";\n}\nfunction validateImage(v) {\n  return lexicons.validate(\"app.bsky.embed.images#image\", v);\n}\nfunction isAspectRatio(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#aspectRatio\";\n}\nfunction validateAspectRatio(v) {\n  return lexicons.validate(\"app.bsky.embed.images#aspectRatio\", v);\n}\nfunction isView2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#view\";\n}\nfunction validateView2(v) {\n  return lexicons.validate(\"app.bsky.embed.images#view\", v);\n}\nfunction isViewImage(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.images#viewImage\";\n}\nfunction validateViewImage(v) {\n  return lexicons.validate(\"app.bsky.embed.images#viewImage\", v);\n}\n\n// src/client/types/app/bsky/embed/record.ts\nvar record_exports = {};\n__export(record_exports, {\n  isMain: () => isMain4,\n  isView: () => isView3,\n  isViewBlocked: () => isViewBlocked,\n  isViewNotFound: () => isViewNotFound,\n  isViewRecord: () => isViewRecord,\n  validateMain: () => validateMain4,\n  validateView: () => validateView3,\n  validateViewBlocked: () => validateViewBlocked,\n  validateViewNotFound: () => validateViewNotFound,\n  validateViewRecord: () => validateViewRecord\n});\nfunction isMain4(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.record#main\" || v.$type === \"app.bsky.embed.record\");\n}\nfunction validateMain4(v) {\n  return lexicons.validate(\"app.bsky.embed.record#main\", v);\n}\nfunction isView3(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#view\";\n}\nfunction validateView3(v) {\n  return lexicons.validate(\"app.bsky.embed.record#view\", v);\n}\nfunction isViewRecord(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#viewRecord\";\n}\nfunction validateViewRecord(v) {\n  return lexicons.validate(\"app.bsky.embed.record#viewRecord\", v);\n}\nfunction isViewNotFound(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#viewNotFound\";\n}\nfunction validateViewNotFound(v) {\n  return lexicons.validate(\"app.bsky.embed.record#viewNotFound\", v);\n}\nfunction isViewBlocked(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.record#viewBlocked\";\n}\nfunction validateViewBlocked(v) {\n  return lexicons.validate(\"app.bsky.embed.record#viewBlocked\", v);\n}\n\n// src/client/types/app/bsky/embed/recordWithMedia.ts\nvar recordWithMedia_exports = {};\n__export(recordWithMedia_exports, {\n  isMain: () => isMain5,\n  isView: () => isView4,\n  validateMain: () => validateMain5,\n  validateView: () => validateView4\n});\nfunction isMain5(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.embed.recordWithMedia#main\" || v.$type === \"app.bsky.embed.recordWithMedia\");\n}\nfunction validateMain5(v) {\n  return lexicons.validate(\"app.bsky.embed.recordWithMedia#main\", v);\n}\nfunction isView4(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.embed.recordWithMedia#view\";\n}\nfunction validateView4(v) {\n  return lexicons.validate(\"app.bsky.embed.recordWithMedia#view\", v);\n}\n\n// src/client/types/app/bsky/feed/defs.ts\nvar defs_exports6 = {};\n__export(defs_exports6, {\n  isBlockedAuthor: () => isBlockedAuthor,\n  isBlockedPost: () => isBlockedPost,\n  isFeedViewPost: () => isFeedViewPost,\n  isGeneratorView: () => isGeneratorView,\n  isGeneratorViewerState: () => isGeneratorViewerState,\n  isNotFoundPost: () => isNotFoundPost,\n  isPostView: () => isPostView,\n  isReasonRepost: () => isReasonRepost,\n  isReplyRef: () => isReplyRef,\n  isSkeletonFeedPost: () => isSkeletonFeedPost,\n  isSkeletonReasonRepost: () => isSkeletonReasonRepost,\n  isThreadViewPost: () => isThreadViewPost,\n  isThreadgateView: () => isThreadgateView,\n  isViewerState: () => isViewerState2,\n  validateBlockedAuthor: () => validateBlockedAuthor,\n  validateBlockedPost: () => validateBlockedPost,\n  validateFeedViewPost: () => validateFeedViewPost,\n  validateGeneratorView: () => validateGeneratorView,\n  validateGeneratorViewerState: () => validateGeneratorViewerState,\n  validateNotFoundPost: () => validateNotFoundPost,\n  validatePostView: () => validatePostView,\n  validateReasonRepost: () => validateReasonRepost,\n  validateReplyRef: () => validateReplyRef,\n  validateSkeletonFeedPost: () => validateSkeletonFeedPost,\n  validateSkeletonReasonRepost: () => validateSkeletonReasonRepost,\n  validateThreadViewPost: () => validateThreadViewPost,\n  validateThreadgateView: () => validateThreadgateView,\n  validateViewerState: () => validateViewerState2\n});\nfunction isPostView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#postView\";\n}\nfunction validatePostView(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#postView\", v);\n}\nfunction isViewerState2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#viewerState\";\n}\nfunction validateViewerState2(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#viewerState\", v);\n}\nfunction isFeedViewPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#feedViewPost\";\n}\nfunction validateFeedViewPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#feedViewPost\", v);\n}\nfunction isReplyRef(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#replyRef\";\n}\nfunction validateReplyRef(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#replyRef\", v);\n}\nfunction isReasonRepost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#reasonRepost\";\n}\nfunction validateReasonRepost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#reasonRepost\", v);\n}\nfunction isThreadViewPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#threadViewPost\";\n}\nfunction validateThreadViewPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#threadViewPost\", v);\n}\nfunction isNotFoundPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#notFoundPost\";\n}\nfunction validateNotFoundPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#notFoundPost\", v);\n}\nfunction isBlockedPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#blockedPost\";\n}\nfunction validateBlockedPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#blockedPost\", v);\n}\nfunction isBlockedAuthor(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#blockedAuthor\";\n}\nfunction validateBlockedAuthor(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#blockedAuthor\", v);\n}\nfunction isGeneratorView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#generatorView\";\n}\nfunction validateGeneratorView(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#generatorView\", v);\n}\nfunction isGeneratorViewerState(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#generatorViewerState\";\n}\nfunction validateGeneratorViewerState(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#generatorViewerState\", v);\n}\nfunction isSkeletonFeedPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#skeletonFeedPost\";\n}\nfunction validateSkeletonFeedPost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#skeletonFeedPost\", v);\n}\nfunction isSkeletonReasonRepost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#skeletonReasonRepost\";\n}\nfunction validateSkeletonReasonRepost(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#skeletonReasonRepost\", v);\n}\nfunction isThreadgateView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.defs#threadgateView\";\n}\nfunction validateThreadgateView(v) {\n  return lexicons.validate(\"app.bsky.feed.defs#threadgateView\", v);\n}\n\n// src/client/types/app/bsky/feed/generator.ts\nvar generator_exports = {};\n__export(generator_exports, {\n  isRecord: () => isRecord3,\n  validateRecord: () => validateRecord3\n});\nfunction isRecord3(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.generator#main\" || v.$type === \"app.bsky.feed.generator\");\n}\nfunction validateRecord3(v) {\n  return lexicons.validate(\"app.bsky.feed.generator#main\", v);\n}\n\n// src/client/types/app/bsky/feed/like.ts\nvar like_exports = {};\n__export(like_exports, {\n  isRecord: () => isRecord4,\n  validateRecord: () => validateRecord4\n});\nfunction isRecord4(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.like#main\" || v.$type === \"app.bsky.feed.like\");\n}\nfunction validateRecord4(v) {\n  return lexicons.validate(\"app.bsky.feed.like#main\", v);\n}\n\n// src/client/types/app/bsky/feed/post.ts\nvar post_exports = {};\n__export(post_exports, {\n  isEntity: () => isEntity,\n  isRecord: () => isRecord5,\n  isReplyRef: () => isReplyRef2,\n  isTextSlice: () => isTextSlice,\n  validateEntity: () => validateEntity,\n  validateRecord: () => validateRecord5,\n  validateReplyRef: () => validateReplyRef2,\n  validateTextSlice: () => validateTextSlice\n});\nfunction isRecord5(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.post#main\" || v.$type === \"app.bsky.feed.post\");\n}\nfunction validateRecord5(v) {\n  return lexicons.validate(\"app.bsky.feed.post#main\", v);\n}\nfunction isReplyRef2(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.post#replyRef\";\n}\nfunction validateReplyRef2(v) {\n  return lexicons.validate(\"app.bsky.feed.post#replyRef\", v);\n}\nfunction isEntity(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.post#entity\";\n}\nfunction validateEntity(v) {\n  return lexicons.validate(\"app.bsky.feed.post#entity\", v);\n}\nfunction isTextSlice(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.post#textSlice\";\n}\nfunction validateTextSlice(v) {\n  return lexicons.validate(\"app.bsky.feed.post#textSlice\", v);\n}\n\n// src/client/types/app/bsky/feed/repost.ts\nvar repost_exports = {};\n__export(repost_exports, {\n  isRecord: () => isRecord6,\n  validateRecord: () => validateRecord6\n});\nfunction isRecord6(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.repost#main\" || v.$type === \"app.bsky.feed.repost\");\n}\nfunction validateRecord6(v) {\n  return lexicons.validate(\"app.bsky.feed.repost#main\", v);\n}\n\n// src/client/types/app/bsky/feed/threadgate.ts\nvar threadgate_exports = {};\n__export(threadgate_exports, {\n  isFollowingRule: () => isFollowingRule,\n  isListRule: () => isListRule,\n  isMentionRule: () => isMentionRule,\n  isRecord: () => isRecord7,\n  validateFollowingRule: () => validateFollowingRule,\n  validateListRule: () => validateListRule,\n  validateMentionRule: () => validateMentionRule,\n  validateRecord: () => validateRecord7\n});\nfunction isRecord7(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.feed.threadgate#main\" || v.$type === \"app.bsky.feed.threadgate\");\n}\nfunction validateRecord7(v) {\n  return lexicons.validate(\"app.bsky.feed.threadgate#main\", v);\n}\nfunction isMentionRule(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.threadgate#mentionRule\";\n}\nfunction validateMentionRule(v) {\n  return lexicons.validate(\"app.bsky.feed.threadgate#mentionRule\", v);\n}\nfunction isFollowingRule(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.threadgate#followingRule\";\n}\nfunction validateFollowingRule(v) {\n  return lexicons.validate(\"app.bsky.feed.threadgate#followingRule\", v);\n}\nfunction isListRule(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.feed.threadgate#listRule\";\n}\nfunction validateListRule(v) {\n  return lexicons.validate(\"app.bsky.feed.threadgate#listRule\", v);\n}\n\n// src/client/types/app/bsky/graph/block.ts\nvar block_exports = {};\n__export(block_exports, {\n  isRecord: () => isRecord8,\n  validateRecord: () => validateRecord8\n});\nfunction isRecord8(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.block#main\" || v.$type === \"app.bsky.graph.block\");\n}\nfunction validateRecord8(v) {\n  return lexicons.validate(\"app.bsky.graph.block#main\", v);\n}\n\n// src/client/types/app/bsky/graph/defs.ts\nvar defs_exports7 = {};\n__export(defs_exports7, {\n  CURATELIST: () => CURATELIST,\n  MODLIST: () => MODLIST,\n  isListItemView: () => isListItemView,\n  isListView: () => isListView,\n  isListViewBasic: () => isListViewBasic,\n  isListViewerState: () => isListViewerState,\n  isNotFoundActor: () => isNotFoundActor,\n  isRelationship: () => isRelationship,\n  validateListItemView: () => validateListItemView,\n  validateListView: () => validateListView,\n  validateListViewBasic: () => validateListViewBasic,\n  validateListViewerState: () => validateListViewerState,\n  validateNotFoundActor: () => validateNotFoundActor,\n  validateRelationship: () => validateRelationship\n});\nfunction isListViewBasic(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listViewBasic\";\n}\nfunction validateListViewBasic(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listViewBasic\", v);\n}\nfunction isListView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listView\";\n}\nfunction validateListView(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listView\", v);\n}\nfunction isListItemView(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listItemView\";\n}\nfunction validateListItemView(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listItemView\", v);\n}\nvar MODLIST = \"app.bsky.graph.defs#modlist\";\nvar CURATELIST = \"app.bsky.graph.defs#curatelist\";\nfunction isListViewerState(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#listViewerState\";\n}\nfunction validateListViewerState(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#listViewerState\", v);\n}\nfunction isNotFoundActor(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#notFoundActor\";\n}\nfunction validateNotFoundActor(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#notFoundActor\", v);\n}\nfunction isRelationship(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.graph.defs#relationship\";\n}\nfunction validateRelationship(v) {\n  return lexicons.validate(\"app.bsky.graph.defs#relationship\", v);\n}\n\n// src/client/types/app/bsky/graph/follow.ts\nvar follow_exports = {};\n__export(follow_exports, {\n  isRecord: () => isRecord9,\n  validateRecord: () => validateRecord9\n});\nfunction isRecord9(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.follow#main\" || v.$type === \"app.bsky.graph.follow\");\n}\nfunction validateRecord9(v) {\n  return lexicons.validate(\"app.bsky.graph.follow#main\", v);\n}\n\n// src/client/types/app/bsky/graph/list.ts\nvar list_exports = {};\n__export(list_exports, {\n  isRecord: () => isRecord10,\n  validateRecord: () => validateRecord10\n});\nfunction isRecord10(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.list#main\" || v.$type === \"app.bsky.graph.list\");\n}\nfunction validateRecord10(v) {\n  return lexicons.validate(\"app.bsky.graph.list#main\", v);\n}\n\n// src/client/types/app/bsky/graph/listblock.ts\nvar listblock_exports = {};\n__export(listblock_exports, {\n  isRecord: () => isRecord11,\n  validateRecord: () => validateRecord11\n});\nfunction isRecord11(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.listblock#main\" || v.$type === \"app.bsky.graph.listblock\");\n}\nfunction validateRecord11(v) {\n  return lexicons.validate(\"app.bsky.graph.listblock#main\", v);\n}\n\n// src/client/types/app/bsky/graph/listitem.ts\nvar listitem_exports = {};\n__export(listitem_exports, {\n  isRecord: () => isRecord12,\n  validateRecord: () => validateRecord12\n});\nfunction isRecord12(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.graph.listitem#main\" || v.$type === \"app.bsky.graph.listitem\");\n}\nfunction validateRecord12(v) {\n  return lexicons.validate(\"app.bsky.graph.listitem#main\", v);\n}\n\n// src/client/types/app/bsky/richtext/facet.ts\nvar facet_exports = {};\n__export(facet_exports, {\n  isByteSlice: () => isByteSlice,\n  isLink: () => isLink,\n  isMain: () => isMain6,\n  isMention: () => isMention,\n  isTag: () => isTag,\n  validateByteSlice: () => validateByteSlice,\n  validateLink: () => validateLink,\n  validateMain: () => validateMain6,\n  validateMention: () => validateMention,\n  validateTag: () => validateTag\n});\nfunction isMain6(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && (v.$type === \"app.bsky.richtext.facet#main\" || v.$type === \"app.bsky.richtext.facet\");\n}\nfunction validateMain6(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#main\", v);\n}\nfunction isMention(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#mention\";\n}\nfunction validateMention(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#mention\", v);\n}\nfunction isLink(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#link\";\n}\nfunction validateLink(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#link\", v);\n}\nfunction isTag(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#tag\";\n}\nfunction validateTag(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#tag\", v);\n}\nfunction isByteSlice(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.richtext.facet#byteSlice\";\n}\nfunction validateByteSlice(v) {\n  return lexicons.validate(\"app.bsky.richtext.facet#byteSlice\", v);\n}\n\n// src/client/types/app/bsky/unspecced/defs.ts\nvar defs_exports8 = {};\n__export(defs_exports8, {\n  isSkeletonSearchActor: () => isSkeletonSearchActor,\n  isSkeletonSearchPost: () => isSkeletonSearchPost,\n  validateSkeletonSearchActor: () => validateSkeletonSearchActor,\n  validateSkeletonSearchPost: () => validateSkeletonSearchPost\n});\nfunction isSkeletonSearchPost(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.unspecced.defs#skeletonSearchPost\";\n}\nfunction validateSkeletonSearchPost(v) {\n  return lexicons.validate(\"app.bsky.unspecced.defs#skeletonSearchPost\", v);\n}\nfunction isSkeletonSearchActor(v) {\n  return isObj2(v) && hasProp2(v, \"$type\") && v.$type === \"app.bsky.unspecced.defs#skeletonSearchActor\";\n}\nfunction validateSkeletonSearchActor(v) {\n  return lexicons.validate(\"app.bsky.unspecced.defs#skeletonSearchActor\", v);\n}\n\n// src/client/index.ts\nvar COM_ATPROTO_ADMIN = {\n  DefsReviewOpen: \"com.atproto.admin.defs#reviewOpen\",\n  DefsReviewEscalated: \"com.atproto.admin.defs#reviewEscalated\",\n  DefsReviewClosed: \"com.atproto.admin.defs#reviewClosed\"\n};\nvar COM_ATPROTO_MODERATION = {\n  DefsReasonSpam: \"com.atproto.moderation.defs#reasonSpam\",\n  DefsReasonViolation: \"com.atproto.moderation.defs#reasonViolation\",\n  DefsReasonMisleading: \"com.atproto.moderation.defs#reasonMisleading\",\n  DefsReasonSexual: \"com.atproto.moderation.defs#reasonSexual\",\n  DefsReasonRude: \"com.atproto.moderation.defs#reasonRude\",\n  DefsReasonOther: \"com.atproto.moderation.defs#reasonOther\",\n  DefsReasonAppeal: \"com.atproto.moderation.defs#reasonAppeal\"\n};\nvar APP_BSKY_GRAPH = {\n  DefsModlist: \"app.bsky.graph.defs#modlist\",\n  DefsCuratelist: \"app.bsky.graph.defs#curatelist\"\n};\nvar AtpBaseClient = class {\n  constructor() {\n    this.xrpc = new Client();\n    this.xrpc.addLexicons(schemas);\n  }\n  service(serviceUri) {\n    return new AtpServiceClient(this, this.xrpc.service(serviceUri));\n  }\n};\nvar AtpServiceClient = class {\n  constructor(baseClient, xrpcService) {\n    this._baseClient = baseClient;\n    this.xrpc = xrpcService;\n    this.com = new ComNS(this);\n    this.app = new AppNS(this);\n  }\n  setHeader(key, value) {\n    this.xrpc.setHeader(key, value);\n  }\n};\nvar ComNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.atproto = new ComAtprotoNS(service2);\n  }\n};\nvar ComAtprotoNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.admin = new ComAtprotoAdminNS(service2);\n    this.identity = new ComAtprotoIdentityNS(service2);\n    this.label = new ComAtprotoLabelNS(service2);\n    this.moderation = new ComAtprotoModerationNS(service2);\n    this.repo = new ComAtprotoRepoNS(service2);\n    this.server = new ComAtprotoServerNS(service2);\n    this.sync = new ComAtprotoSyncNS(service2);\n    this.temp = new ComAtprotoTempNS(service2);\n  }\n};\nvar ComAtprotoAdminNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  createCommunicationTemplate(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.createCommunicationTemplate\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr(e);\n    });\n  }\n  deleteAccount(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.deleteAccount\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr2(e);\n    });\n  }\n  deleteCommunicationTemplate(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.deleteCommunicationTemplate\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr3(e);\n    });\n  }\n  disableAccountInvites(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.disableAccountInvites\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr4(e);\n    });\n  }\n  disableInviteCodes(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.disableInviteCodes\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr5(e);\n    });\n  }\n  emitModerationEvent(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.emitModerationEvent\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr6(e);\n    });\n  }\n  enableAccountInvites(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.enableAccountInvites\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr7(e);\n    });\n  }\n  getAccountInfo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getAccountInfo\", params2, void 0, opts).catch(e => {\n      throw toKnownErr8(e);\n    });\n  }\n  getAccountInfos(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getAccountInfos\", params2, void 0, opts).catch(e => {\n      throw toKnownErr9(e);\n    });\n  }\n  getInviteCodes(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getInviteCodes\", params2, void 0, opts).catch(e => {\n      throw toKnownErr10(e);\n    });\n  }\n  getModerationEvent(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getModerationEvent\", params2, void 0, opts).catch(e => {\n      throw toKnownErr11(e);\n    });\n  }\n  getRecord(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getRecord\", params2, void 0, opts).catch(e => {\n      throw toKnownErr12(e);\n    });\n  }\n  getRepo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getRepo\", params2, void 0, opts).catch(e => {\n      throw toKnownErr13(e);\n    });\n  }\n  getSubjectStatus(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.getSubjectStatus\", params2, void 0, opts).catch(e => {\n      throw toKnownErr14(e);\n    });\n  }\n  listCommunicationTemplates(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.listCommunicationTemplates\", params2, void 0, opts).catch(e => {\n      throw toKnownErr15(e);\n    });\n  }\n  queryModerationEvents(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.queryModerationEvents\", params2, void 0, opts).catch(e => {\n      throw toKnownErr16(e);\n    });\n  }\n  queryModerationStatuses(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.queryModerationStatuses\", params2, void 0, opts).catch(e => {\n      throw toKnownErr17(e);\n    });\n  }\n  searchRepos(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.searchRepos\", params2, void 0, opts).catch(e => {\n      throw toKnownErr18(e);\n    });\n  }\n  sendEmail(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.sendEmail\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr19(e);\n    });\n  }\n  updateAccountEmail(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.updateAccountEmail\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr20(e);\n    });\n  }\n  updateAccountHandle(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.updateAccountHandle\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr21(e);\n    });\n  }\n  updateCommunicationTemplate(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.updateCommunicationTemplate\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr22(e);\n    });\n  }\n  updateSubjectStatus(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.admin.updateSubjectStatus\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr23(e);\n    });\n  }\n};\nvar ComAtprotoIdentityNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  resolveHandle(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.identity.resolveHandle\", params2, void 0, opts).catch(e => {\n      throw toKnownErr24(e);\n    });\n  }\n  updateHandle(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.identity.updateHandle\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr25(e);\n    });\n  }\n};\nvar ComAtprotoLabelNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  queryLabels(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.label.queryLabels\", params2, void 0, opts).catch(e => {\n      throw toKnownErr26(e);\n    });\n  }\n};\nvar ComAtprotoModerationNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  createReport(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.moderation.createReport\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr27(e);\n    });\n  }\n};\nvar ComAtprotoRepoNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  applyWrites(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.applyWrites\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr28(e);\n    });\n  }\n  createRecord(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.createRecord\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr29(e);\n    });\n  }\n  deleteRecord(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr30(e);\n    });\n  }\n  describeRepo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.describeRepo\", params2, void 0, opts).catch(e => {\n      throw toKnownErr31(e);\n    });\n  }\n  getRecord(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.getRecord\", params2, void 0, opts).catch(e => {\n      throw toKnownErr32(e);\n    });\n  }\n  listRecords(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.listRecords\", params2, void 0, opts).catch(e => {\n      throw toKnownErr33(e);\n    });\n  }\n  putRecord(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.putRecord\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr34(e);\n    });\n  }\n  uploadBlob(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.repo.uploadBlob\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr35(e);\n    });\n  }\n};\nvar ComAtprotoServerNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  confirmEmail(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.confirmEmail\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr36(e);\n    });\n  }\n  createAccount(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createAccount\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr37(e);\n    });\n  }\n  createAppPassword(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createAppPassword\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr38(e);\n    });\n  }\n  createInviteCode(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createInviteCode\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr39(e);\n    });\n  }\n  createInviteCodes(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createInviteCodes\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr40(e);\n    });\n  }\n  createSession(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.createSession\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr41(e);\n    });\n  }\n  deleteAccount(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.deleteAccount\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr42(e);\n    });\n  }\n  deleteSession(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.deleteSession\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr43(e);\n    });\n  }\n  describeServer(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.describeServer\", params2, void 0, opts).catch(e => {\n      throw toKnownErr44(e);\n    });\n  }\n  getAccountInviteCodes(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.getAccountInviteCodes\", params2, void 0, opts).catch(e => {\n      throw toKnownErr45(e);\n    });\n  }\n  getSession(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.getSession\", params2, void 0, opts).catch(e => {\n      throw toKnownErr46(e);\n    });\n  }\n  listAppPasswords(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.listAppPasswords\", params2, void 0, opts).catch(e => {\n      throw toKnownErr47(e);\n    });\n  }\n  refreshSession(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.refreshSession\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr48(e);\n    });\n  }\n  requestAccountDelete(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.requestAccountDelete\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr49(e);\n    });\n  }\n  requestEmailConfirmation(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.requestEmailConfirmation\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr50(e);\n    });\n  }\n  requestEmailUpdate(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.requestEmailUpdate\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr51(e);\n    });\n  }\n  requestPasswordReset(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.requestPasswordReset\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr52(e);\n    });\n  }\n  reserveSigningKey(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.reserveSigningKey\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr53(e);\n    });\n  }\n  resetPassword(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.resetPassword\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr54(e);\n    });\n  }\n  revokeAppPassword(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.revokeAppPassword\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr55(e);\n    });\n  }\n  updateEmail(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.server.updateEmail\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr56(e);\n    });\n  }\n};\nvar ComAtprotoSyncNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  getBlob(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getBlob\", params2, void 0, opts).catch(e => {\n      throw toKnownErr57(e);\n    });\n  }\n  getBlocks(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getBlocks\", params2, void 0, opts).catch(e => {\n      throw toKnownErr58(e);\n    });\n  }\n  getCheckout(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getCheckout\", params2, void 0, opts).catch(e => {\n      throw toKnownErr59(e);\n    });\n  }\n  getHead(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getHead\", params2, void 0, opts).catch(e => {\n      throw toKnownErr60(e);\n    });\n  }\n  getLatestCommit(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getLatestCommit\", params2, void 0, opts).catch(e => {\n      throw toKnownErr61(e);\n    });\n  }\n  getRecord(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getRecord\", params2, void 0, opts).catch(e => {\n      throw toKnownErr62(e);\n    });\n  }\n  getRepo(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.getRepo\", params2, void 0, opts).catch(e => {\n      throw toKnownErr63(e);\n    });\n  }\n  listBlobs(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.listBlobs\", params2, void 0, opts).catch(e => {\n      throw toKnownErr64(e);\n    });\n  }\n  listRepos(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.listRepos\", params2, void 0, opts).catch(e => {\n      throw toKnownErr65(e);\n    });\n  }\n  notifyOfUpdate(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.notifyOfUpdate\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr66(e);\n    });\n  }\n  requestCrawl(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.sync.requestCrawl\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr67(e);\n    });\n  }\n};\nvar ComAtprotoTempNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  checkSignupQueue(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.temp.checkSignupQueue\", params2, void 0, opts).catch(e => {\n      throw toKnownErr68(e);\n    });\n  }\n  fetchLabels(params2, opts) {\n    return this._service.xrpc.call(\"com.atproto.temp.fetchLabels\", params2, void 0, opts).catch(e => {\n      throw toKnownErr69(e);\n    });\n  }\n  importRepo(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.temp.importRepo\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr70(e);\n    });\n  }\n  pushBlob(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.temp.pushBlob\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr71(e);\n    });\n  }\n  requestPhoneVerification(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.temp.requestPhoneVerification\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr72(e);\n    });\n  }\n  transferAccount(data, opts) {\n    return this._service.xrpc.call(\"com.atproto.temp.transferAccount\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr73(e);\n    });\n  }\n};\nvar AppNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.bsky = new AppBskyNS(service2);\n  }\n};\nvar AppBskyNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.actor = new AppBskyActorNS(service2);\n    this.embed = new AppBskyEmbedNS(service2);\n    this.feed = new AppBskyFeedNS(service2);\n    this.graph = new AppBskyGraphNS(service2);\n    this.notification = new AppBskyNotificationNS(service2);\n    this.richtext = new AppBskyRichtextNS(service2);\n    this.unspecced = new AppBskyUnspeccedNS(service2);\n  }\n};\nvar AppBskyActorNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.profile = new ProfileRecord(service2);\n  }\n  getPreferences(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getPreferences\", params2, void 0, opts).catch(e => {\n      throw toKnownErr74(e);\n    });\n  }\n  getProfile(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getProfile\", params2, void 0, opts).catch(e => {\n      throw toKnownErr75(e);\n    });\n  }\n  getProfiles(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getProfiles\", params2, void 0, opts).catch(e => {\n      throw toKnownErr76(e);\n    });\n  }\n  getSuggestions(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.getSuggestions\", params2, void 0, opts).catch(e => {\n      throw toKnownErr77(e);\n    });\n  }\n  putPreferences(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.putPreferences\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr78(e);\n    });\n  }\n  searchActors(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.searchActors\", params2, void 0, opts).catch(e => {\n      throw toKnownErr79(e);\n    });\n  }\n  searchActorsTypeahead(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.actor.searchActorsTypeahead\", params2, void 0, opts).catch(e => {\n      throw toKnownErr80(e);\n    });\n  }\n};\nvar ProfileRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.actor.profile\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.actor.profile\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.actor.profile\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.actor.profile\",\n      rkey: \"self\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.actor.profile\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar AppBskyEmbedNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n};\nvar AppBskyFeedNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.generator = new GeneratorRecord(service2);\n    this.like = new LikeRecord(service2);\n    this.post = new PostRecord(service2);\n    this.repost = new RepostRecord(service2);\n    this.threadgate = new ThreadgateRecord(service2);\n  }\n  describeFeedGenerator(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.describeFeedGenerator\", params2, void 0, opts).catch(e => {\n      throw toKnownErr81(e);\n    });\n  }\n  getActorFeeds(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getActorFeeds\", params2, void 0, opts).catch(e => {\n      throw toKnownErr82(e);\n    });\n  }\n  getActorLikes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getActorLikes\", params2, void 0, opts).catch(e => {\n      throw toKnownErr83(e);\n    });\n  }\n  getAuthorFeed(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getAuthorFeed\", params2, void 0, opts).catch(e => {\n      throw toKnownErr84(e);\n    });\n  }\n  getFeed(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeed\", params2, void 0, opts).catch(e => {\n      throw toKnownErr85(e);\n    });\n  }\n  getFeedGenerator(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeedGenerator\", params2, void 0, opts).catch(e => {\n      throw toKnownErr86(e);\n    });\n  }\n  getFeedGenerators(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeedGenerators\", params2, void 0, opts).catch(e => {\n      throw toKnownErr87(e);\n    });\n  }\n  getFeedSkeleton(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getFeedSkeleton\", params2, void 0, opts).catch(e => {\n      throw toKnownErr88(e);\n    });\n  }\n  getLikes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getLikes\", params2, void 0, opts).catch(e => {\n      throw toKnownErr89(e);\n    });\n  }\n  getListFeed(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getListFeed\", params2, void 0, opts).catch(e => {\n      throw toKnownErr90(e);\n    });\n  }\n  getPostThread(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getPostThread\", params2, void 0, opts).catch(e => {\n      throw toKnownErr91(e);\n    });\n  }\n  getPosts(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getPosts\", params2, void 0, opts).catch(e => {\n      throw toKnownErr92(e);\n    });\n  }\n  getRepostedBy(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getRepostedBy\", params2, void 0, opts).catch(e => {\n      throw toKnownErr93(e);\n    });\n  }\n  getSuggestedFeeds(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getSuggestedFeeds\", params2, void 0, opts).catch(e => {\n      throw toKnownErr94(e);\n    });\n  }\n  getTimeline(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.getTimeline\", params2, void 0, opts).catch(e => {\n      throw toKnownErr95(e);\n    });\n  }\n  searchPosts(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.feed.searchPosts\", params2, void 0, opts).catch(e => {\n      throw toKnownErr96(e);\n    });\n  }\n};\nvar GeneratorRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.generator\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.generator\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.generator\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.feed.generator\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.feed.generator\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar LikeRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.like\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.like\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.like\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.feed.like\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.feed.like\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar PostRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.post\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.post\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.post\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.feed.post\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.feed.post\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar RepostRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.repost\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.repost\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.repost\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.feed.repost\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.feed.repost\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar ThreadgateRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.feed.threadgate\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.feed.threadgate\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.feed.threadgate\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.feed.threadgate\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.feed.threadgate\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar AppBskyGraphNS = class {\n  constructor(service2) {\n    this._service = service2;\n    this.block = new BlockRecord(service2);\n    this.follow = new FollowRecord(service2);\n    this.list = new ListRecord(service2);\n    this.listblock = new ListblockRecord(service2);\n    this.listitem = new ListitemRecord(service2);\n  }\n  getBlocks(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getBlocks\", params2, void 0, opts).catch(e => {\n      throw toKnownErr97(e);\n    });\n  }\n  getFollowers(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getFollowers\", params2, void 0, opts).catch(e => {\n      throw toKnownErr98(e);\n    });\n  }\n  getFollows(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getFollows\", params2, void 0, opts).catch(e => {\n      throw toKnownErr99(e);\n    });\n  }\n  getList(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getList\", params2, void 0, opts).catch(e => {\n      throw toKnownErr100(e);\n    });\n  }\n  getListBlocks(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getListBlocks\", params2, void 0, opts).catch(e => {\n      throw toKnownErr101(e);\n    });\n  }\n  getListMutes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getListMutes\", params2, void 0, opts).catch(e => {\n      throw toKnownErr102(e);\n    });\n  }\n  getLists(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getLists\", params2, void 0, opts).catch(e => {\n      throw toKnownErr103(e);\n    });\n  }\n  getMutes(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getMutes\", params2, void 0, opts).catch(e => {\n      throw toKnownErr104(e);\n    });\n  }\n  getRelationships(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getRelationships\", params2, void 0, opts).catch(e => {\n      throw toKnownErr105(e);\n    });\n  }\n  getSuggestedFollowsByActor(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.getSuggestedFollowsByActor\", params2, void 0, opts).catch(e => {\n      throw toKnownErr106(e);\n    });\n  }\n  muteActor(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.muteActor\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr107(e);\n    });\n  }\n  muteActorList(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.muteActorList\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr108(e);\n    });\n  }\n  unmuteActor(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.unmuteActor\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr109(e);\n    });\n  }\n  unmuteActorList(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.graph.unmuteActorList\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr110(e);\n    });\n  }\n};\nvar BlockRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.block\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.block\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.block\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.graph.block\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.graph.block\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar FollowRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.follow\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.follow\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.follow\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.graph.follow\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.graph.follow\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar ListRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.list\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.list\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.list\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.graph.list\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.graph.list\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar ListblockRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.listblock\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.listblock\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.listblock\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.graph.listblock\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.graph.listblock\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar ListitemRecord = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  async list(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.listRecords\", {\n      collection: \"app.bsky.graph.listitem\",\n      ...params2\n    });\n    return res.data;\n  }\n  async get(params2) {\n    const res = await this._service.xrpc.call(\"com.atproto.repo.getRecord\", {\n      collection: \"app.bsky.graph.listitem\",\n      ...params2\n    });\n    return res.data;\n  }\n  async create(params2, record, headers) {\n    record.$type = \"app.bsky.graph.listitem\";\n    const res = await this._service.xrpc.call(\"com.atproto.repo.createRecord\", void 0, {\n      collection: \"app.bsky.graph.listitem\",\n      ...params2,\n      record\n    }, {\n      encoding: \"application/json\",\n      headers\n    });\n    return res.data;\n  }\n  async delete(params2, headers) {\n    await this._service.xrpc.call(\"com.atproto.repo.deleteRecord\", void 0, {\n      collection: \"app.bsky.graph.listitem\",\n      ...params2\n    }, {\n      headers\n    });\n  }\n};\nvar AppBskyNotificationNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  getUnreadCount(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.getUnreadCount\", params2, void 0, opts).catch(e => {\n      throw toKnownErr111(e);\n    });\n  }\n  listNotifications(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.listNotifications\", params2, void 0, opts).catch(e => {\n      throw toKnownErr112(e);\n    });\n  }\n  registerPush(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.registerPush\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr113(e);\n    });\n  }\n  updateSeen(data, opts) {\n    return this._service.xrpc.call(\"app.bsky.notification.updateSeen\", opts?.qp, data, opts).catch(e => {\n      throw toKnownErr114(e);\n    });\n  }\n};\nvar AppBskyRichtextNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n};\nvar AppBskyUnspeccedNS = class {\n  constructor(service2) {\n    this._service = service2;\n  }\n  getPopularFeedGenerators(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.getPopularFeedGenerators\", params2, void 0, opts).catch(e => {\n      throw toKnownErr115(e);\n    });\n  }\n  getTaggedSuggestions(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.getTaggedSuggestions\", params2, void 0, opts).catch(e => {\n      throw toKnownErr116(e);\n    });\n  }\n  searchActorsSkeleton(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.searchActorsSkeleton\", params2, void 0, opts).catch(e => {\n      throw toKnownErr117(e);\n    });\n  }\n  searchPostsSkeleton(params2, opts) {\n    return this._service.xrpc.call(\"app.bsky.unspecced.searchPostsSkeleton\", params2, void 0, opts).catch(e => {\n      throw toKnownErr118(e);\n    });\n  }\n};\n\n// src/agent.ts\nvar REFRESH_SESSION = \"com.atproto.server.refreshSession\";\nvar _AtpAgent = class {\n  constructor(opts) {\n    this.uploadBlob = (data, opts) => this.api.com.atproto.repo.uploadBlob(data, opts);\n    this.resolveHandle = (params2, opts) => this.api.com.atproto.identity.resolveHandle(params2, opts);\n    this.updateHandle = (data, opts) => this.api.com.atproto.identity.updateHandle(data, opts);\n    this.createModerationReport = (data, opts) => this.api.com.atproto.moderation.createReport(data, opts);\n    this.service = opts.service instanceof URL ? opts.service : new URL(opts.service);\n    this._persistSession = opts.persistSession;\n    this._baseClient = new AtpBaseClient();\n    this._baseClient.xrpc.fetch = this._fetch.bind(this);\n    this.api = this._baseClient.service(opts.service);\n  }\n  get com() {\n    return this.api.com;\n  }\n  static configure(opts) {\n    _AtpAgent.fetch = opts.fetch;\n  }\n  get hasSession() {\n    return !!this.session;\n  }\n  setPersistSessionHandler(handler) {\n    this._persistSession = handler;\n  }\n  async createAccount(opts) {\n    try {\n      const res = await this.api.com.atproto.server.createAccount(opts);\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: opts.email,\n        emailConfirmed: false\n      };\n      this._updateApiEndpoint(res.data.didDoc);\n      return res;\n    } catch (e) {\n      this.session = void 0;\n      throw e;\n    } finally {\n      if (this.session) {\n        this._persistSession?.(\"create\", this.session);\n      } else {\n        this._persistSession?.(\"create-failed\", void 0);\n      }\n    }\n  }\n  async login(opts) {\n    try {\n      const res = await this.api.com.atproto.server.createSession({\n        identifier: opts.identifier,\n        password: opts.password\n      });\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: res.data.email,\n        emailConfirmed: res.data.emailConfirmed\n      };\n      this._updateApiEndpoint(res.data.didDoc);\n      return res;\n    } catch (e) {\n      this.session = void 0;\n      throw e;\n    } finally {\n      if (this.session) {\n        this._persistSession?.(\"create\", this.session);\n      } else {\n        this._persistSession?.(\"create-failed\", void 0);\n      }\n    }\n  }\n  async resumeSession(session) {\n    try {\n      this.session = session;\n      const res = await this.api.com.atproto.server.getSession();\n      if (res.data.did !== this.session.did) {\n        throw new XRPCError(400 /* InvalidRequest */, \"Invalid session\", \"InvalidDID\");\n      }\n      this.session.email = res.data.email;\n      this.session.handle = res.data.handle;\n      this.session.emailConfirmed = res.data.emailConfirmed;\n      this._updateApiEndpoint(res.data.didDoc);\n      this._persistSession?.(\"update\", this.session);\n      return res;\n    } catch (e) {\n      this.session = void 0;\n      if (e instanceof XRPCError) {\n        if ([1, 408, 425, 429, 500, 502, 503, 504, 522, 524].includes(e.status)) {\n          this._persistSession?.(\"network-error\", void 0);\n        } else {\n          this._persistSession?.(\"expired\", void 0);\n        }\n      } else {\n        this._persistSession?.(\"network-error\", void 0);\n      }\n      throw e;\n    }\n  }\n  _addAuthHeader(reqHeaders) {\n    if (!reqHeaders.authorization && this.session?.accessJwt) {\n      return {\n        ...reqHeaders,\n        authorization: `Bearer ${this.session.accessJwt}`\n      };\n    }\n    return reqHeaders;\n  }\n  async _fetch(reqUri, reqMethod, reqHeaders, reqBody) {\n    if (!_AtpAgent.fetch) {\n      throw new Error(\"AtpAgent fetch() method not configured\");\n    }\n    await this._refreshSessionPromise;\n    let res = await _AtpAgent.fetch(reqUri, reqMethod, this._addAuthHeader(reqHeaders), reqBody);\n    if (isErrorResponse(res, [\"ExpiredToken\"]) && this.session?.refreshJwt) {\n      await this.refreshSession();\n      res = await _AtpAgent.fetch(reqUri, reqMethod, this._addAuthHeader(reqHeaders), reqBody);\n    }\n    return res;\n  }\n  async refreshSession() {\n    if (this._refreshSessionPromise) {\n      return this._refreshSessionPromise;\n    }\n    this._refreshSessionPromise = this._refreshSessionInner();\n    try {\n      await this._refreshSessionPromise;\n    } finally {\n      this._refreshSessionPromise = void 0;\n    }\n  }\n  async _refreshSessionInner() {\n    if (!_AtpAgent.fetch) {\n      throw new Error(\"AtpAgent fetch() method not configured\");\n    }\n    if (!this.session?.refreshJwt) {\n      return;\n    }\n    const url = new URL((this.pdsUrl || this.service).origin);\n    url.pathname = `/xrpc/${REFRESH_SESSION}`;\n    const res = await _AtpAgent.fetch(url.toString(), \"POST\", {\n      authorization: `Bearer ${this.session.refreshJwt}`\n    }, void 0);\n    if (isErrorResponse(res, [\"ExpiredToken\", \"InvalidToken\"])) {\n      this.session = void 0;\n      this._persistSession?.(\"expired\", void 0);\n    } else if (isNewSessionObject(this._baseClient, res.body)) {\n      this.session = {\n        ...(this.session || {}),\n        accessJwt: res.body.accessJwt,\n        refreshJwt: res.body.refreshJwt,\n        handle: res.body.handle,\n        did: res.body.did\n      };\n      this._updateApiEndpoint(res.body.didDoc);\n      this._persistSession?.(\"update\", this.session);\n    }\n  }\n  _updateApiEndpoint(didDoc) {\n    if (isValidDidDoc(didDoc)) {\n      const endpoint = getPdsEndpoint(didDoc);\n      this.pdsUrl = endpoint ? new URL(endpoint) : void 0;\n    }\n    this.api.xrpc.uri = this.pdsUrl || this.service;\n  }\n};\nvar AtpAgent = _AtpAgent;\nAtpAgent.fetch = defaultFetchHandler;\nfunction isErrorObject(v) {\n  return errorResponseBody.safeParse(v).success;\n}\nfunction isErrorResponse(res, errorNames) {\n  if (res.status !== 400) {\n    return false;\n  }\n  if (!isErrorObject(res.body)) {\n    return false;\n  }\n  return typeof res.body.error === \"string\" && errorNames.includes(res.body.error);\n}\nfunction isNewSessionObject(client, v) {\n  try {\n    client.xrpc.lex.assertValidXrpcOutput(\"com.atproto.server.refreshSession\", v);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n// src/rich-text/unicode.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar UnicodeString = class {\n  constructor(utf16) {\n    this.utf16 = utf16;\n    this.utf8 = encoder.encode(utf16);\n  }\n  get length() {\n    return this.utf8.byteLength;\n  }\n  get graphemeLength() {\n    if (!this._graphemeLen) {\n      this._graphemeLen = graphemeLen(this.utf16);\n    }\n    return this._graphemeLen;\n  }\n  slice(start, end) {\n    return decoder.decode(this.utf8.slice(start, end));\n  }\n  utf16IndexToUtf8Index(i) {\n    return encoder.encode(this.utf16.slice(0, i)).byteLength;\n  }\n  toString() {\n    return this.utf16;\n  }\n};\n\n// src/rich-text/sanitization.ts\nvar EXCESS_SPACE_RE = /[\\r\\n]([\\u00AD\\u2060\\u200D\\u200C\\u200B\\s]*[\\r\\n]){2,}/;\nvar REPLACEMENT_STR = \"\\n\\n\";\nfunction sanitizeRichText(richText, opts) {\n  if (opts.cleanNewlines) {\n    richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR);\n  }\n  return richText;\n}\nfunction clean(richText, targetRegexp, replacementString) {\n  richText = richText.clone();\n  let match = richText.unicodeText.utf16.match(targetRegexp);\n  while (match && typeof match.index !== \"undefined\") {\n    const oldText = richText.unicodeText;\n    const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(match.index);\n    const removeEndIndex = removeStartIndex + new UnicodeString(match[0]).length;\n    richText.delete(removeStartIndex, removeEndIndex);\n    if (richText.unicodeText.utf16 === oldText.utf16) {\n      break;\n    }\n    richText.insert(removeStartIndex, replacementString);\n    match = richText.unicodeText.utf16.match(targetRegexp);\n  }\n  return richText;\n}\n\n// ../../node_modules/.pnpm/tlds@1.234.0/node_modules/tlds/index.json\nvar tlds_default = [\"aaa\", \"aarp\", \"abarth\", \"abb\", \"abbott\", \"abbvie\", \"abc\", \"able\", \"abogado\", \"abudhabi\", \"ac\", \"academy\", \"accenture\", \"accountant\", \"accountants\", \"aco\", \"actor\", \"ad\", \"ads\", \"adult\", \"ae\", \"aeg\", \"aero\", \"aetna\", \"af\", \"afl\", \"africa\", \"ag\", \"agakhan\", \"agency\", \"ai\", \"aig\", \"airbus\", \"airforce\", \"airtel\", \"akdn\", \"al\", \"alfaromeo\", \"alibaba\", \"alipay\", \"allfinanz\", \"allstate\", \"ally\", \"alsace\", \"alstom\", \"am\", \"amazon\", \"americanexpress\", \"americanfamily\", \"amex\", \"amfam\", \"amica\", \"amsterdam\", \"analytics\", \"android\", \"anquan\", \"anz\", \"ao\", \"aol\", \"apartments\", \"app\", \"apple\", \"aq\", \"aquarelle\", \"ar\", \"arab\", \"aramco\", \"archi\", \"army\", \"arpa\", \"art\", \"arte\", \"as\", \"asda\", \"asia\", \"associates\", \"at\", \"athleta\", \"attorney\", \"au\", \"auction\", \"audi\", \"audible\", \"audio\", \"auspost\", \"author\", \"auto\", \"autos\", \"avianca\", \"aw\", \"aws\", \"ax\", \"axa\", \"az\", \"azure\", \"ba\", \"baby\", \"baidu\", \"banamex\", \"bananarepublic\", \"band\", \"bank\", \"bar\", \"barcelona\", \"barclaycard\", \"barclays\", \"barefoot\", \"bargains\", \"baseball\", \"basketball\", \"bauhaus\", \"bayern\", \"bb\", \"bbc\", \"bbt\", \"bbva\", \"bcg\", \"bcn\", \"bd\", \"be\", \"beats\", \"beauty\", \"beer\", \"bentley\", \"berlin\", \"best\", \"bestbuy\", \"bet\", \"bf\", \"bg\", \"bh\", \"bharti\", \"bi\", \"bible\", \"bid\", \"bike\", \"bing\", \"bingo\", \"bio\", \"biz\", \"bj\", \"black\", \"blackfriday\", \"blockbuster\", \"blog\", \"bloomberg\", \"blue\", \"bm\", \"bms\", \"bmw\", \"bn\", \"bnpparibas\", \"bo\", \"boats\", \"boehringer\", \"bofa\", \"bom\", \"bond\", \"boo\", \"book\", \"booking\", \"bosch\", \"bostik\", \"boston\", \"bot\", \"boutique\", \"box\", \"br\", \"bradesco\", \"bridgestone\", \"broadway\", \"broker\", \"brother\", \"brussels\", \"bs\", \"bt\", \"build\", \"builders\", \"business\", \"buy\", \"buzz\", \"bv\", \"bw\", \"by\", \"bz\", \"bzh\", \"ca\", \"cab\", \"cafe\", \"cal\", \"call\", \"calvinklein\", \"cam\", \"camera\", \"camp\", \"canon\", \"capetown\", \"capital\", \"capitalone\", \"car\", \"caravan\", \"cards\", \"care\", \"career\", \"careers\", \"cars\", \"casa\", \"case\", \"cash\", \"casino\", \"cat\", \"catering\", \"catholic\", \"cba\", \"cbn\", \"cbre\", \"cbs\", \"cc\", \"cd\", \"center\", \"ceo\", \"cern\", \"cf\", \"cfa\", \"cfd\", \"cg\", \"ch\", \"chanel\", \"channel\", \"charity\", \"chase\", \"chat\", \"cheap\", \"chintai\", \"christmas\", \"chrome\", \"church\", \"ci\", \"cipriani\", \"circle\", \"cisco\", \"citadel\", \"citi\", \"citic\", \"city\", \"cityeats\", \"ck\", \"cl\", \"claims\", \"cleaning\", \"click\", \"clinic\", \"clinique\", \"clothing\", \"cloud\", \"club\", \"clubmed\", \"cm\", \"cn\", \"co\", \"coach\", \"codes\", \"coffee\", \"college\", \"cologne\", \"com\", \"comcast\", \"commbank\", \"community\", \"company\", \"compare\", \"computer\", \"comsec\", \"condos\", \"construction\", \"consulting\", \"contact\", \"contractors\", \"cooking\", \"cookingchannel\", \"cool\", \"coop\", \"corsica\", \"country\", \"coupon\", \"coupons\", \"courses\", \"cpa\", \"cr\", \"credit\", \"creditcard\", \"creditunion\", \"cricket\", \"crown\", \"crs\", \"cruise\", \"cruises\", \"cu\", \"cuisinella\", \"cv\", \"cw\", \"cx\", \"cy\", \"cymru\", \"cyou\", \"cz\", \"dabur\", \"dad\", \"dance\", \"data\", \"date\", \"dating\", \"datsun\", \"day\", \"dclk\", \"dds\", \"de\", \"deal\", \"dealer\", \"deals\", \"degree\", \"delivery\", \"dell\", \"deloitte\", \"delta\", \"democrat\", \"dental\", \"dentist\", \"desi\", \"design\", \"dev\", \"dhl\", \"diamonds\", \"diet\", \"digital\", \"direct\", \"directory\", \"discount\", \"discover\", \"dish\", \"diy\", \"dj\", \"dk\", \"dm\", \"dnp\", \"do\", \"docs\", \"doctor\", \"dog\", \"domains\", \"dot\", \"download\", \"drive\", \"dtv\", \"dubai\", \"dunlop\", \"dupont\", \"durban\", \"dvag\", \"dvr\", \"dz\", \"earth\", \"eat\", \"ec\", \"eco\", \"edeka\", \"edu\", \"education\", \"ee\", \"eg\", \"email\", \"emerck\", \"energy\", \"engineer\", \"engineering\", \"enterprises\", \"epson\", \"equipment\", \"er\", \"ericsson\", \"erni\", \"es\", \"esq\", \"estate\", \"et\", \"etisalat\", \"eu\", \"eurovision\", \"eus\", \"events\", \"exchange\", \"expert\", \"exposed\", \"express\", \"extraspace\", \"fage\", \"fail\", \"fairwinds\", \"faith\", \"family\", \"fan\", \"fans\", \"farm\", \"farmers\", \"fashion\", \"fast\", \"fedex\", \"feedback\", \"ferrari\", \"ferrero\", \"fi\", \"fiat\", \"fidelity\", \"fido\", \"film\", \"final\", \"finance\", \"financial\", \"fire\", \"firestone\", \"firmdale\", \"fish\", \"fishing\", \"fit\", \"fitness\", \"fj\", \"fk\", \"flickr\", \"flights\", \"flir\", \"florist\", \"flowers\", \"fly\", \"fm\", \"fo\", \"foo\", \"food\", \"foodnetwork\", \"football\", \"ford\", \"forex\", \"forsale\", \"forum\", \"foundation\", \"fox\", \"fr\", \"free\", \"fresenius\", \"frl\", \"frogans\", \"frontdoor\", \"frontier\", \"ftr\", \"fujitsu\", \"fun\", \"fund\", \"furniture\", \"futbol\", \"fyi\", \"ga\", \"gal\", \"gallery\", \"gallo\", \"gallup\", \"game\", \"games\", \"gap\", \"garden\", \"gay\", \"gb\", \"gbiz\", \"gd\", \"gdn\", \"ge\", \"gea\", \"gent\", \"genting\", \"george\", \"gf\", \"gg\", \"ggee\", \"gh\", \"gi\", \"gift\", \"gifts\", \"gives\", \"giving\", \"gl\", \"glass\", \"gle\", \"global\", \"globo\", \"gm\", \"gmail\", \"gmbh\", \"gmo\", \"gmx\", \"gn\", \"godaddy\", \"gold\", \"goldpoint\", \"golf\", \"goo\", \"goodyear\", \"goog\", \"google\", \"gop\", \"got\", \"gov\", \"gp\", \"gq\", \"gr\", \"grainger\", \"graphics\", \"gratis\", \"green\", \"gripe\", \"grocery\", \"group\", \"gs\", \"gt\", \"gu\", \"guardian\", \"gucci\", \"guge\", \"guide\", \"guitars\", \"guru\", \"gw\", \"gy\", \"hair\", \"hamburg\", \"hangout\", \"haus\", \"hbo\", \"hdfc\", \"hdfcbank\", \"health\", \"healthcare\", \"help\", \"helsinki\", \"here\", \"hermes\", \"hgtv\", \"hiphop\", \"hisamitsu\", \"hitachi\", \"hiv\", \"hk\", \"hkt\", \"hm\", \"hn\", \"hockey\", \"holdings\", \"holiday\", \"homedepot\", \"homegoods\", \"homes\", \"homesense\", \"honda\", \"horse\", \"hospital\", \"host\", \"hosting\", \"hot\", \"hoteles\", \"hotels\", \"hotmail\", \"house\", \"how\", \"hr\", \"hsbc\", \"ht\", \"hu\", \"hughes\", \"hyatt\", \"hyundai\", \"ibm\", \"icbc\", \"ice\", \"icu\", \"id\", \"ie\", \"ieee\", \"ifm\", \"ikano\", \"il\", \"im\", \"imamat\", \"imdb\", \"immo\", \"immobilien\", \"in\", \"inc\", \"industries\", \"infiniti\", \"info\", \"ing\", \"ink\", \"institute\", \"insurance\", \"insure\", \"int\", \"international\", \"intuit\", \"investments\", \"io\", \"ipiranga\", \"iq\", \"ir\", \"irish\", \"is\", \"ismaili\", \"ist\", \"istanbul\", \"it\", \"itau\", \"itv\", \"jaguar\", \"java\", \"jcb\", \"je\", \"jeep\", \"jetzt\", \"jewelry\", \"jio\", \"jll\", \"jm\", \"jmp\", \"jnj\", \"jo\", \"jobs\", \"joburg\", \"jot\", \"joy\", \"jp\", \"jpmorgan\", \"jprs\", \"juegos\", \"juniper\", \"kaufen\", \"kddi\", \"ke\", \"kerryhotels\", \"kerrylogistics\", \"kerryproperties\", \"kfh\", \"kg\", \"kh\", \"ki\", \"kia\", \"kids\", \"kim\", \"kinder\", \"kindle\", \"kitchen\", \"kiwi\", \"km\", \"kn\", \"koeln\", \"komatsu\", \"kosher\", \"kp\", \"kpmg\", \"kpn\", \"kr\", \"krd\", \"kred\", \"kuokgroup\", \"kw\", \"ky\", \"kyoto\", \"kz\", \"la\", \"lacaixa\", \"lamborghini\", \"lamer\", \"lancaster\", \"lancia\", \"land\", \"landrover\", \"lanxess\", \"lasalle\", \"lat\", \"latino\", \"latrobe\", \"law\", \"lawyer\", \"lb\", \"lc\", \"lds\", \"lease\", \"leclerc\", \"lefrak\", \"legal\", \"lego\", \"lexus\", \"lgbt\", \"li\", \"lidl\", \"life\", \"lifeinsurance\", \"lifestyle\", \"lighting\", \"like\", \"lilly\", \"limited\", \"limo\", \"lincoln\", \"linde\", \"link\", \"lipsy\", \"live\", \"living\", \"lk\", \"llc\", \"llp\", \"loan\", \"loans\", \"locker\", \"locus\", \"loft\", \"lol\", \"london\", \"lotte\", \"lotto\", \"love\", \"lpl\", \"lplfinancial\", \"lr\", \"ls\", \"lt\", \"ltd\", \"ltda\", \"lu\", \"lundbeck\", \"luxe\", \"luxury\", \"lv\", \"ly\", \"ma\", \"macys\", \"madrid\", \"maif\", \"maison\", \"makeup\", \"man\", \"management\", \"mango\", \"map\", \"market\", \"marketing\", \"markets\", \"marriott\", \"marshalls\", \"maserati\", \"mattel\", \"mba\", \"mc\", \"mckinsey\", \"md\", \"me\", \"med\", \"media\", \"meet\", \"melbourne\", \"meme\", \"memorial\", \"men\", \"menu\", \"merckmsd\", \"mg\", \"mh\", \"miami\", \"microsoft\", \"mil\", \"mini\", \"mint\", \"mit\", \"mitsubishi\", \"mk\", \"ml\", \"mlb\", \"mls\", \"mm\", \"mma\", \"mn\", \"mo\", \"mobi\", \"mobile\", \"moda\", \"moe\", \"moi\", \"mom\", \"monash\", \"money\", \"monster\", \"mormon\", \"mortgage\", \"moscow\", \"moto\", \"motorcycles\", \"mov\", \"movie\", \"mp\", \"mq\", \"mr\", \"ms\", \"msd\", \"mt\", \"mtn\", \"mtr\", \"mu\", \"museum\", \"music\", \"mutual\", \"mv\", \"mw\", \"mx\", \"my\", \"mz\", \"na\", \"nab\", \"nagoya\", \"name\", \"natura\", \"navy\", \"nba\", \"nc\", \"ne\", \"nec\", \"net\", \"netbank\", \"netflix\", \"network\", \"neustar\", \"new\", \"news\", \"next\", \"nextdirect\", \"nexus\", \"nf\", \"nfl\", \"ng\", \"ngo\", \"nhk\", \"ni\", \"nico\", \"nike\", \"nikon\", \"ninja\", \"nissan\", \"nissay\", \"nl\", \"no\", \"nokia\", \"northwesternmutual\", \"norton\", \"now\", \"nowruz\", \"nowtv\", \"np\", \"nr\", \"nra\", \"nrw\", \"ntt\", \"nu\", \"nyc\", \"nz\", \"obi\", \"observer\", \"office\", \"okinawa\", \"olayan\", \"olayangroup\", \"oldnavy\", \"ollo\", \"om\", \"omega\", \"one\", \"ong\", \"onl\", \"online\", \"ooo\", \"open\", \"oracle\", \"orange\", \"org\", \"organic\", \"origins\", \"osaka\", \"otsuka\", \"ott\", \"ovh\", \"pa\", \"page\", \"panasonic\", \"paris\", \"pars\", \"partners\", \"parts\", \"party\", \"passagens\", \"pay\", \"pccw\", \"pe\", \"pet\", \"pf\", \"pfizer\", \"pg\", \"ph\", \"pharmacy\", \"phd\", \"philips\", \"phone\", \"photo\", \"photography\", \"photos\", \"physio\", \"pics\", \"pictet\", \"pictures\", \"pid\", \"pin\", \"ping\", \"pink\", \"pioneer\", \"pizza\", \"pk\", \"pl\", \"place\", \"play\", \"playstation\", \"plumbing\", \"plus\", \"pm\", \"pn\", \"pnc\", \"pohl\", \"poker\", \"politie\", \"porn\", \"post\", \"pr\", \"pramerica\", \"praxi\", \"press\", \"prime\", \"pro\", \"prod\", \"productions\", \"prof\", \"progressive\", \"promo\", \"properties\", \"property\", \"protection\", \"pru\", \"prudential\", \"ps\", \"pt\", \"pub\", \"pw\", \"pwc\", \"py\", \"qa\", \"qpon\", \"quebec\", \"quest\", \"racing\", \"radio\", \"re\", \"read\", \"realestate\", \"realtor\", \"realty\", \"recipes\", \"red\", \"redstone\", \"redumbrella\", \"rehab\", \"reise\", \"reisen\", \"reit\", \"reliance\", \"ren\", \"rent\", \"rentals\", \"repair\", \"report\", \"republican\", \"rest\", \"restaurant\", \"review\", \"reviews\", \"rexroth\", \"rich\", \"richardli\", \"ricoh\", \"ril\", \"rio\", \"rip\", \"ro\", \"rocher\", \"rocks\", \"rodeo\", \"rogers\", \"room\", \"rs\", \"rsvp\", \"ru\", \"rugby\", \"ruhr\", \"run\", \"rw\", \"rwe\", \"ryukyu\", \"sa\", \"saarland\", \"safe\", \"safety\", \"sakura\", \"sale\", \"salon\", \"samsclub\", \"samsung\", \"sandvik\", \"sandvikcoromant\", \"sanofi\", \"sap\", \"sarl\", \"sas\", \"save\", \"saxo\", \"sb\", \"sbi\", \"sbs\", \"sc\", \"sca\", \"scb\", \"schaeffler\", \"schmidt\", \"scholarships\", \"school\", \"schule\", \"schwarz\", \"science\", \"scot\", \"sd\", \"se\", \"search\", \"seat\", \"secure\", \"security\", \"seek\", \"select\", \"sener\", \"services\", \"ses\", \"seven\", \"sew\", \"sex\", \"sexy\", \"sfr\", \"sg\", \"sh\", \"shangrila\", \"sharp\", \"shaw\", \"shell\", \"shia\", \"shiksha\", \"shoes\", \"shop\", \"shopping\", \"shouji\", \"show\", \"showtime\", \"si\", \"silk\", \"sina\", \"singles\", \"site\", \"sj\", \"sk\", \"ski\", \"skin\", \"sky\", \"skype\", \"sl\", \"sling\", \"sm\", \"smart\", \"smile\", \"sn\", \"sncf\", \"so\", \"soccer\", \"social\", \"softbank\", \"software\", \"sohu\", \"solar\", \"solutions\", \"song\", \"sony\", \"soy\", \"spa\", \"space\", \"sport\", \"spot\", \"sr\", \"srl\", \"ss\", \"st\", \"stada\", \"staples\", \"star\", \"statebank\", \"statefarm\", \"stc\", \"stcgroup\", \"stockholm\", \"storage\", \"store\", \"stream\", \"studio\", \"study\", \"style\", \"su\", \"sucks\", \"supplies\", \"supply\", \"support\", \"surf\", \"surgery\", \"suzuki\", \"sv\", \"swatch\", \"swiss\", \"sx\", \"sy\", \"sydney\", \"systems\", \"sz\", \"tab\", \"taipei\", \"talk\", \"taobao\", \"target\", \"tatamotors\", \"tatar\", \"tattoo\", \"tax\", \"taxi\", \"tc\", \"tci\", \"td\", \"tdk\", \"team\", \"tech\", \"technology\", \"tel\", \"temasek\", \"tennis\", \"teva\", \"tf\", \"tg\", \"th\", \"thd\", \"theater\", \"theatre\", \"tiaa\", \"tickets\", \"tienda\", \"tiffany\", \"tips\", \"tires\", \"tirol\", \"tj\", \"tjmaxx\", \"tjx\", \"tk\", \"tkmaxx\", \"tl\", \"tm\", \"tmall\", \"tn\", \"to\", \"today\", \"tokyo\", \"tools\", \"top\", \"toray\", \"toshiba\", \"total\", \"tours\", \"town\", \"toyota\", \"toys\", \"tr\", \"trade\", \"trading\", \"training\", \"travel\", \"travelchannel\", \"travelers\", \"travelersinsurance\", \"trust\", \"trv\", \"tt\", \"tube\", \"tui\", \"tunes\", \"tushu\", \"tv\", \"tvs\", \"tw\", \"tz\", \"ua\", \"ubank\", \"ubs\", \"ug\", \"uk\", \"unicom\", \"university\", \"uno\", \"uol\", \"ups\", \"us\", \"uy\", \"uz\", \"va\", \"vacations\", \"vana\", \"vanguard\", \"vc\", \"ve\", \"vegas\", \"ventures\", \"verisign\", \"verm\\xF6gensberater\", \"verm\\xF6gensberatung\", \"versicherung\", \"vet\", \"vg\", \"vi\", \"viajes\", \"video\", \"vig\", \"viking\", \"villas\", \"vin\", \"vip\", \"virgin\", \"visa\", \"vision\", \"viva\", \"vivo\", \"vlaanderen\", \"vn\", \"vodka\", \"volkswagen\", \"volvo\", \"vote\", \"voting\", \"voto\", \"voyage\", \"vu\", \"vuelos\", \"wales\", \"walmart\", \"walter\", \"wang\", \"wanggou\", \"watch\", \"watches\", \"weather\", \"weatherchannel\", \"webcam\", \"weber\", \"website\", \"wed\", \"wedding\", \"weibo\", \"weir\", \"wf\", \"whoswho\", \"wien\", \"wiki\", \"williamhill\", \"win\", \"windows\", \"wine\", \"winners\", \"wme\", \"wolterskluwer\", \"woodside\", \"work\", \"works\", \"world\", \"wow\", \"ws\", \"wtc\", \"wtf\", \"xbox\", \"xerox\", \"xfinity\", \"xihuan\", \"xin\", \"xxx\", \"xyz\", \"yachts\", \"yahoo\", \"yamaxun\", \"yandex\", \"ye\", \"yodobashi\", \"yoga\", \"yokohama\", \"you\", \"youtube\", \"yt\", \"yun\", \"za\", \"zappos\", \"zara\", \"zero\", \"zip\", \"zm\", \"zone\", \"zuerich\", \"zw\", \"\\u03B5\\u03BB\", \"\\u03B5\\u03C5\", \"\\u0431\\u0433\", \"\\u0431\\u0435\\u043B\", \"\\u0434\\u0435\\u0442\\u0438\", \"\\u0435\\u044E\", \"\\u043A\\u0430\\u0442\\u043E\\u043B\\u0438\\u043A\", \"\\u043A\\u043E\\u043C\", \"\\u043C\\u043A\\u0434\", \"\\u043C\\u043E\\u043D\", \"\\u043C\\u043E\\u0441\\u043A\\u0432\\u0430\", \"\\u043E\\u043D\\u043B\\u0430\\u0439\\u043D\", \"\\u043E\\u0440\\u0433\", \"\\u0440\\u0443\\u0441\", \"\\u0440\\u0444\", \"\\u0441\\u0430\\u0439\\u0442\", \"\\u0441\\u0440\\u0431\", \"\\u0443\\u043A\\u0440\", \"\\u049B\\u0430\\u0437\", \"\\u0570\\u0561\\u0575\", \"\\u05D9\\u05E9\\u05E8\\u05D0\\u05DC\", \"\\u05E7\\u05D5\\u05DD\", \"\\u0627\\u0628\\u0648\\u0638\\u0628\\u064A\", \"\\u0627\\u062A\\u0635\\u0627\\u0644\\u0627\\u062A\", \"\\u0627\\u0631\\u0627\\u0645\\u0643\\u0648\", \"\\u0627\\u0644\\u0627\\u0631\\u062F\\u0646\", \"\\u0627\\u0644\\u0628\\u062D\\u0631\\u064A\\u0646\", \"\\u0627\\u0644\\u062C\\u0632\\u0627\\u0626\\u0631\", \"\\u0627\\u0644\\u0633\\u0639\\u0648\\u062F\\u064A\\u0629\", \"\\u0627\\u0644\\u0639\\u0644\\u064A\\u0627\\u0646\", \"\\u0627\\u0644\\u0645\\u063A\\u0631\\u0628\", \"\\u0627\\u0645\\u0627\\u0631\\u0627\\u062A\", \"\\u0627\\u06CC\\u0631\\u0627\\u0646\", \"\\u0628\\u0627\\u0631\\u062A\", \"\\u0628\\u0627\\u0632\\u0627\\u0631\", \"\\u0628\\u064A\\u062A\\u0643\", \"\\u0628\\u06BE\\u0627\\u0631\\u062A\", \"\\u062A\\u0648\\u0646\\u0633\", \"\\u0633\\u0648\\u062F\\u0627\\u0646\", \"\\u0633\\u0648\\u0631\\u064A\\u0629\", \"\\u0634\\u0628\\u0643\\u0629\", \"\\u0639\\u0631\\u0627\\u0642\", \"\\u0639\\u0631\\u0628\", \"\\u0639\\u0645\\u0627\\u0646\", \"\\u0641\\u0644\\u0633\\u0637\\u064A\\u0646\", \"\\u0642\\u0637\\u0631\", \"\\u0643\\u0627\\u062B\\u0648\\u0644\\u064A\\u0643\", \"\\u0643\\u0648\\u0645\", \"\\u0645\\u0635\\u0631\", \"\\u0645\\u0644\\u064A\\u0633\\u064A\\u0627\", \"\\u0645\\u0648\\u0631\\u064A\\u062A\\u0627\\u0646\\u064A\\u0627\", \"\\u0645\\u0648\\u0642\\u0639\", \"\\u0647\\u0645\\u0631\\u0627\\u0647\", \"\\u067E\\u0627\\u06A9\\u0633\\u062A\\u0627\\u0646\", \"\\u0680\\u0627\\u0631\\u062A\", \"\\u0915\\u0949\\u092E\", \"\\u0928\\u0947\\u091F\", \"\\u092D\\u093E\\u0930\\u0924\", \"\\u092D\\u093E\\u0930\\u0924\\u092E\\u094D\", \"\\u092D\\u093E\\u0930\\u094B\\u0924\", \"\\u0938\\u0902\\u0917\\u0920\\u0928\", \"\\u09AC\\u09BE\\u0982\\u09B2\\u09BE\", \"\\u09AD\\u09BE\\u09B0\\u09A4\", \"\\u09AD\\u09BE\\u09F0\\u09A4\", \"\\u0A2D\\u0A3E\\u0A30\\u0A24\", \"\\u0AAD\\u0ABE\\u0AB0\\u0AA4\", \"\\u0B2D\\u0B3E\\u0B30\\u0B24\", \"\\u0B87\\u0BA8\\u0BCD\\u0BA4\\u0BBF\\u0BAF\\u0BBE\", \"\\u0B87\\u0BB2\\u0B99\\u0BCD\\u0B95\\u0BC8\", \"\\u0B9A\\u0BBF\\u0B99\\u0BCD\\u0B95\\u0BAA\\u0BCD\\u0BAA\\u0BC2\\u0BB0\\u0BCD\", \"\\u0C2D\\u0C3E\\u0C30\\u0C24\\u0C4D\", \"\\u0CAD\\u0CBE\\u0CB0\\u0CA4\", \"\\u0D2D\\u0D3E\\u0D30\\u0D24\\u0D02\", \"\\u0DBD\\u0D82\\u0D9A\\u0DCF\", \"\\u0E04\\u0E2D\\u0E21\", \"\\u0E44\\u0E17\\u0E22\", \"\\u0EA5\\u0EB2\\u0EA7\", \"\\u10D2\\u10D4\", \"\\u307F\\u3093\\u306A\", \"\\u30A2\\u30DE\\u30BE\\u30F3\", \"\\u30AF\\u30E9\\u30A6\\u30C9\", \"\\u30B0\\u30FC\\u30B0\\u30EB\", \"\\u30B3\\u30E0\", \"\\u30B9\\u30C8\\u30A2\", \"\\u30BB\\u30FC\\u30EB\", \"\\u30D5\\u30A1\\u30C3\\u30B7\\u30E7\\u30F3\", \"\\u30DD\\u30A4\\u30F3\\u30C8\", \"\\u4E16\\u754C\", \"\\u4E2D\\u4FE1\", \"\\u4E2D\\u56FD\", \"\\u4E2D\\u570B\", \"\\u4E2D\\u6587\\u7F51\", \"\\u4E9A\\u9A6C\\u900A\", \"\\u4F01\\u4E1A\", \"\\u4F5B\\u5C71\", \"\\u4FE1\\u606F\", \"\\u5065\\u5EB7\", \"\\u516B\\u5366\", \"\\u516C\\u53F8\", \"\\u516C\\u76CA\", \"\\u53F0\\u6E7E\", \"\\u53F0\\u7063\", \"\\u5546\\u57CE\", \"\\u5546\\u5E97\", \"\\u5546\\u6807\", \"\\u5609\\u91CC\", \"\\u5609\\u91CC\\u5927\\u9152\\u5E97\", \"\\u5728\\u7EBF\", \"\\u5927\\u62FF\", \"\\u5929\\u4E3B\\u6559\", \"\\u5A31\\u4E50\", \"\\u5BB6\\u96FB\", \"\\u5E7F\\u4E1C\", \"\\u5FAE\\u535A\", \"\\u6148\\u5584\", \"\\u6211\\u7231\\u4F60\", \"\\u624B\\u673A\", \"\\u62DB\\u8058\", \"\\u653F\\u52A1\", \"\\u653F\\u5E9C\", \"\\u65B0\\u52A0\\u5761\", \"\\u65B0\\u95FB\", \"\\u65F6\\u5C1A\", \"\\u66F8\\u7C4D\", \"\\u673A\\u6784\", \"\\u6DE1\\u9A6C\\u9521\", \"\\u6E38\\u620F\", \"\\u6FB3\\u9580\", \"\\u70B9\\u770B\", \"\\u79FB\\u52A8\", \"\\u7EC4\\u7EC7\\u673A\\u6784\", \"\\u7F51\\u5740\", \"\\u7F51\\u5E97\", \"\\u7F51\\u7AD9\", \"\\u7F51\\u7EDC\", \"\\u8054\\u901A\", \"\\u8BFA\\u57FA\\u4E9A\", \"\\u8C37\\u6B4C\", \"\\u8D2D\\u7269\", \"\\u901A\\u8CA9\", \"\\u96C6\\u56E2\", \"\\u96FB\\u8A0A\\u76C8\\u79D1\", \"\\u98DE\\u5229\\u6D66\", \"\\u98DF\\u54C1\", \"\\u9910\\u5385\", \"\\u9999\\u683C\\u91CC\\u62C9\", \"\\u9999\\u6E2F\", \"\\uB2F7\\uB137\", \"\\uB2F7\\uCEF4\", \"\\uC0BC\\uC131\", \"\\uD55C\\uAD6D\"];\n\n// src/rich-text/detection.ts\nfunction detectFacets(text) {\n  let match;\n  const facets = [];\n  {\n    const re = /(^|\\s|\\()(@)([a-zA-Z0-9.-]+)(\\b)/g;\n    while (match = re.exec(text.utf16)) {\n      if (!isValidDomain(match[3]) && !match[3].endsWith(\".test\")) {\n        continue;\n      }\n      const start = text.utf16.indexOf(match[3], match.index) - 1;\n      facets.push({\n        $type: \"app.bsky.richtext.facet\",\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(start),\n          byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1)\n        },\n        features: [{\n          $type: \"app.bsky.richtext.facet#mention\",\n          did: match[3]\n        }]\n      });\n    }\n  }\n  {\n    const re = /(^|\\s|\\()((https?:\\/\\/[\\S]+)|((?<domain>[a-z][a-z0-9]*(\\.[a-z0-9]+)+)[\\S]*))/gim;\n    while (match = re.exec(text.utf16)) {\n      let uri2 = match[2];\n      if (!uri2.startsWith(\"http\")) {\n        const domain = match.groups?.domain;\n        if (!domain || !isValidDomain(domain)) {\n          continue;\n        }\n        uri2 = `https://${uri2}`;\n      }\n      const start = text.utf16.indexOf(match[2], match.index);\n      const index = {\n        start,\n        end: start + match[2].length\n      };\n      if (/[.,;:!?]$/.test(uri2)) {\n        uri2 = uri2.slice(0, -1);\n        index.end--;\n      }\n      if (/[)]$/.test(uri2) && !uri2.includes(\"(\")) {\n        uri2 = uri2.slice(0, -1);\n        index.end--;\n      }\n      facets.push({\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(index.start),\n          byteEnd: text.utf16IndexToUtf8Index(index.end)\n        },\n        features: [{\n          $type: \"app.bsky.richtext.facet#link\",\n          uri: uri2\n        }]\n      });\n    }\n  }\n  {\n    const re = /(?:^|\\s)(#[^\\d\\s]\\S*)(?=\\s)?/g;\n    while (match = re.exec(text.utf16)) {\n      let [tag] = match;\n      const hasLeadingSpace = /^\\s/.test(tag);\n      tag = tag.trim().replace(/\\p{P}+$/gu, \"\");\n      if (tag.length > 66) continue;\n      const index = match.index + (hasLeadingSpace ? 1 : 0);\n      facets.push({\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(index),\n          byteEnd: text.utf16IndexToUtf8Index(index + tag.length)\n        },\n        features: [{\n          $type: \"app.bsky.richtext.facet#tag\",\n          tag: tag.replace(/^#/, \"\")\n        }]\n      });\n    }\n  }\n  return facets.length > 0 ? facets : void 0;\n}\nfunction isValidDomain(str) {\n  return !!tlds_default.find(tld => {\n    const i = str.lastIndexOf(tld);\n    if (i === -1) {\n      return false;\n    }\n    return str.charAt(i - 1) === \".\" && i === str.length - tld.length;\n  });\n}\n\n// src/rich-text/rich-text.ts\nvar RichTextSegment = class {\n  constructor(text, facet) {\n    this.text = text;\n    this.facet = facet;\n  }\n  get link() {\n    const link = this.facet?.features.find(facet_exports.isLink);\n    if (facet_exports.isLink(link)) {\n      return link;\n    }\n    return void 0;\n  }\n  isLink() {\n    return !!this.link;\n  }\n  get mention() {\n    const mention = this.facet?.features.find(facet_exports.isMention);\n    if (facet_exports.isMention(mention)) {\n      return mention;\n    }\n    return void 0;\n  }\n  isMention() {\n    return !!this.mention;\n  }\n  get tag() {\n    const tag = this.facet?.features.find(facet_exports.isTag);\n    if (facet_exports.isTag(tag)) {\n      return tag;\n    }\n    return void 0;\n  }\n  isTag() {\n    return !!this.tag;\n  }\n};\nvar RichText = class {\n  constructor(props, opts) {\n    this.unicodeText = new UnicodeString(props.text);\n    this.facets = props.facets;\n    if (!this.facets?.length && props.entities?.length) {\n      this.facets = entitiesToFacets(this.unicodeText, props.entities);\n    }\n    if (this.facets) {\n      this.facets.sort(facetSort);\n    }\n    if (opts?.cleanNewlines) {\n      sanitizeRichText(this, {\n        cleanNewlines: true\n      }).copyInto(this);\n    }\n  }\n  get text() {\n    return this.unicodeText.toString();\n  }\n  get length() {\n    return this.unicodeText.length;\n  }\n  get graphemeLength() {\n    return this.unicodeText.graphemeLength;\n  }\n  clone() {\n    return new RichText({\n      text: this.unicodeText.utf16,\n      facets: cloneDeep(this.facets)\n    });\n  }\n  copyInto(target) {\n    target.unicodeText = this.unicodeText;\n    target.facets = cloneDeep(this.facets);\n  }\n  *segments() {\n    const facets = this.facets || [];\n    if (!facets.length) {\n      yield new RichTextSegment(this.unicodeText.utf16);\n      return;\n    }\n    let textCursor = 0;\n    let facetCursor = 0;\n    do {\n      const currFacet = facets[facetCursor];\n      if (textCursor < currFacet.index.byteStart) {\n        yield new RichTextSegment(this.unicodeText.slice(textCursor, currFacet.index.byteStart));\n      } else if (textCursor > currFacet.index.byteStart) {\n        facetCursor++;\n        continue;\n      }\n      if (currFacet.index.byteStart < currFacet.index.byteEnd) {\n        const subtext = this.unicodeText.slice(currFacet.index.byteStart, currFacet.index.byteEnd);\n        if (!subtext.trim()) {\n          yield new RichTextSegment(subtext);\n        } else {\n          yield new RichTextSegment(subtext, currFacet);\n        }\n      }\n      textCursor = currFacet.index.byteEnd;\n      facetCursor++;\n    } while (facetCursor < facets.length);\n    if (textCursor < this.unicodeText.length) {\n      yield new RichTextSegment(this.unicodeText.slice(textCursor, this.unicodeText.length));\n    }\n  }\n  insert(insertIndex, insertText) {\n    this.unicodeText = new UnicodeString(this.unicodeText.slice(0, insertIndex) + insertText + this.unicodeText.slice(insertIndex));\n    if (!this.facets?.length) {\n      return this;\n    }\n    const numCharsAdded = insertText.length;\n    for (const ent of this.facets) {\n      if (insertIndex <= ent.index.byteStart) {\n        ent.index.byteStart += numCharsAdded;\n        ent.index.byteEnd += numCharsAdded;\n      } else if (insertIndex >= ent.index.byteStart && insertIndex < ent.index.byteEnd) {\n        ent.index.byteEnd += numCharsAdded;\n      }\n    }\n    return this;\n  }\n  delete(removeStartIndex, removeEndIndex) {\n    this.unicodeText = new UnicodeString(this.unicodeText.slice(0, removeStartIndex) + this.unicodeText.slice(removeEndIndex));\n    if (!this.facets?.length) {\n      return this;\n    }\n    const numCharsRemoved = removeEndIndex - removeStartIndex;\n    for (const ent of this.facets) {\n      if (removeStartIndex <= ent.index.byteStart && removeEndIndex >= ent.index.byteEnd) {\n        ent.index.byteStart = 0;\n        ent.index.byteEnd = 0;\n      } else if (removeStartIndex > ent.index.byteEnd) {} else if (removeStartIndex > ent.index.byteStart && removeStartIndex <= ent.index.byteEnd && removeEndIndex > ent.index.byteEnd) {\n        ent.index.byteEnd = removeStartIndex;\n      } else if (removeStartIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {\n        ent.index.byteEnd -= numCharsRemoved;\n      } else if (removeStartIndex < ent.index.byteStart && removeEndIndex >= ent.index.byteStart && removeEndIndex <= ent.index.byteEnd) {\n        ent.index.byteStart = removeStartIndex;\n        ent.index.byteEnd -= numCharsRemoved;\n      } else if (removeEndIndex < ent.index.byteStart) {\n        ent.index.byteStart -= numCharsRemoved;\n        ent.index.byteEnd -= numCharsRemoved;\n      }\n    }\n    this.facets = this.facets.filter(ent => ent.index.byteStart < ent.index.byteEnd);\n    return this;\n  }\n  async detectFacets(agent) {\n    this.facets = detectFacets(this.unicodeText);\n    if (this.facets) {\n      for (const facet of this.facets) {\n        for (const feature of facet.features) {\n          if (facet_exports.isMention(feature)) {\n            const did2 = await agent.resolveHandle({\n              handle: feature.did\n            }).catch(_ => void 0).then(res => res?.data.did);\n            feature.did = did2 || \"\";\n          }\n        }\n      }\n      this.facets.sort(facetSort);\n    }\n  }\n  detectFacetsWithoutResolution() {\n    this.facets = detectFacets(this.unicodeText);\n    if (this.facets) {\n      this.facets.sort(facetSort);\n    }\n  }\n};\nvar facetSort = (a, b) => a.index.byteStart - b.index.byteStart;\nfunction entitiesToFacets(text, entities) {\n  const facets = [];\n  for (const ent of entities) {\n    if (ent.type === \"link\") {\n      facets.push({\n        $type: \"app.bsky.richtext.facet\",\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end)\n        },\n        features: [{\n          $type: \"app.bsky.richtext.facet#link\",\n          uri: ent.value\n        }]\n      });\n    } else if (ent.type === \"mention\") {\n      facets.push({\n        $type: \"app.bsky.richtext.facet\",\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end)\n        },\n        features: [{\n          $type: \"app.bsky.richtext.facet#mention\",\n          did: ent.value\n        }]\n      });\n    }\n  }\n  return facets;\n}\nfunction cloneDeep(v) {\n  if (typeof v === \"undefined\") {\n    return v;\n  }\n  return JSON.parse(JSON.stringify(v));\n}\n\n// src/moderation/types.ts\nvar ModerationDecision = class {\n  constructor(cause = void 0, alert = false, blur = false, blurMedia = false, filter = false, noOverride = false, additionalCauses = [], did2 = \"\") {\n    this.cause = cause;\n    this.alert = alert;\n    this.blur = blur;\n    this.blurMedia = blurMedia;\n    this.filter = filter;\n    this.noOverride = noOverride;\n    this.additionalCauses = additionalCauses;\n    this.did = did2;\n  }\n  static noop() {\n    return new ModerationDecision();\n  }\n};\n\n// src/moderation/const/labels.ts\nvar LABELS = {\n  \"!hide\": {\n    id: \"!hide\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\"],\n    onwarn: \"blur\",\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Moderator Hide\",\n          description: \"Moderator has chosen to hide the content.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Content Blocked\",\n          description: \"This account has been hidden by the moderators.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Content Blocked\",\n          description: \"This content has been hidden by the moderators.\"\n        }\n      }\n    }\n  },\n  \"!no-promote\": {\n    id: \"!no-promote\",\n    preferences: [\"hide\"],\n    flags: [],\n    onwarn: null,\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Moderator Filter\",\n          description: \"Moderator has chosen to filter the content from feeds.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"N/A\",\n          description: \"N/A\"\n        }\n      },\n      content: {\n        en: {\n          name: \"N/A\",\n          description: \"N/A\"\n        }\n      }\n    }\n  },\n  \"!warn\": {\n    id: \"!warn\",\n    preferences: [\"warn\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Moderator Warn\",\n          description: \"Moderator has chosen to set a general warning on the content.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Content Warning\",\n          description: \"This account has received a general warning from moderators.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Content Warning\",\n          description: \"This content has received a general warning from moderators.\"\n        }\n      }\n    }\n  },\n  \"!no-unauthenticated\": {\n    id: \"!no-unauthenticated\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\", \"unauthed\"],\n    onwarn: \"blur\",\n    groupId: \"system\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Sign-in Required\",\n          description: \"This user has requested that their account only be shown to signed-in users.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Sign-in Required\",\n          description: \"This user has requested that their account only be shown to signed-in users.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Sign-in Required\",\n          description: \"This user has requested that their content only be shown to signed-in users.\"\n        }\n      }\n    }\n  },\n  \"dmca-violation\": {\n    id: \"dmca-violation\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\"],\n    onwarn: \"blur\",\n    groupId: \"legal\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Copyright Violation\",\n          description: \"The content has received a DMCA takedown request.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Copyright Violation\",\n          description: \"This account has received a DMCA takedown request. It will be restored if the concerns can be resolved.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Copyright Violation\",\n          description: \"This content has received a DMCA takedown request. It will be restored if the concerns can be resolved.\"\n        }\n      }\n    }\n  },\n  doxxing: {\n    id: \"doxxing\",\n    preferences: [\"hide\"],\n    flags: [\"no-override\"],\n    onwarn: \"blur\",\n    groupId: \"legal\",\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: \"Doxxing\",\n          description: \"Information that reveals private information about someone which has been shared without the consent of the subject.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Doxxing\",\n          description: \"This account has been reported to publish private information about someone without their consent. This report is currently under review.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Doxxing\",\n          description: \"This content has been reported to include private information about someone without their consent.\"\n        }\n      }\n    }\n  },\n  porn: {\n    id: \"porn\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"sexual\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Pornography\",\n          description: \"Images of full-frontal nudity (genitalia) in any sexualized context, or explicit sexual activity (meaning contact with genitalia or breasts) even if partially covered. Includes graphic sexual cartoons (often jokes/memes).\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This account contains imagery of full-frontal nudity or explicit sexual activity.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This content contains imagery of full-frontal nudity or explicit sexual activity.\"\n        }\n      }\n    }\n  },\n  sexual: {\n    id: \"sexual\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"sexual\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Sexually Suggestive\",\n          description: 'Content that does not meet the level of \"pornography\", but is still sexual. Some common examples have been selfies and \"hornyposting\" with underwear on, or partially naked (naked but covered, eg with hands or from side perspective). Sheer/see-through nipples may end up in this category.'\n        }\n      },\n      account: {\n        en: {\n          name: \"Suggestive Content\",\n          description: \"This account contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Suggestive Content\",\n          description: \"This content contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.\"\n        }\n      }\n    }\n  },\n  nudity: {\n    id: \"nudity\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"sexual\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Nudity\",\n          description: 'Nudity which is not sexual, or that is primarily \"artistic\" in nature. For example: breastfeeding; classic art paintings and sculptures; newspaper images with some nudity; fashion modeling. \"Erotic photography\" is likely to end up in sexual or porn.'\n        }\n      },\n      account: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This account contains imagery which portrays nudity in a non-sexual or artistic setting.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Adult Content\",\n          description: \"This content contains imagery which portrays nudity in a non-sexual or artistic setting.\"\n        }\n      }\n    }\n  },\n  nsfl: {\n    id: \"nsfl\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"NSFL\",\n          description: `\"Not Suitable For Life.\" This includes graphic images like the infamous \"goatse\" (don't look it up).`\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (NSFL)\",\n          description: 'This account contains graphic images which are often referred to as \"Not Suitable For Life.\"'\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (NSFL)\",\n          description: 'This content contains graphic images which are often referred to as \"Not Suitable For Life.\"'\n        }\n      }\n    }\n  },\n  corpse: {\n    id: \"corpse\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Corpse\",\n          description: \"Visual image of a dead human body in any context. Includes war images, hanging, funeral caskets. Does not include all figurative cases (cartoons), but can include realistic figurative images or renderings.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Corpse)\",\n          description: \"This account contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Corpse)\",\n          description: \"This content contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.\"\n        }\n      }\n    }\n  },\n  gore: {\n    id: \"gore\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Gore\",\n          description: \"Intended for shocking images, typically involving blood or visible wounds.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Gore)\",\n          description: \"This account contains shocking images involving blood or visible wounds.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Gore)\",\n          description: \"This content contains shocking images involving blood or visible wounds.\"\n        }\n      }\n    }\n  },\n  torture: {\n    id: \"torture\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Torture\",\n          description: \"Depictions of torture of a human or animal (animal cruelty).\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Torture)\",\n          description: \"This account contains depictions of torture of a human or animal.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Torture)\",\n          description: \"This content contains depictions of torture of a human or animal.\"\n        }\n      }\n    }\n  },\n  \"self-harm\": {\n    id: \"self-harm\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [\"adult\"],\n    onwarn: \"blur-media\",\n    groupId: \"violence\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Self-Harm\",\n          description: \"A visual depiction (photo or figurative) of cutting, suicide, or similar.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Graphic Imagery (Self-Harm)\",\n          description: \"This account includes depictions of cutting, suicide, or other forms of self-harm.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Graphic Imagery (Self-Harm)\",\n          description: \"This content includes depictions of cutting, suicide, or other forms of self-harm.\"\n        }\n      }\n    }\n  },\n  \"intolerant-race\": {\n    id: \"intolerant-race\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Racial Intolerance\",\n          description: \"Hateful or intolerant content related to race.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Racial)\",\n          description: \"This account includes hateful or intolerant content related to race.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Racial)\",\n          description: \"This content includes hateful or intolerant views related to race.\"\n        }\n      }\n    }\n  },\n  \"intolerant-gender\": {\n    id: \"intolerant-gender\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Gender Intolerance\",\n          description: \"Hateful or intolerant content related to gender or gender identity.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Gender)\",\n          description: \"This account includes hateful or intolerant content related to gender or gender identity.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Gender)\",\n          description: \"This content includes hateful or intolerant views related to gender or gender identity.\"\n        }\n      }\n    }\n  },\n  \"intolerant-sexual-orientation\": {\n    id: \"intolerant-sexual-orientation\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Sexual Orientation Intolerance\",\n          description: \"Hateful or intolerant content related to sexual preferences.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Orientation)\",\n          description: \"This account includes hateful or intolerant content related to sexual preferences.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Orientation)\",\n          description: \"This content includes hateful or intolerant views related to sexual preferences.\"\n        }\n      }\n    }\n  },\n  \"intolerant-religion\": {\n    id: \"intolerant-religion\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Religious Intolerance\",\n          description: \"Hateful or intolerant content related to religious views or practices.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance (Religious)\",\n          description: \"This account includes hateful or intolerant content related to religious views or practices.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance (Religious)\",\n          description: \"This content includes hateful or intolerant views related to religious views or practices.\"\n        }\n      }\n    }\n  },\n  intolerant: {\n    id: \"intolerant\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Intolerance\",\n          description: \"A catchall for hateful or intolerant content which is not covered elsewhere.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerance\",\n          description: \"This account includes hateful or intolerant content.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerance\",\n          description: \"This content includes hateful or intolerant views.\"\n        }\n      }\n    }\n  },\n  \"icon-intolerant\": {\n    id: \"icon-intolerant\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur-media\",\n    groupId: \"intolerance\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Intolerant Iconography\",\n          description: \"Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc).\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Intolerant Iconography\",\n          description: \"This account includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Intolerant Iconography\",\n          description: \"This content includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.\"\n        }\n      }\n    }\n  },\n  threat: {\n    id: \"threat\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"rude\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Threats\",\n          description: \"Statements or imagery published with the intent to threaten, intimidate, or harm.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Threats\",\n          description: \"The moderators believe this account has published statements or imagery with the intent to threaten, intimidate, or harm others.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Threats\",\n          description: \"The moderators believe this content was published with the intent to threaten, intimidate, or harm others.\"\n        }\n      }\n    }\n  },\n  spoiler: {\n    id: \"spoiler\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"curation\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Spoiler\",\n          description: \"Discussion about film, TV, etc which gives away plot points.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Spoiler Warning\",\n          description: \"This account contains discussion about film, TV, etc which gives away plot points.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Spoiler Warning\",\n          description: \"This content contains discussion about film, TV, etc which gives away plot points.\"\n        }\n      }\n    }\n  },\n  spam: {\n    id: \"spam\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"spam\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Spam\",\n          description: \"Repeat, low-quality messages which are clearly not designed to add to a conversation or space.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Spam\",\n          description: \"This account publishes repeat, low-quality messages which are clearly not designed to add to a conversation or space.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Spam\",\n          description: \"This content is a part of repeat, low-quality messages which are clearly not designed to add to a conversation or space.\"\n        }\n      }\n    }\n  },\n  \"account-security\": {\n    id: \"account-security\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Security Concerns\",\n          description: \"Content designed to hijack user accounts such as a phishing attack.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Security Warning\",\n          description: \"This account has published content designed to hijack user accounts such as a phishing attack.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Security Warning\",\n          description: \"This content is designed to hijack user accounts such as a phishing attack.\"\n        }\n      }\n    }\n  },\n  \"net-abuse\": {\n    id: \"net-abuse\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"blur\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Network Attacks\",\n          description: \"Content designed to attack network systems such as denial-of-service attacks.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Network Attack Warning\",\n          description: \"This account has published content designed to attack network systems such as denial-of-service attacks.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Network Attack Warning\",\n          description: \"This content is designed to attack network systems such as denial-of-service attacks.\"\n        }\n      }\n    }\n  },\n  impersonation: {\n    id: \"impersonation\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"alert\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Impersonation\",\n          description: \"Accounts which falsely assert some identity.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Impersonation Warning\",\n          description: \"The moderators believe this account is lying about their identity.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Impersonation Warning\",\n          description: \"The moderators believe this account is lying about their identity.\"\n        }\n      }\n    }\n  },\n  scam: {\n    id: \"scam\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"alert\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Scam\",\n          description: \"Fraudulent content.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Scam Warning\",\n          description: \"The moderators believe this account publishes fraudulent content.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Scam Warning\",\n          description: \"The moderators believe this is fraudulent content.\"\n        }\n      }\n    }\n  },\n  misleading: {\n    id: \"misleading\",\n    preferences: [\"ignore\", \"warn\", \"hide\"],\n    flags: [],\n    onwarn: \"alert\",\n    groupId: \"misinfo\",\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: \"Misleading\",\n          description: \"Accounts which share misleading information.\"\n        }\n      },\n      account: {\n        en: {\n          name: \"Misleading\",\n          description: \"The moderators believe this account is spreading misleading information.\"\n        }\n      },\n      content: {\n        en: {\n          name: \"Misleading\",\n          description: \"The moderators believe this account is spreading misleading information.\"\n        }\n      }\n    }\n  }\n};\n\n// src/moderation/accumulator.ts\nvar ModerationCauseAccumulator = class {\n  constructor() {\n    this.did = \"\";\n    this.causes = [];\n  }\n  setDid(did2) {\n    this.did = did2;\n  }\n  addBlocking(blocking) {\n    if (blocking) {\n      this.causes.push({\n        type: \"blocking\",\n        source: {\n          type: \"user\"\n        },\n        priority: 3\n      });\n    }\n  }\n  addBlockingByList(blockingByList) {\n    if (blockingByList) {\n      this.causes.push({\n        type: \"blocking\",\n        source: {\n          type: \"list\",\n          list: blockingByList\n        },\n        priority: 3\n      });\n    }\n  }\n  addBlockedBy(blockedBy) {\n    if (blockedBy) {\n      this.causes.push({\n        type: \"blocked-by\",\n        source: {\n          type: \"user\"\n        },\n        priority: 4\n      });\n    }\n  }\n  addBlockOther(blockOther) {\n    if (blockOther) {\n      this.causes.push({\n        type: \"block-other\",\n        source: {\n          type: \"user\"\n        },\n        priority: 4\n      });\n    }\n  }\n  addLabel(label, opts) {\n    const labelDef = LABELS[label.val];\n    if (!labelDef) {\n      return;\n    }\n    const isSelf = label.src === this.did;\n    const labeler = isSelf ? void 0 : opts.labelers.find(s => s.labeler.did === label.src);\n    let labelPref = \"ignore\";\n    if (!labelDef.configurable) {\n      labelPref = labelDef.preferences[0];\n    } else if (labelDef.flags.includes(\"adult\") && !opts.adultContentEnabled) {\n      labelPref = \"hide\";\n    } else if (labeler?.labels[label.val]) {\n      labelPref = labeler.labels[label.val];\n    } else if (opts.labels[label.val]) {\n      labelPref = opts.labels[label.val];\n    }\n    if (labelPref === \"ignore\") {\n      return;\n    }\n    if (labelDef.flags.includes(\"unauthed\") && !!opts.userDid) {\n      return;\n    }\n    let priority;\n    if (labelDef.flags.includes(\"no-override\")) {\n      priority = 1;\n    } else if (labelPref === \"hide\") {\n      priority = 2;\n    } else if (labelDef.onwarn === \"blur\") {\n      priority = 5;\n    } else if (labelDef.onwarn === \"blur-media\") {\n      priority = 7;\n    } else {\n      priority = 8;\n    }\n    this.causes.push({\n      type: \"label\",\n      source: isSelf || !labeler ? {\n        type: \"user\"\n      } : {\n        type: \"labeler\",\n        labeler: labeler.labeler\n      },\n      label,\n      labelDef,\n      setting: labelPref,\n      priority\n    });\n  }\n  addMuted(muted) {\n    if (muted) {\n      this.causes.push({\n        type: \"muted\",\n        source: {\n          type: \"user\"\n        },\n        priority: 6\n      });\n    }\n  }\n  addMutedByList(mutedByList) {\n    if (mutedByList) {\n      this.causes.push({\n        type: \"muted\",\n        source: {\n          type: \"list\",\n          list: mutedByList\n        },\n        priority: 6\n      });\n    }\n  }\n  finalizeDecision(opts) {\n    const mod = new ModerationDecision();\n    mod.did = this.did;\n    if (!this.causes.length) {\n      return mod;\n    }\n    this.causes.sort((a, b) => a.priority - b.priority);\n    mod.cause = this.causes[0];\n    mod.additionalCauses = this.causes.slice(1);\n    if (mod.cause.type === \"blocking\" || mod.cause.type === \"blocked-by\" || mod.cause.type === \"block-other\") {\n      mod.filter = true;\n      mod.blur = true;\n      mod.noOverride = true;\n    } else if (mod.cause.type === \"muted\") {\n      mod.filter = true;\n      mod.blur = true;\n    } else if (mod.cause.type === \"label\") {\n      if (mod.cause.setting === \"hide\") {\n        mod.filter = true;\n      }\n      switch (mod.cause.labelDef.onwarn) {\n        case \"alert\":\n          mod.alert = true;\n          break;\n        case \"blur\":\n          mod.blur = true;\n          break;\n        case \"blur-media\":\n          mod.blurMedia = true;\n          break;\n        case null:\n          break;\n      }\n      if (mod.cause.labelDef.flags.includes(\"no-override\")) {\n        mod.noOverride = true;\n      } else if (mod.cause.labelDef.flags.includes(\"adult\") && !opts.adultContentEnabled) {\n        mod.noOverride = true;\n      }\n    }\n    return mod;\n  }\n};\n\n// src/moderation/subjects/account.ts\nfunction decideAccount(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  acc.setDid(subject.did);\n  if (subject.viewer?.muted) {\n    if (subject.viewer?.mutedByList) {\n      acc.addMutedByList(subject.viewer?.mutedByList);\n    } else {\n      acc.addMuted(subject.viewer?.muted);\n    }\n  }\n  if (subject.viewer?.blocking) {\n    if (subject.viewer?.blockingByList) {\n      acc.addBlockingByList(subject.viewer?.blockingByList);\n    } else {\n      acc.addBlocking(subject.viewer?.blocking);\n    }\n  }\n  acc.addBlockedBy(subject.viewer?.blockedBy);\n  for (const label of filterAccountLabels(subject.labels)) {\n    acc.addLabel(label, opts);\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction filterAccountLabels(labels) {\n  if (!labels) {\n    return [];\n  }\n  return labels.filter(label => !label.uri.endsWith(\"/app.bsky.actor.profile/self\") || label.val === \"!no-unauthenticated\");\n}\n\n// src/moderation/subjects/profile.ts\nfunction decideProfile(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  acc.setDid(subject.did);\n  for (const label of filterProfileLabels(subject.labels)) {\n    acc.addLabel(label, opts);\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction filterProfileLabels(labels) {\n  if (!labels) {\n    return [];\n  }\n  return labels.filter(label => label.uri.endsWith(\"/app.bsky.actor.profile/self\"));\n}\n\n// src/moderation/subjects/post.ts\nfunction decidePost(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  acc.setDid(subject.author.did);\n  if (subject.labels?.length) {\n    for (const label of subject.labels) {\n      acc.addLabel(label, opts);\n    }\n  }\n  return acc.finalizeDecision(opts);\n}\n\n// src/moderation/subjects/quoted-post.ts\nfunction decideQuotedPost(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  if (record_exports.isViewRecord(subject.record)) {\n    acc.setDid(subject.record.author.did);\n    if (subject.record.labels?.length) {\n      for (const label of subject.record.labels) {\n        acc.addLabel(label, opts);\n      }\n    }\n  } else if (record_exports.isViewBlocked(subject.record)) {\n    acc.setDid(subject.record.author.did);\n    if (subject.record.author.viewer?.blocking) {\n      acc.addBlocking(subject.record.author.viewer?.blocking);\n    } else if (subject.record.author.viewer?.blockedBy) {\n      acc.addBlockedBy(subject.record.author.viewer?.blockedBy);\n    } else {\n      acc.addBlockOther(true);\n    }\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction decideQuotedPostAccount(subject, opts) {\n  if (record_exports.isViewRecord(subject.record)) {\n    return decideAccount(subject.record.author, opts);\n  }\n  return ModerationDecision.noop();\n}\nfunction decideQuotedPostWithMedia(subject, opts) {\n  const acc = new ModerationCauseAccumulator();\n  if (record_exports.isViewRecord(subject.record.record)) {\n    acc.setDid(subject.record.record.author.did);\n    if (subject.record.record.labels?.length) {\n      for (const label of subject.record.record.labels) {\n        acc.addLabel(label, opts);\n      }\n    }\n  } else if (record_exports.isViewBlocked(subject.record.record)) {\n    acc.setDid(subject.record.record.author.did);\n    if (subject.record.record.author.viewer?.blocking) {\n      acc.addBlocking(subject.record.record.author.viewer?.blocking);\n    } else if (subject.record.record.author.viewer?.blockedBy) {\n      acc.addBlockedBy(subject.record.record.author.viewer?.blockedBy);\n    } else {\n      acc.addBlockOther(true);\n    }\n  }\n  return acc.finalizeDecision(opts);\n}\nfunction decideQuotedPostWithMediaAccount(subject, opts) {\n  if (record_exports.isViewRecord(subject.record.record)) {\n    return decideAccount(subject.record.record.author, opts);\n  }\n  return ModerationDecision.noop();\n}\n\n// src/moderation/subjects/feed-generator.ts\nfunction decideFeedGenerator(_subject, _opts) {\n  return ModerationDecision.noop();\n}\n\n// src/moderation/subjects/user-list.ts\nfunction decideUserList(_subject, _opts) {\n  return ModerationDecision.noop();\n}\n\n// src/moderation/util.ts\nfunction takeHighestPriorityDecision(...decisions) {\n  const filtered = decisions.filter(d => !!d);\n  if (filtered.length === 0) {\n    return ModerationDecision.noop();\n  }\n  filtered.sort((a, b) => {\n    if (a.cause && b.cause) {\n      return a.cause.priority - b.cause.priority;\n    }\n    if (a.cause) {\n      return -1;\n    }\n    if (b.cause) {\n      return 1;\n    }\n    return 0;\n  });\n  return filtered[0];\n}\nfunction downgradeDecision(decision, to) {\n  decision.filter = false;\n  decision.noOverride = false;\n  if (to === \"noop\") {\n    decision.blur = false;\n    decision.blurMedia = false;\n    decision.alert = false;\n    delete decision.cause;\n  } else if (to === \"alert\") {\n    decision.blur = false;\n    decision.blurMedia = false;\n    decision.alert = true;\n  }\n}\nfunction isModerationDecisionNoop(decision, {\n  ignoreFilter\n} = {\n  ignoreFilter: false\n}) {\n  if (!decision) {\n    return true;\n  }\n  if (decision.alert) {\n    return false;\n  }\n  if (decision.blur) {\n    return false;\n  }\n  if (decision.filter && !ignoreFilter) {\n    return false;\n  }\n  return true;\n}\nfunction isQuotedPost(embed) {\n  return Boolean(embed && record_exports.isView(embed));\n}\nfunction isQuotedPostWithMedia(embed) {\n  return Boolean(embed && recordWithMedia_exports.isView(embed));\n}\nfunction toModerationUI(decision) {\n  return {\n    cause: decision.cause,\n    filter: decision.filter,\n    blur: decision.blur,\n    alert: decision.alert,\n    noOverride: decision.noOverride\n  };\n}\n\n// src/moderation/index.ts\nfunction moderateProfile(subject, opts) {\n  const account = decideAccount(subject, opts);\n  const profile = decideProfile(subject, opts);\n  if (account.blurMedia) {\n    account.blur = true;\n  }\n  profile.filter = false;\n  if (!isModerationDecisionNoop(account) && account.did === opts.userDid) {\n    downgradeDecision(account, \"alert\");\n  }\n  if (!isModerationDecisionNoop(profile) && profile.did === opts.userDid) {\n    downgradeDecision(profile, \"alert\");\n  }\n  let avatarBlur = false;\n  let avatarNoOverride = false;\n  if ((account.blur || account.blurMedia) && account.cause?.type !== \"muted\") {\n    avatarBlur = true;\n    avatarNoOverride = account.noOverride || profile.noOverride;\n  } else if (profile.blur || profile.blurMedia) {\n    avatarBlur = true;\n    avatarNoOverride = account.noOverride || profile.noOverride;\n  }\n  if (account.cause?.type === \"blocking\" || account.cause?.type === \"blocked-by\" || account.cause?.type === \"muted\") {\n    account.blur = false;\n    account.noOverride = false;\n  }\n  return {\n    decisions: {\n      account,\n      profile\n    },\n    account: account.filter || account.blur || account.alert ? toModerationUI(account) : {},\n    profile: profile.filter || profile.blur || profile.alert ? toModerationUI(profile) : {},\n    avatar: {\n      blur: avatarBlur,\n      alert: account.alert || profile.alert,\n      noOverride: avatarNoOverride\n    }\n  };\n}\nfunction moderatePost(subject, opts) {\n  const post = decidePost(subject, opts);\n  const account = decideAccount(subject.author, opts);\n  const profile = decideProfile(subject.author, opts);\n  let quote;\n  let quotedAccount;\n  if (isQuotedPost(subject.embed)) {\n    quote = decideQuotedPost(subject.embed, opts);\n    quotedAccount = decideQuotedPostAccount(subject.embed, opts);\n  } else if (isQuotedPostWithMedia(subject.embed)) {\n    quote = decideQuotedPostWithMedia(subject.embed, opts);\n    quotedAccount = decideQuotedPostWithMediaAccount(subject.embed, opts);\n  }\n  if (quote?.blurMedia) {\n    quote.blur = true;\n  }\n  if (!isModerationDecisionNoop(post) && post.did === opts.userDid) {\n    downgradeDecision(post, \"blur\");\n  }\n  if (account.cause && account.did === opts.userDid) {\n    downgradeDecision(account, \"noop\");\n  }\n  if (profile.cause && profile.did === opts.userDid) {\n    downgradeDecision(profile, \"noop\");\n  }\n  if (quote && !isModerationDecisionNoop(quote) && quote.did === opts.userDid) {\n    downgradeDecision(quote, \"blur\");\n  }\n  if (quotedAccount && !isModerationDecisionNoop(quotedAccount) && quotedAccount.did === opts.userDid) {\n    downgradeDecision(quotedAccount, \"noop\");\n  }\n  const mergedForFeed = takeHighestPriorityDecision(post, account, quote, quotedAccount);\n  const mergedForView = takeHighestPriorityDecision(post, account);\n  const mergedQuote = takeHighestPriorityDecision(quote, quotedAccount);\n  let blurAvatar = false;\n  if ((account.blur || account.blurMedia) && account.cause?.type !== \"muted\") {\n    blurAvatar = true;\n  } else if ((profile.blur || profile.blurMedia) && profile.cause?.type !== \"muted\") {\n    blurAvatar = true;\n  }\n  return {\n    decisions: {\n      post,\n      account,\n      profile,\n      quote,\n      quotedAccount\n    },\n    content: {\n      cause: !isModerationDecisionNoop(mergedForView) ? mergedForView.cause : mergedForFeed.filter ? mergedForFeed.cause : void 0,\n      filter: mergedForFeed.filter,\n      blur: mergedForView.blur,\n      alert: mergedForView.alert,\n      noOverride: mergedForView.noOverride\n    },\n    avatar: {\n      blur: blurAvatar,\n      alert: account.alert || profile.alert,\n      noOverride: account.noOverride || profile.noOverride\n    },\n    embed: !isModerationDecisionNoop(mergedQuote, {\n      ignoreFilter: true\n    }) ? {\n      cause: mergedQuote.cause,\n      blur: mergedQuote.blur,\n      alert: mergedQuote.alert,\n      noOverride: mergedQuote.noOverride\n    } : account.blurMedia ? {\n      cause: account.cause,\n      blur: true,\n      noOverride: account.noOverride\n    } : post.blurMedia ? {\n      cause: post.cause,\n      blur: true,\n      noOverride: post.noOverride\n    } : {}\n  };\n}\nfunction moderateFeedGenerator(subject, opts) {\n  const feedGenerator = decideFeedGenerator(subject, opts);\n  const account = decideAccount(subject.creator, opts);\n  const profile = decideProfile(subject.creator, opts);\n  const merged = takeHighestPriorityDecision(feedGenerator, account);\n  return {\n    decisions: {\n      feedGenerator,\n      account,\n      profile\n    },\n    content: {\n      cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,\n      filter: merged.filter,\n      blur: merged.blur,\n      alert: merged.alert,\n      noOverride: merged.noOverride\n    },\n    avatar: {\n      blur: account.blurMedia || profile.blurMedia,\n      alert: account.alert,\n      noOverride: account.noOverride || profile.noOverride\n    }\n  };\n}\nfunction moderateUserList(subject, opts) {\n  const userList = decideUserList(subject, opts);\n  const account = defs_exports5.isProfileViewBasic(subject.creator) ? decideAccount(subject.creator, opts) : ModerationDecision.noop();\n  const profile = defs_exports5.isProfileViewBasic(subject.creator) ? decideProfile(subject.creator, opts) : ModerationDecision.noop();\n  const merged = takeHighestPriorityDecision(userList, account);\n  return {\n    decisions: {\n      userList,\n      account,\n      profile\n    },\n    content: {\n      cause: isModerationDecisionNoop(merged) ? void 0 : merged.cause,\n      filter: merged.filter,\n      blur: merged.blur,\n      alert: merged.alert,\n      noOverride: merged.noOverride\n    },\n    avatar: {\n      blur: account.blurMedia || profile.blurMedia,\n      alert: account.alert,\n      noOverride: account.noOverride || profile.noOverride\n    }\n  };\n}\n\n// src/moderation/const/label-groups.ts\nvar LABEL_GROUPS = {\n  system: {\n    id: \"system\",\n    configurable: false,\n    labels: [LABELS[\"!hide\"], LABELS[\"!no-promote\"], LABELS[\"!warn\"], LABELS[\"!no-unauthenticated\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"System\",\n          description: \"Moderator overrides for special cases.\"\n        }\n      }\n    }\n  },\n  legal: {\n    id: \"legal\",\n    configurable: false,\n    labels: [LABELS[\"dmca-violation\"], LABELS[\"doxxing\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Legal\",\n          description: \"Content removed for legal reasons.\"\n        }\n      }\n    }\n  },\n  sexual: {\n    id: \"sexual\",\n    configurable: true,\n    labels: [LABELS[\"porn\"], LABELS[\"sexual\"], LABELS[\"nudity\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Adult Content\",\n          description: \"Content which is sexual in nature.\"\n        }\n      }\n    }\n  },\n  violence: {\n    id: \"violence\",\n    configurable: true,\n    labels: [LABELS[\"nsfl\"], LABELS[\"corpse\"], LABELS[\"gore\"], LABELS[\"torture\"], LABELS[\"self-harm\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Violence\",\n          description: \"Content which is violent or deeply disturbing.\"\n        }\n      }\n    }\n  },\n  intolerance: {\n    id: \"intolerance\",\n    configurable: true,\n    labels: [LABELS[\"intolerant-race\"], LABELS[\"intolerant-gender\"], LABELS[\"intolerant-sexual-orientation\"], LABELS[\"intolerant-religion\"], LABELS[\"intolerant\"], LABELS[\"icon-intolerant\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Intolerance\",\n          description: \"Content or behavior which is hateful or intolerant toward a group of people.\"\n        }\n      }\n    }\n  },\n  rude: {\n    id: \"rude\",\n    configurable: true,\n    labels: [LABELS[\"threat\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Rude\",\n          description: \"Behavior which is rude toward other users.\"\n        }\n      }\n    }\n  },\n  curation: {\n    id: \"curation\",\n    configurable: true,\n    labels: [LABELS[\"spoiler\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Curational\",\n          description: \"Subjective moderation geared towards curating a more positive environment.\"\n        }\n      }\n    }\n  },\n  spam: {\n    id: \"spam\",\n    configurable: true,\n    labels: [LABELS[\"spam\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Spam\",\n          description: \"Content which doesn't add to the conversation.\"\n        }\n      }\n    }\n  },\n  misinfo: {\n    id: \"misinfo\",\n    configurable: true,\n    labels: [LABELS[\"account-security\"], LABELS[\"net-abuse\"], LABELS[\"impersonation\"], LABELS[\"scam\"], LABELS[\"misleading\"]],\n    strings: {\n      settings: {\n        en: {\n          name: \"Misinformation\",\n          description: \"Content which misleads or defrauds users.\"\n        }\n      }\n    }\n  }\n};\n\n// src/bsky-agent.ts\nvar FEED_VIEW_PREF_DEFAULTS = {\n  hideReplies: false,\n  hideRepliesByUnfollowed: false,\n  hideRepliesByLikeCount: 0,\n  hideReposts: false,\n  hideQuotePosts: false\n};\nvar THREAD_VIEW_PREF_DEFAULTS = {\n  sort: \"oldest\",\n  prioritizeFollowedUsers: true\n};\nvar BskyAgent = class extends AtpAgent {\n  constructor() {\n    super(...arguments);\n    this.getTimeline = (params2, opts) => this.api.app.bsky.feed.getTimeline(params2, opts);\n    this.getAuthorFeed = (params2, opts) => this.api.app.bsky.feed.getAuthorFeed(params2, opts);\n    this.getActorLikes = (params2, opts) => this.api.app.bsky.feed.getActorLikes(params2, opts);\n    this.getPostThread = (params2, opts) => this.api.app.bsky.feed.getPostThread(params2, opts);\n    this.getPost = params2 => this.api.app.bsky.feed.post.get(params2);\n    this.getPosts = (params2, opts) => this.api.app.bsky.feed.getPosts(params2, opts);\n    this.getLikes = (params2, opts) => this.api.app.bsky.feed.getLikes(params2, opts);\n    this.getRepostedBy = (params2, opts) => this.api.app.bsky.feed.getRepostedBy(params2, opts);\n    this.getFollows = (params2, opts) => this.api.app.bsky.graph.getFollows(params2, opts);\n    this.getFollowers = (params2, opts) => this.api.app.bsky.graph.getFollowers(params2, opts);\n    this.getProfile = (params2, opts) => this.api.app.bsky.actor.getProfile(params2, opts);\n    this.getProfiles = (params2, opts) => this.api.app.bsky.actor.getProfiles(params2, opts);\n    this.getSuggestions = (params2, opts) => this.api.app.bsky.actor.getSuggestions(params2, opts);\n    this.searchActors = (params2, opts) => this.api.app.bsky.actor.searchActors(params2, opts);\n    this.searchActorsTypeahead = (params2, opts) => this.api.app.bsky.actor.searchActorsTypeahead(params2, opts);\n    this.listNotifications = (params2, opts) => this.api.app.bsky.notification.listNotifications(params2, opts);\n    this.countUnreadNotifications = (params2, opts) => this.api.app.bsky.notification.getUnreadCount(params2, opts);\n  }\n  get app() {\n    return this.api.app;\n  }\n  async post(record) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    record.createdAt = record.createdAt || new Date().toISOString();\n    return this.api.app.bsky.feed.post.create({\n      repo: this.session.did\n    }, record);\n  }\n  async deletePost(postUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const postUrip = new AtUri(postUri);\n    return await this.api.app.bsky.feed.post.delete({\n      repo: postUrip.hostname,\n      rkey: postUrip.rkey\n    });\n  }\n  async like(uri2, cid2) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.feed.like.create({\n      repo: this.session.did\n    }, {\n      subject: {\n        uri: uri2,\n        cid: cid2\n      },\n      createdAt: new Date().toISOString()\n    });\n  }\n  async deleteLike(likeUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const likeUrip = new AtUri(likeUri);\n    return await this.api.app.bsky.feed.like.delete({\n      repo: likeUrip.hostname,\n      rkey: likeUrip.rkey\n    });\n  }\n  async repost(uri2, cid2) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.feed.repost.create({\n      repo: this.session.did\n    }, {\n      subject: {\n        uri: uri2,\n        cid: cid2\n      },\n      createdAt: new Date().toISOString()\n    });\n  }\n  async deleteRepost(repostUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const repostUrip = new AtUri(repostUri);\n    return await this.api.app.bsky.feed.repost.delete({\n      repo: repostUrip.hostname,\n      rkey: repostUrip.rkey\n    });\n  }\n  async follow(subjectDid) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.graph.follow.create({\n      repo: this.session.did\n    }, {\n      subject: subjectDid,\n      createdAt: new Date().toISOString()\n    });\n  }\n  async deleteFollow(followUri) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const followUrip = new AtUri(followUri);\n    return await this.api.app.bsky.graph.follow.delete({\n      repo: followUrip.hostname,\n      rkey: followUrip.rkey\n    });\n  }\n  async upsertProfile(updateFn) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    let retriesRemaining = 5;\n    while (retriesRemaining >= 0) {\n      const existing = await this.com.atproto.repo.getRecord({\n        repo: this.session.did,\n        collection: \"app.bsky.actor.profile\",\n        rkey: \"self\"\n      }).catch(_ => void 0);\n      const updated = await updateFn(existing?.data.value);\n      if (updated) {\n        updated.$type = \"app.bsky.actor.profile\";\n      }\n      const validation = profile_exports.validateRecord(updated);\n      if (!validation.success) {\n        throw validation.error;\n      }\n      try {\n        await this.com.atproto.repo.putRecord({\n          repo: this.session.did,\n          collection: \"app.bsky.actor.profile\",\n          rkey: \"self\",\n          record: updated,\n          swapRecord: existing?.data.cid || null\n        });\n      } catch (e) {\n        if (retriesRemaining > 0 && e instanceof putRecord_exports.InvalidSwapError) {\n          retriesRemaining--;\n          continue;\n        } else {\n          throw e;\n        }\n      }\n      break;\n    }\n  }\n  async mute(actor) {\n    return this.api.app.bsky.graph.muteActor({\n      actor\n    });\n  }\n  async unmute(actor) {\n    return this.api.app.bsky.graph.unmuteActor({\n      actor\n    });\n  }\n  async muteModList(uri2) {\n    return this.api.app.bsky.graph.muteActorList({\n      list: uri2\n    });\n  }\n  async unmuteModList(uri2) {\n    return this.api.app.bsky.graph.unmuteActorList({\n      list: uri2\n    });\n  }\n  async blockModList(uri2) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    return await this.api.app.bsky.graph.listblock.create({\n      repo: this.session.did\n    }, {\n      subject: uri2,\n      createdAt: new Date().toISOString()\n    });\n  }\n  async unblockModList(uri2) {\n    if (!this.session) {\n      throw new Error(\"Not logged in\");\n    }\n    const listInfo = await this.api.app.bsky.graph.getList({\n      list: uri2,\n      limit: 1\n    });\n    if (!listInfo.data.list.viewer?.blocked) {\n      return;\n    }\n    const {\n      rkey\n    } = new AtUri(listInfo.data.list.viewer.blocked);\n    return await this.api.app.bsky.graph.listblock.delete({\n      repo: this.session.did,\n      rkey\n    });\n  }\n  async updateSeenNotifications(seenAt) {\n    seenAt = seenAt || new Date().toISOString();\n    return this.api.app.bsky.notification.updateSeen({\n      seenAt\n    });\n  }\n  async getPreferences() {\n    const prefs = {\n      feeds: {\n        saved: void 0,\n        pinned: void 0\n      },\n      feedViewPrefs: {\n        home: {\n          ...FEED_VIEW_PREF_DEFAULTS\n        }\n      },\n      threadViewPrefs: {\n        ...THREAD_VIEW_PREF_DEFAULTS\n      },\n      adultContentEnabled: false,\n      contentLabels: {},\n      birthDate: void 0,\n      interests: {\n        tags: []\n      }\n    };\n    const res = await this.app.bsky.actor.getPreferences({});\n    for (const pref of res.data.preferences) {\n      if (defs_exports5.isAdultContentPref(pref) && defs_exports5.validateAdultContentPref(pref).success) {\n        prefs.adultContentEnabled = pref.enabled;\n      } else if (defs_exports5.isContentLabelPref(pref) && defs_exports5.validateAdultContentPref(pref).success) {\n        let value = pref.visibility;\n        if (value === \"show\") {\n          value = \"ignore\";\n        }\n        if (value === \"ignore\" || value === \"warn\" || value === \"hide\") {\n          prefs.contentLabels[pref.label] = value;\n        }\n      } else if (defs_exports5.isSavedFeedsPref(pref) && defs_exports5.validateSavedFeedsPref(pref).success) {\n        prefs.feeds.saved = pref.saved;\n        prefs.feeds.pinned = pref.pinned;\n      } else if (defs_exports5.isPersonalDetailsPref(pref) && defs_exports5.validatePersonalDetailsPref(pref).success) {\n        if (pref.birthDate) {\n          prefs.birthDate = new Date(pref.birthDate);\n        }\n      } else if (defs_exports5.isFeedViewPref(pref) && defs_exports5.validateFeedViewPref(pref).success) {\n        const {\n          $type,\n          feed,\n          ...v\n        } = pref;\n        prefs.feedViewPrefs[pref.feed] = {\n          ...FEED_VIEW_PREF_DEFAULTS,\n          ...v\n        };\n      } else if (defs_exports5.isThreadViewPref(pref) && defs_exports5.validateThreadViewPref(pref).success) {\n        const {\n          $type,\n          ...v\n        } = pref;\n        prefs.threadViewPrefs = {\n          ...prefs.threadViewPrefs,\n          ...v\n        };\n      } else if (defs_exports5.isInterestsPref(pref) && defs_exports5.validateInterestsPref(pref).success) {\n        const {\n          $type,\n          ...v\n        } = pref;\n        prefs.interests = {\n          ...prefs.interests,\n          ...v\n        };\n      }\n    }\n    return prefs;\n  }\n  async setSavedFeeds(saved, pinned) {\n    return updateFeedPreferences(this, () => ({\n      saved,\n      pinned\n    }));\n  }\n  async addSavedFeed(v) {\n    return updateFeedPreferences(this, (saved, pinned) => ({\n      saved: [...saved.filter(uri2 => uri2 !== v), v],\n      pinned\n    }));\n  }\n  async removeSavedFeed(v) {\n    return updateFeedPreferences(this, (saved, pinned) => ({\n      saved: saved.filter(uri2 => uri2 !== v),\n      pinned: pinned.filter(uri2 => uri2 !== v)\n    }));\n  }\n  async addPinnedFeed(v) {\n    return updateFeedPreferences(this, (saved, pinned) => ({\n      saved: [...saved.filter(uri2 => uri2 !== v), v],\n      pinned: [...pinned.filter(uri2 => uri2 !== v), v]\n    }));\n  }\n  async removePinnedFeed(v) {\n    return updateFeedPreferences(this, (saved, pinned) => ({\n      saved,\n      pinned: pinned.filter(uri2 => uri2 !== v)\n    }));\n  }\n  async setAdultContentEnabled(v) {\n    await updatePreferences(this, prefs => {\n      let adultContentPref = prefs.findLast(pref => defs_exports5.isAdultContentPref(pref) && defs_exports5.validateAdultContentPref(pref).success);\n      if (adultContentPref) {\n        adultContentPref.enabled = v;\n      } else {\n        adultContentPref = {\n          $type: \"app.bsky.actor.defs#adultContentPref\",\n          enabled: v\n        };\n      }\n      return prefs.filter(pref => !defs_exports5.isAdultContentPref(pref)).concat([adultContentPref]);\n    });\n  }\n  async setContentLabelPref(key, value) {\n    if (value === \"show\") {\n      value = \"ignore\";\n    }\n    await updatePreferences(this, prefs => {\n      let labelPref = prefs.findLast(pref => defs_exports5.isContentLabelPref(pref) && defs_exports5.validateAdultContentPref(pref).success && pref.label === key);\n      if (labelPref) {\n        labelPref.visibility = value;\n      } else {\n        labelPref = {\n          $type: \"app.bsky.actor.defs#contentLabelPref\",\n          label: key,\n          visibility: value\n        };\n      }\n      return prefs.filter(pref => !defs_exports5.isContentLabelPref(pref) || pref.label !== key).concat([labelPref]);\n    });\n  }\n  async setPersonalDetails({\n    birthDate\n  }) {\n    birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate;\n    await updatePreferences(this, prefs => {\n      let personalDetailsPref = prefs.findLast(pref => defs_exports5.isPersonalDetailsPref(pref) && defs_exports5.validatePersonalDetailsPref(pref).success);\n      if (personalDetailsPref) {\n        personalDetailsPref.birthDate = birthDate;\n      } else {\n        personalDetailsPref = {\n          $type: \"app.bsky.actor.defs#personalDetailsPref\",\n          birthDate\n        };\n      }\n      return prefs.filter(pref => !defs_exports5.isPersonalDetailsPref(pref)).concat([personalDetailsPref]);\n    });\n  }\n  async setFeedViewPrefs(feed, pref) {\n    await updatePreferences(this, prefs => {\n      const existing = prefs.findLast(pref2 => defs_exports5.isFeedViewPref(pref2) && defs_exports5.validateFeedViewPref(pref2).success && pref2.feed === feed);\n      if (existing) {\n        pref = {\n          ...existing,\n          ...pref\n        };\n      }\n      return prefs.filter(p => !defs_exports5.isFeedViewPref(pref) || p.feed !== feed).concat([{\n        ...pref,\n        $type: \"app.bsky.actor.defs#feedViewPref\",\n        feed\n      }]);\n    });\n  }\n  async setThreadViewPrefs(pref) {\n    await updatePreferences(this, prefs => {\n      const existing = prefs.findLast(pref2 => defs_exports5.isThreadViewPref(pref2) && defs_exports5.validateThreadViewPref(pref2).success);\n      if (existing) {\n        pref = {\n          ...existing,\n          ...pref\n        };\n      }\n      return prefs.filter(p => !defs_exports5.isThreadViewPref(p)).concat([{\n        ...pref,\n        $type: \"app.bsky.actor.defs#threadViewPref\"\n      }]);\n    });\n  }\n  async setInterestsPref(pref) {\n    await updatePreferences(this, prefs => {\n      const existing = prefs.findLast(pref2 => defs_exports5.isInterestsPref(pref2) && defs_exports5.validateInterestsPref(pref2).success);\n      if (existing) {\n        pref = {\n          ...existing,\n          ...pref\n        };\n      }\n      return prefs.filter(p => !defs_exports5.isInterestsPref(p)).concat([{\n        ...pref,\n        $type: \"app.bsky.actor.defs#interestsPref\"\n      }]);\n    });\n  }\n};\nasync function updatePreferences(agent, cb) {\n  const res = await agent.app.bsky.actor.getPreferences({});\n  const newPrefs = cb(res.data.preferences);\n  if (newPrefs === false) {\n    return;\n  }\n  await agent.app.bsky.actor.putPreferences({\n    preferences: newPrefs\n  });\n}\nasync function updateFeedPreferences(agent, cb) {\n  let res;\n  await updatePreferences(agent, prefs => {\n    let feedsPref = prefs.findLast(pref => defs_exports5.isSavedFeedsPref(pref) && defs_exports5.validateSavedFeedsPref(pref).success);\n    if (feedsPref) {\n      res = cb(feedsPref.saved, feedsPref.pinned);\n      feedsPref.saved = res.saved;\n      feedsPref.pinned = res.pinned;\n    } else {\n      res = cb([], []);\n      feedsPref = {\n        $type: \"app.bsky.actor.defs#savedFeedsPref\",\n        saved: res.saved,\n        pinned: res.pinned\n      };\n    }\n    return prefs.filter(pref => !defs_exports5.isSavedFeedsPref(pref)).concat([feedsPref]);\n  });\n  return res;\n}","map":{"version":3,"names":["require_boundaries","__commonJS","../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/boundaries.js","exports","Object","defineProperty","value","EXTENDED_PICTOGRAPHIC","CLUSTER_BREAK","CLUSTER_BREAK2","require_GraphemerHelper","../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerHelper.js","boundaries_1","NotBreak","BreakStart","Break","BreakLastRegional","BreakPenultimateRegional","GraphemerHelper","isSurrogate","str","pos","charCodeAt","codePointAt","idx","code2","length","hi","low","shouldBreak","start","mid","end","startEmoji","midEmoji","endEmoji","all","concat","allEmoji","previous","next","nextEmoji","rIIndex","lastIndexOf","REGIONAL_INDICATOR","slice","every","c","PREPEND","indexOf","filter","CR","LF","CONTROL","L","V","LV","LVT","T","EXTEND","ZWJ","SPACINGMARK","previousNonExtendIndex","default","require_GraphemerIterator","../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/GraphemerIterator.js","GraphemerIterator","constructor","nextBreak","_index","_str","_nextBreak","Symbol","iterator","brk","done","require_Graphemer","../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/Graphemer.js","__importDefault","mod","__esModule","GraphemerHelper_1","GraphemerIterator_1","Graphemer2","string3","index","prevCP","prev","getGraphemeBreakProperty","prevEmoji","getEmojiProperty","i","nextCP","push","splitGraphemes","res","iterateGraphemes","countGraphemes","count","OTHER","require_lib","../../node_modules/.pnpm/graphemer@1.4.0/node_modules/graphemer/lib/index.js","Graphemer_1","require_dist","../../node_modules/.pnpm/iso-datestring-validator@2.2.2/node_modules/iso-datestring-validator/dist/index.js","e","d","t2","r2","n2","o","enumerable","get","e2","prototype","hasOwnProperty","call","r","toStringTag","t","RegExp","test","n","exec","i2","replace","o2","includes","a2","split","u2","d2","e3","t3","r3","s","match","Array","isArray","a","isValidDate","isValidISODateString","isValidTime","isValidYearMonth","u","src_exports2","__export","APP_BSKY_GRAPH","AppBskyActorDefs","defs_exports5","AppBskyActorGetPreferences","getPreferences_exports","AppBskyActorGetProfile","getProfile_exports","AppBskyActorGetProfiles","getProfiles_exports","AppBskyActorGetSuggestions","getSuggestions_exports","AppBskyActorNS","AppBskyActorProfile","profile_exports","AppBskyActorPutPreferences","putPreferences_exports","AppBskyActorSearchActors","searchActors_exports","AppBskyActorSearchActorsTypeahead","searchActorsTypeahead_exports","AppBskyEmbedExternal","external_exports","AppBskyEmbedImages","images_exports","AppBskyEmbedNS","AppBskyEmbedRecord","record_exports","AppBskyEmbedRecordWithMedia","recordWithMedia_exports","AppBskyFeedDefs","defs_exports6","AppBskyFeedDescribeFeedGenerator","describeFeedGenerator_exports","AppBskyFeedGenerator","generator_exports","AppBskyFeedGetActorFeeds","getActorFeeds_exports","AppBskyFeedGetActorLikes","getActorLikes_exports","AppBskyFeedGetAuthorFeed","getAuthorFeed_exports","AppBskyFeedGetFeed","getFeed_exports","AppBskyFeedGetFeedGenerator","getFeedGenerator_exports","AppBskyFeedGetFeedGenerators","getFeedGenerators_exports","AppBskyFeedGetFeedSkeleton","getFeedSkeleton_exports","AppBskyFeedGetLikes","getLikes_exports","AppBskyFeedGetListFeed","getListFeed_exports","AppBskyFeedGetPostThread","getPostThread_exports","AppBskyFeedGetPosts","getPosts_exports","AppBskyFeedGetRepostedBy","getRepostedBy_exports","AppBskyFeedGetSuggestedFeeds","getSuggestedFeeds_exports","AppBskyFeedGetTimeline","getTimeline_exports","AppBskyFeedLike","like_exports","AppBskyFeedNS","AppBskyFeedPost","post_exports","AppBskyFeedRepost","repost_exports","AppBskyFeedSearchPosts","searchPosts_exports","AppBskyFeedThreadgate","threadgate_exports","AppBskyGraphBlock","block_exports","AppBskyGraphDefs","defs_exports7","AppBskyGraphFollow","follow_exports","AppBskyGraphGetBlocks","getBlocks_exports2","AppBskyGraphGetFollowers","getFollowers_exports","AppBskyGraphGetFollows","getFollows_exports","AppBskyGraphGetList","getList_exports","AppBskyGraphGetListBlocks","getListBlocks_exports","AppBskyGraphGetListMutes","getListMutes_exports","AppBskyGraphGetLists","getLists_exports","AppBskyGraphGetMutes","getMutes_exports","AppBskyGraphGetRelationships","getRelationships_exports","AppBskyGraphGetSuggestedFollowsByActor","getSuggestedFollowsByActor_exports","AppBskyGraphList","list_exports","AppBskyGraphListblock","listblock_exports","AppBskyGraphListitem","listitem_exports","AppBskyGraphMuteActor","muteActor_exports","AppBskyGraphMuteActorList","muteActorList_exports","AppBskyGraphNS","AppBskyGraphUnmuteActor","unmuteActor_exports","AppBskyGraphUnmuteActorList","unmuteActorList_exports","AppBskyNS","AppBskyNotificationGetUnreadCount","getUnreadCount_exports","AppBskyNotificationListNotifications","listNotifications_exports","AppBskyNotificationNS","AppBskyNotificationRegisterPush","registerPush_exports","AppBskyNotificationUpdateSeen","updateSeen_exports","AppBskyRichtextFacet","facet_exports","AppBskyRichtextNS","AppBskyUnspeccedDefs","defs_exports8","AppBskyUnspeccedGetPopularFeedGenerators","getPopularFeedGenerators_exports","AppBskyUnspeccedGetTaggedSuggestions","getTaggedSuggestions_exports","AppBskyUnspeccedNS","AppBskyUnspeccedSearchActorsSkeleton","searchActorsSkeleton_exports","AppBskyUnspeccedSearchPostsSkeleton","searchPostsSkeleton_exports","AppNS","AtUri","AtpAgent","AtpBaseClient","AtpServiceClient","BlobRef","BlockRecord","BskyAgent","COM_ATPROTO_ADMIN","COM_ATPROTO_MODERATION","ComAtprotoAdminCreateCommunicationTemplate","createCommunicationTemplate_exports","ComAtprotoAdminDefs","defs_exports","ComAtprotoAdminDeleteAccount","deleteAccount_exports","ComAtprotoAdminDeleteCommunicationTemplate","deleteCommunicationTemplate_exports","ComAtprotoAdminDisableAccountInvites","disableAccountInvites_exports","ComAtprotoAdminDisableInviteCodes","disableInviteCodes_exports","ComAtprotoAdminEmitModerationEvent","emitModerationEvent_exports","ComAtprotoAdminEnableAccountInvites","enableAccountInvites_exports","ComAtprotoAdminGetAccountInfo","getAccountInfo_exports","ComAtprotoAdminGetAccountInfos","getAccountInfos_exports","ComAtprotoAdminGetInviteCodes","getInviteCodes_exports","ComAtprotoAdminGetModerationEvent","getModerationEvent_exports","ComAtprotoAdminGetRecord","getRecord_exports","ComAtprotoAdminGetRepo","getRepo_exports","ComAtprotoAdminGetSubjectStatus","getSubjectStatus_exports","ComAtprotoAdminListCommunicationTemplates","listCommunicationTemplates_exports","ComAtprotoAdminNS","ComAtprotoAdminQueryModerationEvents","queryModerationEvents_exports","ComAtprotoAdminQueryModerationStatuses","queryModerationStatuses_exports","ComAtprotoAdminSearchRepos","searchRepos_exports","ComAtprotoAdminSendEmail","sendEmail_exports","ComAtprotoAdminUpdateAccountEmail","updateAccountEmail_exports","ComAtprotoAdminUpdateAccountHandle","updateAccountHandle_exports","ComAtprotoAdminUpdateCommunicationTemplate","updateCommunicationTemplate_exports","ComAtprotoAdminUpdateSubjectStatus","updateSubjectStatus_exports","ComAtprotoIdentityNS","ComAtprotoIdentityResolveHandle","resolveHandle_exports","ComAtprotoIdentityUpdateHandle","updateHandle_exports","ComAtprotoLabelDefs","defs_exports2","ComAtprotoLabelNS","ComAtprotoLabelQueryLabels","queryLabels_exports","ComAtprotoLabelSubscribeLabels","subscribeLabels_exports","ComAtprotoModerationCreateReport","createReport_exports","ComAtprotoModerationDefs","defs_exports3","ComAtprotoModerationNS","ComAtprotoNS","ComAtprotoRepoApplyWrites","applyWrites_exports","ComAtprotoRepoCreateRecord","createRecord_exports","ComAtprotoRepoDeleteRecord","deleteRecord_exports","ComAtprotoRepoDescribeRepo","describeRepo_exports","ComAtprotoRepoGetRecord","getRecord_exports2","ComAtprotoRepoListRecords","listRecords_exports","ComAtprotoRepoNS","ComAtprotoRepoPutRecord","putRecord_exports","ComAtprotoRepoStrongRef","strongRef_exports","ComAtprotoRepoUploadBlob","uploadBlob_exports","ComAtprotoServerConfirmEmail","confirmEmail_exports","ComAtprotoServerCreateAccount","createAccount_exports","ComAtprotoServerCreateAppPassword","createAppPassword_exports","ComAtprotoServerCreateInviteCode","createInviteCode_exports","ComAtprotoServerCreateInviteCodes","createInviteCodes_exports","ComAtprotoServerCreateSession","createSession_exports","ComAtprotoServerDefs","defs_exports4","ComAtprotoServerDeleteAccount","deleteAccount_exports2","ComAtprotoServerDeleteSession","deleteSession_exports","ComAtprotoServerDescribeServer","describeServer_exports","ComAtprotoServerGetAccountInviteCodes","getAccountInviteCodes_exports","ComAtprotoServerGetSession","getSession_exports","ComAtprotoServerListAppPasswords","listAppPasswords_exports","ComAtprotoServerNS","ComAtprotoServerRefreshSession","refreshSession_exports","ComAtprotoServerRequestAccountDelete","requestAccountDelete_exports","ComAtprotoServerRequestEmailConfirmation","requestEmailConfirmation_exports","ComAtprotoServerRequestEmailUpdate","requestEmailUpdate_exports","ComAtprotoServerRequestPasswordReset","requestPasswordReset_exports","ComAtprotoServerReserveSigningKey","reserveSigningKey_exports","ComAtprotoServerResetPassword","resetPassword_exports","ComAtprotoServerRevokeAppPassword","revokeAppPassword_exports","ComAtprotoServerUpdateEmail","updateEmail_exports","ComAtprotoSyncGetBlob","getBlob_exports","ComAtprotoSyncGetBlocks","getBlocks_exports","ComAtprotoSyncGetCheckout","getCheckout_exports","ComAtprotoSyncGetHead","getHead_exports","ComAtprotoSyncGetLatestCommit","getLatestCommit_exports","ComAtprotoSyncGetRecord","getRecord_exports3","ComAtprotoSyncGetRepo","getRepo_exports2","ComAtprotoSyncListBlobs","listBlobs_exports","ComAtprotoSyncListRepos","listRepos_exports","ComAtprotoSyncNS","ComAtprotoSyncNotifyOfUpdate","notifyOfUpdate_exports","ComAtprotoSyncRequestCrawl","requestCrawl_exports","ComAtprotoSyncSubscribeRepos","subscribeRepos_exports","ComAtprotoTempCheckSignupQueue","checkSignupQueue_exports","ComAtprotoTempFetchLabels","fetchLabels_exports","ComAtprotoTempImportRepo","importRepo_exports","ComAtprotoTempNS","ComAtprotoTempPushBlob","pushBlob_exports","ComAtprotoTempRequestPhoneVerification","requestPhoneVerification_exports","ComAtprotoTempTransferAccount","transferAccount_exports","ComNS","FollowRecord","GeneratorRecord","LABELS","LABEL_GROUPS","LikeRecord","ListRecord","ListblockRecord","ListitemRecord","ModerationDecision","PostRecord","ProfileRecord","RepostRecord","RichText","RichTextSegment","ThreadgateRecord","UnicodeString","jsonStringToLex","jsonToLex","lexToJson","moderateFeedGenerator","moderatePost","moderateProfile","moderateUserList","parseLanguage","sanitizeRichText","stringifyLex","module","__toCommonJS","ensureValidHandle","handle2","InvalidHandleError","labels","l","endsWith","startsWith","Error","ensureValidDid","did2","InvalidDidError","parts","NSID","nsid2","segments","ensureValidNsid","parse","create","authority","name2","reverse","join","isValid","name","at","toString","toCheck","InvalidNsidError","ensureValidAtUri","uri2","uriParts","fragmentPart","ATP_URI_REGEX","RELATIVE_REGEX","base3","parsed","relativep","parseRelative","assign","hash","host","pathname","searchParams","make","handleOrDid","collection","rkey","protocol","origin","hostname","v","search","URLSearchParams","Boolean","href","path","qs","util","util2","assertEqual","val","assertIs","_arg","assertNever","_x","arrayToEnum","items","obj","item","getValidEnumValues","validKeys","objectKeys","k","filtered","objectValues","map","keys","object2","key","find","arr","checker","isInteger","Number","isFinite","Math","floor","joinValues","array2","separator","jsonStringifyReplacer","_","objectUtil","objectUtil2","mergeShapes","first","second","ZodParsedType","getParsedType","data","undefined","string","isNaN","nan","number","boolean","function","bigint","symbol","array","null","then","catch","promise","Map","Set","set","Date","date","object","unknown","ZodIssueCode","quotelessJson","json","JSON","stringify","ZodError","issues","addIssue","sub","addIssues","subs","actualProto","new","target","setPrototypeOf","__proto__","errors","format","_mapper","mapper","issue","message","fieldErrors","_errors","processError","error","code","unionErrors","returnTypeError","argumentsError","curr","el","terminal","isEmpty","flatten","formErrors","errorMap","_ctx","invalid_type","received","expected","invalid_literal","unrecognized_keys","invalid_union","invalid_union_discriminator","options","invalid_enum_value","invalid_arguments","invalid_return_type","invalid_date","invalid_string","validation","position","too_small","type","exact","inclusive","minimum","too_big","maximum","custom","invalid_intersection_types","not_multiple_of","multipleOf","not_finite","defaultError","overrideErrorMap","setErrorMap","getErrorMap","makeIssue","params2","errorMaps","issueData","fullPath","fullIssue","errorMessage","maps","m","EMPTY_PATH","addIssueToContext","ctx","common","contextualErrorMap","schemaErrorMap","x","ParseStatus","dirty","abort","mergeArray","status","results","arrayValue","INVALID","mergeObjectAsync","pairs","syncPairs","pair","mergeObjectSync","finalObject","alwaysSet","freeze","DIRTY","OK","isAborted","isDirty","isAsync","Promise","errorUtil","errorUtil2","errToObj","ParseInputLazyPath","parent","_cachedPath","_path","_key","handleResult","result","success","_error","processCreateParams","errorMap2","invalid_type_error","required_error","description","customMap","iss","ZodType","def2","spa","safeParseAsync","_def","bind","safeParse","parseAsync","refine","refinement","superRefine","optional","nullable","nullish","or","and","transform","brand","describe","pipe","isNullable","isOptional","_getType","input","_getOrReturnCtx","parsedType","_processInputParams","_parseSync","_parse","_parseAsync","resolve","_a","async","maybeAsyncResult","check","getIssueProperties","_refinement","setError","refinementData","ZodEffects","schema","typeName","ZodFirstPartyTypeKind","effect","ZodOptional","ZodNullable","ZodArray","ZodPromise","option","ZodUnion","incoming","ZodIntersection","defaultValueFunc","ZodDefault","innerType","defaultValue","ZodBranded","catchValueFunc","ZodCatch","catchValue","This","ZodPipeline","cuidRegex","cuid2Regex","ulidRegex","uuidRegex","emailRegex","emojiRegex","ipv4Regex","ipv6Regex","datetimeRegex","args","precision","offset","isValidIP","ip","version2","ZodString","arguments","_regex","regex","nonempty","min","trim","checks","kind","toLowerCase","toUpperCase","coerce","String","ctx2","tooBig","tooSmall","URL","lastIndex","testResult","version","_addCheck","email","url","emoji","uuid","cuid","cuid2","ulid","datetime","minLength","max","maxLength","len","isDatetime","ch","isEmail","isURL","isEmoji","isUUID","isCUID","isCUID2","isULID","isIP","floatSafeRemainder","step","valDecCount","stepDecCount","decCount","valInt","parseInt","toFixed","stepInt","pow","ZodNumber","gte","lte","setLimit","gt","lt","int","positive","negative","nonpositive","nonnegative","finite","safe","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","minValue","maxValue","isInt","ZodBigInt","BigInt","ZodBoolean","ZodDate","getTime","minDate","maxDate","ZodSymbol","ZodUndefined","ZodNull","ZodAny","_any","ZodUnknown","_unknown","ZodNever","never","ZodVoid","void","exactLength","result2","element","schema2","deepPartialify","ZodObject","newShape","shape","fieldSchema","unwrap","ZodTuple","_cached","nonstrict","passthrough","augment","extend","_getCached","shapeKeys","extraKeys","catchall","unknownKeys","keyValidator","strict","_b","_c","_d","strip","augmentation","merge","merging","merged","setKey","pick","mask","forEach","omit","deepPartial","partial","required","newField","keyof","createZodEnum","strictCreate","lazycreate","handleResults","childCtx","issues2","types","getDiscriminator","ZodLazy","ZodLiteral","ZodEnum","ZodNativeEnum","enum","ZodDiscriminatedUnion","discriminator","discriminatorValue","optionsMap","from","discriminatorValues","has","mergeValues","b","aType","bType","valid","bKeys","sharedKeys","newObj","sharedValue","newArray","itemA","itemB","handleParsed","parsedLeft","parsedRight","left","right","rest","itemIndex","schemas2","ZodRecord","keySchema","keyType","valueSchema","valueType","third","ZodMap","entries","finalMap","ZodSet","minSize","size","maxSize","finalizeSet","elements2","parsedSet","add","elements","values","ZodFunction","validate","implement","makeArgsIssue","makeReturnsIssue","returns","fn","parsedArgs","parsedReturns","parameters","returnType","func","validatedFunc","strictImplement","getter","lazySchema","expectedValues","enumValues","Values","Enum","extract","exclude","opt","nativeEnumValues","promisified","sourceType","processed","processed2","checkCtx","arg","fatal","executeRefinement","acc","inner","createWithPreprocess","preprocess","removeDefault","newCtx","removeCatch","ZodNaN","BRAND","handleAsync","inResult","in","out","p","_fatal","p2","late","ZodFirstPartyTypeKind2","instanceOfType","cls","stringType","numberType","nanType","bigIntType","booleanType","dateType","symbolType","undefinedType","nullType","anyType","unknownType","neverType","voidType","arrayType","objectType","strictObjectType","unionType","discriminatedUnionType","intersectionType","tupleType","recordType","mapType","setType","functionType","lazyType","literalType","enumType","nativeEnumType","promiseType","effectsType","optionalType","nullableType","preprocessType","pipelineType","ostring","onumber","oboolean","NEVER","z","defaultErrorMap","ZodTransformer","Schema","ZodSchema","any","discriminatedUnion","intersection","lazy","literal","nativeEnum","pipeline","record","strictObject","transformer","tuple","union","check_exports","assure","is","isObject","encode_1","encode","MSB","REST","MSBALL","INT","num","oldOffset","bytes","decode","read","MSB$1","REST$1","buf","shift","counter","RangeError","N1","N2","N3","N4","N5","N6","N7","N8","N9","varint","encodingLength","_brrp_varint","varint_default","decode2","encodeTo","empty","Uint8Array","equals","aa","bb","byteLength","ii","coerce2","ArrayBuffer","isView","buffer","byteOffset","fromString","TextEncoder","TextDecoder","digest2","sizeOffset","digestOffset","bytes2","Digest","decode3","multihash","subarray","equals2","digest","base58_exports","base58btc","base58flickr","base","ALPHABET","TypeError","BASE_MAP","j","charAt","xc","BASE","LEADER","FACTOR","log","iFACTOR","encode5","source","zeroes","length2","pbegin","pend","b58","carry","it1","it2","repeat","decodeUnsafe","psz","b256","it3","it4","vch","j2","decode6","src","_brrp__multiformats_scope_baseX","base_x_default","Encoder","prefix","baseEncode","Decoder","baseDecode","prefixCodePoint","text","decoder2","ComposedDecoder","decoders","Codec","encoder","decoder","baseX","alphabet","alphabet2","decode4","bitsPerChar","codes","bits","written","SyntaxError","encode2","pad","rfc4648","base32_exports","base32","base32hex","base32hexpad","base32hexpadupper","base32hexupper","base32pad","base32padupper","base32upper","base32z","CID","asCID","_baseCache","defineProperties","hidden","readonly","toV0","DAG_PB_CODE","SHA_256_CODE","createV0","toV1","createV1","other","toStringV0","toStringV1","toJSON","for","isCID","deprecate","IS_CID_DEPRECATION","cidSymbol","toBaseEncodedString","codec","multibaseName","encodeCID","cid2","remainder","decodeFirst","specs","inspectBytes","prefixSize","multihashSize","multihashBytes","digestBytes","digestSize","multihashCode","initialBytes","parseCIDtoBytes","cache","cid3","codeOffset","hashOffset","writable","configurable","range","console","warn","identity_exports","identity","base2_exports","base2","base8_exports","base8","base10_exports","base10","base16_exports","base16","base16upper","base36_exports","base36","base36upper","base64_exports","base64","base64pad","base64url","base64urlpad","base256emoji_exports","base256emoji","alphabetBytesToChars","reduce","alphabetCharsToBytes","encode3","decode5","byts","char","byt","sha2_browser_exports","sha256","sha512","from2","Hasher","sha","crypto","subtle","identity_exports2","identity2","encode4","textEncoder","textDecoder","bases","hashes","createCodec","encoder2","substring","ascii","fromCharCode","BASES","utf8","hex","latin1","binary","bases_default","fromString2","encoding","toString2","jsonToIpld","toReturn","ipldToJson","$bytes","$link","cidSchema","cid","instanceof","def","SECOND","MINUTE","HOUR","DAY","import_graphemer","__toESM","utf8Len","graphemeLen","splitter","langTag","bcp47Regexp","groups","grandfathered","language","extlang","script","region","variant","extension","privateUse","privateUseA","privateUseB","validateLanguage","isValidDidDoc","doc","didDocument","getDid","id","getPdsEndpoint","getServiceEndpoint","opts","services","service","found","service2","serviceEndpoint","validateUrl","urlStr","verificationMethod","controller","publicKeyMultibase","alsoKnownAs","import_iso_datestring_validator","ValidationError","uri","isUri","atUri","did","handle","atIdentifier","isDid","isHandle2","nsid","lexicons2","integer","string2","cidLink","const","maxGraphemes","minGraphemes","typedJsonBlobRef","$type","ref","mimeType","untypedJsonBlobRef","jsonBlobRef","original","asBlobRef","fromJsonRef","ipld","blob","validate2","itemsDef","itemValue","itemPath","validateOneOf","requiredProps","nullableProps","resultValue","properties","propDef","propPath","validated","propValue","propIsUndefined","toLexUri","baseUri","mustBeObj","concreteDefs","isDiscriminatedObject","refsContainType","refs","closed","toConcreteTypes","concreteDef","assertValidOneOf","getDefOrThrow","flat","requiredPropertiesRefinement","field","lexUri","lexBoolean","lexInteger","lexStringFormat","lexString","knownValues","lexUnknown","lexPrimitive","lexBytes","lexCidLink","lexIpldType","lexRef","lexRefUnion","lexRefVariant","lexBlob","accept","lexArray","lexPrimitiveArray","lexToken","lexObject","lexXrpcParameters","lexXrpcBody","lexXrpcSubscriptionMessage","lexXrpcError","lexXrpcQuery","output","lexXrpcProcedure","lexXrpcSubscription","lexRecord","lexUserType","lexiconDoc","lexicon","revision","defs","defId","isObj","hasProp","prop","discriminatedObject","InvalidLexiconError","LexiconDefNotFoundError","params","assertValidRecord","assertValidXrpcParams","assertValidXrpcInput","assertValidXrpcOutput","assertValidXrpcMessage","Lexicons","docs","resolveRefUris","defUri","iterDefs","remove","delete","getDef","resolveLexUri","lexToIpld","ipldToLex","errorResponseBody","ResponseType","ResponseType2","ResponseTypeNames","ResponseTypeStrings","XRPCResponse","headers","XRPCError","XRPCInvalidResponseError","lexiconNsid","validationError","responseBody","getMethodSchemaHTTPMethod","constructMethodCallUri","serviceUri","paramSchema","vals","append","encodeQueryParam","toISOString","normalizeHeaders","normalized","header","constructMethodCallHeaders","encodeMethodCallBody","httpResponseCodeToEnum","resCode","httpResponseBodyParse","Client","fetch","defaultFetchHandler","lex","methodNsid","ServiceClient","addLexicon","addLexicons","removeLexicon","baseClient","setHeader","unsetHeader","httpMethod","httpUri","httpHeaders","body","isErrorResponseBody","httpReqBody","reqInit","method","duplex","resBody","arrayBuffer","fromEntries","defaultInst","schemaDict","main","contentMarkdown","subject","createdBy","statusAttr","applied","modEventView","event","subjectBlobCids","createdAt","creatorHandle","subjectHandle","modEventViewDetail","subjectBlobs","reportView","reasonType","comment","subjectRepoHandle","reportedBy","resolvedByActionIds","subjectStatusView","updatedAt","reviewState","muteUntil","lastReviewedBy","lastReviewedAt","lastReportedAt","lastAppealedAt","takendown","appealed","suspendUntil","reportViewDetail","subjectStatus","resolvedByActions","repoView","relatedRecords","indexedAt","moderation","invitedBy","invitesDisabled","inviteNote","repoViewDetail","invites","emailConfirmedAt","accountView","repoViewNotFound","repoRef","repoBlobRef","recordUri","recordView","blobCids","repo","recordViewDetail","blobs","recordViewNotFound","moderationDetail","blobView","details","imageDetails","width","height","videoDetails","subjectReviewState","reviewOpen","reviewEscalated","reviewClosed","modEventTakedown","durationInHours","modEventReverseTakedown","modEventResolveAppeal","modEventComment","sticky","modEventReport","reportType","modEventLabel","createLabelVals","negateLabelVals","modEventAcknowledge","modEventEscalate","modEventMute","modEventUnmute","modEventEmail","subjectLine","communicationTemplateView","disabled","lastUpdatedBy","account","note","accounts","dids","infos","sort","limit","cursor","takedown","communicationTemplates","sortDirection","createdAfter","createdBefore","includeAllUserRecords","hasComment","addedLabels","removedLabels","reportTypes","events","reportedAfter","reportedBefore","reviewedAfter","reviewedBefore","includeMuted","ignoreSubjects","sortField","subjectStatuses","term","q","repos","recipientDid","content","senderDid","sent","updatedBy","label","neg","cts","selfLabels","selfLabel","uriPatterns","sources","seq","info","reason","reasonSpam","reasonViolation","reasonMisleading","reasonSexual","reasonRude","reasonOther","reasonAppeal","writes","swapCommit","update","swapRecord","didDoc","collections","handleIsCorrect","rkeyStart","rkeyEnd","records","token","inviteCode","verificationCode","verificationPhone","password","recoveryKey","plcOp","accessJwt","refreshJwt","appPassword","useCount","forAccount","codeCount","forAccounts","accountCodes","identifier","emailConfirmed","available","uses","inviteCodeUse","usedBy","usedAt","inviteCodeRequired","phoneVerificationRequired","availableUserDomains","links","privacyPolicy","termsOfService","includeUsed","createAvailable","passwords","tokenRequired","signingKey","cids","root","rev","commit","since","head","rebase","blocks","ops","time","migrate","migrateTo","tombstone","repoOp","action","activated","placeInQueue","estimatedTimeMs","phoneNumber","profileViewBasic","displayName","avatar","viewer","profileView","profileViewDetailed","banner","followersCount","followsCount","postsCount","viewerState","muted","mutedByList","blockedBy","blocking","blockingByList","following","followedBy","preferences","adultContentPref","enabled","contentLabelPref","visibility","savedFeedsPref","pinned","saved","personalDetailsPref","birthDate","feedViewPref","feed","hideReplies","hideRepliesByUnfollowed","hideRepliesByLikeCount","hideReposts","hideQuotePosts","threadViewPref","prioritizeFollowedUsers","interestsPref","tags","actor","actors","profiles","external","title","thumb","view","viewExternal","images","image","alt","aspectRatio","viewImage","fullsize","viewRecord","author","embeds","viewNotFound","notFound","viewBlocked","blocked","media","postView","embed","replyCount","repostCount","likeCount","threadgate","repost","like","replyDisabled","feedViewPost","post","reply","replyRef","reasonRepost","by","threadViewPost","replies","notFoundPost","blockedPost","blockedAuthor","generatorView","creator","descriptionFacets","generatorViewerState","skeletonFeedPost","skeletonReasonRepost","threadgateView","lists","feeds","isOnline","likes","list","depth","parentHeight","thread","uris","posts","repostedBy","algorithm","entities","facets","langs","entity","textSlice","hitsTotal","allow","mentionRule","followingRule","listRule","listViewBasic","purpose","listView","listItemView","listPurpose","modlist","curatelist","listViewerState","notFoundActor","relationship","followers","follows","mutes","others","relationships","suggestions","seenAt","notifications","notification","reasonSubject","isRead","serviceDid","platform","appId","features","mention","link","tag","byteSlice","byteStart","byteEnd","skeletonSearchPost","skeletonSearchActor","query","suggestion","subjectType","typeahead","schemas","lexicons","toKnownErr","toKnownErr2","toKnownErr3","toKnownErr4","toKnownErr5","SubjectHasActionError","toKnownErr6","src2","toKnownErr7","toKnownErr8","toKnownErr9","toKnownErr10","toKnownErr11","RecordNotFoundError","toKnownErr12","RepoNotFoundError","toKnownErr13","toKnownErr14","toKnownErr15","toKnownErr16","toKnownErr17","toKnownErr18","toKnownErr19","toKnownErr20","toKnownErr21","toKnownErr22","toKnownErr23","toKnownErr24","toKnownErr25","toKnownErr26","toKnownErr27","InvalidSwapError","isCreate","isDelete","isUpdate","toKnownErr28","validateCreate","validateDelete","validateUpdate","isObj2","hasProp2","InvalidSwapError2","toKnownErr29","InvalidSwapError3","toKnownErr30","toKnownErr31","toKnownErr32","isRecord","toKnownErr33","validateRecord","InvalidSwapError4","toKnownErr34","toKnownErr35","AccountNotFoundError","ExpiredTokenError","InvalidEmailError","InvalidTokenError","toKnownErr36","HandleNotAvailableError","IncompatibleDidDocError","InvalidHandleError2","InvalidInviteCodeError","InvalidPasswordError","UnresolvableDidError","UnsupportedDomainError","toKnownErr37","AccountTakedownError","isAppPassword","toKnownErr38","validateAppPassword","toKnownErr39","isAccountCodes","toKnownErr40","validateAccountCodes","AccountTakedownError2","toKnownErr41","ExpiredTokenError2","InvalidTokenError2","toKnownErr42","toKnownErr43","isLinks","toKnownErr44","validateLinks","DuplicateCreateError","toKnownErr45","toKnownErr46","AccountTakedownError3","isAppPassword2","toKnownErr47","validateAppPassword2","AccountTakedownError4","toKnownErr48","toKnownErr49","toKnownErr50","toKnownErr51","toKnownErr52","toKnownErr53","ExpiredTokenError3","InvalidTokenError3","toKnownErr54","toKnownErr55","ExpiredTokenError4","InvalidTokenError4","TokenRequiredError","toKnownErr56","toKnownErr57","toKnownErr58","toKnownErr59","HeadNotFoundError","toKnownErr60","RepoNotFoundError2","toKnownErr61","toKnownErr62","toKnownErr63","toKnownErr64","isRepo","toKnownErr65","validateRepo","toKnownErr66","toKnownErr67","toKnownErr68","toKnownErr69","toKnownErr70","toKnownErr71","toKnownErr72","HandleNotAvailableError2","IncompatibleDidDocError2","InvalidHandleError3","InvalidInviteCodeError2","InvalidPasswordError2","UnresolvableDidError2","UnsupportedDomainError2","toKnownErr73","toKnownErr74","toKnownErr75","toKnownErr76","toKnownErr77","toKnownErr78","toKnownErr79","toKnownErr80","isFeed","isLinks2","toKnownErr81","validateFeed","validateLinks2","toKnownErr82","BlockedActorError","BlockedByActorError","toKnownErr83","BlockedActorError2","BlockedByActorError2","toKnownErr84","UnknownFeedError","toKnownErr85","toKnownErr86","toKnownErr87","UnknownFeedError2","toKnownErr88","isLike","toKnownErr89","validateLike","UnknownListError","toKnownErr90","NotFoundError","toKnownErr91","toKnownErr92","toKnownErr93","toKnownErr94","toKnownErr95","BadQueryStringError","toKnownErr96","toKnownErr97","toKnownErr98","toKnownErr99","toKnownErr100","toKnownErr101","toKnownErr102","toKnownErr103","toKnownErr104","ActorNotFoundError","toKnownErr105","toKnownErr106","toKnownErr107","toKnownErr108","toKnownErr109","toKnownErr110","toKnownErr111","isNotification","toKnownErr112","validateNotification","toKnownErr113","toKnownErr114","toKnownErr115","isSuggestion","toKnownErr116","validateSuggestion","BadQueryStringError2","toKnownErr117","BadQueryStringError3","toKnownErr118","REVIEWCLOSED","REVIEWESCALATED","REVIEWOPEN","isAccountView","isBlobView","isCommunicationTemplateView","isImageDetails","isModEventAcknowledge","isModEventComment","isModEventEmail","isModEventEscalate","isModEventLabel","isModEventMute","isModEventReport","isModEventResolveAppeal","isModEventReverseTakedown","isModEventTakedown","isModEventUnmute","isModEventView","isModEventViewDetail","isModeration","isModerationDetail","isRecordView","isRecordViewDetail","isRecordViewNotFound","isRepoBlobRef","isRepoRef","isRepoView","isRepoViewDetail","isRepoViewNotFound","isReportView","isReportViewDetail","isStatusAttr","isSubjectStatusView","isVideoDetails","validateAccountView","validateBlobView","validateCommunicationTemplateView","validateImageDetails","validateModEventAcknowledge","validateModEventComment","validateModEventEmail","validateModEventEscalate","validateModEventLabel","validateModEventMute","validateModEventReport","validateModEventResolveAppeal","validateModEventReverseTakedown","validateModEventTakedown","validateModEventUnmute","validateModEventView","validateModEventViewDetail","validateModeration","validateModerationDetail","validateRecordView","validateRecordViewDetail","validateRecordViewNotFound","validateRepoBlobRef","validateRepoRef","validateRepoView","validateRepoViewDetail","validateRepoViewNotFound","validateReportView","validateReportViewDetail","validateStatusAttr","validateSubjectStatusView","validateVideoDetails","isLabel","isSelfLabel","isSelfLabels","validateLabel","validateSelfLabel","validateSelfLabels","isInfo","isLabels","validateInfo","validateLabels","REASONAPPEAL","REASONMISLEADING","REASONOTHER","REASONRUDE","REASONSEXUAL","REASONSPAM","REASONVIOLATION","isMain","validateMain","isInviteCode","isInviteCodeUse","validateInviteCode","validateInviteCodeUse","isCommit","isHandle","isInfo2","isMigrate","isRepoOp","isTombstone","validateCommit","validateHandle","validateInfo2","validateMigrate","validateRepoOp","validateTombstone","isAdultContentPref","isContentLabelPref","isFeedViewPref","isInterestsPref","isPersonalDetailsPref","isProfileView","isProfileViewBasic","isProfileViewDetailed","isSavedFeedsPref","isThreadViewPref","isViewerState","validateAdultContentPref","validateContentLabelPref","validateFeedViewPref","validateInterestsPref","validatePersonalDetailsPref","validateProfileView","validateProfileViewBasic","validateProfileViewDetailed","validateSavedFeedsPref","validateThreadViewPref","validateViewerState","isRecord2","validateRecord2","isExternal","isMain2","isViewExternal","validateExternal","validateMain2","validateView","validateViewExternal","isAspectRatio","isImage","isMain3","isView2","isViewImage","validateAspectRatio","validateImage","validateMain3","validateView2","validateViewImage","isMain4","isView3","isViewBlocked","isViewNotFound","isViewRecord","validateMain4","validateView3","validateViewBlocked","validateViewNotFound","validateViewRecord","isMain5","isView4","validateMain5","validateView4","isBlockedAuthor","isBlockedPost","isFeedViewPost","isGeneratorView","isGeneratorViewerState","isNotFoundPost","isPostView","isReasonRepost","isReplyRef","isSkeletonFeedPost","isSkeletonReasonRepost","isThreadViewPost","isThreadgateView","isViewerState2","validateBlockedAuthor","validateBlockedPost","validateFeedViewPost","validateGeneratorView","validateGeneratorViewerState","validateNotFoundPost","validatePostView","validateReasonRepost","validateReplyRef","validateSkeletonFeedPost","validateSkeletonReasonRepost","validateThreadViewPost","validateThreadgateView","validateViewerState2","isRecord3","validateRecord3","isRecord4","validateRecord4","isEntity","isRecord5","isReplyRef2","isTextSlice","validateEntity","validateRecord5","validateReplyRef2","validateTextSlice","isRecord6","validateRecord6","isFollowingRule","isListRule","isMentionRule","isRecord7","validateFollowingRule","validateListRule","validateMentionRule","validateRecord7","isRecord8","validateRecord8","CURATELIST","MODLIST","isListItemView","isListView","isListViewBasic","isListViewerState","isNotFoundActor","isRelationship","validateListItemView","validateListView","validateListViewBasic","validateListViewerState","validateNotFoundActor","validateRelationship","isRecord9","validateRecord9","isRecord10","validateRecord10","isRecord11","validateRecord11","isRecord12","validateRecord12","isByteSlice","isLink","isMain6","isMention","isTag","validateByteSlice","validateLink","validateMain6","validateMention","validateTag","isSkeletonSearchActor","isSkeletonSearchPost","validateSkeletonSearchActor","validateSkeletonSearchPost","DefsReviewOpen","DefsReviewEscalated","DefsReviewClosed","DefsReasonSpam","DefsReasonViolation","DefsReasonMisleading","DefsReasonSexual","DefsReasonRude","DefsReasonOther","DefsReasonAppeal","DefsModlist","DefsCuratelist","xrpc","xrpcService","_baseClient","com","app","_service","atproto","admin","server","sync","temp","createCommunicationTemplate","qp","deleteAccount","deleteCommunicationTemplate","disableAccountInvites","disableInviteCodes","emitModerationEvent","enableAccountInvites","getAccountInfo","getAccountInfos","getInviteCodes","getModerationEvent","getRecord","getRepo","getSubjectStatus","listCommunicationTemplates","queryModerationEvents","queryModerationStatuses","searchRepos","sendEmail","updateAccountEmail","updateAccountHandle","updateCommunicationTemplate","updateSubjectStatus","resolveHandle","updateHandle","queryLabels","createReport","applyWrites","createRecord","deleteRecord","describeRepo","listRecords","putRecord","uploadBlob","confirmEmail","createAccount","createAppPassword","createInviteCode","createInviteCodes","createSession","deleteSession","describeServer","getAccountInviteCodes","getSession","listAppPasswords","refreshSession","requestAccountDelete","requestEmailConfirmation","requestEmailUpdate","requestPasswordReset","reserveSigningKey","resetPassword","revokeAppPassword","updateEmail","getBlob","getBlocks","getCheckout","getHead","getLatestCommit","listBlobs","listRepos","notifyOfUpdate","requestCrawl","checkSignupQueue","fetchLabels","importRepo","pushBlob","requestPhoneVerification","transferAccount","bsky","graph","richtext","unspecced","profile","getPreferences","getProfile","getProfiles","getSuggestions","putPreferences","searchActors","searchActorsTypeahead","generator","describeFeedGenerator","getActorFeeds","getActorLikes","getAuthorFeed","getFeed","getFeedGenerator","getFeedGenerators","getFeedSkeleton","getLikes","getListFeed","getPostThread","getPosts","getRepostedBy","getSuggestedFeeds","getTimeline","searchPosts","block","follow","listblock","listitem","getFollowers","getFollows","getList","getListBlocks","getListMutes","getLists","getMutes","getRelationships","getSuggestedFollowsByActor","muteActor","muteActorList","unmuteActor","unmuteActorList","getUnreadCount","listNotifications","registerPush","updateSeen","getPopularFeedGenerators","getTaggedSuggestions","searchActorsSkeleton","searchPostsSkeleton","REFRESH_SESSION","_AtpAgent","api","createModerationReport","_persistSession","persistSession","_fetch","configure","hasSession","session","setPersistSessionHandler","handler","_updateApiEndpoint","login","resumeSession","_addAuthHeader","reqHeaders","authorization","reqUri","reqMethod","reqBody","_refreshSessionPromise","isErrorResponse","_refreshSessionInner","pdsUrl","isNewSessionObject","endpoint","isErrorObject","errorNames","client","utf16","graphemeLength","_graphemeLen","utf16IndexToUtf8Index","EXCESS_SPACE_RE","REPLACEMENT_STR","richText","cleanNewlines","clean","targetRegexp","replacementString","clone","unicodeText","oldText","removeStartIndex","removeEndIndex","insert","detectFacets","re","isValidDomain","domain","hasLeadingSpace","tlds_default","tld","facet","props","entitiesToFacets","facetSort","copyInto","cloneDeep","textCursor","facetCursor","currFacet","subtext","insertIndex","insertText","numCharsAdded","ent","numCharsRemoved","agent","feature","detectFacetsWithoutResolution","cause","alert","blur","blurMedia","noOverride","additionalCauses","noop","flags","onwarn","groupId","strings","settings","en","doxxing","porn","sexual","nudity","nsfl","corpse","gore","torture","intolerant","threat","spoiler","spam","impersonation","scam","misleading","ModerationCauseAccumulator","causes","setDid","addBlocking","priority","addBlockingByList","addBlockedBy","addBlockOther","blockOther","addLabel","labelDef","isSelf","labeler","labelers","labelPref","adultContentEnabled","userDid","setting","addMuted","addMutedByList","finalizeDecision","decideAccount","filterAccountLabels","decideProfile","filterProfileLabels","decidePost","decideQuotedPost","decideQuotedPostAccount","decideQuotedPostWithMedia","decideQuotedPostWithMediaAccount","decideFeedGenerator","_subject","_opts","decideUserList","takeHighestPriorityDecision","decisions","downgradeDecision","decision","to","isModerationDecisionNoop","ignoreFilter","isQuotedPost","isQuotedPostWithMedia","toModerationUI","avatarBlur","avatarNoOverride","quote","quotedAccount","mergedForFeed","mergedForView","mergedQuote","blurAvatar","feedGenerator","userList","system","legal","violence","intolerance","rude","curation","misinfo","FEED_VIEW_PREF_DEFAULTS","THREAD_VIEW_PREF_DEFAULTS","getPost","countUnreadNotifications","deletePost","postUri","postUrip","deleteLike","likeUri","likeUrip","deleteRepost","repostUri","repostUrip","subjectDid","deleteFollow","followUri","followUrip","upsertProfile","updateFn","retriesRemaining","existing","updated","mute","unmute","muteModList","unmuteModList","blockModList","unblockModList","listInfo","updateSeenNotifications","prefs","feedViewPrefs","home","threadViewPrefs","contentLabels","interests","pref","setSavedFeeds","updateFeedPreferences","addSavedFeed","removeSavedFeed","addPinnedFeed","removePinnedFeed","setAdultContentEnabled","updatePreferences","findLast","setContentLabelPref","setPersonalDetails","setFeedViewPrefs","pref2","setThreadViewPrefs","setInterestsPref","cb","newPrefs","feedsPref"],"sources":["C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\graphemer@1.4.0\\node_modules\\graphemer\\lib\\boundaries.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\graphemer@1.4.0\\node_modules\\graphemer\\lib\\GraphemerHelper.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\graphemer@1.4.0\\node_modules\\graphemer\\lib\\GraphemerIterator.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\graphemer@1.4.0\\node_modules\\graphemer\\lib\\Graphemer.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\graphemer@1.4.0\\node_modules\\graphemer\\lib\\index.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\iso-datestring-validator@2.2.2\\node_modules\\iso-datestring-validator\\dist\\index.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\index.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\syntax\\src\\handle.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\syntax\\src\\did.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\syntax\\src\\nsid.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\syntax\\src\\aturi_validation.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\syntax\\src\\aturi.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\zod@3.21.4\\node_modules\\zod\\lib\\index.mjs","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\common-web\\src\\check.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\vendor\\varint.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\varint.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bytes.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\hashes\\digest.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base58.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\vendor\\base-x.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base32.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\cid.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\identity.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base2.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base8.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base10.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base16.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base36.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base64.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\bases\\base256emoji.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\hashes\\sha2-browser.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\hashes\\hasher.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\hashes\\identity.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\codecs\\json.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\multiformats@9.9.0\\node_modules\\multiformats\\esm\\src\\basics.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\uint8arrays@3.0.0\\node_modules\\uint8arrays\\esm\\src\\util\\bases.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\uint8arrays@3.0.0\\node_modules\\uint8arrays\\esm\\src\\from-string.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\node_modules\\.pnpm\\uint8arrays@3.0.0\\node_modules\\uint8arrays\\esm\\src\\to-string.js","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\common-web\\src\\ipld.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\common-web\\src\\types.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\common-web\\src\\times.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\common-web\\src\\strings.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\common-web\\src\\did-doc.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\validators\\formats.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\validators\\primitives.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\blob-refs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\validators\\blob.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\validators\\complex.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\util.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\types.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\validators\\xrpc.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\validation.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\lexicons.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\lexicon\\src\\serialize.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\xrpc\\src\\types.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\xrpc\\src\\util.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\xrpc\\src\\client.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\xrpc\\src\\index.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\lexicons.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\createCommunicationTemplate.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\deleteAccount.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\deleteCommunicationTemplate.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\disableAccountInvites.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\disableInviteCodes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\emitModerationEvent.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\enableAccountInvites.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getAccountInfo.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getAccountInfos.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getInviteCodes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getModerationEvent.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getRecord.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getRepo.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\getSubjectStatus.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\listCommunicationTemplates.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\queryModerationEvents.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\queryModerationStatuses.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\searchRepos.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\sendEmail.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\updateAccountEmail.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\updateAccountHandle.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\updateCommunicationTemplate.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\updateSubjectStatus.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\identity\\resolveHandle.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\identity\\updateHandle.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\label\\queryLabels.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\moderation\\createReport.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\applyWrites.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\util.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\createRecord.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\deleteRecord.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\describeRepo.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\getRecord.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\listRecords.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\putRecord.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\uploadBlob.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\confirmEmail.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\createAccount.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\createAppPassword.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\createInviteCode.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\createInviteCodes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\createSession.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\deleteAccount.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\deleteSession.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\describeServer.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\getAccountInviteCodes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\getSession.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\listAppPasswords.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\refreshSession.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\requestAccountDelete.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\requestEmailConfirmation.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\requestEmailUpdate.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\requestPasswordReset.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\reserveSigningKey.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\resetPassword.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\revokeAppPassword.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\updateEmail.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getBlob.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getBlocks.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getCheckout.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getHead.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getLatestCommit.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getRecord.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\getRepo.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\listBlobs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\listRepos.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\notifyOfUpdate.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\requestCrawl.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\temp\\checkSignupQueue.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\temp\\fetchLabels.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\temp\\importRepo.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\temp\\pushBlob.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\temp\\requestPhoneVerification.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\temp\\transferAccount.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\getPreferences.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\getProfile.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\getProfiles.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\getSuggestions.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\putPreferences.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\searchActors.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\searchActorsTypeahead.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\describeFeedGenerator.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getActorFeeds.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getActorLikes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getAuthorFeed.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getFeed.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getFeedGenerator.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getFeedGenerators.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getFeedSkeleton.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getLikes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getListFeed.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getPostThread.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getPosts.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getRepostedBy.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getSuggestedFeeds.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\getTimeline.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\searchPosts.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getBlocks.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getFollowers.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getFollows.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getList.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getListBlocks.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getListMutes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getLists.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getMutes.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getRelationships.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\getSuggestedFollowsByActor.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\muteActor.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\muteActorList.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\unmuteActor.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\unmuteActorList.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\notification\\getUnreadCount.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\notification\\listNotifications.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\notification\\registerPush.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\notification\\updateSeen.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\unspecced\\getPopularFeedGenerators.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\unspecced\\getTaggedSuggestions.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\unspecced\\searchActorsSkeleton.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\unspecced\\searchPostsSkeleton.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\admin\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\label\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\label\\subscribeLabels.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\moderation\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\repo\\strongRef.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\server\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\com\\atproto\\sync\\subscribeRepos.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\actor\\profile.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\embed\\external.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\embed\\images.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\embed\\record.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\embed\\recordWithMedia.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\generator.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\like.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\post.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\repost.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\feed\\threadgate.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\block.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\follow.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\list.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\listblock.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\graph\\listitem.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\richtext\\facet.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\types\\app\\bsky\\unspecced\\defs.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\client\\index.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\agent.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\rich-text\\unicode.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\rich-text\\sanitization.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\rich-text\\detection.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\rich-text\\rich-text.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\types.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\const\\labels.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\accumulator.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\subjects\\account.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\subjects\\profile.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\subjects\\post.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\subjects\\quoted-post.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\subjects\\feed-generator.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\subjects\\user-list.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\util.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\index.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\moderation\\const\\label-groups.ts","C:\\Users\\Mike\\reverendcrush\\node_modules\\@atproto\\api\\src\\bsky-agent.ts"],"sourcesContent":["\"use strict\";\n/**\n * The Grapheme_Cluster_Break property value\n * @see https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EXTENDED_PICTOGRAPHIC = exports.CLUSTER_BREAK = void 0;\nvar CLUSTER_BREAK;\n(function (CLUSTER_BREAK) {\n    CLUSTER_BREAK[CLUSTER_BREAK[\"CR\"] = 0] = \"CR\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"LF\"] = 1] = \"LF\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"CONTROL\"] = 2] = \"CONTROL\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"EXTEND\"] = 3] = \"EXTEND\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"REGIONAL_INDICATOR\"] = 4] = \"REGIONAL_INDICATOR\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"SPACINGMARK\"] = 5] = \"SPACINGMARK\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"L\"] = 6] = \"L\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"V\"] = 7] = \"V\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"T\"] = 8] = \"T\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"LV\"] = 9] = \"LV\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"LVT\"] = 10] = \"LVT\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"OTHER\"] = 11] = \"OTHER\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"PREPEND\"] = 12] = \"PREPEND\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"E_BASE\"] = 13] = \"E_BASE\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"E_MODIFIER\"] = 14] = \"E_MODIFIER\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"ZWJ\"] = 15] = \"ZWJ\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"GLUE_AFTER_ZWJ\"] = 16] = \"GLUE_AFTER_ZWJ\";\n    CLUSTER_BREAK[CLUSTER_BREAK[\"E_BASE_GAZ\"] = 17] = \"E_BASE_GAZ\";\n})(CLUSTER_BREAK = exports.CLUSTER_BREAK || (exports.CLUSTER_BREAK = {}));\n/**\n * The Emoji character property is an extension of UCD but shares the same namespace and structure\n * @see http://www.unicode.org/reports/tr51/tr51-14.html#Emoji_Properties_and_Data_Files\n *\n * Here we model Extended_Pictograhpic only to implement UAX #29 GB11\n * \\p{Extended_Pictographic} Extend* ZWJ\t×\t\\p{Extended_Pictographic}\n *\n * The Emoji character property should not be mixed with Grapheme_Cluster_Break since they are not exclusive\n */\nexports.EXTENDED_PICTOGRAPHIC = 101;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst boundaries_1 = require(\"./boundaries\");\n// BreakTypes\n// @type {BreakType}\nconst NotBreak = 0;\nconst BreakStart = 1;\nconst Break = 2;\nconst BreakLastRegional = 3;\nconst BreakPenultimateRegional = 4;\nclass GraphemerHelper {\n    /**\n     * Check if the the character at the position {pos} of the string is surrogate\n     * @param str {string}\n     * @param pos {number}\n     * @returns {boolean}\n     */\n    static isSurrogate(str, pos) {\n        return (0xd800 <= str.charCodeAt(pos) &&\n            str.charCodeAt(pos) <= 0xdbff &&\n            0xdc00 <= str.charCodeAt(pos + 1) &&\n            str.charCodeAt(pos + 1) <= 0xdfff);\n    }\n    /**\n     * The String.prototype.codePointAt polyfill\n     * Private function, gets a Unicode code point from a JavaScript UTF-16 string\n     * handling surrogate pairs appropriately\n     * @param str {string}\n     * @param idx {number}\n     * @returns {number}\n     */\n    static codePointAt(str, idx) {\n        if (idx === undefined) {\n            idx = 0;\n        }\n        const code = str.charCodeAt(idx);\n        // if a high surrogate\n        if (0xd800 <= code && code <= 0xdbff && idx < str.length - 1) {\n            const hi = code;\n            const low = str.charCodeAt(idx + 1);\n            if (0xdc00 <= low && low <= 0xdfff) {\n                return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;\n            }\n            return hi;\n        }\n        // if a low surrogate\n        if (0xdc00 <= code && code <= 0xdfff && idx >= 1) {\n            const hi = str.charCodeAt(idx - 1);\n            const low = code;\n            if (0xd800 <= hi && hi <= 0xdbff) {\n                return (hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000;\n            }\n            return low;\n        }\n        // just return the char if an unmatched surrogate half or a\n        // single-char codepoint\n        return code;\n    }\n    //\n    /**\n     * Private function, returns whether a break is allowed between the two given grapheme breaking classes\n     * Implemented the UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters\n     * @param start {number}\n     * @param mid {Array<number>}\n     * @param end {number}\n     * @param startEmoji {number}\n     * @param midEmoji {Array<number>}\n     * @param endEmoji {number}\n     * @returns {number}\n     */\n    static shouldBreak(start, mid, end, startEmoji, midEmoji, endEmoji) {\n        const all = [start].concat(mid).concat([end]);\n        const allEmoji = [startEmoji].concat(midEmoji).concat([endEmoji]);\n        const previous = all[all.length - 2];\n        const next = end;\n        const nextEmoji = endEmoji;\n        // Lookahead terminator for:\n        // GB12. ^ (RI RI)* RI ? RI\n        // GB13. [^RI] (RI RI)* RI ? RI\n        const rIIndex = all.lastIndexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR);\n        if (rIIndex > 0 &&\n            all.slice(1, rIIndex).every(function (c) {\n                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n            }) &&\n            [boundaries_1.CLUSTER_BREAK.PREPEND, boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR].indexOf(previous) === -1) {\n            if (all.filter(function (c) {\n                return c === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n            }).length %\n                2 ===\n                1) {\n                return BreakLastRegional;\n            }\n            else {\n                return BreakPenultimateRegional;\n            }\n        }\n        // GB3. CR × LF\n        if (previous === boundaries_1.CLUSTER_BREAK.CR && next === boundaries_1.CLUSTER_BREAK.LF) {\n            return NotBreak;\n        }\n        // GB4. (Control|CR|LF) ÷\n        else if (previous === boundaries_1.CLUSTER_BREAK.CONTROL ||\n            previous === boundaries_1.CLUSTER_BREAK.CR ||\n            previous === boundaries_1.CLUSTER_BREAK.LF) {\n            return BreakStart;\n        }\n        // GB5. ÷ (Control|CR|LF)\n        else if (next === boundaries_1.CLUSTER_BREAK.CONTROL ||\n            next === boundaries_1.CLUSTER_BREAK.CR ||\n            next === boundaries_1.CLUSTER_BREAK.LF) {\n            return BreakStart;\n        }\n        // GB6. L × (L|V|LV|LVT)\n        else if (previous === boundaries_1.CLUSTER_BREAK.L &&\n            (next === boundaries_1.CLUSTER_BREAK.L ||\n                next === boundaries_1.CLUSTER_BREAK.V ||\n                next === boundaries_1.CLUSTER_BREAK.LV ||\n                next === boundaries_1.CLUSTER_BREAK.LVT)) {\n            return NotBreak;\n        }\n        // GB7. (LV|V) × (V|T)\n        else if ((previous === boundaries_1.CLUSTER_BREAK.LV || previous === boundaries_1.CLUSTER_BREAK.V) &&\n            (next === boundaries_1.CLUSTER_BREAK.V || next === boundaries_1.CLUSTER_BREAK.T)) {\n            return NotBreak;\n        }\n        // GB8. (LVT|T) × (T)\n        else if ((previous === boundaries_1.CLUSTER_BREAK.LVT || previous === boundaries_1.CLUSTER_BREAK.T) &&\n            next === boundaries_1.CLUSTER_BREAK.T) {\n            return NotBreak;\n        }\n        // GB9. × (Extend|ZWJ)\n        else if (next === boundaries_1.CLUSTER_BREAK.EXTEND || next === boundaries_1.CLUSTER_BREAK.ZWJ) {\n            return NotBreak;\n        }\n        // GB9a. × SpacingMark\n        else if (next === boundaries_1.CLUSTER_BREAK.SPACINGMARK) {\n            return NotBreak;\n        }\n        // GB9b. Prepend ×\n        else if (previous === boundaries_1.CLUSTER_BREAK.PREPEND) {\n            return NotBreak;\n        }\n        // GB11. \\p{Extended_Pictographic} Extend* ZWJ × \\p{Extended_Pictographic}\n        const previousNonExtendIndex = allEmoji\n            .slice(0, -1)\n            .lastIndexOf(boundaries_1.EXTENDED_PICTOGRAPHIC);\n        if (previousNonExtendIndex !== -1 &&\n            allEmoji[previousNonExtendIndex] === boundaries_1.EXTENDED_PICTOGRAPHIC &&\n            all.slice(previousNonExtendIndex + 1, -2).every(function (c) {\n                return c === boundaries_1.CLUSTER_BREAK.EXTEND;\n            }) &&\n            previous === boundaries_1.CLUSTER_BREAK.ZWJ &&\n            nextEmoji === boundaries_1.EXTENDED_PICTOGRAPHIC) {\n            return NotBreak;\n        }\n        // GB12. ^ (RI RI)* RI × RI\n        // GB13. [^RI] (RI RI)* RI × RI\n        if (mid.indexOf(boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) !== -1) {\n            return Break;\n        }\n        if (previous === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR &&\n            next === boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR) {\n            return NotBreak;\n        }\n        // GB999. Any ? Any\n        return BreakStart;\n    }\n}\nexports.default = GraphemerHelper;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * GraphemerIterator\n *\n * Takes a string and a \"BreakHandler\" method during initialisation\n * and creates an iterable object that returns individual graphemes.\n *\n * @param str {string}\n * @return GraphemerIterator\n */\nclass GraphemerIterator {\n    constructor(str, nextBreak) {\n        this._index = 0;\n        this._str = str;\n        this._nextBreak = nextBreak;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        let brk;\n        if ((brk = this._nextBreak(this._str, this._index)) < this._str.length) {\n            const value = this._str.slice(this._index, brk);\n            this._index = brk;\n            return { value: value, done: false };\n        }\n        if (this._index < this._str.length) {\n            const value = this._str.slice(this._index);\n            this._index = this._str.length;\n            return { value: value, done: false };\n        }\n        return { value: undefined, done: true };\n    }\n}\nexports.default = GraphemerIterator;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst boundaries_1 = require(\"./boundaries\");\nconst GraphemerHelper_1 = __importDefault(require(\"./GraphemerHelper\"));\nconst GraphemerIterator_1 = __importDefault(require(\"./GraphemerIterator\"));\nclass Graphemer {\n    /**\n     * Returns the next grapheme break in the string after the given index\n     * @param string {string}\n     * @param index {number}\n     * @returns {number}\n     */\n    static nextBreak(string, index) {\n        if (index === undefined) {\n            index = 0;\n        }\n        if (index < 0) {\n            return 0;\n        }\n        if (index >= string.length - 1) {\n            return string.length;\n        }\n        const prevCP = GraphemerHelper_1.default.codePointAt(string, index);\n        const prev = Graphemer.getGraphemeBreakProperty(prevCP);\n        const prevEmoji = Graphemer.getEmojiProperty(prevCP);\n        const mid = [];\n        const midEmoji = [];\n        for (let i = index + 1; i < string.length; i++) {\n            // check for already processed low surrogates\n            if (GraphemerHelper_1.default.isSurrogate(string, i - 1)) {\n                continue;\n            }\n            const nextCP = GraphemerHelper_1.default.codePointAt(string, i);\n            const next = Graphemer.getGraphemeBreakProperty(nextCP);\n            const nextEmoji = Graphemer.getEmojiProperty(nextCP);\n            if (GraphemerHelper_1.default.shouldBreak(prev, mid, next, prevEmoji, midEmoji, nextEmoji)) {\n                return i;\n            }\n            mid.push(next);\n            midEmoji.push(nextEmoji);\n        }\n        return string.length;\n    }\n    /**\n     * Breaks the given string into an array of grapheme clusters\n     * @param str {string}\n     * @returns {string[]}\n     */\n    splitGraphemes(str) {\n        const res = [];\n        let index = 0;\n        let brk;\n        while ((brk = Graphemer.nextBreak(str, index)) < str.length) {\n            res.push(str.slice(index, brk));\n            index = brk;\n        }\n        if (index < str.length) {\n            res.push(str.slice(index));\n        }\n        return res;\n    }\n    /**\n     * Returns an iterator of grapheme clusters in the given string\n     * @param str {string}\n     * @returns {GraphemerIterator}\n     */\n    iterateGraphemes(str) {\n        return new GraphemerIterator_1.default(str, Graphemer.nextBreak);\n    }\n    /**\n     * Returns the number of grapheme clusters in the given string\n     * @param str {string}\n     * @returns {number}\n     */\n    countGraphemes(str) {\n        let count = 0;\n        let index = 0;\n        let brk;\n        while ((brk = Graphemer.nextBreak(str, index)) < str.length) {\n            index = brk;\n            count++;\n        }\n        if (index < str.length) {\n            count++;\n        }\n        return count;\n    }\n    /**\n     * Given a Unicode code point, determines this symbol's grapheme break property\n     * @param code {number} Unicode code point\n     * @returns {number}\n     */\n    static getGraphemeBreakProperty(code) {\n        // Grapheme break property taken from:\n        // https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n        // and generated by\n        // node ./scripts/generate-grapheme-break.js\n        if (code < 0xbf09) {\n            if (code < 0xac54) {\n                if (code < 0x102d) {\n                    if (code < 0xb02) {\n                        if (code < 0x93b) {\n                            if (code < 0x6df) {\n                                if (code < 0x5bf) {\n                                    if (code < 0x7f) {\n                                        if (code < 0xb) {\n                                            if (code < 0xa) {\n                                                // Cc  [10] <control-0000>..<control-0009>\n                                                if (0x0 <= code && code <= 0x9) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                // Cc       <control-000A>\n                                                if (0xa === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LF;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd) {\n                                                // Cc   [2] <control-000B>..<control-000C>\n                                                if (0xb <= code && code <= 0xc) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xe) {\n                                                    // Cc       <control-000D>\n                                                    if (0xd === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.CR;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cc  [18] <control-000E>..<control-001F>\n                                                    if (0xe <= code && code <= 0x1f) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x300) {\n                                            if (code < 0xad) {\n                                                // Cc  [33] <control-007F>..<control-009F>\n                                                if (0x7f <= code && code <= 0x9f) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                // Cf       SOFT HYPHEN\n                                                if (0xad === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x483) {\n                                                // Mn [112] COMBINING GRAVE ACCENT..COMBINING LATIN SMALL LETTER X\n                                                if (0x300 <= code && code <= 0x36f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x591) {\n                                                    // Mn   [5] COMBINING CYRILLIC TITLO..COMBINING CYRILLIC POKRYTIE\n                                                    // Me   [2] COMBINING CYRILLIC HUNDRED THOUSANDS SIGN..COMBINING CYRILLIC MILLIONS SIGN\n                                                    if (0x483 <= code && code <= 0x489) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [45] HEBREW ACCENT ETNAHTA..HEBREW POINT METEG\n                                                    if (0x591 <= code && code <= 0x5bd) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x610) {\n                                        if (code < 0x5c4) {\n                                            if (code < 0x5c1) {\n                                                // Mn       HEBREW POINT RAFE\n                                                if (0x5bf === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] HEBREW POINT SHIN DOT..HEBREW POINT SIN DOT\n                                                if (0x5c1 <= code && code <= 0x5c2) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x5c7) {\n                                                // Mn   [2] HEBREW MARK UPPER DOT..HEBREW MARK LOWER DOT\n                                                if (0x5c4 <= code && code <= 0x5c5) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x600) {\n                                                    // Mn       HEBREW POINT QAMATS QATAN\n                                                    if (0x5c7 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cf   [6] ARABIC NUMBER SIGN..ARABIC NUMBER MARK ABOVE\n                                                    if (0x600 <= code && code <= 0x605) {\n                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x670) {\n                                            if (code < 0x61c) {\n                                                // Mn  [11] ARABIC SIGN SALLALLAHOU ALAYHE WASSALLAM..ARABIC SMALL KASRA\n                                                if (0x610 <= code && code <= 0x61a) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x64b) {\n                                                    // Cf       ARABIC LETTER MARK\n                                                    if (0x61c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [21] ARABIC FATHATAN..ARABIC WAVY HAMZA BELOW\n                                                    if (0x64b <= code && code <= 0x65f) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x6d6) {\n                                                // Mn       ARABIC LETTER SUPERSCRIPT ALEF\n                                                if (0x670 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x6dd) {\n                                                    // Mn   [7] ARABIC SMALL HIGH LIGATURE SAD WITH LAM WITH ALEF MAKSURA..ARABIC SMALL HIGH SEEN\n                                                    if (0x6d6 <= code && code <= 0x6dc) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cf       ARABIC END OF AYAH\n                                                    if (0x6dd === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x81b) {\n                                    if (code < 0x730) {\n                                        if (code < 0x6ea) {\n                                            if (code < 0x6e7) {\n                                                // Mn   [6] ARABIC SMALL HIGH ROUNDED ZERO..ARABIC SMALL HIGH MADDA\n                                                if (0x6df <= code && code <= 0x6e4) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] ARABIC SMALL HIGH YEH..ARABIC SMALL HIGH NOON\n                                                if (0x6e7 <= code && code <= 0x6e8) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x70f) {\n                                                // Mn   [4] ARABIC EMPTY CENTRE LOW STOP..ARABIC SMALL LOW MEEM\n                                                if (0x6ea <= code && code <= 0x6ed) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Cf       SYRIAC ABBREVIATION MARK\n                                                if (0x70f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                                // Mn       SYRIAC LETTER SUPERSCRIPT ALAPH\n                                                if (0x711 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x7eb) {\n                                            if (code < 0x7a6) {\n                                                // Mn  [27] SYRIAC PTHAHA ABOVE..SYRIAC BARREKH\n                                                if (0x730 <= code && code <= 0x74a) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn  [11] THAANA ABAFILI..THAANA SUKUN\n                                                if (0x7a6 <= code && code <= 0x7b0) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x7fd) {\n                                                // Mn   [9] NKO COMBINING SHORT HIGH TONE..NKO COMBINING DOUBLE DOT ABOVE\n                                                if (0x7eb <= code && code <= 0x7f3) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x816) {\n                                                    // Mn       NKO DANTAYALAN\n                                                    if (0x7fd === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] SAMARITAN MARK IN..SAMARITAN MARK DAGESH\n                                                    if (0x816 <= code && code <= 0x819) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x898) {\n                                        if (code < 0x829) {\n                                            if (code < 0x825) {\n                                                // Mn   [9] SAMARITAN MARK EPENTHETIC YUT..SAMARITAN VOWEL SIGN A\n                                                if (0x81b <= code && code <= 0x823) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [3] SAMARITAN VOWEL SIGN SHORT A..SAMARITAN VOWEL SIGN U\n                                                if (0x825 <= code && code <= 0x827) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x859) {\n                                                // Mn   [5] SAMARITAN VOWEL SIGN LONG I..SAMARITAN MARK NEQUDAA\n                                                if (0x829 <= code && code <= 0x82d) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x890) {\n                                                    // Mn   [3] MANDAIC AFFRICATION MARK..MANDAIC GEMINATION MARK\n                                                    if (0x859 <= code && code <= 0x85b) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cf   [2] ARABIC POUND MARK ABOVE..ARABIC PIASTRE MARK ABOVE\n                                                    if (0x890 <= code && code <= 0x891) {\n                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x8e3) {\n                                            if (code < 0x8ca) {\n                                                // Mn   [8] ARABIC SMALL HIGH WORD AL-JUZ..ARABIC HALF MADDA OVER MADDA\n                                                if (0x898 <= code && code <= 0x89f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x8e2) {\n                                                    // Mn  [24] ARABIC SMALL HIGH FARSI YEH..ARABIC SMALL HIGH SIGN SAFHA\n                                                    if (0x8ca <= code && code <= 0x8e1) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cf       ARABIC DISPUTED END OF AYAH\n                                                    if (0x8e2 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x903) {\n                                                // Mn  [32] ARABIC TURNED DAMMA BELOW..DEVANAGARI SIGN ANUSVARA\n                                                if (0x8e3 <= code && code <= 0x902) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       DEVANAGARI SIGN VISARGA\n                                                if (0x903 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       DEVANAGARI VOWEL SIGN OE\n                                                if (0x93a === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xa01) {\n                                if (code < 0x982) {\n                                    if (code < 0x94d) {\n                                        if (code < 0x93e) {\n                                            // Mc       DEVANAGARI VOWEL SIGN OOE\n                                            if (0x93b === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       DEVANAGARI SIGN NUKTA\n                                            if (0x93c === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x941) {\n                                                // Mc   [3] DEVANAGARI VOWEL SIGN AA..DEVANAGARI VOWEL SIGN II\n                                                if (0x93e <= code && code <= 0x940) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x949) {\n                                                    // Mn   [8] DEVANAGARI VOWEL SIGN U..DEVANAGARI VOWEL SIGN AI\n                                                    if (0x941 <= code && code <= 0x948) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [4] DEVANAGARI VOWEL SIGN CANDRA O..DEVANAGARI VOWEL SIGN AU\n                                                    if (0x949 <= code && code <= 0x94c) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x951) {\n                                            if (code < 0x94e) {\n                                                // Mn       DEVANAGARI SIGN VIRAMA\n                                                if (0x94d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [2] DEVANAGARI VOWEL SIGN PRISHTHAMATRA E..DEVANAGARI VOWEL SIGN AW\n                                                if (0x94e <= code && code <= 0x94f) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x962) {\n                                                // Mn   [7] DEVANAGARI STRESS SIGN UDATTA..DEVANAGARI VOWEL SIGN UUE\n                                                if (0x951 <= code && code <= 0x957) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x981) {\n                                                    // Mn   [2] DEVANAGARI VOWEL SIGN VOCALIC L..DEVANAGARI VOWEL SIGN VOCALIC LL\n                                                    if (0x962 <= code && code <= 0x963) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       BENGALI SIGN CANDRABINDU\n                                                    if (0x981 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x9c7) {\n                                        if (code < 0x9be) {\n                                            if (code < 0x9bc) {\n                                                // Mc   [2] BENGALI SIGN ANUSVARA..BENGALI SIGN VISARGA\n                                                if (0x982 <= code && code <= 0x983) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       BENGALI SIGN NUKTA\n                                                if (0x9bc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x9bf) {\n                                                // Mc       BENGALI VOWEL SIGN AA\n                                                if (0x9be === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x9c1) {\n                                                    // Mc   [2] BENGALI VOWEL SIGN I..BENGALI VOWEL SIGN II\n                                                    if (0x9bf <= code && code <= 0x9c0) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] BENGALI VOWEL SIGN U..BENGALI VOWEL SIGN VOCALIC RR\n                                                    if (0x9c1 <= code && code <= 0x9c4) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x9d7) {\n                                            if (code < 0x9cb) {\n                                                // Mc   [2] BENGALI VOWEL SIGN E..BENGALI VOWEL SIGN AI\n                                                if (0x9c7 <= code && code <= 0x9c8) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x9cd) {\n                                                    // Mc   [2] BENGALI VOWEL SIGN O..BENGALI VOWEL SIGN AU\n                                                    if (0x9cb <= code && code <= 0x9cc) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       BENGALI SIGN VIRAMA\n                                                    if (0x9cd === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x9e2) {\n                                                // Mc       BENGALI AU LENGTH MARK\n                                                if (0x9d7 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x9fe) {\n                                                    // Mn   [2] BENGALI VOWEL SIGN VOCALIC L..BENGALI VOWEL SIGN VOCALIC LL\n                                                    if (0x9e2 <= code && code <= 0x9e3) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       BENGALI SANDHI MARK\n                                                    if (0x9fe === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xa83) {\n                                    if (code < 0xa47) {\n                                        if (code < 0xa3c) {\n                                            if (code < 0xa03) {\n                                                // Mn   [2] GURMUKHI SIGN ADAK BINDI..GURMUKHI SIGN BINDI\n                                                if (0xa01 <= code && code <= 0xa02) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       GURMUKHI SIGN VISARGA\n                                                if (0xa03 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa3e) {\n                                                // Mn       GURMUKHI SIGN NUKTA\n                                                if (0xa3c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa41) {\n                                                    // Mc   [3] GURMUKHI VOWEL SIGN AA..GURMUKHI VOWEL SIGN II\n                                                    if (0xa3e <= code && code <= 0xa40) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] GURMUKHI VOWEL SIGN U..GURMUKHI VOWEL SIGN UU\n                                                    if (0xa41 <= code && code <= 0xa42) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xa70) {\n                                            if (code < 0xa4b) {\n                                                // Mn   [2] GURMUKHI VOWEL SIGN EE..GURMUKHI VOWEL SIGN AI\n                                                if (0xa47 <= code && code <= 0xa48) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa51) {\n                                                    // Mn   [3] GURMUKHI VOWEL SIGN OO..GURMUKHI SIGN VIRAMA\n                                                    if (0xa4b <= code && code <= 0xa4d) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       GURMUKHI SIGN UDAAT\n                                                    if (0xa51 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa75) {\n                                                // Mn   [2] GURMUKHI TIPPI..GURMUKHI ADDAK\n                                                if (0xa70 <= code && code <= 0xa71) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa81) {\n                                                    // Mn       GURMUKHI SIGN YAKASH\n                                                    if (0xa75 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] GUJARATI SIGN CANDRABINDU..GUJARATI SIGN ANUSVARA\n                                                    if (0xa81 <= code && code <= 0xa82) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xac9) {\n                                        if (code < 0xabe) {\n                                            // Mc       GUJARATI SIGN VISARGA\n                                            if (0xa83 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       GUJARATI SIGN NUKTA\n                                            if (0xabc === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xac1) {\n                                                // Mc   [3] GUJARATI VOWEL SIGN AA..GUJARATI VOWEL SIGN II\n                                                if (0xabe <= code && code <= 0xac0) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xac7) {\n                                                    // Mn   [5] GUJARATI VOWEL SIGN U..GUJARATI VOWEL SIGN CANDRA E\n                                                    if (0xac1 <= code && code <= 0xac5) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] GUJARATI VOWEL SIGN E..GUJARATI VOWEL SIGN AI\n                                                    if (0xac7 <= code && code <= 0xac8) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xae2) {\n                                            if (code < 0xacb) {\n                                                // Mc       GUJARATI VOWEL SIGN CANDRA O\n                                                if (0xac9 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xacd) {\n                                                    // Mc   [2] GUJARATI VOWEL SIGN O..GUJARATI VOWEL SIGN AU\n                                                    if (0xacb <= code && code <= 0xacc) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       GUJARATI SIGN VIRAMA\n                                                    if (0xacd === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xafa) {\n                                                // Mn   [2] GUJARATI VOWEL SIGN VOCALIC L..GUJARATI VOWEL SIGN VOCALIC LL\n                                                if (0xae2 <= code && code <= 0xae3) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb01) {\n                                                    // Mn   [6] GUJARATI SIGN SUKUN..GUJARATI SIGN TWO-CIRCLE NUKTA ABOVE\n                                                    if (0xafa <= code && code <= 0xaff) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       ORIYA SIGN CANDRABINDU\n                                                    if (0xb01 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0xcf3) {\n                            if (code < 0xc04) {\n                                if (code < 0xb82) {\n                                    if (code < 0xb47) {\n                                        if (code < 0xb3e) {\n                                            if (code < 0xb3c) {\n                                                // Mc   [2] ORIYA SIGN ANUSVARA..ORIYA SIGN VISARGA\n                                                if (0xb02 <= code && code <= 0xb03) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       ORIYA SIGN NUKTA\n                                                if (0xb3c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb40) {\n                                                // Mc       ORIYA VOWEL SIGN AA\n                                                // Mn       ORIYA VOWEL SIGN I\n                                                if (0xb3e <= code && code <= 0xb3f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb41) {\n                                                    // Mc       ORIYA VOWEL SIGN II\n                                                    if (0xb40 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] ORIYA VOWEL SIGN U..ORIYA VOWEL SIGN VOCALIC RR\n                                                    if (0xb41 <= code && code <= 0xb44) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb4d) {\n                                            if (code < 0xb4b) {\n                                                // Mc   [2] ORIYA VOWEL SIGN E..ORIYA VOWEL SIGN AI\n                                                if (0xb47 <= code && code <= 0xb48) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [2] ORIYA VOWEL SIGN O..ORIYA VOWEL SIGN AU\n                                                if (0xb4b <= code && code <= 0xb4c) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb55) {\n                                                // Mn       ORIYA SIGN VIRAMA\n                                                if (0xb4d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb62) {\n                                                    // Mn   [2] ORIYA SIGN OVERLINE..ORIYA AI LENGTH MARK\n                                                    // Mc       ORIYA AU LENGTH MARK\n                                                    if (0xb55 <= code && code <= 0xb57) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] ORIYA VOWEL SIGN VOCALIC L..ORIYA VOWEL SIGN VOCALIC LL\n                                                    if (0xb62 <= code && code <= 0xb63) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xbc6) {\n                                        if (code < 0xbbf) {\n                                            // Mn       TAMIL SIGN ANUSVARA\n                                            if (0xb82 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                            // Mc       TAMIL VOWEL SIGN AA\n                                            if (0xbbe === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbc0) {\n                                                // Mc       TAMIL VOWEL SIGN I\n                                                if (0xbbf === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbc1) {\n                                                    // Mn       TAMIL VOWEL SIGN II\n                                                    if (0xbc0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] TAMIL VOWEL SIGN U..TAMIL VOWEL SIGN UU\n                                                    if (0xbc1 <= code && code <= 0xbc2) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbd7) {\n                                            if (code < 0xbca) {\n                                                // Mc   [3] TAMIL VOWEL SIGN E..TAMIL VOWEL SIGN AI\n                                                if (0xbc6 <= code && code <= 0xbc8) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbcd) {\n                                                    // Mc   [3] TAMIL VOWEL SIGN O..TAMIL VOWEL SIGN AU\n                                                    if (0xbca <= code && code <= 0xbcc) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       TAMIL SIGN VIRAMA\n                                                    if (0xbcd === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc00) {\n                                                // Mc       TAMIL AU LENGTH MARK\n                                                if (0xbd7 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc01) {\n                                                    // Mn       TELUGU SIGN COMBINING CANDRABINDU ABOVE\n                                                    if (0xc00 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [3] TELUGU SIGN CANDRABINDU..TELUGU SIGN VISARGA\n                                                    if (0xc01 <= code && code <= 0xc03) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xcbe) {\n                                    if (code < 0xc4a) {\n                                        if (code < 0xc3e) {\n                                            // Mn       TELUGU SIGN COMBINING ANUSVARA ABOVE\n                                            if (0xc04 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                            // Mn       TELUGU SIGN NUKTA\n                                            if (0xc3c === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc41) {\n                                                // Mn   [3] TELUGU VOWEL SIGN AA..TELUGU VOWEL SIGN II\n                                                if (0xc3e <= code && code <= 0xc40) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc46) {\n                                                    // Mc   [4] TELUGU VOWEL SIGN U..TELUGU VOWEL SIGN VOCALIC RR\n                                                    if (0xc41 <= code && code <= 0xc44) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] TELUGU VOWEL SIGN E..TELUGU VOWEL SIGN AI\n                                                    if (0xc46 <= code && code <= 0xc48) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc81) {\n                                            if (code < 0xc55) {\n                                                // Mn   [4] TELUGU VOWEL SIGN O..TELUGU SIGN VIRAMA\n                                                if (0xc4a <= code && code <= 0xc4d) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc62) {\n                                                    // Mn   [2] TELUGU LENGTH MARK..TELUGU AI LENGTH MARK\n                                                    if (0xc55 <= code && code <= 0xc56) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] TELUGU VOWEL SIGN VOCALIC L..TELUGU VOWEL SIGN VOCALIC LL\n                                                    if (0xc62 <= code && code <= 0xc63) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc82) {\n                                                // Mn       KANNADA SIGN CANDRABINDU\n                                                if (0xc81 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcbc) {\n                                                    // Mc   [2] KANNADA SIGN ANUSVARA..KANNADA SIGN VISARGA\n                                                    if (0xc82 <= code && code <= 0xc83) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       KANNADA SIGN NUKTA\n                                                    if (0xcbc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xcc6) {\n                                        if (code < 0xcc0) {\n                                            // Mc       KANNADA VOWEL SIGN AA\n                                            if (0xcbe === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       KANNADA VOWEL SIGN I\n                                            if (0xcbf === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcc2) {\n                                                // Mc   [2] KANNADA VOWEL SIGN II..KANNADA VOWEL SIGN U\n                                                if (0xcc0 <= code && code <= 0xcc1) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcc3) {\n                                                    // Mc       KANNADA VOWEL SIGN UU\n                                                    if (0xcc2 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] KANNADA VOWEL SIGN VOCALIC R..KANNADA VOWEL SIGN VOCALIC RR\n                                                    if (0xcc3 <= code && code <= 0xcc4) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xccc) {\n                                            if (code < 0xcc7) {\n                                                // Mn       KANNADA VOWEL SIGN E\n                                                if (0xcc6 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcca) {\n                                                    // Mc   [2] KANNADA VOWEL SIGN EE..KANNADA VOWEL SIGN AI\n                                                    if (0xcc7 <= code && code <= 0xcc8) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] KANNADA VOWEL SIGN O..KANNADA VOWEL SIGN OO\n                                                    if (0xcca <= code && code <= 0xccb) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcd5) {\n                                                // Mn   [2] KANNADA VOWEL SIGN AU..KANNADA SIGN VIRAMA\n                                                if (0xccc <= code && code <= 0xccd) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xce2) {\n                                                    // Mc   [2] KANNADA LENGTH MARK..KANNADA AI LENGTH MARK\n                                                    if (0xcd5 <= code && code <= 0xcd6) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] KANNADA VOWEL SIGN VOCALIC L..KANNADA VOWEL SIGN VOCALIC LL\n                                                    if (0xce2 <= code && code <= 0xce3) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xddf) {\n                                if (code < 0xd4e) {\n                                    if (code < 0xd3f) {\n                                        if (code < 0xd02) {\n                                            if (code < 0xd00) {\n                                                // Mc       KANNADA SIGN COMBINING ANUSVARA ABOVE RIGHT\n                                                if (0xcf3 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] MALAYALAM SIGN COMBINING ANUSVARA ABOVE..MALAYALAM SIGN CANDRABINDU\n                                                if (0xd00 <= code && code <= 0xd01) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd3b) {\n                                                // Mc   [2] MALAYALAM SIGN ANUSVARA..MALAYALAM SIGN VISARGA\n                                                if (0xd02 <= code && code <= 0xd03) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd3e) {\n                                                    // Mn   [2] MALAYALAM SIGN VERTICAL BAR VIRAMA..MALAYALAM SIGN CIRCULAR VIRAMA\n                                                    if (0xd3b <= code && code <= 0xd3c) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       MALAYALAM VOWEL SIGN AA\n                                                    if (0xd3e === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd46) {\n                                            if (code < 0xd41) {\n                                                // Mc   [2] MALAYALAM VOWEL SIGN I..MALAYALAM VOWEL SIGN II\n                                                if (0xd3f <= code && code <= 0xd40) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [4] MALAYALAM VOWEL SIGN U..MALAYALAM VOWEL SIGN VOCALIC RR\n                                                if (0xd41 <= code && code <= 0xd44) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd4a) {\n                                                // Mc   [3] MALAYALAM VOWEL SIGN E..MALAYALAM VOWEL SIGN AI\n                                                if (0xd46 <= code && code <= 0xd48) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd4d) {\n                                                    // Mc   [3] MALAYALAM VOWEL SIGN O..MALAYALAM VOWEL SIGN AU\n                                                    if (0xd4a <= code && code <= 0xd4c) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       MALAYALAM SIGN VIRAMA\n                                                    if (0xd4d === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xdca) {\n                                        if (code < 0xd62) {\n                                            // Lo       MALAYALAM LETTER DOT REPH\n                                            if (0xd4e === code) {\n                                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                            }\n                                            // Mc       MALAYALAM AU LENGTH MARK\n                                            if (0xd57 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd81) {\n                                                // Mn   [2] MALAYALAM VOWEL SIGN VOCALIC L..MALAYALAM VOWEL SIGN VOCALIC LL\n                                                if (0xd62 <= code && code <= 0xd63) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd82) {\n                                                    // Mn       SINHALA SIGN CANDRABINDU\n                                                    if (0xd81 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] SINHALA SIGN ANUSVARAYA..SINHALA SIGN VISARGAYA\n                                                    if (0xd82 <= code && code <= 0xd83) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xdd2) {\n                                            if (code < 0xdcf) {\n                                                // Mn       SINHALA SIGN AL-LAKUNA\n                                                if (0xdca === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xdd0) {\n                                                    // Mc       SINHALA VOWEL SIGN AELA-PILLA\n                                                    if (0xdcf === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] SINHALA VOWEL SIGN KETTI AEDA-PILLA..SINHALA VOWEL SIGN DIGA AEDA-PILLA\n                                                    if (0xdd0 <= code && code <= 0xdd1) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xdd6) {\n                                                // Mn   [3] SINHALA VOWEL SIGN KETTI IS-PILLA..SINHALA VOWEL SIGN KETTI PAA-PILLA\n                                                if (0xdd2 <= code && code <= 0xdd4) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xdd8) {\n                                                    // Mn       SINHALA VOWEL SIGN DIGA PAA-PILLA\n                                                    if (0xdd6 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [7] SINHALA VOWEL SIGN GAETTA-PILLA..SINHALA VOWEL SIGN KOMBUVA HAA GAYANUKITTA\n                                                    if (0xdd8 <= code && code <= 0xdde) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xf35) {\n                                    if (code < 0xe47) {\n                                        if (code < 0xe31) {\n                                            if (code < 0xdf2) {\n                                                // Mc       SINHALA VOWEL SIGN GAYANUKITTA\n                                                if (0xddf === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [2] SINHALA VOWEL SIGN DIGA GAETTA-PILLA..SINHALA VOWEL SIGN DIGA GAYANUKITTA\n                                                if (0xdf2 <= code && code <= 0xdf3) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xe33) {\n                                                // Mn       THAI CHARACTER MAI HAN-AKAT\n                                                if (0xe31 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xe34) {\n                                                    // Lo       THAI CHARACTER SARA AM\n                                                    if (0xe33 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [7] THAI CHARACTER SARA I..THAI CHARACTER PHINTHU\n                                                    if (0xe34 <= code && code <= 0xe3a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xeb4) {\n                                            if (code < 0xeb1) {\n                                                // Mn   [8] THAI CHARACTER MAITAIKHU..THAI CHARACTER YAMAKKAN\n                                                if (0xe47 <= code && code <= 0xe4e) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       LAO VOWEL SIGN MAI KAN\n                                                if (0xeb1 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Lo       LAO VOWEL SIGN AM\n                                                if (0xeb3 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xec8) {\n                                                // Mn   [9] LAO VOWEL SIGN I..LAO SEMIVOWEL SIGN LO\n                                                if (0xeb4 <= code && code <= 0xebc) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xf18) {\n                                                    // Mn   [7] LAO TONE MAI EK..LAO YAMAKKAN\n                                                    if (0xec8 <= code && code <= 0xece) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] TIBETAN ASTROLOGICAL SIGN -KHYUD PA..TIBETAN ASTROLOGICAL SIGN SDONG TSHUGS\n                                                    if (0xf18 <= code && code <= 0xf19) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xf7f) {\n                                        if (code < 0xf39) {\n                                            // Mn       TIBETAN MARK NGAS BZUNG NYI ZLA\n                                            if (0xf35 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                            // Mn       TIBETAN MARK NGAS BZUNG SGOR RTAGS\n                                            if (0xf37 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xf3e) {\n                                                // Mn       TIBETAN MARK TSA -PHRU\n                                                if (0xf39 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xf71) {\n                                                    // Mc   [2] TIBETAN SIGN YAR TSHES..TIBETAN SIGN MAR TSHES\n                                                    if (0xf3e <= code && code <= 0xf3f) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [14] TIBETAN VOWEL SIGN AA..TIBETAN SIGN RJES SU NGA RO\n                                                    if (0xf71 <= code && code <= 0xf7e) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xf8d) {\n                                            if (code < 0xf80) {\n                                                // Mc       TIBETAN SIGN RNAM BCAD\n                                                if (0xf7f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xf86) {\n                                                    // Mn   [5] TIBETAN VOWEL SIGN REVERSED I..TIBETAN MARK HALANTA\n                                                    if (0xf80 <= code && code <= 0xf84) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] TIBETAN SIGN LCI RTAGS..TIBETAN SIGN YANG RTAGS\n                                                    if (0xf86 <= code && code <= 0xf87) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xf99) {\n                                                // Mn  [11] TIBETAN SUBJOINED SIGN LCE TSA CAN..TIBETAN SUBJOINED LETTER JA\n                                                if (0xf8d <= code && code <= 0xf97) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xfc6) {\n                                                    // Mn  [36] TIBETAN SUBJOINED LETTER NYA..TIBETAN SUBJOINED LETTER FIXED-FORM RA\n                                                    if (0xf99 <= code && code <= 0xfbc) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       TIBETAN SYMBOL PADMA GDAN\n                                                    if (0xfc6 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0x1c24) {\n                        if (code < 0x1930) {\n                            if (code < 0x1732) {\n                                if (code < 0x1082) {\n                                    if (code < 0x103d) {\n                                        if (code < 0x1032) {\n                                            if (code < 0x1031) {\n                                                // Mn   [4] MYANMAR VOWEL SIGN I..MYANMAR VOWEL SIGN UU\n                                                if (0x102d <= code && code <= 0x1030) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       MYANMAR VOWEL SIGN E\n                                                if (0x1031 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1039) {\n                                                // Mn   [6] MYANMAR VOWEL SIGN AI..MYANMAR SIGN DOT BELOW\n                                                if (0x1032 <= code && code <= 0x1037) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x103b) {\n                                                    // Mn   [2] MYANMAR SIGN VIRAMA..MYANMAR SIGN ASAT\n                                                    if (0x1039 <= code && code <= 0x103a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] MYANMAR CONSONANT SIGN MEDIAL YA..MYANMAR CONSONANT SIGN MEDIAL RA\n                                                    if (0x103b <= code && code <= 0x103c) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1058) {\n                                            if (code < 0x1056) {\n                                                // Mn   [2] MYANMAR CONSONANT SIGN MEDIAL WA..MYANMAR CONSONANT SIGN MEDIAL HA\n                                                if (0x103d <= code && code <= 0x103e) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [2] MYANMAR VOWEL SIGN VOCALIC R..MYANMAR VOWEL SIGN VOCALIC RR\n                                                if (0x1056 <= code && code <= 0x1057) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x105e) {\n                                                // Mn   [2] MYANMAR VOWEL SIGN VOCALIC L..MYANMAR VOWEL SIGN VOCALIC LL\n                                                if (0x1058 <= code && code <= 0x1059) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1071) {\n                                                    // Mn   [3] MYANMAR CONSONANT SIGN MON MEDIAL NA..MYANMAR CONSONANT SIGN MON MEDIAL LA\n                                                    if (0x105e <= code && code <= 0x1060) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] MYANMAR VOWEL SIGN GEBA KAREN I..MYANMAR VOWEL SIGN KAYAH EE\n                                                    if (0x1071 <= code && code <= 0x1074) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x1100) {\n                                        if (code < 0x1085) {\n                                            // Mn       MYANMAR CONSONANT SIGN SHAN MEDIAL WA\n                                            if (0x1082 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                            // Mc       MYANMAR VOWEL SIGN SHAN E\n                                            if (0x1084 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x108d) {\n                                                // Mn   [2] MYANMAR VOWEL SIGN SHAN E ABOVE..MYANMAR VOWEL SIGN SHAN FINAL Y\n                                                if (0x1085 <= code && code <= 0x1086) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       MYANMAR SIGN SHAN COUNCIL EMPHATIC TONE\n                                                if (0x108d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mn       MYANMAR VOWEL SIGN AITON AI\n                                                if (0x109d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x135d) {\n                                            if (code < 0x1160) {\n                                                // Lo  [96] HANGUL CHOSEONG KIYEOK..HANGUL CHOSEONG FILLER\n                                                if (0x1100 <= code && code <= 0x115f) {\n                                                    return boundaries_1.CLUSTER_BREAK.L;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11a8) {\n                                                    // Lo  [72] HANGUL JUNGSEONG FILLER..HANGUL JUNGSEONG O-YAE\n                                                    if (0x1160 <= code && code <= 0x11a7) {\n                                                        return boundaries_1.CLUSTER_BREAK.V;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [88] HANGUL JONGSEONG KIYEOK..HANGUL JONGSEONG SSANGNIEUN\n                                                    if (0x11a8 <= code && code <= 0x11ff) {\n                                                        return boundaries_1.CLUSTER_BREAK.T;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1712) {\n                                                // Mn   [3] ETHIOPIC COMBINING GEMINATION AND VOWEL LENGTH MARK..ETHIOPIC COMBINING GEMINATION MARK\n                                                if (0x135d <= code && code <= 0x135f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1715) {\n                                                    // Mn   [3] TAGALOG VOWEL SIGN I..TAGALOG SIGN VIRAMA\n                                                    if (0x1712 <= code && code <= 0x1714) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       TAGALOG SIGN PAMUDPOD\n                                                    if (0x1715 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x17c9) {\n                                    if (code < 0x17b6) {\n                                        if (code < 0x1752) {\n                                            if (code < 0x1734) {\n                                                // Mn   [2] HANUNOO VOWEL SIGN I..HANUNOO VOWEL SIGN U\n                                                if (0x1732 <= code && code <= 0x1733) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       HANUNOO SIGN PAMUDPOD\n                                                if (0x1734 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1772) {\n                                                // Mn   [2] BUHID VOWEL SIGN I..BUHID VOWEL SIGN U\n                                                if (0x1752 <= code && code <= 0x1753) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x17b4) {\n                                                    // Mn   [2] TAGBANWA VOWEL SIGN I..TAGBANWA VOWEL SIGN U\n                                                    if (0x1772 <= code && code <= 0x1773) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] KHMER VOWEL INHERENT AQ..KHMER VOWEL INHERENT AA\n                                                    if (0x17b4 <= code && code <= 0x17b5) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x17be) {\n                                            if (code < 0x17b7) {\n                                                // Mc       KHMER VOWEL SIGN AA\n                                                if (0x17b6 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [7] KHMER VOWEL SIGN I..KHMER VOWEL SIGN UA\n                                                if (0x17b7 <= code && code <= 0x17bd) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x17c6) {\n                                                // Mc   [8] KHMER VOWEL SIGN OE..KHMER VOWEL SIGN AU\n                                                if (0x17be <= code && code <= 0x17c5) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x17c7) {\n                                                    // Mn       KHMER SIGN NIKAHIT\n                                                    if (0x17c6 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] KHMER SIGN REAHMUK..KHMER SIGN YUUKALEAPINTU\n                                                    if (0x17c7 <= code && code <= 0x17c8) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x1885) {\n                                        if (code < 0x180b) {\n                                            if (code < 0x17dd) {\n                                                // Mn  [11] KHMER SIGN MUUSIKATOAN..KHMER SIGN BATHAMASAT\n                                                if (0x17c9 <= code && code <= 0x17d3) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       KHMER SIGN ATTHACAN\n                                                if (0x17dd === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x180e) {\n                                                // Mn   [3] MONGOLIAN FREE VARIATION SELECTOR ONE..MONGOLIAN FREE VARIATION SELECTOR THREE\n                                                if (0x180b <= code && code <= 0x180d) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Cf       MONGOLIAN VOWEL SEPARATOR\n                                                if (0x180e === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                                // Mn       MONGOLIAN FREE VARIATION SELECTOR FOUR\n                                                if (0x180f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1923) {\n                                            if (code < 0x18a9) {\n                                                // Mn   [2] MONGOLIAN LETTER ALI GALI BALUDA..MONGOLIAN LETTER ALI GALI THREE BALUDA\n                                                if (0x1885 <= code && code <= 0x1886) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1920) {\n                                                    // Mn       MONGOLIAN LETTER ALI GALI DAGALGA\n                                                    if (0x18a9 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] LIMBU VOWEL SIGN A..LIMBU VOWEL SIGN U\n                                                    if (0x1920 <= code && code <= 0x1922) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1927) {\n                                                // Mc   [4] LIMBU VOWEL SIGN EE..LIMBU VOWEL SIGN AU\n                                                if (0x1923 <= code && code <= 0x1926) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1929) {\n                                                    // Mn   [2] LIMBU VOWEL SIGN E..LIMBU VOWEL SIGN O\n                                                    if (0x1927 <= code && code <= 0x1928) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [3] LIMBU SUBJOINED LETTER YA..LIMBU SUBJOINED LETTER WA\n                                                    if (0x1929 <= code && code <= 0x192b) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1b3b) {\n                                if (code < 0x1a58) {\n                                    if (code < 0x1a19) {\n                                        if (code < 0x1933) {\n                                            if (code < 0x1932) {\n                                                // Mc   [2] LIMBU SMALL LETTER KA..LIMBU SMALL LETTER NGA\n                                                if (0x1930 <= code && code <= 0x1931) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       LIMBU SMALL LETTER ANUSVARA\n                                                if (0x1932 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1939) {\n                                                // Mc   [6] LIMBU SMALL LETTER TA..LIMBU SMALL LETTER LA\n                                                if (0x1933 <= code && code <= 0x1938) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1a17) {\n                                                    // Mn   [3] LIMBU SIGN MUKPHRENG..LIMBU SIGN SA-I\n                                                    if (0x1939 <= code && code <= 0x193b) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] BUGINESE VOWEL SIGN I..BUGINESE VOWEL SIGN U\n                                                    if (0x1a17 <= code && code <= 0x1a18) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1a55) {\n                                            if (code < 0x1a1b) {\n                                                // Mc   [2] BUGINESE VOWEL SIGN E..BUGINESE VOWEL SIGN O\n                                                if (0x1a19 <= code && code <= 0x1a1a) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       BUGINESE VOWEL SIGN AE\n                                                if (0x1a1b === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1a56) {\n                                                // Mc       TAI THAM CONSONANT SIGN MEDIAL RA\n                                                if (0x1a55 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       TAI THAM CONSONANT SIGN MEDIAL LA\n                                                if (0x1a56 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mc       TAI THAM CONSONANT SIGN LA TANG LAI\n                                                if (0x1a57 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x1a73) {\n                                        if (code < 0x1a62) {\n                                            if (code < 0x1a60) {\n                                                // Mn   [7] TAI THAM SIGN MAI KANG LAI..TAI THAM CONSONANT SIGN SA\n                                                if (0x1a58 <= code && code <= 0x1a5e) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       TAI THAM SIGN SAKOT\n                                                if (0x1a60 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1a65) {\n                                                // Mn       TAI THAM VOWEL SIGN MAI SAT\n                                                if (0x1a62 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1a6d) {\n                                                    // Mn   [8] TAI THAM VOWEL SIGN I..TAI THAM VOWEL SIGN OA BELOW\n                                                    if (0x1a65 <= code && code <= 0x1a6c) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [6] TAI THAM VOWEL SIGN OY..TAI THAM VOWEL SIGN THAM AI\n                                                    if (0x1a6d <= code && code <= 0x1a72) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1b00) {\n                                            if (code < 0x1a7f) {\n                                                // Mn  [10] TAI THAM VOWEL SIGN OA ABOVE..TAI THAM SIGN KHUEN-LUE KARAN\n                                                if (0x1a73 <= code && code <= 0x1a7c) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1ab0) {\n                                                    // Mn       TAI THAM COMBINING CRYPTOGRAMMIC DOT\n                                                    if (0x1a7f === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [14] COMBINING DOUBLED CIRCUMFLEX ACCENT..COMBINING PARENTHESES BELOW\n                                                    // Me       COMBINING PARENTHESES OVERLAY\n                                                    // Mn  [16] COMBINING LATIN SMALL LETTER W BELOW..COMBINING LATIN SMALL LETTER INSULAR T\n                                                    if (0x1ab0 <= code && code <= 0x1ace) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1b04) {\n                                                // Mn   [4] BALINESE SIGN ULU RICEM..BALINESE SIGN SURANG\n                                                if (0x1b00 <= code && code <= 0x1b03) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1b34) {\n                                                    // Mc       BALINESE SIGN BISAH\n                                                    if (0x1b04 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       BALINESE SIGN REREKAN\n                                                    // Mc       BALINESE VOWEL SIGN TEDUNG\n                                                    // Mn   [5] BALINESE VOWEL SIGN ULU..BALINESE VOWEL SIGN RA REPA\n                                                    if (0x1b34 <= code && code <= 0x1b3a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x1ba8) {\n                                    if (code < 0x1b6b) {\n                                        if (code < 0x1b3d) {\n                                            // Mc       BALINESE VOWEL SIGN RA REPA TEDUNG\n                                            if (0x1b3b === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       BALINESE VOWEL SIGN LA LENGA\n                                            if (0x1b3c === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1b42) {\n                                                // Mc   [5] BALINESE VOWEL SIGN LA LENGA TEDUNG..BALINESE VOWEL SIGN TALING REPA TEDUNG\n                                                if (0x1b3d <= code && code <= 0x1b41) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1b43) {\n                                                    // Mn       BALINESE VOWEL SIGN PEPET\n                                                    if (0x1b42 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] BALINESE VOWEL SIGN PEPET TEDUNG..BALINESE ADEG ADEG\n                                                    if (0x1b43 <= code && code <= 0x1b44) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1ba1) {\n                                            if (code < 0x1b80) {\n                                                // Mn   [9] BALINESE MUSICAL SYMBOL COMBINING TEGEH..BALINESE MUSICAL SYMBOL COMBINING GONG\n                                                if (0x1b6b <= code && code <= 0x1b73) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1b82) {\n                                                    // Mn   [2] SUNDANESE SIGN PANYECEK..SUNDANESE SIGN PANGLAYAR\n                                                    if (0x1b80 <= code && code <= 0x1b81) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       SUNDANESE SIGN PANGWISAD\n                                                    if (0x1b82 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1ba2) {\n                                                // Mc       SUNDANESE CONSONANT SIGN PAMINGKAL\n                                                if (0x1ba1 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1ba6) {\n                                                    // Mn   [4] SUNDANESE CONSONANT SIGN PANYAKRA..SUNDANESE VOWEL SIGN PANYUKU\n                                                    if (0x1ba2 <= code && code <= 0x1ba5) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] SUNDANESE VOWEL SIGN PANAELAENG..SUNDANESE VOWEL SIGN PANOLONG\n                                                    if (0x1ba6 <= code && code <= 0x1ba7) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x1be8) {\n                                        if (code < 0x1bab) {\n                                            if (code < 0x1baa) {\n                                                // Mn   [2] SUNDANESE VOWEL SIGN PAMEPET..SUNDANESE VOWEL SIGN PANEULEUNG\n                                                if (0x1ba8 <= code && code <= 0x1ba9) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       SUNDANESE SIGN PAMAAEH\n                                                if (0x1baa === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1be6) {\n                                                // Mn   [3] SUNDANESE SIGN VIRAMA..SUNDANESE CONSONANT SIGN PASANGAN WA\n                                                if (0x1bab <= code && code <= 0x1bad) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       BATAK SIGN TOMPI\n                                                if (0x1be6 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mc       BATAK VOWEL SIGN E\n                                                if (0x1be7 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1bee) {\n                                            if (code < 0x1bea) {\n                                                // Mn   [2] BATAK VOWEL SIGN PAKPAK E..BATAK VOWEL SIGN EE\n                                                if (0x1be8 <= code && code <= 0x1be9) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1bed) {\n                                                    // Mc   [3] BATAK VOWEL SIGN I..BATAK VOWEL SIGN O\n                                                    if (0x1bea <= code && code <= 0x1bec) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       BATAK VOWEL SIGN KARO O\n                                                    if (0x1bed === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1bef) {\n                                                // Mc       BATAK VOWEL SIGN U\n                                                if (0x1bee === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1bf2) {\n                                                    // Mn   [3] BATAK VOWEL SIGN U FOR SIMALUNGUN SA..BATAK CONSONANT SIGN H\n                                                    if (0x1bef <= code && code <= 0x1bf1) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] BATAK PANGOLAT..BATAK PANONGONAN\n                                                    if (0x1bf2 <= code && code <= 0x1bf3) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0xa952) {\n                            if (code < 0x2d7f) {\n                                if (code < 0x1cf7) {\n                                    if (code < 0x1cd4) {\n                                        if (code < 0x1c34) {\n                                            if (code < 0x1c2c) {\n                                                // Mc   [8] LEPCHA SUBJOINED LETTER YA..LEPCHA VOWEL SIGN UU\n                                                if (0x1c24 <= code && code <= 0x1c2b) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [8] LEPCHA VOWEL SIGN E..LEPCHA CONSONANT SIGN T\n                                                if (0x1c2c <= code && code <= 0x1c33) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1c36) {\n                                                // Mc   [2] LEPCHA CONSONANT SIGN NYIN-DO..LEPCHA CONSONANT SIGN KANG\n                                                if (0x1c34 <= code && code <= 0x1c35) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1cd0) {\n                                                    // Mn   [2] LEPCHA SIGN RAN..LEPCHA SIGN NUKTA\n                                                    if (0x1c36 <= code && code <= 0x1c37) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] VEDIC TONE KARSHANA..VEDIC TONE PRENKHA\n                                                    if (0x1cd0 <= code && code <= 0x1cd2) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1ce2) {\n                                            if (code < 0x1ce1) {\n                                                // Mn  [13] VEDIC SIGN YAJURVEDIC MIDLINE SVARITA..VEDIC TONE RIGVEDIC KASHMIRI INDEPENDENT SVARITA\n                                                if (0x1cd4 <= code && code <= 0x1ce0) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       VEDIC TONE ATHARVAVEDIC INDEPENDENT SVARITA\n                                                if (0x1ce1 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1ced) {\n                                                // Mn   [7] VEDIC SIGN VISARGA SVARITA..VEDIC SIGN VISARGA ANUDATTA WITH TAIL\n                                                if (0x1ce2 <= code && code <= 0x1ce8) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       VEDIC SIGN TIRYAK\n                                                if (0x1ced === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mn       VEDIC TONE CANDRA ABOVE\n                                                if (0x1cf4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x200d) {\n                                        if (code < 0x1dc0) {\n                                            if (code < 0x1cf8) {\n                                                // Mc       VEDIC SIGN ATIKRAMA\n                                                if (0x1cf7 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] VEDIC TONE RING ABOVE..VEDIC TONE DOUBLE RING ABOVE\n                                                if (0x1cf8 <= code && code <= 0x1cf9) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x200b) {\n                                                // Mn  [64] COMBINING DOTTED GRAVE ACCENT..COMBINING RIGHT ARROWHEAD AND DOWN ARROWHEAD BELOW\n                                                if (0x1dc0 <= code && code <= 0x1dff) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Cf       ZERO WIDTH SPACE\n                                                if (0x200b === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                                // Cf       ZERO WIDTH NON-JOINER\n                                                if (0x200c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x2060) {\n                                            if (code < 0x200e) {\n                                                // Cf       ZERO WIDTH JOINER\n                                                if (0x200d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.ZWJ;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x2028) {\n                                                    // Cf   [2] LEFT-TO-RIGHT MARK..RIGHT-TO-LEFT MARK\n                                                    if (0x200e <= code && code <= 0x200f) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                                else {\n                                                    // Zl       LINE SEPARATOR\n                                                    // Zp       PARAGRAPH SEPARATOR\n                                                    // Cf   [5] LEFT-TO-RIGHT EMBEDDING..RIGHT-TO-LEFT OVERRIDE\n                                                    if (0x2028 <= code && code <= 0x202e) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x20d0) {\n                                                // Cf   [5] WORD JOINER..INVISIBLE PLUS\n                                                // Cn       <reserved-2065>\n                                                // Cf  [10] LEFT-TO-RIGHT ISOLATE..NOMINAL DIGIT SHAPES\n                                                if (0x2060 <= code && code <= 0x206f) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x2cef) {\n                                                    // Mn  [13] COMBINING LEFT HARPOON ABOVE..COMBINING FOUR DOTS ABOVE\n                                                    // Me   [4] COMBINING ENCLOSING CIRCLE..COMBINING ENCLOSING CIRCLE BACKSLASH\n                                                    // Mn       COMBINING LEFT RIGHT ARROW ABOVE\n                                                    // Me   [3] COMBINING ENCLOSING SCREEN..COMBINING ENCLOSING UPWARD POINTING TRIANGLE\n                                                    // Mn  [12] COMBINING REVERSE SOLIDUS OVERLAY..COMBINING ASTERISK ABOVE\n                                                    if (0x20d0 <= code && code <= 0x20f0) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] COPTIC COMBINING NI ABOVE..COPTIC COMBINING SPIRITUS LENIS\n                                                    if (0x2cef <= code && code <= 0x2cf1) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xa823) {\n                                    if (code < 0xa674) {\n                                        if (code < 0x302a) {\n                                            if (code < 0x2de0) {\n                                                // Mn       TIFINAGH CONSONANT JOINER\n                                                if (0x2d7f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn  [32] COMBINING CYRILLIC LETTER BE..COMBINING CYRILLIC LETTER IOTIFIED BIG YUS\n                                                if (0x2de0 <= code && code <= 0x2dff) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x3099) {\n                                                // Mn   [4] IDEOGRAPHIC LEVEL TONE MARK..IDEOGRAPHIC ENTERING TONE MARK\n                                                // Mc   [2] HANGUL SINGLE DOT TONE MARK..HANGUL DOUBLE DOT TONE MARK\n                                                if (0x302a <= code && code <= 0x302f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa66f) {\n                                                    // Mn   [2] COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK..COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK\n                                                    if (0x3099 <= code && code <= 0x309a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       COMBINING CYRILLIC VZMET\n                                                    // Me   [3] COMBINING CYRILLIC TEN MILLIONS SIGN..COMBINING CYRILLIC THOUSAND MILLIONS SIGN\n                                                    if (0xa66f <= code && code <= 0xa672) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xa802) {\n                                            if (code < 0xa69e) {\n                                                // Mn  [10] COMBINING CYRILLIC LETTER UKRAINIAN IE..COMBINING CYRILLIC PAYEROK\n                                                if (0xa674 <= code && code <= 0xa67d) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa6f0) {\n                                                    // Mn   [2] COMBINING CYRILLIC LETTER EF..COMBINING CYRILLIC LETTER IOTIFIED E\n                                                    if (0xa69e <= code && code <= 0xa69f) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] BAMUM COMBINING MARK KOQNDON..BAMUM COMBINING MARK TUKWENTIS\n                                                    if (0xa6f0 <= code && code <= 0xa6f1) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa806) {\n                                                // Mn       SYLOTI NAGRI SIGN DVISVARA\n                                                if (0xa802 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       SYLOTI NAGRI SIGN HASANTA\n                                                if (0xa806 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mn       SYLOTI NAGRI SIGN ANUSVARA\n                                                if (0xa80b === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xa8b4) {\n                                        if (code < 0xa827) {\n                                            if (code < 0xa825) {\n                                                // Mc   [2] SYLOTI NAGRI VOWEL SIGN A..SYLOTI NAGRI VOWEL SIGN I\n                                                if (0xa823 <= code && code <= 0xa824) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] SYLOTI NAGRI VOWEL SIGN U..SYLOTI NAGRI VOWEL SIGN E\n                                                if (0xa825 <= code && code <= 0xa826) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa82c) {\n                                                // Mc       SYLOTI NAGRI VOWEL SIGN OO\n                                                if (0xa827 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa880) {\n                                                    // Mn       SYLOTI NAGRI SIGN ALTERNATE HASANTA\n                                                    if (0xa82c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] SAURASHTRA SIGN ANUSVARA..SAURASHTRA SIGN VISARGA\n                                                    if (0xa880 <= code && code <= 0xa881) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xa8ff) {\n                                            if (code < 0xa8c4) {\n                                                // Mc  [16] SAURASHTRA CONSONANT SIGN HAARU..SAURASHTRA VOWEL SIGN AU\n                                                if (0xa8b4 <= code && code <= 0xa8c3) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa8e0) {\n                                                    // Mn   [2] SAURASHTRA SIGN VIRAMA..SAURASHTRA SIGN CANDRABINDU\n                                                    if (0xa8c4 <= code && code <= 0xa8c5) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [18] COMBINING DEVANAGARI DIGIT ZERO..COMBINING DEVANAGARI SIGN AVAGRAHA\n                                                    if (0xa8e0 <= code && code <= 0xa8f1) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa926) {\n                                                // Mn       DEVANAGARI VOWEL SIGN AY\n                                                if (0xa8ff === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa947) {\n                                                    // Mn   [8] KAYAH LI VOWEL UE..KAYAH LI TONE CALYA PLOPHU\n                                                    if (0xa926 <= code && code <= 0xa92d) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [11] REJANG VOWEL SIGN I..REJANG CONSONANT SIGN R\n                                                    if (0xa947 <= code && code <= 0xa951) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xaab2) {\n                                if (code < 0xa9e5) {\n                                    if (code < 0xa9b4) {\n                                        if (code < 0xa980) {\n                                            if (code < 0xa960) {\n                                                // Mc   [2] REJANG CONSONANT SIGN H..REJANG VIRAMA\n                                                if (0xa952 <= code && code <= 0xa953) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [29] HANGUL CHOSEONG TIKEUT-MIEUM..HANGUL CHOSEONG SSANGYEORINHIEUH\n                                                if (0xa960 <= code && code <= 0xa97c) {\n                                                    return boundaries_1.CLUSTER_BREAK.L;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa983) {\n                                                // Mn   [3] JAVANESE SIGN PANYANGGA..JAVANESE SIGN LAYAR\n                                                if (0xa980 <= code && code <= 0xa982) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       JAVANESE SIGN WIGNYAN\n                                                if (0xa983 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       JAVANESE SIGN CECAK TELU\n                                                if (0xa9b3 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xa9ba) {\n                                            if (code < 0xa9b6) {\n                                                // Mc   [2] JAVANESE VOWEL SIGN TARUNG..JAVANESE VOWEL SIGN TOLONG\n                                                if (0xa9b4 <= code && code <= 0xa9b5) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [4] JAVANESE VOWEL SIGN WULU..JAVANESE VOWEL SIGN SUKU MENDUT\n                                                if (0xa9b6 <= code && code <= 0xa9b9) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xa9bc) {\n                                                // Mc   [2] JAVANESE VOWEL SIGN TALING..JAVANESE VOWEL SIGN DIRGA MURE\n                                                if (0xa9ba <= code && code <= 0xa9bb) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xa9be) {\n                                                    // Mn   [2] JAVANESE VOWEL SIGN PEPET..JAVANESE CONSONANT SIGN KERET\n                                                    if (0xa9bc <= code && code <= 0xa9bd) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [3] JAVANESE CONSONANT SIGN PENGKAL..JAVANESE PANGKON\n                                                    if (0xa9be <= code && code <= 0xa9c0) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xaa35) {\n                                        if (code < 0xaa2f) {\n                                            if (code < 0xaa29) {\n                                                // Mn       MYANMAR SIGN SHAN SAW\n                                                if (0xa9e5 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [6] CHAM VOWEL SIGN AA..CHAM VOWEL SIGN OE\n                                                if (0xaa29 <= code && code <= 0xaa2e) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaa31) {\n                                                // Mc   [2] CHAM VOWEL SIGN O..CHAM VOWEL SIGN AI\n                                                if (0xaa2f <= code && code <= 0xaa30) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaa33) {\n                                                    // Mn   [2] CHAM VOWEL SIGN AU..CHAM VOWEL SIGN UE\n                                                    if (0xaa31 <= code && code <= 0xaa32) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] CHAM CONSONANT SIGN YA..CHAM CONSONANT SIGN RA\n                                                    if (0xaa33 <= code && code <= 0xaa34) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xaa4d) {\n                                            if (code < 0xaa43) {\n                                                // Mn   [2] CHAM CONSONANT SIGN LA..CHAM CONSONANT SIGN WA\n                                                if (0xaa35 <= code && code <= 0xaa36) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       CHAM CONSONANT SIGN FINAL NG\n                                                if (0xaa43 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mn       CHAM CONSONANT SIGN FINAL M\n                                                if (0xaa4c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaa7c) {\n                                                // Mc       CHAM CONSONANT SIGN FINAL H\n                                                if (0xaa4d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       MYANMAR SIGN TAI LAING TONE-2\n                                                if (0xaa7c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mn       TAI VIET MAI KANG\n                                                if (0xaab0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xabe6) {\n                                    if (code < 0xaaec) {\n                                        if (code < 0xaabe) {\n                                            if (code < 0xaab7) {\n                                                // Mn   [3] TAI VIET VOWEL I..TAI VIET VOWEL U\n                                                if (0xaab2 <= code && code <= 0xaab4) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] TAI VIET MAI KHIT..TAI VIET VOWEL IA\n                                                if (0xaab7 <= code && code <= 0xaab8) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaac1) {\n                                                // Mn   [2] TAI VIET VOWEL AM..TAI VIET TONE MAI EK\n                                                if (0xaabe <= code && code <= 0xaabf) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       TAI VIET TONE MAI THO\n                                                if (0xaac1 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mc       MEETEI MAYEK VOWEL SIGN II\n                                                if (0xaaeb === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xaaf6) {\n                                            if (code < 0xaaee) {\n                                                // Mn   [2] MEETEI MAYEK VOWEL SIGN UU..MEETEI MAYEK VOWEL SIGN AAI\n                                                if (0xaaec <= code && code <= 0xaaed) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaaf5) {\n                                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN AU..MEETEI MAYEK VOWEL SIGN AAU\n                                                    if (0xaaee <= code && code <= 0xaaef) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       MEETEI MAYEK VOWEL SIGN VISARGA\n                                                    if (0xaaf5 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xabe3) {\n                                                // Mn       MEETEI MAYEK VIRAMA\n                                                if (0xaaf6 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xabe5) {\n                                                    // Mc   [2] MEETEI MAYEK VOWEL SIGN ONAP..MEETEI MAYEK VOWEL SIGN INAP\n                                                    if (0xabe3 <= code && code <= 0xabe4) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       MEETEI MAYEK VOWEL SIGN ANAP\n                                                    if (0xabe5 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xac00) {\n                                        if (code < 0xabe9) {\n                                            if (code < 0xabe8) {\n                                                // Mc   [2] MEETEI MAYEK VOWEL SIGN YENAP..MEETEI MAYEK VOWEL SIGN SOUNAP\n                                                if (0xabe6 <= code && code <= 0xabe7) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       MEETEI MAYEK VOWEL SIGN UNAP\n                                                if (0xabe8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xabec) {\n                                                // Mc   [2] MEETEI MAYEK VOWEL SIGN CHEINAP..MEETEI MAYEK VOWEL SIGN NUNG\n                                                if (0xabe9 <= code && code <= 0xabea) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       MEETEI MAYEK LUM IYEK\n                                                if (0xabec === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       MEETEI MAYEK APUN IYEK\n                                                if (0xabed === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xac1d) {\n                                            if (code < 0xac01) {\n                                                // Lo       HANGUL SYLLABLE GA\n                                                if (0xac00 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xac1c) {\n                                                    // Lo  [27] HANGUL SYLLABLE GAG..HANGUL SYLLABLE GAH\n                                                    if (0xac01 <= code && code <= 0xac1b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GAE\n                                                    if (0xac1c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xac38) {\n                                                // Lo  [27] HANGUL SYLLABLE GAEG..HANGUL SYLLABLE GAEH\n                                                if (0xac1d <= code && code <= 0xac37) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xac39) {\n                                                    // Lo       HANGUL SYLLABLE GYA\n                                                    if (0xac38 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GYAG..HANGUL SYLLABLE GYAH\n                                                    if (0xac39 <= code && code <= 0xac53) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (code < 0xb5a1) {\n                    if (code < 0xb0ed) {\n                        if (code < 0xaea0) {\n                            if (code < 0xad6d) {\n                                if (code < 0xace0) {\n                                    if (code < 0xac8d) {\n                                        if (code < 0xac70) {\n                                            if (code < 0xac55) {\n                                                // Lo       HANGUL SYLLABLE GYAE\n                                                if (0xac54 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE GYAEG..HANGUL SYLLABLE GYAEH\n                                                if (0xac55 <= code && code <= 0xac6f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xac71) {\n                                                // Lo       HANGUL SYLLABLE GEO\n                                                if (0xac70 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xac8c) {\n                                                    // Lo  [27] HANGUL SYLLABLE GEOG..HANGUL SYLLABLE GEOH\n                                                    if (0xac71 <= code && code <= 0xac8b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GE\n                                                    if (0xac8c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xaca9) {\n                                            if (code < 0xaca8) {\n                                                // Lo  [27] HANGUL SYLLABLE GEG..HANGUL SYLLABLE GEH\n                                                if (0xac8d <= code && code <= 0xaca7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE GYEO\n                                                if (0xaca8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xacc4) {\n                                                // Lo  [27] HANGUL SYLLABLE GYEOG..HANGUL SYLLABLE GYEOH\n                                                if (0xaca9 <= code && code <= 0xacc3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xacc5) {\n                                                    // Lo       HANGUL SYLLABLE GYE\n                                                    if (0xacc4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GYEG..HANGUL SYLLABLE GYEH\n                                                    if (0xacc5 <= code && code <= 0xacdf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xad19) {\n                                        if (code < 0xacfc) {\n                                            if (code < 0xace1) {\n                                                // Lo       HANGUL SYLLABLE GO\n                                                if (0xace0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE GOG..HANGUL SYLLABLE GOH\n                                                if (0xace1 <= code && code <= 0xacfb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xacfd) {\n                                                // Lo       HANGUL SYLLABLE GWA\n                                                if (0xacfc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xad18) {\n                                                    // Lo  [27] HANGUL SYLLABLE GWAG..HANGUL SYLLABLE GWAH\n                                                    if (0xacfd <= code && code <= 0xad17) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GWAE\n                                                    if (0xad18 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xad50) {\n                                            if (code < 0xad34) {\n                                                // Lo  [27] HANGUL SYLLABLE GWAEG..HANGUL SYLLABLE GWAEH\n                                                if (0xad19 <= code && code <= 0xad33) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xad35) {\n                                                    // Lo       HANGUL SYLLABLE GOE\n                                                    if (0xad34 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GOEG..HANGUL SYLLABLE GOEH\n                                                    if (0xad35 <= code && code <= 0xad4f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xad51) {\n                                                // Lo       HANGUL SYLLABLE GYO\n                                                if (0xad50 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xad6c) {\n                                                    // Lo  [27] HANGUL SYLLABLE GYOG..HANGUL SYLLABLE GYOH\n                                                    if (0xad51 <= code && code <= 0xad6b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GU\n                                                    if (0xad6c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xadf9) {\n                                    if (code < 0xadc0) {\n                                        if (code < 0xad89) {\n                                            if (code < 0xad88) {\n                                                // Lo  [27] HANGUL SYLLABLE GUG..HANGUL SYLLABLE GUH\n                                                if (0xad6d <= code && code <= 0xad87) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE GWEO\n                                                if (0xad88 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xada4) {\n                                                // Lo  [27] HANGUL SYLLABLE GWEOG..HANGUL SYLLABLE GWEOH\n                                                if (0xad89 <= code && code <= 0xada3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xada5) {\n                                                    // Lo       HANGUL SYLLABLE GWE\n                                                    if (0xada4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GWEG..HANGUL SYLLABLE GWEH\n                                                    if (0xada5 <= code && code <= 0xadbf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xaddc) {\n                                            if (code < 0xadc1) {\n                                                // Lo       HANGUL SYLLABLE GWI\n                                                if (0xadc0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE GWIG..HANGUL SYLLABLE GWIH\n                                                if (0xadc1 <= code && code <= 0xaddb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaddd) {\n                                                // Lo       HANGUL SYLLABLE GYU\n                                                if (0xaddc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xadf8) {\n                                                    // Lo  [27] HANGUL SYLLABLE GYUG..HANGUL SYLLABLE GYUH\n                                                    if (0xaddd <= code && code <= 0xadf7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GEU\n                                                    if (0xadf8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xae4c) {\n                                        if (code < 0xae15) {\n                                            if (code < 0xae14) {\n                                                // Lo  [27] HANGUL SYLLABLE GEUG..HANGUL SYLLABLE GEUH\n                                                if (0xadf9 <= code && code <= 0xae13) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE GYI\n                                                if (0xae14 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xae30) {\n                                                // Lo  [27] HANGUL SYLLABLE GYIG..HANGUL SYLLABLE GYIH\n                                                if (0xae15 <= code && code <= 0xae2f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xae31) {\n                                                    // Lo       HANGUL SYLLABLE GI\n                                                    if (0xae30 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GIG..HANGUL SYLLABLE GIH\n                                                    if (0xae31 <= code && code <= 0xae4b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xae69) {\n                                            if (code < 0xae4d) {\n                                                // Lo       HANGUL SYLLABLE GGA\n                                                if (0xae4c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xae68) {\n                                                    // Lo  [27] HANGUL SYLLABLE GGAG..HANGUL SYLLABLE GGAH\n                                                    if (0xae4d <= code && code <= 0xae67) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GGAE\n                                                    if (0xae68 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xae84) {\n                                                // Lo  [27] HANGUL SYLLABLE GGAEG..HANGUL SYLLABLE GGAEH\n                                                if (0xae69 <= code && code <= 0xae83) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xae85) {\n                                                    // Lo       HANGUL SYLLABLE GGYA\n                                                    if (0xae84 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GGYAG..HANGUL SYLLABLE GGYAH\n                                                    if (0xae85 <= code && code <= 0xae9f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xafb9) {\n                                if (code < 0xaf2c) {\n                                    if (code < 0xaed9) {\n                                        if (code < 0xaebc) {\n                                            if (code < 0xaea1) {\n                                                // Lo       HANGUL SYLLABLE GGYAE\n                                                if (0xaea0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE GGYAEG..HANGUL SYLLABLE GGYAEH\n                                                if (0xaea1 <= code && code <= 0xaebb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaebd) {\n                                                // Lo       HANGUL SYLLABLE GGEO\n                                                if (0xaebc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaed8) {\n                                                    // Lo  [27] HANGUL SYLLABLE GGEOG..HANGUL SYLLABLE GGEOH\n                                                    if (0xaebd <= code && code <= 0xaed7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GGE\n                                                    if (0xaed8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xaef5) {\n                                            if (code < 0xaef4) {\n                                                // Lo  [27] HANGUL SYLLABLE GGEG..HANGUL SYLLABLE GGEH\n                                                if (0xaed9 <= code && code <= 0xaef3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE GGYEO\n                                                if (0xaef4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaf10) {\n                                                // Lo  [27] HANGUL SYLLABLE GGYEOG..HANGUL SYLLABLE GGYEOH\n                                                if (0xaef5 <= code && code <= 0xaf0f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaf11) {\n                                                    // Lo       HANGUL SYLLABLE GGYE\n                                                    if (0xaf10 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GGYEG..HANGUL SYLLABLE GGYEH\n                                                    if (0xaf11 <= code && code <= 0xaf2b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xaf65) {\n                                        if (code < 0xaf48) {\n                                            if (code < 0xaf2d) {\n                                                // Lo       HANGUL SYLLABLE GGO\n                                                if (0xaf2c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE GGOG..HANGUL SYLLABLE GGOH\n                                                if (0xaf2d <= code && code <= 0xaf47) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaf49) {\n                                                // Lo       HANGUL SYLLABLE GGWA\n                                                if (0xaf48 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaf64) {\n                                                    // Lo  [27] HANGUL SYLLABLE GGWAG..HANGUL SYLLABLE GGWAH\n                                                    if (0xaf49 <= code && code <= 0xaf63) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GGWAE\n                                                    if (0xaf64 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xaf9c) {\n                                            if (code < 0xaf80) {\n                                                // Lo  [27] HANGUL SYLLABLE GGWAEG..HANGUL SYLLABLE GGWAEH\n                                                if (0xaf65 <= code && code <= 0xaf7f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaf81) {\n                                                    // Lo       HANGUL SYLLABLE GGOE\n                                                    if (0xaf80 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GGOEG..HANGUL SYLLABLE GGOEH\n                                                    if (0xaf81 <= code && code <= 0xaf9b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaf9d) {\n                                                // Lo       HANGUL SYLLABLE GGYO\n                                                if (0xaf9c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xafb8) {\n                                                    // Lo  [27] HANGUL SYLLABLE GGYOG..HANGUL SYLLABLE GGYOH\n                                                    if (0xaf9d <= code && code <= 0xafb7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GGU\n                                                    if (0xafb8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xb060) {\n                                    if (code < 0xb00c) {\n                                        if (code < 0xafd5) {\n                                            if (code < 0xafd4) {\n                                                // Lo  [27] HANGUL SYLLABLE GGUG..HANGUL SYLLABLE GGUH\n                                                if (0xafb9 <= code && code <= 0xafd3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE GGWEO\n                                                if (0xafd4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xaff0) {\n                                                // Lo  [27] HANGUL SYLLABLE GGWEOG..HANGUL SYLLABLE GGWEOH\n                                                if (0xafd5 <= code && code <= 0xafef) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xaff1) {\n                                                    // Lo       HANGUL SYLLABLE GGWE\n                                                    if (0xaff0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GGWEG..HANGUL SYLLABLE GGWEH\n                                                    if (0xaff1 <= code && code <= 0xb00b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb029) {\n                                            if (code < 0xb00d) {\n                                                // Lo       HANGUL SYLLABLE GGWI\n                                                if (0xb00c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb028) {\n                                                    // Lo  [27] HANGUL SYLLABLE GGWIG..HANGUL SYLLABLE GGWIH\n                                                    if (0xb00d <= code && code <= 0xb027) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE GGYU\n                                                    if (0xb028 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb044) {\n                                                // Lo  [27] HANGUL SYLLABLE GGYUG..HANGUL SYLLABLE GGYUH\n                                                if (0xb029 <= code && code <= 0xb043) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb045) {\n                                                    // Lo       HANGUL SYLLABLE GGEU\n                                                    if (0xb044 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE GGEUG..HANGUL SYLLABLE GGEUH\n                                                    if (0xb045 <= code && code <= 0xb05f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb099) {\n                                        if (code < 0xb07c) {\n                                            if (code < 0xb061) {\n                                                // Lo       HANGUL SYLLABLE GGYI\n                                                if (0xb060 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE GGYIG..HANGUL SYLLABLE GGYIH\n                                                if (0xb061 <= code && code <= 0xb07b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb07d) {\n                                                // Lo       HANGUL SYLLABLE GGI\n                                                if (0xb07c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb098) {\n                                                    // Lo  [27] HANGUL SYLLABLE GGIG..HANGUL SYLLABLE GGIH\n                                                    if (0xb07d <= code && code <= 0xb097) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE NA\n                                                    if (0xb098 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb0d0) {\n                                            if (code < 0xb0b4) {\n                                                // Lo  [27] HANGUL SYLLABLE NAG..HANGUL SYLLABLE NAH\n                                                if (0xb099 <= code && code <= 0xb0b3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb0b5) {\n                                                    // Lo       HANGUL SYLLABLE NAE\n                                                    if (0xb0b4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE NAEG..HANGUL SYLLABLE NAEH\n                                                    if (0xb0b5 <= code && code <= 0xb0cf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb0d1) {\n                                                // Lo       HANGUL SYLLABLE NYA\n                                                if (0xb0d0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb0ec) {\n                                                    // Lo  [27] HANGUL SYLLABLE NYAG..HANGUL SYLLABLE NYAH\n                                                    if (0xb0d1 <= code && code <= 0xb0eb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE NYAE\n                                                    if (0xb0ec === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0xb354) {\n                            if (code < 0xb220) {\n                                if (code < 0xb179) {\n                                    if (code < 0xb140) {\n                                        if (code < 0xb109) {\n                                            if (code < 0xb108) {\n                                                // Lo  [27] HANGUL SYLLABLE NYAEG..HANGUL SYLLABLE NYAEH\n                                                if (0xb0ed <= code && code <= 0xb107) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE NEO\n                                                if (0xb108 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb124) {\n                                                // Lo  [27] HANGUL SYLLABLE NEOG..HANGUL SYLLABLE NEOH\n                                                if (0xb109 <= code && code <= 0xb123) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb125) {\n                                                    // Lo       HANGUL SYLLABLE NE\n                                                    if (0xb124 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE NEG..HANGUL SYLLABLE NEH\n                                                    if (0xb125 <= code && code <= 0xb13f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb15c) {\n                                            if (code < 0xb141) {\n                                                // Lo       HANGUL SYLLABLE NYEO\n                                                if (0xb140 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE NYEOG..HANGUL SYLLABLE NYEOH\n                                                if (0xb141 <= code && code <= 0xb15b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb15d) {\n                                                // Lo       HANGUL SYLLABLE NYE\n                                                if (0xb15c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb178) {\n                                                    // Lo  [27] HANGUL SYLLABLE NYEG..HANGUL SYLLABLE NYEH\n                                                    if (0xb15d <= code && code <= 0xb177) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE NO\n                                                    if (0xb178 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb1cc) {\n                                        if (code < 0xb195) {\n                                            if (code < 0xb194) {\n                                                // Lo  [27] HANGUL SYLLABLE NOG..HANGUL SYLLABLE NOH\n                                                if (0xb179 <= code && code <= 0xb193) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE NWA\n                                                if (0xb194 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb1b0) {\n                                                // Lo  [27] HANGUL SYLLABLE NWAG..HANGUL SYLLABLE NWAH\n                                                if (0xb195 <= code && code <= 0xb1af) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb1b1) {\n                                                    // Lo       HANGUL SYLLABLE NWAE\n                                                    if (0xb1b0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE NWAEG..HANGUL SYLLABLE NWAEH\n                                                    if (0xb1b1 <= code && code <= 0xb1cb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb1e9) {\n                                            if (code < 0xb1cd) {\n                                                // Lo       HANGUL SYLLABLE NOE\n                                                if (0xb1cc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb1e8) {\n                                                    // Lo  [27] HANGUL SYLLABLE NOEG..HANGUL SYLLABLE NOEH\n                                                    if (0xb1cd <= code && code <= 0xb1e7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE NYO\n                                                    if (0xb1e8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb204) {\n                                                // Lo  [27] HANGUL SYLLABLE NYOG..HANGUL SYLLABLE NYOH\n                                                if (0xb1e9 <= code && code <= 0xb203) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb205) {\n                                                    // Lo       HANGUL SYLLABLE NU\n                                                    if (0xb204 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE NUG..HANGUL SYLLABLE NUH\n                                                    if (0xb205 <= code && code <= 0xb21f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xb2ad) {\n                                    if (code < 0xb259) {\n                                        if (code < 0xb23c) {\n                                            if (code < 0xb221) {\n                                                // Lo       HANGUL SYLLABLE NWEO\n                                                if (0xb220 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE NWEOG..HANGUL SYLLABLE NWEOH\n                                                if (0xb221 <= code && code <= 0xb23b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb23d) {\n                                                // Lo       HANGUL SYLLABLE NWE\n                                                if (0xb23c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb258) {\n                                                    // Lo  [27] HANGUL SYLLABLE NWEG..HANGUL SYLLABLE NWEH\n                                                    if (0xb23d <= code && code <= 0xb257) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE NWI\n                                                    if (0xb258 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb290) {\n                                            if (code < 0xb274) {\n                                                // Lo  [27] HANGUL SYLLABLE NWIG..HANGUL SYLLABLE NWIH\n                                                if (0xb259 <= code && code <= 0xb273) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb275) {\n                                                    // Lo       HANGUL SYLLABLE NYU\n                                                    if (0xb274 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE NYUG..HANGUL SYLLABLE NYUH\n                                                    if (0xb275 <= code && code <= 0xb28f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb291) {\n                                                // Lo       HANGUL SYLLABLE NEU\n                                                if (0xb290 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb2ac) {\n                                                    // Lo  [27] HANGUL SYLLABLE NEUG..HANGUL SYLLABLE NEUH\n                                                    if (0xb291 <= code && code <= 0xb2ab) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE NYI\n                                                    if (0xb2ac === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb300) {\n                                        if (code < 0xb2c9) {\n                                            if (code < 0xb2c8) {\n                                                // Lo  [27] HANGUL SYLLABLE NYIG..HANGUL SYLLABLE NYIH\n                                                if (0xb2ad <= code && code <= 0xb2c7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE NI\n                                                if (0xb2c8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb2e4) {\n                                                // Lo  [27] HANGUL SYLLABLE NIG..HANGUL SYLLABLE NIH\n                                                if (0xb2c9 <= code && code <= 0xb2e3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb2e5) {\n                                                    // Lo       HANGUL SYLLABLE DA\n                                                    if (0xb2e4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DAG..HANGUL SYLLABLE DAH\n                                                    if (0xb2e5 <= code && code <= 0xb2ff) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb31d) {\n                                            if (code < 0xb301) {\n                                                // Lo       HANGUL SYLLABLE DAE\n                                                if (0xb300 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb31c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DAEG..HANGUL SYLLABLE DAEH\n                                                    if (0xb301 <= code && code <= 0xb31b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DYA\n                                                    if (0xb31c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb338) {\n                                                // Lo  [27] HANGUL SYLLABLE DYAG..HANGUL SYLLABLE DYAH\n                                                if (0xb31d <= code && code <= 0xb337) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb339) {\n                                                    // Lo       HANGUL SYLLABLE DYAE\n                                                    if (0xb338 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DYAEG..HANGUL SYLLABLE DYAEH\n                                                    if (0xb339 <= code && code <= 0xb353) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xb46d) {\n                                if (code < 0xb3e0) {\n                                    if (code < 0xb38d) {\n                                        if (code < 0xb370) {\n                                            if (code < 0xb355) {\n                                                // Lo       HANGUL SYLLABLE DEO\n                                                if (0xb354 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE DEOG..HANGUL SYLLABLE DEOH\n                                                if (0xb355 <= code && code <= 0xb36f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb371) {\n                                                // Lo       HANGUL SYLLABLE DE\n                                                if (0xb370 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb38c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DEG..HANGUL SYLLABLE DEH\n                                                    if (0xb371 <= code && code <= 0xb38b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DYEO\n                                                    if (0xb38c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb3a9) {\n                                            if (code < 0xb3a8) {\n                                                // Lo  [27] HANGUL SYLLABLE DYEOG..HANGUL SYLLABLE DYEOH\n                                                if (0xb38d <= code && code <= 0xb3a7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE DYE\n                                                if (0xb3a8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb3c4) {\n                                                // Lo  [27] HANGUL SYLLABLE DYEG..HANGUL SYLLABLE DYEH\n                                                if (0xb3a9 <= code && code <= 0xb3c3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb3c5) {\n                                                    // Lo       HANGUL SYLLABLE DO\n                                                    if (0xb3c4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DOG..HANGUL SYLLABLE DOH\n                                                    if (0xb3c5 <= code && code <= 0xb3df) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb419) {\n                                        if (code < 0xb3fc) {\n                                            if (code < 0xb3e1) {\n                                                // Lo       HANGUL SYLLABLE DWA\n                                                if (0xb3e0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE DWAG..HANGUL SYLLABLE DWAH\n                                                if (0xb3e1 <= code && code <= 0xb3fb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb3fd) {\n                                                // Lo       HANGUL SYLLABLE DWAE\n                                                if (0xb3fc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb418) {\n                                                    // Lo  [27] HANGUL SYLLABLE DWAEG..HANGUL SYLLABLE DWAEH\n                                                    if (0xb3fd <= code && code <= 0xb417) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DOE\n                                                    if (0xb418 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb450) {\n                                            if (code < 0xb434) {\n                                                // Lo  [27] HANGUL SYLLABLE DOEG..HANGUL SYLLABLE DOEH\n                                                if (0xb419 <= code && code <= 0xb433) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb435) {\n                                                    // Lo       HANGUL SYLLABLE DYO\n                                                    if (0xb434 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DYOG..HANGUL SYLLABLE DYOH\n                                                    if (0xb435 <= code && code <= 0xb44f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb451) {\n                                                // Lo       HANGUL SYLLABLE DU\n                                                if (0xb450 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb46c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DUG..HANGUL SYLLABLE DUH\n                                                    if (0xb451 <= code && code <= 0xb46b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DWEO\n                                                    if (0xb46c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xb514) {\n                                    if (code < 0xb4c0) {\n                                        if (code < 0xb489) {\n                                            if (code < 0xb488) {\n                                                // Lo  [27] HANGUL SYLLABLE DWEOG..HANGUL SYLLABLE DWEOH\n                                                if (0xb46d <= code && code <= 0xb487) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE DWE\n                                                if (0xb488 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb4a4) {\n                                                // Lo  [27] HANGUL SYLLABLE DWEG..HANGUL SYLLABLE DWEH\n                                                if (0xb489 <= code && code <= 0xb4a3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb4a5) {\n                                                    // Lo       HANGUL SYLLABLE DWI\n                                                    if (0xb4a4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DWIG..HANGUL SYLLABLE DWIH\n                                                    if (0xb4a5 <= code && code <= 0xb4bf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb4dd) {\n                                            if (code < 0xb4c1) {\n                                                // Lo       HANGUL SYLLABLE DYU\n                                                if (0xb4c0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb4dc) {\n                                                    // Lo  [27] HANGUL SYLLABLE DYUG..HANGUL SYLLABLE DYUH\n                                                    if (0xb4c1 <= code && code <= 0xb4db) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DEU\n                                                    if (0xb4dc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb4f8) {\n                                                // Lo  [27] HANGUL SYLLABLE DEUG..HANGUL SYLLABLE DEUH\n                                                if (0xb4dd <= code && code <= 0xb4f7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb4f9) {\n                                                    // Lo       HANGUL SYLLABLE DYI\n                                                    if (0xb4f8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DYIG..HANGUL SYLLABLE DYIH\n                                                    if (0xb4f9 <= code && code <= 0xb513) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb54d) {\n                                        if (code < 0xb530) {\n                                            if (code < 0xb515) {\n                                                // Lo       HANGUL SYLLABLE DI\n                                                if (0xb514 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE DIG..HANGUL SYLLABLE DIH\n                                                if (0xb515 <= code && code <= 0xb52f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb531) {\n                                                // Lo       HANGUL SYLLABLE DDA\n                                                if (0xb530 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb54c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DDAG..HANGUL SYLLABLE DDAH\n                                                    if (0xb531 <= code && code <= 0xb54b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DDAE\n                                                    if (0xb54c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb584) {\n                                            if (code < 0xb568) {\n                                                // Lo  [27] HANGUL SYLLABLE DDAEG..HANGUL SYLLABLE DDAEH\n                                                if (0xb54d <= code && code <= 0xb567) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb569) {\n                                                    // Lo       HANGUL SYLLABLE DDYA\n                                                    if (0xb568 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DDYAG..HANGUL SYLLABLE DDYAH\n                                                    if (0xb569 <= code && code <= 0xb583) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb585) {\n                                                // Lo       HANGUL SYLLABLE DDYAE\n                                                if (0xb584 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb5a0) {\n                                                    // Lo  [27] HANGUL SYLLABLE DDYAEG..HANGUL SYLLABLE DDYAEH\n                                                    if (0xb585 <= code && code <= 0xb59f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DDEO\n                                                    if (0xb5a0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0xba55) {\n                        if (code < 0xb808) {\n                            if (code < 0xb6d4) {\n                                if (code < 0xb62d) {\n                                    if (code < 0xb5f4) {\n                                        if (code < 0xb5bd) {\n                                            if (code < 0xb5bc) {\n                                                // Lo  [27] HANGUL SYLLABLE DDEOG..HANGUL SYLLABLE DDEOH\n                                                if (0xb5a1 <= code && code <= 0xb5bb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE DDE\n                                                if (0xb5bc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb5d8) {\n                                                // Lo  [27] HANGUL SYLLABLE DDEG..HANGUL SYLLABLE DDEH\n                                                if (0xb5bd <= code && code <= 0xb5d7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb5d9) {\n                                                    // Lo       HANGUL SYLLABLE DDYEO\n                                                    if (0xb5d8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DDYEOG..HANGUL SYLLABLE DDYEOH\n                                                    if (0xb5d9 <= code && code <= 0xb5f3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb610) {\n                                            if (code < 0xb5f5) {\n                                                // Lo       HANGUL SYLLABLE DDYE\n                                                if (0xb5f4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE DDYEG..HANGUL SYLLABLE DDYEH\n                                                if (0xb5f5 <= code && code <= 0xb60f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb611) {\n                                                // Lo       HANGUL SYLLABLE DDO\n                                                if (0xb610 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb62c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DDOG..HANGUL SYLLABLE DDOH\n                                                    if (0xb611 <= code && code <= 0xb62b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DDWA\n                                                    if (0xb62c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb680) {\n                                        if (code < 0xb649) {\n                                            if (code < 0xb648) {\n                                                // Lo  [27] HANGUL SYLLABLE DDWAG..HANGUL SYLLABLE DDWAH\n                                                if (0xb62d <= code && code <= 0xb647) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE DDWAE\n                                                if (0xb648 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb664) {\n                                                // Lo  [27] HANGUL SYLLABLE DDWAEG..HANGUL SYLLABLE DDWAEH\n                                                if (0xb649 <= code && code <= 0xb663) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb665) {\n                                                    // Lo       HANGUL SYLLABLE DDOE\n                                                    if (0xb664 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DDOEG..HANGUL SYLLABLE DDOEH\n                                                    if (0xb665 <= code && code <= 0xb67f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb69d) {\n                                            if (code < 0xb681) {\n                                                // Lo       HANGUL SYLLABLE DDYO\n                                                if (0xb680 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb69c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DDYOG..HANGUL SYLLABLE DDYOH\n                                                    if (0xb681 <= code && code <= 0xb69b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DDU\n                                                    if (0xb69c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb6b8) {\n                                                // Lo  [27] HANGUL SYLLABLE DDUG..HANGUL SYLLABLE DDUH\n                                                if (0xb69d <= code && code <= 0xb6b7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb6b9) {\n                                                    // Lo       HANGUL SYLLABLE DDWEO\n                                                    if (0xb6b8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DDWEOG..HANGUL SYLLABLE DDWEOH\n                                                    if (0xb6b9 <= code && code <= 0xb6d3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xb761) {\n                                    if (code < 0xb70d) {\n                                        if (code < 0xb6f0) {\n                                            if (code < 0xb6d5) {\n                                                // Lo       HANGUL SYLLABLE DDWE\n                                                if (0xb6d4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE DDWEG..HANGUL SYLLABLE DDWEH\n                                                if (0xb6d5 <= code && code <= 0xb6ef) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb6f1) {\n                                                // Lo       HANGUL SYLLABLE DDWI\n                                                if (0xb6f0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb70c) {\n                                                    // Lo  [27] HANGUL SYLLABLE DDWIG..HANGUL SYLLABLE DDWIH\n                                                    if (0xb6f1 <= code && code <= 0xb70b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DDYU\n                                                    if (0xb70c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb744) {\n                                            if (code < 0xb728) {\n                                                // Lo  [27] HANGUL SYLLABLE DDYUG..HANGUL SYLLABLE DDYUH\n                                                if (0xb70d <= code && code <= 0xb727) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb729) {\n                                                    // Lo       HANGUL SYLLABLE DDEU\n                                                    if (0xb728 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE DDEUG..HANGUL SYLLABLE DDEUH\n                                                    if (0xb729 <= code && code <= 0xb743) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb745) {\n                                                // Lo       HANGUL SYLLABLE DDYI\n                                                if (0xb744 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb760) {\n                                                    // Lo  [27] HANGUL SYLLABLE DDYIG..HANGUL SYLLABLE DDYIH\n                                                    if (0xb745 <= code && code <= 0xb75f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE DDI\n                                                    if (0xb760 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb7b4) {\n                                        if (code < 0xb77d) {\n                                            if (code < 0xb77c) {\n                                                // Lo  [27] HANGUL SYLLABLE DDIG..HANGUL SYLLABLE DDIH\n                                                if (0xb761 <= code && code <= 0xb77b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE RA\n                                                if (0xb77c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb798) {\n                                                // Lo  [27] HANGUL SYLLABLE RAG..HANGUL SYLLABLE RAH\n                                                if (0xb77d <= code && code <= 0xb797) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb799) {\n                                                    // Lo       HANGUL SYLLABLE RAE\n                                                    if (0xb798 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE RAEG..HANGUL SYLLABLE RAEH\n                                                    if (0xb799 <= code && code <= 0xb7b3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb7d1) {\n                                            if (code < 0xb7b5) {\n                                                // Lo       HANGUL SYLLABLE RYA\n                                                if (0xb7b4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb7d0) {\n                                                    // Lo  [27] HANGUL SYLLABLE RYAG..HANGUL SYLLABLE RYAH\n                                                    if (0xb7b5 <= code && code <= 0xb7cf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE RYAE\n                                                    if (0xb7d0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb7ec) {\n                                                // Lo  [27] HANGUL SYLLABLE RYAEG..HANGUL SYLLABLE RYAEH\n                                                if (0xb7d1 <= code && code <= 0xb7eb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb7ed) {\n                                                    // Lo       HANGUL SYLLABLE REO\n                                                    if (0xb7ec === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE REOG..HANGUL SYLLABLE REOH\n                                                    if (0xb7ed <= code && code <= 0xb807) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xb921) {\n                                if (code < 0xb894) {\n                                    if (code < 0xb841) {\n                                        if (code < 0xb824) {\n                                            if (code < 0xb809) {\n                                                // Lo       HANGUL SYLLABLE RE\n                                                if (0xb808 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE REG..HANGUL SYLLABLE REH\n                                                if (0xb809 <= code && code <= 0xb823) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb825) {\n                                                // Lo       HANGUL SYLLABLE RYEO\n                                                if (0xb824 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb840) {\n                                                    // Lo  [27] HANGUL SYLLABLE RYEOG..HANGUL SYLLABLE RYEOH\n                                                    if (0xb825 <= code && code <= 0xb83f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE RYE\n                                                    if (0xb840 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb85d) {\n                                            if (code < 0xb85c) {\n                                                // Lo  [27] HANGUL SYLLABLE RYEG..HANGUL SYLLABLE RYEH\n                                                if (0xb841 <= code && code <= 0xb85b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE RO\n                                                if (0xb85c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb878) {\n                                                // Lo  [27] HANGUL SYLLABLE ROG..HANGUL SYLLABLE ROH\n                                                if (0xb85d <= code && code <= 0xb877) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb879) {\n                                                    // Lo       HANGUL SYLLABLE RWA\n                                                    if (0xb878 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE RWAG..HANGUL SYLLABLE RWAH\n                                                    if (0xb879 <= code && code <= 0xb893) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xb8cd) {\n                                        if (code < 0xb8b0) {\n                                            if (code < 0xb895) {\n                                                // Lo       HANGUL SYLLABLE RWAE\n                                                if (0xb894 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE RWAEG..HANGUL SYLLABLE RWAEH\n                                                if (0xb895 <= code && code <= 0xb8af) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb8b1) {\n                                                // Lo       HANGUL SYLLABLE ROE\n                                                if (0xb8b0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb8cc) {\n                                                    // Lo  [27] HANGUL SYLLABLE ROEG..HANGUL SYLLABLE ROEH\n                                                    if (0xb8b1 <= code && code <= 0xb8cb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE RYO\n                                                    if (0xb8cc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb904) {\n                                            if (code < 0xb8e8) {\n                                                // Lo  [27] HANGUL SYLLABLE RYOG..HANGUL SYLLABLE RYOH\n                                                if (0xb8cd <= code && code <= 0xb8e7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb8e9) {\n                                                    // Lo       HANGUL SYLLABLE RU\n                                                    if (0xb8e8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE RUG..HANGUL SYLLABLE RUH\n                                                    if (0xb8e9 <= code && code <= 0xb903) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb905) {\n                                                // Lo       HANGUL SYLLABLE RWEO\n                                                if (0xb904 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb920) {\n                                                    // Lo  [27] HANGUL SYLLABLE RWEOG..HANGUL SYLLABLE RWEOH\n                                                    if (0xb905 <= code && code <= 0xb91f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE RWE\n                                                    if (0xb920 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xb9c8) {\n                                    if (code < 0xb974) {\n                                        if (code < 0xb93d) {\n                                            if (code < 0xb93c) {\n                                                // Lo  [27] HANGUL SYLLABLE RWEG..HANGUL SYLLABLE RWEH\n                                                if (0xb921 <= code && code <= 0xb93b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE RWI\n                                                if (0xb93c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb958) {\n                                                // Lo  [27] HANGUL SYLLABLE RWIG..HANGUL SYLLABLE RWIH\n                                                if (0xb93d <= code && code <= 0xb957) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb959) {\n                                                    // Lo       HANGUL SYLLABLE RYU\n                                                    if (0xb958 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE RYUG..HANGUL SYLLABLE RYUH\n                                                    if (0xb959 <= code && code <= 0xb973) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xb991) {\n                                            if (code < 0xb975) {\n                                                // Lo       HANGUL SYLLABLE REU\n                                                if (0xb974 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb990) {\n                                                    // Lo  [27] HANGUL SYLLABLE REUG..HANGUL SYLLABLE REUH\n                                                    if (0xb975 <= code && code <= 0xb98f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE RYI\n                                                    if (0xb990 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb9ac) {\n                                                // Lo  [27] HANGUL SYLLABLE RYIG..HANGUL SYLLABLE RYIH\n                                                if (0xb991 <= code && code <= 0xb9ab) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xb9ad) {\n                                                    // Lo       HANGUL SYLLABLE RI\n                                                    if (0xb9ac === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE RIG..HANGUL SYLLABLE RIH\n                                                    if (0xb9ad <= code && code <= 0xb9c7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xba01) {\n                                        if (code < 0xb9e4) {\n                                            if (code < 0xb9c9) {\n                                                // Lo       HANGUL SYLLABLE MA\n                                                if (0xb9c8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE MAG..HANGUL SYLLABLE MAH\n                                                if (0xb9c9 <= code && code <= 0xb9e3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xb9e5) {\n                                                // Lo       HANGUL SYLLABLE MAE\n                                                if (0xb9e4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xba00) {\n                                                    // Lo  [27] HANGUL SYLLABLE MAEG..HANGUL SYLLABLE MAEH\n                                                    if (0xb9e5 <= code && code <= 0xb9ff) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE MYA\n                                                    if (0xba00 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xba38) {\n                                            if (code < 0xba1c) {\n                                                // Lo  [27] HANGUL SYLLABLE MYAG..HANGUL SYLLABLE MYAH\n                                                if (0xba01 <= code && code <= 0xba1b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xba1d) {\n                                                    // Lo       HANGUL SYLLABLE MYAE\n                                                    if (0xba1c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE MYAEG..HANGUL SYLLABLE MYAEH\n                                                    if (0xba1d <= code && code <= 0xba37) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xba39) {\n                                                // Lo       HANGUL SYLLABLE MEO\n                                                if (0xba38 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xba54) {\n                                                    // Lo  [27] HANGUL SYLLABLE MEOG..HANGUL SYLLABLE MEOH\n                                                    if (0xba39 <= code && code <= 0xba53) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE ME\n                                                    if (0xba54 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0xbcbc) {\n                            if (code < 0xbb88) {\n                                if (code < 0xbae1) {\n                                    if (code < 0xbaa8) {\n                                        if (code < 0xba71) {\n                                            if (code < 0xba70) {\n                                                // Lo  [27] HANGUL SYLLABLE MEG..HANGUL SYLLABLE MEH\n                                                if (0xba55 <= code && code <= 0xba6f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE MYEO\n                                                if (0xba70 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xba8c) {\n                                                // Lo  [27] HANGUL SYLLABLE MYEOG..HANGUL SYLLABLE MYEOH\n                                                if (0xba71 <= code && code <= 0xba8b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xba8d) {\n                                                    // Lo       HANGUL SYLLABLE MYE\n                                                    if (0xba8c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE MYEG..HANGUL SYLLABLE MYEH\n                                                    if (0xba8d <= code && code <= 0xbaa7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbac4) {\n                                            if (code < 0xbaa9) {\n                                                // Lo       HANGUL SYLLABLE MO\n                                                if (0xbaa8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE MOG..HANGUL SYLLABLE MOH\n                                                if (0xbaa9 <= code && code <= 0xbac3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbac5) {\n                                                // Lo       HANGUL SYLLABLE MWA\n                                                if (0xbac4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbae0) {\n                                                    // Lo  [27] HANGUL SYLLABLE MWAG..HANGUL SYLLABLE MWAH\n                                                    if (0xbac5 <= code && code <= 0xbadf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE MWAE\n                                                    if (0xbae0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xbb34) {\n                                        if (code < 0xbafd) {\n                                            if (code < 0xbafc) {\n                                                // Lo  [27] HANGUL SYLLABLE MWAEG..HANGUL SYLLABLE MWAEH\n                                                if (0xbae1 <= code && code <= 0xbafb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE MOE\n                                                if (0xbafc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbb18) {\n                                                // Lo  [27] HANGUL SYLLABLE MOEG..HANGUL SYLLABLE MOEH\n                                                if (0xbafd <= code && code <= 0xbb17) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbb19) {\n                                                    // Lo       HANGUL SYLLABLE MYO\n                                                    if (0xbb18 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE MYOG..HANGUL SYLLABLE MYOH\n                                                    if (0xbb19 <= code && code <= 0xbb33) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbb51) {\n                                            if (code < 0xbb35) {\n                                                // Lo       HANGUL SYLLABLE MU\n                                                if (0xbb34 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbb50) {\n                                                    // Lo  [27] HANGUL SYLLABLE MUG..HANGUL SYLLABLE MUH\n                                                    if (0xbb35 <= code && code <= 0xbb4f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE MWEO\n                                                    if (0xbb50 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbb6c) {\n                                                // Lo  [27] HANGUL SYLLABLE MWEOG..HANGUL SYLLABLE MWEOH\n                                                if (0xbb51 <= code && code <= 0xbb6b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbb6d) {\n                                                    // Lo       HANGUL SYLLABLE MWE\n                                                    if (0xbb6c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE MWEG..HANGUL SYLLABLE MWEH\n                                                    if (0xbb6d <= code && code <= 0xbb87) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xbc15) {\n                                    if (code < 0xbbc1) {\n                                        if (code < 0xbba4) {\n                                            if (code < 0xbb89) {\n                                                // Lo       HANGUL SYLLABLE MWI\n                                                if (0xbb88 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE MWIG..HANGUL SYLLABLE MWIH\n                                                if (0xbb89 <= code && code <= 0xbba3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbba5) {\n                                                // Lo       HANGUL SYLLABLE MYU\n                                                if (0xbba4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbbc0) {\n                                                    // Lo  [27] HANGUL SYLLABLE MYUG..HANGUL SYLLABLE MYUH\n                                                    if (0xbba5 <= code && code <= 0xbbbf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE MEU\n                                                    if (0xbbc0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbbf8) {\n                                            if (code < 0xbbdc) {\n                                                // Lo  [27] HANGUL SYLLABLE MEUG..HANGUL SYLLABLE MEUH\n                                                if (0xbbc1 <= code && code <= 0xbbdb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbbdd) {\n                                                    // Lo       HANGUL SYLLABLE MYI\n                                                    if (0xbbdc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE MYIG..HANGUL SYLLABLE MYIH\n                                                    if (0xbbdd <= code && code <= 0xbbf7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbbf9) {\n                                                // Lo       HANGUL SYLLABLE MI\n                                                if (0xbbf8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbc14) {\n                                                    // Lo  [27] HANGUL SYLLABLE MIG..HANGUL SYLLABLE MIH\n                                                    if (0xbbf9 <= code && code <= 0xbc13) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BA\n                                                    if (0xbc14 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xbc68) {\n                                        if (code < 0xbc31) {\n                                            if (code < 0xbc30) {\n                                                // Lo  [27] HANGUL SYLLABLE BAG..HANGUL SYLLABLE BAH\n                                                if (0xbc15 <= code && code <= 0xbc2f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE BAE\n                                                if (0xbc30 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbc4c) {\n                                                // Lo  [27] HANGUL SYLLABLE BAEG..HANGUL SYLLABLE BAEH\n                                                if (0xbc31 <= code && code <= 0xbc4b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbc4d) {\n                                                    // Lo       HANGUL SYLLABLE BYA\n                                                    if (0xbc4c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BYAG..HANGUL SYLLABLE BYAH\n                                                    if (0xbc4d <= code && code <= 0xbc67) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbc85) {\n                                            if (code < 0xbc69) {\n                                                // Lo       HANGUL SYLLABLE BYAE\n                                                if (0xbc68 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbc84) {\n                                                    // Lo  [27] HANGUL SYLLABLE BYAEG..HANGUL SYLLABLE BYAEH\n                                                    if (0xbc69 <= code && code <= 0xbc83) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BEO\n                                                    if (0xbc84 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbca0) {\n                                                // Lo  [27] HANGUL SYLLABLE BEOG..HANGUL SYLLABLE BEOH\n                                                if (0xbc85 <= code && code <= 0xbc9f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbca1) {\n                                                    // Lo       HANGUL SYLLABLE BE\n                                                    if (0xbca0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BEG..HANGUL SYLLABLE BEH\n                                                    if (0xbca1 <= code && code <= 0xbcbb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xbdd5) {\n                                if (code < 0xbd48) {\n                                    if (code < 0xbcf5) {\n                                        if (code < 0xbcd8) {\n                                            if (code < 0xbcbd) {\n                                                // Lo       HANGUL SYLLABLE BYEO\n                                                if (0xbcbc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE BYEOG..HANGUL SYLLABLE BYEOH\n                                                if (0xbcbd <= code && code <= 0xbcd7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbcd9) {\n                                                // Lo       HANGUL SYLLABLE BYE\n                                                if (0xbcd8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbcf4) {\n                                                    // Lo  [27] HANGUL SYLLABLE BYEG..HANGUL SYLLABLE BYEH\n                                                    if (0xbcd9 <= code && code <= 0xbcf3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BO\n                                                    if (0xbcf4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbd11) {\n                                            if (code < 0xbd10) {\n                                                // Lo  [27] HANGUL SYLLABLE BOG..HANGUL SYLLABLE BOH\n                                                if (0xbcf5 <= code && code <= 0xbd0f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE BWA\n                                                if (0xbd10 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbd2c) {\n                                                // Lo  [27] HANGUL SYLLABLE BWAG..HANGUL SYLLABLE BWAH\n                                                if (0xbd11 <= code && code <= 0xbd2b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbd2d) {\n                                                    // Lo       HANGUL SYLLABLE BWAE\n                                                    if (0xbd2c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BWAEG..HANGUL SYLLABLE BWAEH\n                                                    if (0xbd2d <= code && code <= 0xbd47) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xbd81) {\n                                        if (code < 0xbd64) {\n                                            if (code < 0xbd49) {\n                                                // Lo       HANGUL SYLLABLE BOE\n                                                if (0xbd48 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE BOEG..HANGUL SYLLABLE BOEH\n                                                if (0xbd49 <= code && code <= 0xbd63) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbd65) {\n                                                // Lo       HANGUL SYLLABLE BYO\n                                                if (0xbd64 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbd80) {\n                                                    // Lo  [27] HANGUL SYLLABLE BYOG..HANGUL SYLLABLE BYOH\n                                                    if (0xbd65 <= code && code <= 0xbd7f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BU\n                                                    if (0xbd80 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbdb8) {\n                                            if (code < 0xbd9c) {\n                                                // Lo  [27] HANGUL SYLLABLE BUG..HANGUL SYLLABLE BUH\n                                                if (0xbd81 <= code && code <= 0xbd9b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbd9d) {\n                                                    // Lo       HANGUL SYLLABLE BWEO\n                                                    if (0xbd9c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BWEOG..HANGUL SYLLABLE BWEOH\n                                                    if (0xbd9d <= code && code <= 0xbdb7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbdb9) {\n                                                // Lo       HANGUL SYLLABLE BWE\n                                                if (0xbdb8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbdd4) {\n                                                    // Lo  [27] HANGUL SYLLABLE BWEG..HANGUL SYLLABLE BWEH\n                                                    if (0xbdb9 <= code && code <= 0xbdd3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BWI\n                                                    if (0xbdd4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xbe7c) {\n                                    if (code < 0xbe28) {\n                                        if (code < 0xbdf1) {\n                                            if (code < 0xbdf0) {\n                                                // Lo  [27] HANGUL SYLLABLE BWIG..HANGUL SYLLABLE BWIH\n                                                if (0xbdd5 <= code && code <= 0xbdef) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE BYU\n                                                if (0xbdf0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbe0c) {\n                                                // Lo  [27] HANGUL SYLLABLE BYUG..HANGUL SYLLABLE BYUH\n                                                if (0xbdf1 <= code && code <= 0xbe0b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbe0d) {\n                                                    // Lo       HANGUL SYLLABLE BEU\n                                                    if (0xbe0c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BEUG..HANGUL SYLLABLE BEUH\n                                                    if (0xbe0d <= code && code <= 0xbe27) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbe45) {\n                                            if (code < 0xbe29) {\n                                                // Lo       HANGUL SYLLABLE BYI\n                                                if (0xbe28 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbe44) {\n                                                    // Lo  [27] HANGUL SYLLABLE BYIG..HANGUL SYLLABLE BYIH\n                                                    if (0xbe29 <= code && code <= 0xbe43) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BI\n                                                    if (0xbe44 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbe60) {\n                                                // Lo  [27] HANGUL SYLLABLE BIG..HANGUL SYLLABLE BIH\n                                                if (0xbe45 <= code && code <= 0xbe5f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbe61) {\n                                                    // Lo       HANGUL SYLLABLE BBA\n                                                    if (0xbe60 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BBAG..HANGUL SYLLABLE BBAH\n                                                    if (0xbe61 <= code && code <= 0xbe7b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xbeb5) {\n                                        if (code < 0xbe98) {\n                                            if (code < 0xbe7d) {\n                                                // Lo       HANGUL SYLLABLE BBAE\n                                                if (0xbe7c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE BBAEG..HANGUL SYLLABLE BBAEH\n                                                if (0xbe7d <= code && code <= 0xbe97) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbe99) {\n                                                // Lo       HANGUL SYLLABLE BBYA\n                                                if (0xbe98 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbeb4) {\n                                                    // Lo  [27] HANGUL SYLLABLE BBYAG..HANGUL SYLLABLE BBYAH\n                                                    if (0xbe99 <= code && code <= 0xbeb3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BBYAE\n                                                    if (0xbeb4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbeec) {\n                                            if (code < 0xbed0) {\n                                                // Lo  [27] HANGUL SYLLABLE BBYAEG..HANGUL SYLLABLE BBYAEH\n                                                if (0xbeb5 <= code && code <= 0xbecf) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbed1) {\n                                                    // Lo       HANGUL SYLLABLE BBEO\n                                                    if (0xbed0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BBEOG..HANGUL SYLLABLE BBEOH\n                                                    if (0xbed1 <= code && code <= 0xbeeb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbeed) {\n                                                // Lo       HANGUL SYLLABLE BBE\n                                                if (0xbeec === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbf08) {\n                                                    // Lo  [27] HANGUL SYLLABLE BBEG..HANGUL SYLLABLE BBEH\n                                                    if (0xbeed <= code && code <= 0xbf07) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BBYEO\n                                                    if (0xbf08 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (code < 0xd1d8) {\n                if (code < 0xc870) {\n                    if (code < 0xc3bc) {\n                        if (code < 0xc155) {\n                            if (code < 0xc03c) {\n                                if (code < 0xbf95) {\n                                    if (code < 0xbf5c) {\n                                        if (code < 0xbf25) {\n                                            if (code < 0xbf24) {\n                                                // Lo  [27] HANGUL SYLLABLE BBYEOG..HANGUL SYLLABLE BBYEOH\n                                                if (0xbf09 <= code && code <= 0xbf23) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE BBYE\n                                                if (0xbf24 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbf40) {\n                                                // Lo  [27] HANGUL SYLLABLE BBYEG..HANGUL SYLLABLE BBYEH\n                                                if (0xbf25 <= code && code <= 0xbf3f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbf41) {\n                                                    // Lo       HANGUL SYLLABLE BBO\n                                                    if (0xbf40 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BBOG..HANGUL SYLLABLE BBOH\n                                                    if (0xbf41 <= code && code <= 0xbf5b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xbf78) {\n                                            if (code < 0xbf5d) {\n                                                // Lo       HANGUL SYLLABLE BBWA\n                                                if (0xbf5c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE BBWAG..HANGUL SYLLABLE BBWAH\n                                                if (0xbf5d <= code && code <= 0xbf77) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbf79) {\n                                                // Lo       HANGUL SYLLABLE BBWAE\n                                                if (0xbf78 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbf94) {\n                                                    // Lo  [27] HANGUL SYLLABLE BBWAEG..HANGUL SYLLABLE BBWAEH\n                                                    if (0xbf79 <= code && code <= 0xbf93) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BBOE\n                                                    if (0xbf94 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xbfe8) {\n                                        if (code < 0xbfb1) {\n                                            if (code < 0xbfb0) {\n                                                // Lo  [27] HANGUL SYLLABLE BBOEG..HANGUL SYLLABLE BBOEH\n                                                if (0xbf95 <= code && code <= 0xbfaf) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE BBYO\n                                                if (0xbfb0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xbfcc) {\n                                                // Lo  [27] HANGUL SYLLABLE BBYOG..HANGUL SYLLABLE BBYOH\n                                                if (0xbfb1 <= code && code <= 0xbfcb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xbfcd) {\n                                                    // Lo       HANGUL SYLLABLE BBU\n                                                    if (0xbfcc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BBUG..HANGUL SYLLABLE BBUH\n                                                    if (0xbfcd <= code && code <= 0xbfe7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc005) {\n                                            if (code < 0xbfe9) {\n                                                // Lo       HANGUL SYLLABLE BBWEO\n                                                if (0xbfe8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc004) {\n                                                    // Lo  [27] HANGUL SYLLABLE BBWEOG..HANGUL SYLLABLE BBWEOH\n                                                    if (0xbfe9 <= code && code <= 0xc003) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BBWE\n                                                    if (0xc004 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc020) {\n                                                // Lo  [27] HANGUL SYLLABLE BBWEG..HANGUL SYLLABLE BBWEH\n                                                if (0xc005 <= code && code <= 0xc01f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc021) {\n                                                    // Lo       HANGUL SYLLABLE BBWI\n                                                    if (0xc020 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE BBWIG..HANGUL SYLLABLE BBWIH\n                                                    if (0xc021 <= code && code <= 0xc03b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xc0c8) {\n                                    if (code < 0xc075) {\n                                        if (code < 0xc058) {\n                                            if (code < 0xc03d) {\n                                                // Lo       HANGUL SYLLABLE BBYU\n                                                if (0xc03c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE BBYUG..HANGUL SYLLABLE BBYUH\n                                                if (0xc03d <= code && code <= 0xc057) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc059) {\n                                                // Lo       HANGUL SYLLABLE BBEU\n                                                if (0xc058 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc074) {\n                                                    // Lo  [27] HANGUL SYLLABLE BBEUG..HANGUL SYLLABLE BBEUH\n                                                    if (0xc059 <= code && code <= 0xc073) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE BBYI\n                                                    if (0xc074 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc091) {\n                                            if (code < 0xc090) {\n                                                // Lo  [27] HANGUL SYLLABLE BBYIG..HANGUL SYLLABLE BBYIH\n                                                if (0xc075 <= code && code <= 0xc08f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE BBI\n                                                if (0xc090 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc0ac) {\n                                                // Lo  [27] HANGUL SYLLABLE BBIG..HANGUL SYLLABLE BBIH\n                                                if (0xc091 <= code && code <= 0xc0ab) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc0ad) {\n                                                    // Lo       HANGUL SYLLABLE SA\n                                                    if (0xc0ac === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SAG..HANGUL SYLLABLE SAH\n                                                    if (0xc0ad <= code && code <= 0xc0c7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc101) {\n                                        if (code < 0xc0e4) {\n                                            if (code < 0xc0c9) {\n                                                // Lo       HANGUL SYLLABLE SAE\n                                                if (0xc0c8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE SAEG..HANGUL SYLLABLE SAEH\n                                                if (0xc0c9 <= code && code <= 0xc0e3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc0e5) {\n                                                // Lo       HANGUL SYLLABLE SYA\n                                                if (0xc0e4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc100) {\n                                                    // Lo  [27] HANGUL SYLLABLE SYAG..HANGUL SYLLABLE SYAH\n                                                    if (0xc0e5 <= code && code <= 0xc0ff) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SYAE\n                                                    if (0xc100 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc138) {\n                                            if (code < 0xc11c) {\n                                                // Lo  [27] HANGUL SYLLABLE SYAEG..HANGUL SYLLABLE SYAEH\n                                                if (0xc101 <= code && code <= 0xc11b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc11d) {\n                                                    // Lo       HANGUL SYLLABLE SEO\n                                                    if (0xc11c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SEOG..HANGUL SYLLABLE SEOH\n                                                    if (0xc11d <= code && code <= 0xc137) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc139) {\n                                                // Lo       HANGUL SYLLABLE SE\n                                                if (0xc138 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc154) {\n                                                    // Lo  [27] HANGUL SYLLABLE SEG..HANGUL SYLLABLE SEH\n                                                    if (0xc139 <= code && code <= 0xc153) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SYEO\n                                                    if (0xc154 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xc288) {\n                                if (code < 0xc1e1) {\n                                    if (code < 0xc1a8) {\n                                        if (code < 0xc171) {\n                                            if (code < 0xc170) {\n                                                // Lo  [27] HANGUL SYLLABLE SYEOG..HANGUL SYLLABLE SYEOH\n                                                if (0xc155 <= code && code <= 0xc16f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE SYE\n                                                if (0xc170 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc18c) {\n                                                // Lo  [27] HANGUL SYLLABLE SYEG..HANGUL SYLLABLE SYEH\n                                                if (0xc171 <= code && code <= 0xc18b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc18d) {\n                                                    // Lo       HANGUL SYLLABLE SO\n                                                    if (0xc18c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SOG..HANGUL SYLLABLE SOH\n                                                    if (0xc18d <= code && code <= 0xc1a7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc1c4) {\n                                            if (code < 0xc1a9) {\n                                                // Lo       HANGUL SYLLABLE SWA\n                                                if (0xc1a8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE SWAG..HANGUL SYLLABLE SWAH\n                                                if (0xc1a9 <= code && code <= 0xc1c3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc1c5) {\n                                                // Lo       HANGUL SYLLABLE SWAE\n                                                if (0xc1c4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc1e0) {\n                                                    // Lo  [27] HANGUL SYLLABLE SWAEG..HANGUL SYLLABLE SWAEH\n                                                    if (0xc1c5 <= code && code <= 0xc1df) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SOE\n                                                    if (0xc1e0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc234) {\n                                        if (code < 0xc1fd) {\n                                            if (code < 0xc1fc) {\n                                                // Lo  [27] HANGUL SYLLABLE SOEG..HANGUL SYLLABLE SOEH\n                                                if (0xc1e1 <= code && code <= 0xc1fb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE SYO\n                                                if (0xc1fc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc218) {\n                                                // Lo  [27] HANGUL SYLLABLE SYOG..HANGUL SYLLABLE SYOH\n                                                if (0xc1fd <= code && code <= 0xc217) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc219) {\n                                                    // Lo       HANGUL SYLLABLE SU\n                                                    if (0xc218 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SUG..HANGUL SYLLABLE SUH\n                                                    if (0xc219 <= code && code <= 0xc233) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc251) {\n                                            if (code < 0xc235) {\n                                                // Lo       HANGUL SYLLABLE SWEO\n                                                if (0xc234 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc250) {\n                                                    // Lo  [27] HANGUL SYLLABLE SWEOG..HANGUL SYLLABLE SWEOH\n                                                    if (0xc235 <= code && code <= 0xc24f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SWE\n                                                    if (0xc250 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc26c) {\n                                                // Lo  [27] HANGUL SYLLABLE SWEG..HANGUL SYLLABLE SWEH\n                                                if (0xc251 <= code && code <= 0xc26b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc26d) {\n                                                    // Lo       HANGUL SYLLABLE SWI\n                                                    if (0xc26c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SWIG..HANGUL SYLLABLE SWIH\n                                                    if (0xc26d <= code && code <= 0xc287) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xc315) {\n                                    if (code < 0xc2c1) {\n                                        if (code < 0xc2a4) {\n                                            if (code < 0xc289) {\n                                                // Lo       HANGUL SYLLABLE SYU\n                                                if (0xc288 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE SYUG..HANGUL SYLLABLE SYUH\n                                                if (0xc289 <= code && code <= 0xc2a3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc2a5) {\n                                                // Lo       HANGUL SYLLABLE SEU\n                                                if (0xc2a4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc2c0) {\n                                                    // Lo  [27] HANGUL SYLLABLE SEUG..HANGUL SYLLABLE SEUH\n                                                    if (0xc2a5 <= code && code <= 0xc2bf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SYI\n                                                    if (0xc2c0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc2f8) {\n                                            if (code < 0xc2dc) {\n                                                // Lo  [27] HANGUL SYLLABLE SYIG..HANGUL SYLLABLE SYIH\n                                                if (0xc2c1 <= code && code <= 0xc2db) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc2dd) {\n                                                    // Lo       HANGUL SYLLABLE SI\n                                                    if (0xc2dc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SIG..HANGUL SYLLABLE SIH\n                                                    if (0xc2dd <= code && code <= 0xc2f7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc2f9) {\n                                                // Lo       HANGUL SYLLABLE SSA\n                                                if (0xc2f8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc314) {\n                                                    // Lo  [27] HANGUL SYLLABLE SSAG..HANGUL SYLLABLE SSAH\n                                                    if (0xc2f9 <= code && code <= 0xc313) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SSAE\n                                                    if (0xc314 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc368) {\n                                        if (code < 0xc331) {\n                                            if (code < 0xc330) {\n                                                // Lo  [27] HANGUL SYLLABLE SSAEG..HANGUL SYLLABLE SSAEH\n                                                if (0xc315 <= code && code <= 0xc32f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE SSYA\n                                                if (0xc330 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc34c) {\n                                                // Lo  [27] HANGUL SYLLABLE SSYAG..HANGUL SYLLABLE SSYAH\n                                                if (0xc331 <= code && code <= 0xc34b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc34d) {\n                                                    // Lo       HANGUL SYLLABLE SSYAE\n                                                    if (0xc34c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SSYAEG..HANGUL SYLLABLE SSYAEH\n                                                    if (0xc34d <= code && code <= 0xc367) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc385) {\n                                            if (code < 0xc369) {\n                                                // Lo       HANGUL SYLLABLE SSEO\n                                                if (0xc368 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc384) {\n                                                    // Lo  [27] HANGUL SYLLABLE SSEOG..HANGUL SYLLABLE SSEOH\n                                                    if (0xc369 <= code && code <= 0xc383) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SSE\n                                                    if (0xc384 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc3a0) {\n                                                // Lo  [27] HANGUL SYLLABLE SSEG..HANGUL SYLLABLE SSEH\n                                                if (0xc385 <= code && code <= 0xc39f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc3a1) {\n                                                    // Lo       HANGUL SYLLABLE SSYEO\n                                                    if (0xc3a0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SSYEOG..HANGUL SYLLABLE SSYEOH\n                                                    if (0xc3a1 <= code && code <= 0xc3bb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0xc609) {\n                            if (code < 0xc4d5) {\n                                if (code < 0xc448) {\n                                    if (code < 0xc3f5) {\n                                        if (code < 0xc3d8) {\n                                            if (code < 0xc3bd) {\n                                                // Lo       HANGUL SYLLABLE SSYE\n                                                if (0xc3bc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE SSYEG..HANGUL SYLLABLE SSYEH\n                                                if (0xc3bd <= code && code <= 0xc3d7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc3d9) {\n                                                // Lo       HANGUL SYLLABLE SSO\n                                                if (0xc3d8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc3f4) {\n                                                    // Lo  [27] HANGUL SYLLABLE SSOG..HANGUL SYLLABLE SSOH\n                                                    if (0xc3d9 <= code && code <= 0xc3f3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SSWA\n                                                    if (0xc3f4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc411) {\n                                            if (code < 0xc410) {\n                                                // Lo  [27] HANGUL SYLLABLE SSWAG..HANGUL SYLLABLE SSWAH\n                                                if (0xc3f5 <= code && code <= 0xc40f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE SSWAE\n                                                if (0xc410 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc42c) {\n                                                // Lo  [27] HANGUL SYLLABLE SSWAEG..HANGUL SYLLABLE SSWAEH\n                                                if (0xc411 <= code && code <= 0xc42b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc42d) {\n                                                    // Lo       HANGUL SYLLABLE SSOE\n                                                    if (0xc42c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SSOEG..HANGUL SYLLABLE SSOEH\n                                                    if (0xc42d <= code && code <= 0xc447) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc481) {\n                                        if (code < 0xc464) {\n                                            if (code < 0xc449) {\n                                                // Lo       HANGUL SYLLABLE SSYO\n                                                if (0xc448 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE SSYOG..HANGUL SYLLABLE SSYOH\n                                                if (0xc449 <= code && code <= 0xc463) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc465) {\n                                                // Lo       HANGUL SYLLABLE SSU\n                                                if (0xc464 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc480) {\n                                                    // Lo  [27] HANGUL SYLLABLE SSUG..HANGUL SYLLABLE SSUH\n                                                    if (0xc465 <= code && code <= 0xc47f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SSWEO\n                                                    if (0xc480 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc4b8) {\n                                            if (code < 0xc49c) {\n                                                // Lo  [27] HANGUL SYLLABLE SSWEOG..HANGUL SYLLABLE SSWEOH\n                                                if (0xc481 <= code && code <= 0xc49b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc49d) {\n                                                    // Lo       HANGUL SYLLABLE SSWE\n                                                    if (0xc49c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SSWEG..HANGUL SYLLABLE SSWEH\n                                                    if (0xc49d <= code && code <= 0xc4b7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc4b9) {\n                                                // Lo       HANGUL SYLLABLE SSWI\n                                                if (0xc4b8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc4d4) {\n                                                    // Lo  [27] HANGUL SYLLABLE SSWIG..HANGUL SYLLABLE SSWIH\n                                                    if (0xc4b9 <= code && code <= 0xc4d3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE SSYU\n                                                    if (0xc4d4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xc57c) {\n                                    if (code < 0xc528) {\n                                        if (code < 0xc4f1) {\n                                            if (code < 0xc4f0) {\n                                                // Lo  [27] HANGUL SYLLABLE SSYUG..HANGUL SYLLABLE SSYUH\n                                                if (0xc4d5 <= code && code <= 0xc4ef) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE SSEU\n                                                if (0xc4f0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc50c) {\n                                                // Lo  [27] HANGUL SYLLABLE SSEUG..HANGUL SYLLABLE SSEUH\n                                                if (0xc4f1 <= code && code <= 0xc50b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc50d) {\n                                                    // Lo       HANGUL SYLLABLE SSYI\n                                                    if (0xc50c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE SSYIG..HANGUL SYLLABLE SSYIH\n                                                    if (0xc50d <= code && code <= 0xc527) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc545) {\n                                            if (code < 0xc529) {\n                                                // Lo       HANGUL SYLLABLE SSI\n                                                if (0xc528 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc544) {\n                                                    // Lo  [27] HANGUL SYLLABLE SSIG..HANGUL SYLLABLE SSIH\n                                                    if (0xc529 <= code && code <= 0xc543) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE A\n                                                    if (0xc544 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc560) {\n                                                // Lo  [27] HANGUL SYLLABLE AG..HANGUL SYLLABLE AH\n                                                if (0xc545 <= code && code <= 0xc55f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc561) {\n                                                    // Lo       HANGUL SYLLABLE AE\n                                                    if (0xc560 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE AEG..HANGUL SYLLABLE AEH\n                                                    if (0xc561 <= code && code <= 0xc57b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc5b5) {\n                                        if (code < 0xc598) {\n                                            if (code < 0xc57d) {\n                                                // Lo       HANGUL SYLLABLE YA\n                                                if (0xc57c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE YAG..HANGUL SYLLABLE YAH\n                                                if (0xc57d <= code && code <= 0xc597) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc599) {\n                                                // Lo       HANGUL SYLLABLE YAE\n                                                if (0xc598 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc5b4) {\n                                                    // Lo  [27] HANGUL SYLLABLE YAEG..HANGUL SYLLABLE YAEH\n                                                    if (0xc599 <= code && code <= 0xc5b3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE EO\n                                                    if (0xc5b4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc5ec) {\n                                            if (code < 0xc5d0) {\n                                                // Lo  [27] HANGUL SYLLABLE EOG..HANGUL SYLLABLE EOH\n                                                if (0xc5b5 <= code && code <= 0xc5cf) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc5d1) {\n                                                    // Lo       HANGUL SYLLABLE E\n                                                    if (0xc5d0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE EG..HANGUL SYLLABLE EH\n                                                    if (0xc5d1 <= code && code <= 0xc5eb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc5ed) {\n                                                // Lo       HANGUL SYLLABLE YEO\n                                                if (0xc5ec === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc608) {\n                                                    // Lo  [27] HANGUL SYLLABLE YEOG..HANGUL SYLLABLE YEOH\n                                                    if (0xc5ed <= code && code <= 0xc607) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE YE\n                                                    if (0xc608 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xc73c) {\n                                if (code < 0xc695) {\n                                    if (code < 0xc65c) {\n                                        if (code < 0xc625) {\n                                            if (code < 0xc624) {\n                                                // Lo  [27] HANGUL SYLLABLE YEG..HANGUL SYLLABLE YEH\n                                                if (0xc609 <= code && code <= 0xc623) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE O\n                                                if (0xc624 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc640) {\n                                                // Lo  [27] HANGUL SYLLABLE OG..HANGUL SYLLABLE OH\n                                                if (0xc625 <= code && code <= 0xc63f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc641) {\n                                                    // Lo       HANGUL SYLLABLE WA\n                                                    if (0xc640 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE WAG..HANGUL SYLLABLE WAH\n                                                    if (0xc641 <= code && code <= 0xc65b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc678) {\n                                            if (code < 0xc65d) {\n                                                // Lo       HANGUL SYLLABLE WAE\n                                                if (0xc65c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE WAEG..HANGUL SYLLABLE WAEH\n                                                if (0xc65d <= code && code <= 0xc677) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc679) {\n                                                // Lo       HANGUL SYLLABLE OE\n                                                if (0xc678 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc694) {\n                                                    // Lo  [27] HANGUL SYLLABLE OEG..HANGUL SYLLABLE OEH\n                                                    if (0xc679 <= code && code <= 0xc693) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE YO\n                                                    if (0xc694 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc6e8) {\n                                        if (code < 0xc6b1) {\n                                            if (code < 0xc6b0) {\n                                                // Lo  [27] HANGUL SYLLABLE YOG..HANGUL SYLLABLE YOH\n                                                if (0xc695 <= code && code <= 0xc6af) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE U\n                                                if (0xc6b0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc6cc) {\n                                                // Lo  [27] HANGUL SYLLABLE UG..HANGUL SYLLABLE UH\n                                                if (0xc6b1 <= code && code <= 0xc6cb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc6cd) {\n                                                    // Lo       HANGUL SYLLABLE WEO\n                                                    if (0xc6cc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE WEOG..HANGUL SYLLABLE WEOH\n                                                    if (0xc6cd <= code && code <= 0xc6e7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc705) {\n                                            if (code < 0xc6e9) {\n                                                // Lo       HANGUL SYLLABLE WE\n                                                if (0xc6e8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc704) {\n                                                    // Lo  [27] HANGUL SYLLABLE WEG..HANGUL SYLLABLE WEH\n                                                    if (0xc6e9 <= code && code <= 0xc703) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE WI\n                                                    if (0xc704 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc720) {\n                                                // Lo  [27] HANGUL SYLLABLE WIG..HANGUL SYLLABLE WIH\n                                                if (0xc705 <= code && code <= 0xc71f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc721) {\n                                                    // Lo       HANGUL SYLLABLE YU\n                                                    if (0xc720 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE YUG..HANGUL SYLLABLE YUH\n                                                    if (0xc721 <= code && code <= 0xc73b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xc7c9) {\n                                    if (code < 0xc775) {\n                                        if (code < 0xc758) {\n                                            if (code < 0xc73d) {\n                                                // Lo       HANGUL SYLLABLE EU\n                                                if (0xc73c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE EUG..HANGUL SYLLABLE EUH\n                                                if (0xc73d <= code && code <= 0xc757) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc759) {\n                                                // Lo       HANGUL SYLLABLE YI\n                                                if (0xc758 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc774) {\n                                                    // Lo  [27] HANGUL SYLLABLE YIG..HANGUL SYLLABLE YIH\n                                                    if (0xc759 <= code && code <= 0xc773) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE I\n                                                    if (0xc774 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc7ac) {\n                                            if (code < 0xc790) {\n                                                // Lo  [27] HANGUL SYLLABLE IG..HANGUL SYLLABLE IH\n                                                if (0xc775 <= code && code <= 0xc78f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc791) {\n                                                    // Lo       HANGUL SYLLABLE JA\n                                                    if (0xc790 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JAG..HANGUL SYLLABLE JAH\n                                                    if (0xc791 <= code && code <= 0xc7ab) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc7ad) {\n                                                // Lo       HANGUL SYLLABLE JAE\n                                                if (0xc7ac === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc7c8) {\n                                                    // Lo  [27] HANGUL SYLLABLE JAEG..HANGUL SYLLABLE JAEH\n                                                    if (0xc7ad <= code && code <= 0xc7c7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JYA\n                                                    if (0xc7c8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc81c) {\n                                        if (code < 0xc7e5) {\n                                            if (code < 0xc7e4) {\n                                                // Lo  [27] HANGUL SYLLABLE JYAG..HANGUL SYLLABLE JYAH\n                                                if (0xc7c9 <= code && code <= 0xc7e3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE JYAE\n                                                if (0xc7e4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc800) {\n                                                // Lo  [27] HANGUL SYLLABLE JYAEG..HANGUL SYLLABLE JYAEH\n                                                if (0xc7e5 <= code && code <= 0xc7ff) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc801) {\n                                                    // Lo       HANGUL SYLLABLE JEO\n                                                    if (0xc800 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JEOG..HANGUL SYLLABLE JEOH\n                                                    if (0xc801 <= code && code <= 0xc81b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc839) {\n                                            if (code < 0xc81d) {\n                                                // Lo       HANGUL SYLLABLE JE\n                                                if (0xc81c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc838) {\n                                                    // Lo  [27] HANGUL SYLLABLE JEG..HANGUL SYLLABLE JEH\n                                                    if (0xc81d <= code && code <= 0xc837) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JYEO\n                                                    if (0xc838 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc854) {\n                                                // Lo  [27] HANGUL SYLLABLE JYEOG..HANGUL SYLLABLE JYEOH\n                                                if (0xc839 <= code && code <= 0xc853) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc855) {\n                                                    // Lo       HANGUL SYLLABLE JYE\n                                                    if (0xc854 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JYEG..HANGUL SYLLABLE JYEH\n                                                    if (0xc855 <= code && code <= 0xc86f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0xcd24) {\n                        if (code < 0xcabd) {\n                            if (code < 0xc989) {\n                                if (code < 0xc8fc) {\n                                    if (code < 0xc8a9) {\n                                        if (code < 0xc88c) {\n                                            if (code < 0xc871) {\n                                                // Lo       HANGUL SYLLABLE JO\n                                                if (0xc870 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE JOG..HANGUL SYLLABLE JOH\n                                                if (0xc871 <= code && code <= 0xc88b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc88d) {\n                                                // Lo       HANGUL SYLLABLE JWA\n                                                if (0xc88c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc8a8) {\n                                                    // Lo  [27] HANGUL SYLLABLE JWAG..HANGUL SYLLABLE JWAH\n                                                    if (0xc88d <= code && code <= 0xc8a7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JWAE\n                                                    if (0xc8a8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc8c5) {\n                                            if (code < 0xc8c4) {\n                                                // Lo  [27] HANGUL SYLLABLE JWAEG..HANGUL SYLLABLE JWAEH\n                                                if (0xc8a9 <= code && code <= 0xc8c3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE JOE\n                                                if (0xc8c4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc8e0) {\n                                                // Lo  [27] HANGUL SYLLABLE JOEG..HANGUL SYLLABLE JOEH\n                                                if (0xc8c5 <= code && code <= 0xc8df) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc8e1) {\n                                                    // Lo       HANGUL SYLLABLE JYO\n                                                    if (0xc8e0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JYOG..HANGUL SYLLABLE JYOH\n                                                    if (0xc8e1 <= code && code <= 0xc8fb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xc935) {\n                                        if (code < 0xc918) {\n                                            if (code < 0xc8fd) {\n                                                // Lo       HANGUL SYLLABLE JU\n                                                if (0xc8fc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE JUG..HANGUL SYLLABLE JUH\n                                                if (0xc8fd <= code && code <= 0xc917) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc919) {\n                                                // Lo       HANGUL SYLLABLE JWEO\n                                                if (0xc918 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc934) {\n                                                    // Lo  [27] HANGUL SYLLABLE JWEOG..HANGUL SYLLABLE JWEOH\n                                                    if (0xc919 <= code && code <= 0xc933) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JWE\n                                                    if (0xc934 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc96c) {\n                                            if (code < 0xc950) {\n                                                // Lo  [27] HANGUL SYLLABLE JWEG..HANGUL SYLLABLE JWEH\n                                                if (0xc935 <= code && code <= 0xc94f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc951) {\n                                                    // Lo       HANGUL SYLLABLE JWI\n                                                    if (0xc950 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JWIG..HANGUL SYLLABLE JWIH\n                                                    if (0xc951 <= code && code <= 0xc96b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc96d) {\n                                                // Lo       HANGUL SYLLABLE JYU\n                                                if (0xc96c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc988) {\n                                                    // Lo  [27] HANGUL SYLLABLE JYUG..HANGUL SYLLABLE JYUH\n                                                    if (0xc96d <= code && code <= 0xc987) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JEU\n                                                    if (0xc988 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xca30) {\n                                    if (code < 0xc9dc) {\n                                        if (code < 0xc9a5) {\n                                            if (code < 0xc9a4) {\n                                                // Lo  [27] HANGUL SYLLABLE JEUG..HANGUL SYLLABLE JEUH\n                                                if (0xc989 <= code && code <= 0xc9a3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE JYI\n                                                if (0xc9a4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xc9c0) {\n                                                // Lo  [27] HANGUL SYLLABLE JYIG..HANGUL SYLLABLE JYIH\n                                                if (0xc9a5 <= code && code <= 0xc9bf) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc9c1) {\n                                                    // Lo       HANGUL SYLLABLE JI\n                                                    if (0xc9c0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JIG..HANGUL SYLLABLE JIH\n                                                    if (0xc9c1 <= code && code <= 0xc9db) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xc9f9) {\n                                            if (code < 0xc9dd) {\n                                                // Lo       HANGUL SYLLABLE JJA\n                                                if (0xc9dc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xc9f8) {\n                                                    // Lo  [27] HANGUL SYLLABLE JJAG..HANGUL SYLLABLE JJAH\n                                                    if (0xc9dd <= code && code <= 0xc9f7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JJAE\n                                                    if (0xc9f8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xca14) {\n                                                // Lo  [27] HANGUL SYLLABLE JJAEG..HANGUL SYLLABLE JJAEH\n                                                if (0xc9f9 <= code && code <= 0xca13) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xca15) {\n                                                    // Lo       HANGUL SYLLABLE JJYA\n                                                    if (0xca14 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JJYAG..HANGUL SYLLABLE JJYAH\n                                                    if (0xca15 <= code && code <= 0xca2f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xca69) {\n                                        if (code < 0xca4c) {\n                                            if (code < 0xca31) {\n                                                // Lo       HANGUL SYLLABLE JJYAE\n                                                if (0xca30 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE JJYAEG..HANGUL SYLLABLE JJYAEH\n                                                if (0xca31 <= code && code <= 0xca4b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xca4d) {\n                                                // Lo       HANGUL SYLLABLE JJEO\n                                                if (0xca4c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xca68) {\n                                                    // Lo  [27] HANGUL SYLLABLE JJEOG..HANGUL SYLLABLE JJEOH\n                                                    if (0xca4d <= code && code <= 0xca67) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JJE\n                                                    if (0xca68 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcaa0) {\n                                            if (code < 0xca84) {\n                                                // Lo  [27] HANGUL SYLLABLE JJEG..HANGUL SYLLABLE JJEH\n                                                if (0xca69 <= code && code <= 0xca83) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xca85) {\n                                                    // Lo       HANGUL SYLLABLE JJYEO\n                                                    if (0xca84 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JJYEOG..HANGUL SYLLABLE JJYEOH\n                                                    if (0xca85 <= code && code <= 0xca9f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcaa1) {\n                                                // Lo       HANGUL SYLLABLE JJYE\n                                                if (0xcaa0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcabc) {\n                                                    // Lo  [27] HANGUL SYLLABLE JJYEG..HANGUL SYLLABLE JJYEH\n                                                    if (0xcaa1 <= code && code <= 0xcabb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JJO\n                                                    if (0xcabc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xcbf0) {\n                                if (code < 0xcb49) {\n                                    if (code < 0xcb10) {\n                                        if (code < 0xcad9) {\n                                            if (code < 0xcad8) {\n                                                // Lo  [27] HANGUL SYLLABLE JJOG..HANGUL SYLLABLE JJOH\n                                                if (0xcabd <= code && code <= 0xcad7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE JJWA\n                                                if (0xcad8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcaf4) {\n                                                // Lo  [27] HANGUL SYLLABLE JJWAG..HANGUL SYLLABLE JJWAH\n                                                if (0xcad9 <= code && code <= 0xcaf3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcaf5) {\n                                                    // Lo       HANGUL SYLLABLE JJWAE\n                                                    if (0xcaf4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JJWAEG..HANGUL SYLLABLE JJWAEH\n                                                    if (0xcaf5 <= code && code <= 0xcb0f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcb2c) {\n                                            if (code < 0xcb11) {\n                                                // Lo       HANGUL SYLLABLE JJOE\n                                                if (0xcb10 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE JJOEG..HANGUL SYLLABLE JJOEH\n                                                if (0xcb11 <= code && code <= 0xcb2b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcb2d) {\n                                                // Lo       HANGUL SYLLABLE JJYO\n                                                if (0xcb2c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcb48) {\n                                                    // Lo  [27] HANGUL SYLLABLE JJYOG..HANGUL SYLLABLE JJYOH\n                                                    if (0xcb2d <= code && code <= 0xcb47) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JJU\n                                                    if (0xcb48 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xcb9c) {\n                                        if (code < 0xcb65) {\n                                            if (code < 0xcb64) {\n                                                // Lo  [27] HANGUL SYLLABLE JJUG..HANGUL SYLLABLE JJUH\n                                                if (0xcb49 <= code && code <= 0xcb63) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE JJWEO\n                                                if (0xcb64 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcb80) {\n                                                // Lo  [27] HANGUL SYLLABLE JJWEOG..HANGUL SYLLABLE JJWEOH\n                                                if (0xcb65 <= code && code <= 0xcb7f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcb81) {\n                                                    // Lo       HANGUL SYLLABLE JJWE\n                                                    if (0xcb80 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JJWEG..HANGUL SYLLABLE JJWEH\n                                                    if (0xcb81 <= code && code <= 0xcb9b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcbb9) {\n                                            if (code < 0xcb9d) {\n                                                // Lo       HANGUL SYLLABLE JJWI\n                                                if (0xcb9c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcbb8) {\n                                                    // Lo  [27] HANGUL SYLLABLE JJWIG..HANGUL SYLLABLE JJWIH\n                                                    if (0xcb9d <= code && code <= 0xcbb7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE JJYU\n                                                    if (0xcbb8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcbd4) {\n                                                // Lo  [27] HANGUL SYLLABLE JJYUG..HANGUL SYLLABLE JJYUH\n                                                if (0xcbb9 <= code && code <= 0xcbd3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcbd5) {\n                                                    // Lo       HANGUL SYLLABLE JJEU\n                                                    if (0xcbd4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE JJEUG..HANGUL SYLLABLE JJEUH\n                                                    if (0xcbd5 <= code && code <= 0xcbef) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xcc7d) {\n                                    if (code < 0xcc29) {\n                                        if (code < 0xcc0c) {\n                                            if (code < 0xcbf1) {\n                                                // Lo       HANGUL SYLLABLE JJYI\n                                                if (0xcbf0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE JJYIG..HANGUL SYLLABLE JJYIH\n                                                if (0xcbf1 <= code && code <= 0xcc0b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcc0d) {\n                                                // Lo       HANGUL SYLLABLE JJI\n                                                if (0xcc0c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcc28) {\n                                                    // Lo  [27] HANGUL SYLLABLE JJIG..HANGUL SYLLABLE JJIH\n                                                    if (0xcc0d <= code && code <= 0xcc27) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE CA\n                                                    if (0xcc28 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcc60) {\n                                            if (code < 0xcc44) {\n                                                // Lo  [27] HANGUL SYLLABLE CAG..HANGUL SYLLABLE CAH\n                                                if (0xcc29 <= code && code <= 0xcc43) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcc45) {\n                                                    // Lo       HANGUL SYLLABLE CAE\n                                                    if (0xcc44 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE CAEG..HANGUL SYLLABLE CAEH\n                                                    if (0xcc45 <= code && code <= 0xcc5f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcc61) {\n                                                // Lo       HANGUL SYLLABLE CYA\n                                                if (0xcc60 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcc7c) {\n                                                    // Lo  [27] HANGUL SYLLABLE CYAG..HANGUL SYLLABLE CYAH\n                                                    if (0xcc61 <= code && code <= 0xcc7b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE CYAE\n                                                    if (0xcc7c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xccd0) {\n                                        if (code < 0xcc99) {\n                                            if (code < 0xcc98) {\n                                                // Lo  [27] HANGUL SYLLABLE CYAEG..HANGUL SYLLABLE CYAEH\n                                                if (0xcc7d <= code && code <= 0xcc97) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE CEO\n                                                if (0xcc98 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xccb4) {\n                                                // Lo  [27] HANGUL SYLLABLE CEOG..HANGUL SYLLABLE CEOH\n                                                if (0xcc99 <= code && code <= 0xccb3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xccb5) {\n                                                    // Lo       HANGUL SYLLABLE CE\n                                                    if (0xccb4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE CEG..HANGUL SYLLABLE CEH\n                                                    if (0xccb5 <= code && code <= 0xcccf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcced) {\n                                            if (code < 0xccd1) {\n                                                // Lo       HANGUL SYLLABLE CYEO\n                                                if (0xccd0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xccec) {\n                                                    // Lo  [27] HANGUL SYLLABLE CYEOG..HANGUL SYLLABLE CYEOH\n                                                    if (0xccd1 <= code && code <= 0xcceb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE CYE\n                                                    if (0xccec === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcd08) {\n                                                // Lo  [27] HANGUL SYLLABLE CYEG..HANGUL SYLLABLE CYEH\n                                                if (0xcced <= code && code <= 0xcd07) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcd09) {\n                                                    // Lo       HANGUL SYLLABLE CO\n                                                    if (0xcd08 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE COG..HANGUL SYLLABLE COH\n                                                    if (0xcd09 <= code && code <= 0xcd23) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0xcf71) {\n                            if (code < 0xce3d) {\n                                if (code < 0xcdb0) {\n                                    if (code < 0xcd5d) {\n                                        if (code < 0xcd40) {\n                                            if (code < 0xcd25) {\n                                                // Lo       HANGUL SYLLABLE CWA\n                                                if (0xcd24 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE CWAG..HANGUL SYLLABLE CWAH\n                                                if (0xcd25 <= code && code <= 0xcd3f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcd41) {\n                                                // Lo       HANGUL SYLLABLE CWAE\n                                                if (0xcd40 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcd5c) {\n                                                    // Lo  [27] HANGUL SYLLABLE CWAEG..HANGUL SYLLABLE CWAEH\n                                                    if (0xcd41 <= code && code <= 0xcd5b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE COE\n                                                    if (0xcd5c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcd79) {\n                                            if (code < 0xcd78) {\n                                                // Lo  [27] HANGUL SYLLABLE COEG..HANGUL SYLLABLE COEH\n                                                if (0xcd5d <= code && code <= 0xcd77) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE CYO\n                                                if (0xcd78 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcd94) {\n                                                // Lo  [27] HANGUL SYLLABLE CYOG..HANGUL SYLLABLE CYOH\n                                                if (0xcd79 <= code && code <= 0xcd93) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcd95) {\n                                                    // Lo       HANGUL SYLLABLE CU\n                                                    if (0xcd94 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE CUG..HANGUL SYLLABLE CUH\n                                                    if (0xcd95 <= code && code <= 0xcdaf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xcde9) {\n                                        if (code < 0xcdcc) {\n                                            if (code < 0xcdb1) {\n                                                // Lo       HANGUL SYLLABLE CWEO\n                                                if (0xcdb0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE CWEOG..HANGUL SYLLABLE CWEOH\n                                                if (0xcdb1 <= code && code <= 0xcdcb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcdcd) {\n                                                // Lo       HANGUL SYLLABLE CWE\n                                                if (0xcdcc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcde8) {\n                                                    // Lo  [27] HANGUL SYLLABLE CWEG..HANGUL SYLLABLE CWEH\n                                                    if (0xcdcd <= code && code <= 0xcde7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE CWI\n                                                    if (0xcde8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xce20) {\n                                            if (code < 0xce04) {\n                                                // Lo  [27] HANGUL SYLLABLE CWIG..HANGUL SYLLABLE CWIH\n                                                if (0xcde9 <= code && code <= 0xce03) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xce05) {\n                                                    // Lo       HANGUL SYLLABLE CYU\n                                                    if (0xce04 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE CYUG..HANGUL SYLLABLE CYUH\n                                                    if (0xce05 <= code && code <= 0xce1f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xce21) {\n                                                // Lo       HANGUL SYLLABLE CEU\n                                                if (0xce20 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xce3c) {\n                                                    // Lo  [27] HANGUL SYLLABLE CEUG..HANGUL SYLLABLE CEUH\n                                                    if (0xce21 <= code && code <= 0xce3b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE CYI\n                                                    if (0xce3c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xcee4) {\n                                    if (code < 0xce90) {\n                                        if (code < 0xce59) {\n                                            if (code < 0xce58) {\n                                                // Lo  [27] HANGUL SYLLABLE CYIG..HANGUL SYLLABLE CYIH\n                                                if (0xce3d <= code && code <= 0xce57) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE CI\n                                                if (0xce58 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xce74) {\n                                                // Lo  [27] HANGUL SYLLABLE CIG..HANGUL SYLLABLE CIH\n                                                if (0xce59 <= code && code <= 0xce73) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xce75) {\n                                                    // Lo       HANGUL SYLLABLE KA\n                                                    if (0xce74 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE KAG..HANGUL SYLLABLE KAH\n                                                    if (0xce75 <= code && code <= 0xce8f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcead) {\n                                            if (code < 0xce91) {\n                                                // Lo       HANGUL SYLLABLE KAE\n                                                if (0xce90 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xceac) {\n                                                    // Lo  [27] HANGUL SYLLABLE KAEG..HANGUL SYLLABLE KAEH\n                                                    if (0xce91 <= code && code <= 0xceab) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE KYA\n                                                    if (0xceac === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcec8) {\n                                                // Lo  [27] HANGUL SYLLABLE KYAG..HANGUL SYLLABLE KYAH\n                                                if (0xcead <= code && code <= 0xcec7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcec9) {\n                                                    // Lo       HANGUL SYLLABLE KYAE\n                                                    if (0xcec8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE KYAEG..HANGUL SYLLABLE KYAEH\n                                                    if (0xcec9 <= code && code <= 0xcee3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xcf1d) {\n                                        if (code < 0xcf00) {\n                                            if (code < 0xcee5) {\n                                                // Lo       HANGUL SYLLABLE KEO\n                                                if (0xcee4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE KEOG..HANGUL SYLLABLE KEOH\n                                                if (0xcee5 <= code && code <= 0xceff) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcf01) {\n                                                // Lo       HANGUL SYLLABLE KE\n                                                if (0xcf00 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcf1c) {\n                                                    // Lo  [27] HANGUL SYLLABLE KEG..HANGUL SYLLABLE KEH\n                                                    if (0xcf01 <= code && code <= 0xcf1b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE KYEO\n                                                    if (0xcf1c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcf54) {\n                                            if (code < 0xcf38) {\n                                                // Lo  [27] HANGUL SYLLABLE KYEOG..HANGUL SYLLABLE KYEOH\n                                                if (0xcf1d <= code && code <= 0xcf37) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcf39) {\n                                                    // Lo       HANGUL SYLLABLE KYE\n                                                    if (0xcf38 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE KYEG..HANGUL SYLLABLE KYEH\n                                                    if (0xcf39 <= code && code <= 0xcf53) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcf55) {\n                                                // Lo       HANGUL SYLLABLE KO\n                                                if (0xcf54 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcf70) {\n                                                    // Lo  [27] HANGUL SYLLABLE KOG..HANGUL SYLLABLE KOH\n                                                    if (0xcf55 <= code && code <= 0xcf6f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE KWA\n                                                    if (0xcf70 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xd0a4) {\n                                if (code < 0xcffd) {\n                                    if (code < 0xcfc4) {\n                                        if (code < 0xcf8d) {\n                                            if (code < 0xcf8c) {\n                                                // Lo  [27] HANGUL SYLLABLE KWAG..HANGUL SYLLABLE KWAH\n                                                if (0xcf71 <= code && code <= 0xcf8b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE KWAE\n                                                if (0xcf8c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcfa8) {\n                                                // Lo  [27] HANGUL SYLLABLE KWAEG..HANGUL SYLLABLE KWAEH\n                                                if (0xcf8d <= code && code <= 0xcfa7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcfa9) {\n                                                    // Lo       HANGUL SYLLABLE KOE\n                                                    if (0xcfa8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE KOEG..HANGUL SYLLABLE KOEH\n                                                    if (0xcfa9 <= code && code <= 0xcfc3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xcfe0) {\n                                            if (code < 0xcfc5) {\n                                                // Lo       HANGUL SYLLABLE KYO\n                                                if (0xcfc4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE KYOG..HANGUL SYLLABLE KYOH\n                                                if (0xcfc5 <= code && code <= 0xcfdf) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xcfe1) {\n                                                // Lo       HANGUL SYLLABLE KU\n                                                if (0xcfe0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xcffc) {\n                                                    // Lo  [27] HANGUL SYLLABLE KUG..HANGUL SYLLABLE KUH\n                                                    if (0xcfe1 <= code && code <= 0xcffb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE KWEO\n                                                    if (0xcffc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd050) {\n                                        if (code < 0xd019) {\n                                            if (code < 0xd018) {\n                                                // Lo  [27] HANGUL SYLLABLE KWEOG..HANGUL SYLLABLE KWEOH\n                                                if (0xcffd <= code && code <= 0xd017) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE KWE\n                                                if (0xd018 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd034) {\n                                                // Lo  [27] HANGUL SYLLABLE KWEG..HANGUL SYLLABLE KWEH\n                                                if (0xd019 <= code && code <= 0xd033) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd035) {\n                                                    // Lo       HANGUL SYLLABLE KWI\n                                                    if (0xd034 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE KWIG..HANGUL SYLLABLE KWIH\n                                                    if (0xd035 <= code && code <= 0xd04f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd06d) {\n                                            if (code < 0xd051) {\n                                                // Lo       HANGUL SYLLABLE KYU\n                                                if (0xd050 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd06c) {\n                                                    // Lo  [27] HANGUL SYLLABLE KYUG..HANGUL SYLLABLE KYUH\n                                                    if (0xd051 <= code && code <= 0xd06b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE KEU\n                                                    if (0xd06c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd088) {\n                                                // Lo  [27] HANGUL SYLLABLE KEUG..HANGUL SYLLABLE KEUH\n                                                if (0xd06d <= code && code <= 0xd087) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd089) {\n                                                    // Lo       HANGUL SYLLABLE KYI\n                                                    if (0xd088 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE KYIG..HANGUL SYLLABLE KYIH\n                                                    if (0xd089 <= code && code <= 0xd0a3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xd131) {\n                                    if (code < 0xd0dd) {\n                                        if (code < 0xd0c0) {\n                                            if (code < 0xd0a5) {\n                                                // Lo       HANGUL SYLLABLE KI\n                                                if (0xd0a4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE KIG..HANGUL SYLLABLE KIH\n                                                if (0xd0a5 <= code && code <= 0xd0bf) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd0c1) {\n                                                // Lo       HANGUL SYLLABLE TA\n                                                if (0xd0c0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd0dc) {\n                                                    // Lo  [27] HANGUL SYLLABLE TAG..HANGUL SYLLABLE TAH\n                                                    if (0xd0c1 <= code && code <= 0xd0db) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE TAE\n                                                    if (0xd0dc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd114) {\n                                            if (code < 0xd0f8) {\n                                                // Lo  [27] HANGUL SYLLABLE TAEG..HANGUL SYLLABLE TAEH\n                                                if (0xd0dd <= code && code <= 0xd0f7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd0f9) {\n                                                    // Lo       HANGUL SYLLABLE TYA\n                                                    if (0xd0f8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE TYAG..HANGUL SYLLABLE TYAH\n                                                    if (0xd0f9 <= code && code <= 0xd113) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd115) {\n                                                // Lo       HANGUL SYLLABLE TYAE\n                                                if (0xd114 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd130) {\n                                                    // Lo  [27] HANGUL SYLLABLE TYAEG..HANGUL SYLLABLE TYAEH\n                                                    if (0xd115 <= code && code <= 0xd12f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE TEO\n                                                    if (0xd130 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd184) {\n                                        if (code < 0xd14d) {\n                                            if (code < 0xd14c) {\n                                                // Lo  [27] HANGUL SYLLABLE TEOG..HANGUL SYLLABLE TEOH\n                                                if (0xd131 <= code && code <= 0xd14b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE TE\n                                                if (0xd14c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd168) {\n                                                // Lo  [27] HANGUL SYLLABLE TEG..HANGUL SYLLABLE TEH\n                                                if (0xd14d <= code && code <= 0xd167) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd169) {\n                                                    // Lo       HANGUL SYLLABLE TYEO\n                                                    if (0xd168 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE TYEOG..HANGUL SYLLABLE TYEOH\n                                                    if (0xd169 <= code && code <= 0xd183) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd1a1) {\n                                            if (code < 0xd185) {\n                                                // Lo       HANGUL SYLLABLE TYE\n                                                if (0xd184 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd1a0) {\n                                                    // Lo  [27] HANGUL SYLLABLE TYEG..HANGUL SYLLABLE TYEH\n                                                    if (0xd185 <= code && code <= 0xd19f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE TO\n                                                    if (0xd1a0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd1bc) {\n                                                // Lo  [27] HANGUL SYLLABLE TOG..HANGUL SYLLABLE TOH\n                                                if (0xd1a1 <= code && code <= 0xd1bb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd1bd) {\n                                                    // Lo       HANGUL SYLLABLE TWA\n                                                    if (0xd1bc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE TWAG..HANGUL SYLLABLE TWAH\n                                                    if (0xd1bd <= code && code <= 0xd1d7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (code < 0x1133b) {\n                    if (code < 0xd671) {\n                        if (code < 0xd424) {\n                            if (code < 0xd2f1) {\n                                if (code < 0xd264) {\n                                    if (code < 0xd211) {\n                                        if (code < 0xd1f4) {\n                                            if (code < 0xd1d9) {\n                                                // Lo       HANGUL SYLLABLE TWAE\n                                                if (0xd1d8 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE TWAEG..HANGUL SYLLABLE TWAEH\n                                                if (0xd1d9 <= code && code <= 0xd1f3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd1f5) {\n                                                // Lo       HANGUL SYLLABLE TOE\n                                                if (0xd1f4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd210) {\n                                                    // Lo  [27] HANGUL SYLLABLE TOEG..HANGUL SYLLABLE TOEH\n                                                    if (0xd1f5 <= code && code <= 0xd20f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE TYO\n                                                    if (0xd210 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd22d) {\n                                            if (code < 0xd22c) {\n                                                // Lo  [27] HANGUL SYLLABLE TYOG..HANGUL SYLLABLE TYOH\n                                                if (0xd211 <= code && code <= 0xd22b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE TU\n                                                if (0xd22c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd248) {\n                                                // Lo  [27] HANGUL SYLLABLE TUG..HANGUL SYLLABLE TUH\n                                                if (0xd22d <= code && code <= 0xd247) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd249) {\n                                                    // Lo       HANGUL SYLLABLE TWEO\n                                                    if (0xd248 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE TWEOG..HANGUL SYLLABLE TWEOH\n                                                    if (0xd249 <= code && code <= 0xd263) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd29d) {\n                                        if (code < 0xd280) {\n                                            if (code < 0xd265) {\n                                                // Lo       HANGUL SYLLABLE TWE\n                                                if (0xd264 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE TWEG..HANGUL SYLLABLE TWEH\n                                                if (0xd265 <= code && code <= 0xd27f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd281) {\n                                                // Lo       HANGUL SYLLABLE TWI\n                                                if (0xd280 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd29c) {\n                                                    // Lo  [27] HANGUL SYLLABLE TWIG..HANGUL SYLLABLE TWIH\n                                                    if (0xd281 <= code && code <= 0xd29b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE TYU\n                                                    if (0xd29c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd2d4) {\n                                            if (code < 0xd2b8) {\n                                                // Lo  [27] HANGUL SYLLABLE TYUG..HANGUL SYLLABLE TYUH\n                                                if (0xd29d <= code && code <= 0xd2b7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd2b9) {\n                                                    // Lo       HANGUL SYLLABLE TEU\n                                                    if (0xd2b8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE TEUG..HANGUL SYLLABLE TEUH\n                                                    if (0xd2b9 <= code && code <= 0xd2d3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd2d5) {\n                                                // Lo       HANGUL SYLLABLE TYI\n                                                if (0xd2d4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd2f0) {\n                                                    // Lo  [27] HANGUL SYLLABLE TYIG..HANGUL SYLLABLE TYIH\n                                                    if (0xd2d5 <= code && code <= 0xd2ef) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE TI\n                                                    if (0xd2f0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xd37d) {\n                                    if (code < 0xd344) {\n                                        if (code < 0xd30d) {\n                                            if (code < 0xd30c) {\n                                                // Lo  [27] HANGUL SYLLABLE TIG..HANGUL SYLLABLE TIH\n                                                if (0xd2f1 <= code && code <= 0xd30b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE PA\n                                                if (0xd30c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd328) {\n                                                // Lo  [27] HANGUL SYLLABLE PAG..HANGUL SYLLABLE PAH\n                                                if (0xd30d <= code && code <= 0xd327) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd329) {\n                                                    // Lo       HANGUL SYLLABLE PAE\n                                                    if (0xd328 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE PAEG..HANGUL SYLLABLE PAEH\n                                                    if (0xd329 <= code && code <= 0xd343) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd360) {\n                                            if (code < 0xd345) {\n                                                // Lo       HANGUL SYLLABLE PYA\n                                                if (0xd344 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE PYAG..HANGUL SYLLABLE PYAH\n                                                if (0xd345 <= code && code <= 0xd35f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd361) {\n                                                // Lo       HANGUL SYLLABLE PYAE\n                                                if (0xd360 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd37c) {\n                                                    // Lo  [27] HANGUL SYLLABLE PYAEG..HANGUL SYLLABLE PYAEH\n                                                    if (0xd361 <= code && code <= 0xd37b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE PEO\n                                                    if (0xd37c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd3d0) {\n                                        if (code < 0xd399) {\n                                            if (code < 0xd398) {\n                                                // Lo  [27] HANGUL SYLLABLE PEOG..HANGUL SYLLABLE PEOH\n                                                if (0xd37d <= code && code <= 0xd397) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE PE\n                                                if (0xd398 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd3b4) {\n                                                // Lo  [27] HANGUL SYLLABLE PEG..HANGUL SYLLABLE PEH\n                                                if (0xd399 <= code && code <= 0xd3b3) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd3b5) {\n                                                    // Lo       HANGUL SYLLABLE PYEO\n                                                    if (0xd3b4 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE PYEOG..HANGUL SYLLABLE PYEOH\n                                                    if (0xd3b5 <= code && code <= 0xd3cf) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd3ed) {\n                                            if (code < 0xd3d1) {\n                                                // Lo       HANGUL SYLLABLE PYE\n                                                if (0xd3d0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd3ec) {\n                                                    // Lo  [27] HANGUL SYLLABLE PYEG..HANGUL SYLLABLE PYEH\n                                                    if (0xd3d1 <= code && code <= 0xd3eb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE PO\n                                                    if (0xd3ec === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd408) {\n                                                // Lo  [27] HANGUL SYLLABLE POG..HANGUL SYLLABLE POH\n                                                if (0xd3ed <= code && code <= 0xd407) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd409) {\n                                                    // Lo       HANGUL SYLLABLE PWA\n                                                    if (0xd408 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE PWAG..HANGUL SYLLABLE PWAH\n                                                    if (0xd409 <= code && code <= 0xd423) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0xd53d) {\n                                if (code < 0xd4b0) {\n                                    if (code < 0xd45d) {\n                                        if (code < 0xd440) {\n                                            if (code < 0xd425) {\n                                                // Lo       HANGUL SYLLABLE PWAE\n                                                if (0xd424 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE PWAEG..HANGUL SYLLABLE PWAEH\n                                                if (0xd425 <= code && code <= 0xd43f) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd441) {\n                                                // Lo       HANGUL SYLLABLE POE\n                                                if (0xd440 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd45c) {\n                                                    // Lo  [27] HANGUL SYLLABLE POEG..HANGUL SYLLABLE POEH\n                                                    if (0xd441 <= code && code <= 0xd45b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE PYO\n                                                    if (0xd45c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd479) {\n                                            if (code < 0xd478) {\n                                                // Lo  [27] HANGUL SYLLABLE PYOG..HANGUL SYLLABLE PYOH\n                                                if (0xd45d <= code && code <= 0xd477) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE PU\n                                                if (0xd478 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd494) {\n                                                // Lo  [27] HANGUL SYLLABLE PUG..HANGUL SYLLABLE PUH\n                                                if (0xd479 <= code && code <= 0xd493) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd495) {\n                                                    // Lo       HANGUL SYLLABLE PWEO\n                                                    if (0xd494 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE PWEOG..HANGUL SYLLABLE PWEOH\n                                                    if (0xd495 <= code && code <= 0xd4af) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd4e9) {\n                                        if (code < 0xd4cc) {\n                                            if (code < 0xd4b1) {\n                                                // Lo       HANGUL SYLLABLE PWE\n                                                if (0xd4b0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE PWEG..HANGUL SYLLABLE PWEH\n                                                if (0xd4b1 <= code && code <= 0xd4cb) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd4cd) {\n                                                // Lo       HANGUL SYLLABLE PWI\n                                                if (0xd4cc === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd4e8) {\n                                                    // Lo  [27] HANGUL SYLLABLE PWIG..HANGUL SYLLABLE PWIH\n                                                    if (0xd4cd <= code && code <= 0xd4e7) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE PYU\n                                                    if (0xd4e8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd520) {\n                                            if (code < 0xd504) {\n                                                // Lo  [27] HANGUL SYLLABLE PYUG..HANGUL SYLLABLE PYUH\n                                                if (0xd4e9 <= code && code <= 0xd503) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd505) {\n                                                    // Lo       HANGUL SYLLABLE PEU\n                                                    if (0xd504 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE PEUG..HANGUL SYLLABLE PEUH\n                                                    if (0xd505 <= code && code <= 0xd51f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd521) {\n                                                // Lo       HANGUL SYLLABLE PYI\n                                                if (0xd520 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd53c) {\n                                                    // Lo  [27] HANGUL SYLLABLE PYIG..HANGUL SYLLABLE PYIH\n                                                    if (0xd521 <= code && code <= 0xd53b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE PI\n                                                    if (0xd53c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0xd5e4) {\n                                    if (code < 0xd590) {\n                                        if (code < 0xd559) {\n                                            if (code < 0xd558) {\n                                                // Lo  [27] HANGUL SYLLABLE PIG..HANGUL SYLLABLE PIH\n                                                if (0xd53d <= code && code <= 0xd557) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE HA\n                                                if (0xd558 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd574) {\n                                                // Lo  [27] HANGUL SYLLABLE HAG..HANGUL SYLLABLE HAH\n                                                if (0xd559 <= code && code <= 0xd573) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd575) {\n                                                    // Lo       HANGUL SYLLABLE HAE\n                                                    if (0xd574 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE HAEG..HANGUL SYLLABLE HAEH\n                                                    if (0xd575 <= code && code <= 0xd58f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd5ad) {\n                                            if (code < 0xd591) {\n                                                // Lo       HANGUL SYLLABLE HYA\n                                                if (0xd590 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd5ac) {\n                                                    // Lo  [27] HANGUL SYLLABLE HYAG..HANGUL SYLLABLE HYAH\n                                                    if (0xd591 <= code && code <= 0xd5ab) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE HYAE\n                                                    if (0xd5ac === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd5c8) {\n                                                // Lo  [27] HANGUL SYLLABLE HYAEG..HANGUL SYLLABLE HYAEH\n                                                if (0xd5ad <= code && code <= 0xd5c7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd5c9) {\n                                                    // Lo       HANGUL SYLLABLE HEO\n                                                    if (0xd5c8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE HEOG..HANGUL SYLLABLE HEOH\n                                                    if (0xd5c9 <= code && code <= 0xd5e3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd61d) {\n                                        if (code < 0xd600) {\n                                            if (code < 0xd5e5) {\n                                                // Lo       HANGUL SYLLABLE HE\n                                                if (0xd5e4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE HEG..HANGUL SYLLABLE HEH\n                                                if (0xd5e5 <= code && code <= 0xd5ff) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd601) {\n                                                // Lo       HANGUL SYLLABLE HYEO\n                                                if (0xd600 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd61c) {\n                                                    // Lo  [27] HANGUL SYLLABLE HYEOG..HANGUL SYLLABLE HYEOH\n                                                    if (0xd601 <= code && code <= 0xd61b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE HYE\n                                                    if (0xd61c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd654) {\n                                            if (code < 0xd638) {\n                                                // Lo  [27] HANGUL SYLLABLE HYEG..HANGUL SYLLABLE HYEH\n                                                if (0xd61d <= code && code <= 0xd637) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd639) {\n                                                    // Lo       HANGUL SYLLABLE HO\n                                                    if (0xd638 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE HOG..HANGUL SYLLABLE HOH\n                                                    if (0xd639 <= code && code <= 0xd653) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd655) {\n                                                // Lo       HANGUL SYLLABLE HWA\n                                                if (0xd654 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd670) {\n                                                    // Lo  [27] HANGUL SYLLABLE HWAG..HANGUL SYLLABLE HWAH\n                                                    if (0xd655 <= code && code <= 0xd66f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE HWAE\n                                                    if (0xd670 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x11000) {\n                            if (code < 0xd7b0) {\n                                if (code < 0xd6fd) {\n                                    if (code < 0xd6c4) {\n                                        if (code < 0xd68d) {\n                                            if (code < 0xd68c) {\n                                                // Lo  [27] HANGUL SYLLABLE HWAEG..HANGUL SYLLABLE HWAEH\n                                                if (0xd671 <= code && code <= 0xd68b) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE HOE\n                                                if (0xd68c === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd6a8) {\n                                                // Lo  [27] HANGUL SYLLABLE HOEG..HANGUL SYLLABLE HOEH\n                                                if (0xd68d <= code && code <= 0xd6a7) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd6a9) {\n                                                    // Lo       HANGUL SYLLABLE HYO\n                                                    if (0xd6a8 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE HYOG..HANGUL SYLLABLE HYOH\n                                                    if (0xd6a9 <= code && code <= 0xd6c3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd6e0) {\n                                            if (code < 0xd6c5) {\n                                                // Lo       HANGUL SYLLABLE HU\n                                                if (0xd6c4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [27] HANGUL SYLLABLE HUG..HANGUL SYLLABLE HUH\n                                                if (0xd6c5 <= code && code <= 0xd6df) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd6e1) {\n                                                // Lo       HANGUL SYLLABLE HWEO\n                                                if (0xd6e0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd6fc) {\n                                                    // Lo  [27] HANGUL SYLLABLE HWEOG..HANGUL SYLLABLE HWEOH\n                                                    if (0xd6e1 <= code && code <= 0xd6fb) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE HWE\n                                                    if (0xd6fc === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0xd750) {\n                                        if (code < 0xd719) {\n                                            if (code < 0xd718) {\n                                                // Lo  [27] HANGUL SYLLABLE HWEG..HANGUL SYLLABLE HWEH\n                                                if (0xd6fd <= code && code <= 0xd717) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                // Lo       HANGUL SYLLABLE HWI\n                                                if (0xd718 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd734) {\n                                                // Lo  [27] HANGUL SYLLABLE HWIG..HANGUL SYLLABLE HWIH\n                                                if (0xd719 <= code && code <= 0xd733) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd735) {\n                                                    // Lo       HANGUL SYLLABLE HYU\n                                                    if (0xd734 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE HYUG..HANGUL SYLLABLE HYUH\n                                                    if (0xd735 <= code && code <= 0xd74f) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xd76d) {\n                                            if (code < 0xd751) {\n                                                // Lo       HANGUL SYLLABLE HEU\n                                                if (0xd750 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.LV;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd76c) {\n                                                    // Lo  [27] HANGUL SYLLABLE HEUG..HANGUL SYLLABLE HEUH\n                                                    if (0xd751 <= code && code <= 0xd76b) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo       HANGUL SYLLABLE HYI\n                                                    if (0xd76c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xd788) {\n                                                // Lo  [27] HANGUL SYLLABLE HYIG..HANGUL SYLLABLE HYIH\n                                                if (0xd76d <= code && code <= 0xd787) {\n                                                    return boundaries_1.CLUSTER_BREAK.LVT;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xd789) {\n                                                    // Lo       HANGUL SYLLABLE HI\n                                                    if (0xd788 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.LV;\n                                                    }\n                                                }\n                                                else {\n                                                    // Lo  [27] HANGUL SYLLABLE HIG..HANGUL SYLLABLE HIH\n                                                    if (0xd789 <= code && code <= 0xd7a3) {\n                                                        return boundaries_1.CLUSTER_BREAK.LVT;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x10a01) {\n                                    if (code < 0xfeff) {\n                                        if (code < 0xfb1e) {\n                                            if (code < 0xd7cb) {\n                                                // Lo  [23] HANGUL JUNGSEONG O-YEO..HANGUL JUNGSEONG ARAEA-E\n                                                if (0xd7b0 <= code && code <= 0xd7c6) {\n                                                    return boundaries_1.CLUSTER_BREAK.V;\n                                                }\n                                            }\n                                            else {\n                                                // Lo  [49] HANGUL JONGSEONG NIEUN-RIEUL..HANGUL JONGSEONG PHIEUPH-THIEUTH\n                                                if (0xd7cb <= code && code <= 0xd7fb) {\n                                                    return boundaries_1.CLUSTER_BREAK.T;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xfe00) {\n                                                // Mn       HEBREW POINT JUDEO-SPANISH VARIKA\n                                                if (0xfb1e === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xfe20) {\n                                                    // Mn  [16] VARIATION SELECTOR-1..VARIATION SELECTOR-16\n                                                    if (0xfe00 <= code && code <= 0xfe0f) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [16] COMBINING LIGATURE LEFT HALF..COMBINING CYRILLIC TITLO RIGHT HALF\n                                                    if (0xfe20 <= code && code <= 0xfe2f) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x101fd) {\n                                            if (code < 0xff9e) {\n                                                // Cf       ZERO WIDTH NO-BREAK SPACE\n                                                if (0xfeff === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xfff0) {\n                                                    // Lm   [2] HALFWIDTH KATAKANA VOICED SOUND MARK..HALFWIDTH KATAKANA SEMI-VOICED SOUND MARK\n                                                    if (0xff9e <= code && code <= 0xff9f) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cn   [9] <reserved-FFF0>..<reserved-FFF8>\n                                                    // Cf   [3] INTERLINEAR ANNOTATION ANCHOR..INTERLINEAR ANNOTATION TERMINATOR\n                                                    if (0xfff0 <= code && code <= 0xfffb) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x102e0) {\n                                                // Mn       PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE\n                                                if (0x101fd === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x10376) {\n                                                    // Mn       COPTIC EPACT THOUSANDS MARK\n                                                    if (0x102e0 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [5] COMBINING OLD PERMIC LETTER AN..COMBINING OLD PERMIC LETTER SII\n                                                    if (0x10376 <= code && code <= 0x1037a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x10ae5) {\n                                        if (code < 0x10a0c) {\n                                            if (code < 0x10a05) {\n                                                // Mn   [3] KHAROSHTHI VOWEL SIGN I..KHAROSHTHI VOWEL SIGN VOCALIC R\n                                                if (0x10a01 <= code && code <= 0x10a03) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] KHAROSHTHI VOWEL SIGN E..KHAROSHTHI VOWEL SIGN O\n                                                if (0x10a05 <= code && code <= 0x10a06) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x10a38) {\n                                                // Mn   [4] KHAROSHTHI VOWEL LENGTH MARK..KHAROSHTHI SIGN VISARGA\n                                                if (0x10a0c <= code && code <= 0x10a0f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x10a3f) {\n                                                    // Mn   [3] KHAROSHTHI SIGN BAR ABOVE..KHAROSHTHI SIGN DOT BELOW\n                                                    if (0x10a38 <= code && code <= 0x10a3a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       KHAROSHTHI VIRAMA\n                                                    if (0x10a3f === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x10efd) {\n                                            if (code < 0x10d24) {\n                                                // Mn   [2] MANICHAEAN ABBREVIATION MARK ABOVE..MANICHAEAN ABBREVIATION MARK BELOW\n                                                if (0x10ae5 <= code && code <= 0x10ae6) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x10eab) {\n                                                    // Mn   [4] HANIFI ROHINGYA SIGN HARBAHAY..HANIFI ROHINGYA SIGN TASSI\n                                                    if (0x10d24 <= code && code <= 0x10d27) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] YEZIDI COMBINING HAMZA MARK..YEZIDI COMBINING MADDA MARK\n                                                    if (0x10eab <= code && code <= 0x10eac) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x10f46) {\n                                                // Mn   [3] ARABIC SMALL LOW WORD SAKTA..ARABIC SMALL LOW WORD MADDA\n                                                if (0x10efd <= code && code <= 0x10eff) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x10f82) {\n                                                    // Mn  [11] SOGDIAN COMBINING DOT BELOW..SOGDIAN COMBINING STROKE BELOW\n                                                    if (0x10f46 <= code && code <= 0x10f50) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] OLD UYGHUR COMBINING DOT ABOVE..OLD UYGHUR COMBINING TWO DOTS BELOW\n                                                    if (0x10f82 <= code && code <= 0x10f85) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x11180) {\n                                if (code < 0x110b7) {\n                                    if (code < 0x11073) {\n                                        if (code < 0x11002) {\n                                            // Mc       BRAHMI SIGN CANDRABINDU\n                                            if (0x11000 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       BRAHMI SIGN ANUSVARA\n                                            if (0x11001 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11038) {\n                                                // Mc       BRAHMI SIGN VISARGA\n                                                if (0x11002 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11070) {\n                                                    // Mn  [15] BRAHMI VOWEL SIGN AA..BRAHMI VIRAMA\n                                                    if (0x11038 <= code && code <= 0x11046) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       BRAHMI SIGN OLD TAMIL VIRAMA\n                                                    if (0x11070 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x11082) {\n                                            if (code < 0x1107f) {\n                                                // Mn   [2] BRAHMI VOWEL SIGN OLD TAMIL SHORT E..BRAHMI VOWEL SIGN OLD TAMIL SHORT O\n                                                if (0x11073 <= code && code <= 0x11074) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [3] BRAHMI NUMBER JOINER..KAITHI SIGN ANUSVARA\n                                                if (0x1107f <= code && code <= 0x11081) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x110b0) {\n                                                // Mc       KAITHI SIGN VISARGA\n                                                if (0x11082 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x110b3) {\n                                                    // Mc   [3] KAITHI VOWEL SIGN AA..KAITHI VOWEL SIGN II\n                                                    if (0x110b0 <= code && code <= 0x110b2) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] KAITHI VOWEL SIGN U..KAITHI VOWEL SIGN AI\n                                                    if (0x110b3 <= code && code <= 0x110b6) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11100) {\n                                        if (code < 0x110bd) {\n                                            if (code < 0x110b9) {\n                                                // Mc   [2] KAITHI VOWEL SIGN O..KAITHI VOWEL SIGN AU\n                                                if (0x110b7 <= code && code <= 0x110b8) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] KAITHI SIGN VIRAMA..KAITHI SIGN NUKTA\n                                                if (0x110b9 <= code && code <= 0x110ba) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x110c2) {\n                                                // Cf       KAITHI NUMBER SIGN\n                                                if (0x110bd === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       KAITHI VOWEL SIGN VOCALIC R\n                                                if (0x110c2 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Cf       KAITHI NUMBER SIGN ABOVE\n                                                if (0x110cd === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1112d) {\n                                            if (code < 0x11127) {\n                                                // Mn   [3] CHAKMA SIGN CANDRABINDU..CHAKMA SIGN VISARGA\n                                                if (0x11100 <= code && code <= 0x11102) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1112c) {\n                                                    // Mn   [5] CHAKMA VOWEL SIGN A..CHAKMA VOWEL SIGN UU\n                                                    if (0x11127 <= code && code <= 0x1112b) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       CHAKMA VOWEL SIGN E\n                                                    if (0x1112c === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11145) {\n                                                // Mn   [8] CHAKMA VOWEL SIGN AI..CHAKMA MAAYYAA\n                                                if (0x1112d <= code && code <= 0x11134) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11173) {\n                                                    // Mc   [2] CHAKMA VOWEL SIGN AA..CHAKMA VOWEL SIGN EI\n                                                    if (0x11145 <= code && code <= 0x11146) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       MAHAJANI SIGN NUKTA\n                                                    if (0x11173 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x11232) {\n                                    if (code < 0x111c2) {\n                                        if (code < 0x111b3) {\n                                            if (code < 0x11182) {\n                                                // Mn   [2] SHARADA SIGN CANDRABINDU..SHARADA SIGN ANUSVARA\n                                                if (0x11180 <= code && code <= 0x11181) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       SHARADA SIGN VISARGA\n                                                if (0x11182 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x111b6) {\n                                                // Mc   [3] SHARADA VOWEL SIGN AA..SHARADA VOWEL SIGN II\n                                                if (0x111b3 <= code && code <= 0x111b5) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x111bf) {\n                                                    // Mn   [9] SHARADA VOWEL SIGN U..SHARADA VOWEL SIGN O\n                                                    if (0x111b6 <= code && code <= 0x111be) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] SHARADA VOWEL SIGN AU..SHARADA SIGN VIRAMA\n                                                    if (0x111bf <= code && code <= 0x111c0) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x111cf) {\n                                            if (code < 0x111c9) {\n                                                // Lo   [2] SHARADA SIGN JIHVAMULIYA..SHARADA SIGN UPADHMANIYA\n                                                if (0x111c2 <= code && code <= 0x111c3) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x111ce) {\n                                                    // Mn   [4] SHARADA SANDHI MARK..SHARADA EXTRA SHORT VOWEL MARK\n                                                    if (0x111c9 <= code && code <= 0x111cc) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       SHARADA VOWEL SIGN PRISHTHAMATRA E\n                                                    if (0x111ce === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1122c) {\n                                                // Mn       SHARADA SIGN INVERTED CANDRABINDU\n                                                if (0x111cf === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1122f) {\n                                                    // Mc   [3] KHOJKI VOWEL SIGN AA..KHOJKI VOWEL SIGN II\n                                                    if (0x1122c <= code && code <= 0x1122e) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] KHOJKI VOWEL SIGN U..KHOJKI VOWEL SIGN AI\n                                                    if (0x1122f <= code && code <= 0x11231) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11241) {\n                                        if (code < 0x11235) {\n                                            if (code < 0x11234) {\n                                                // Mc   [2] KHOJKI VOWEL SIGN O..KHOJKI VOWEL SIGN AU\n                                                if (0x11232 <= code && code <= 0x11233) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       KHOJKI SIGN ANUSVARA\n                                                if (0x11234 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11236) {\n                                                // Mc       KHOJKI SIGN VIRAMA\n                                                if (0x11235 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1123e) {\n                                                    // Mn   [2] KHOJKI SIGN NUKTA..KHOJKI SIGN SHADDA\n                                                    if (0x11236 <= code && code <= 0x11237) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       KHOJKI SIGN SUKUN\n                                                    if (0x1123e === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x112e3) {\n                                            if (code < 0x112df) {\n                                                // Mn       KHOJKI VOWEL SIGN VOCALIC R\n                                                if (0x11241 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x112e0) {\n                                                    // Mn       KHUDAWADI SIGN ANUSVARA\n                                                    if (0x112df === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [3] KHUDAWADI VOWEL SIGN AA..KHUDAWADI VOWEL SIGN II\n                                                    if (0x112e0 <= code && code <= 0x112e2) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11300) {\n                                                // Mn   [8] KHUDAWADI VOWEL SIGN U..KHUDAWADI SIGN VIRAMA\n                                                if (0x112e3 <= code && code <= 0x112ea) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11302) {\n                                                    // Mn   [2] GRANTHA SIGN COMBINING ANUSVARA ABOVE..GRANTHA SIGN CANDRABINDU\n                                                    if (0x11300 <= code && code <= 0x11301) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] GRANTHA SIGN ANUSVARA..GRANTHA SIGN VISARGA\n                                                    if (0x11302 <= code && code <= 0x11303) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0x11a97) {\n                        if (code < 0x116ab) {\n                            if (code < 0x114b9) {\n                                if (code < 0x11370) {\n                                    if (code < 0x11347) {\n                                        if (code < 0x1133f) {\n                                            if (code < 0x1133e) {\n                                                // Mn   [2] COMBINING BINDU BELOW..GRANTHA SIGN NUKTA\n                                                if (0x1133b <= code && code <= 0x1133c) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       GRANTHA VOWEL SIGN AA\n                                                if (0x1133e === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11340) {\n                                                // Mc       GRANTHA VOWEL SIGN I\n                                                if (0x1133f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11341) {\n                                                    // Mn       GRANTHA VOWEL SIGN II\n                                                    if (0x11340 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [4] GRANTHA VOWEL SIGN U..GRANTHA VOWEL SIGN VOCALIC RR\n                                                    if (0x11341 <= code && code <= 0x11344) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x11357) {\n                                            if (code < 0x1134b) {\n                                                // Mc   [2] GRANTHA VOWEL SIGN EE..GRANTHA VOWEL SIGN AI\n                                                if (0x11347 <= code && code <= 0x11348) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [3] GRANTHA VOWEL SIGN OO..GRANTHA SIGN VIRAMA\n                                                if (0x1134b <= code && code <= 0x1134d) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11362) {\n                                                // Mc       GRANTHA AU LENGTH MARK\n                                                if (0x11357 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11366) {\n                                                    // Mc   [2] GRANTHA VOWEL SIGN VOCALIC L..GRANTHA VOWEL SIGN VOCALIC LL\n                                                    if (0x11362 <= code && code <= 0x11363) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [7] COMBINING GRANTHA DIGIT ZERO..COMBINING GRANTHA DIGIT SIX\n                                                    if (0x11366 <= code && code <= 0x1136c) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11445) {\n                                        if (code < 0x11438) {\n                                            if (code < 0x11435) {\n                                                // Mn   [5] COMBINING GRANTHA LETTER A..COMBINING GRANTHA LETTER PA\n                                                if (0x11370 <= code && code <= 0x11374) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [3] NEWA VOWEL SIGN AA..NEWA VOWEL SIGN II\n                                                if (0x11435 <= code && code <= 0x11437) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11440) {\n                                                // Mn   [8] NEWA VOWEL SIGN U..NEWA VOWEL SIGN AI\n                                                if (0x11438 <= code && code <= 0x1143f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11442) {\n                                                    // Mc   [2] NEWA VOWEL SIGN O..NEWA VOWEL SIGN AU\n                                                    if (0x11440 <= code && code <= 0x11441) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] NEWA SIGN VIRAMA..NEWA SIGN ANUSVARA\n                                                    if (0x11442 <= code && code <= 0x11444) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x114b0) {\n                                            if (code < 0x11446) {\n                                                // Mc       NEWA SIGN VISARGA\n                                                if (0x11445 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       NEWA SIGN NUKTA\n                                                if (0x11446 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mn       NEWA SANDHI MARK\n                                                if (0x1145e === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x114b1) {\n                                                // Mc       TIRHUTA VOWEL SIGN AA\n                                                if (0x114b0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x114b3) {\n                                                    // Mc   [2] TIRHUTA VOWEL SIGN I..TIRHUTA VOWEL SIGN II\n                                                    if (0x114b1 <= code && code <= 0x114b2) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [6] TIRHUTA VOWEL SIGN U..TIRHUTA VOWEL SIGN VOCALIC LL\n                                                    if (0x114b3 <= code && code <= 0x114b8) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x115b8) {\n                                    if (code < 0x114bf) {\n                                        if (code < 0x114bb) {\n                                            // Mc       TIRHUTA VOWEL SIGN E\n                                            if (0x114b9 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       TIRHUTA VOWEL SIGN SHORT E\n                                            if (0x114ba === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x114bd) {\n                                                // Mc   [2] TIRHUTA VOWEL SIGN AI..TIRHUTA VOWEL SIGN O\n                                                if (0x114bb <= code && code <= 0x114bc) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       TIRHUTA VOWEL SIGN SHORT O\n                                                if (0x114bd === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mc       TIRHUTA VOWEL SIGN AU\n                                                if (0x114be === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x115af) {\n                                            if (code < 0x114c1) {\n                                                // Mn   [2] TIRHUTA SIGN CANDRABINDU..TIRHUTA SIGN ANUSVARA\n                                                if (0x114bf <= code && code <= 0x114c0) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x114c2) {\n                                                    // Mc       TIRHUTA SIGN VISARGA\n                                                    if (0x114c1 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] TIRHUTA SIGN VIRAMA..TIRHUTA SIGN NUKTA\n                                                    if (0x114c2 <= code && code <= 0x114c3) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x115b0) {\n                                                // Mc       SIDDHAM VOWEL SIGN AA\n                                                if (0x115af === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x115b2) {\n                                                    // Mc   [2] SIDDHAM VOWEL SIGN I..SIDDHAM VOWEL SIGN II\n                                                    if (0x115b0 <= code && code <= 0x115b1) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] SIDDHAM VOWEL SIGN U..SIDDHAM VOWEL SIGN VOCALIC RR\n                                                    if (0x115b2 <= code && code <= 0x115b5) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11630) {\n                                        if (code < 0x115be) {\n                                            if (code < 0x115bc) {\n                                                // Mc   [4] SIDDHAM VOWEL SIGN E..SIDDHAM VOWEL SIGN AU\n                                                if (0x115b8 <= code && code <= 0x115bb) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] SIDDHAM SIGN CANDRABINDU..SIDDHAM SIGN ANUSVARA\n                                                if (0x115bc <= code && code <= 0x115bd) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x115bf) {\n                                                // Mc       SIDDHAM SIGN VISARGA\n                                                if (0x115be === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x115dc) {\n                                                    // Mn   [2] SIDDHAM SIGN VIRAMA..SIDDHAM SIGN NUKTA\n                                                    if (0x115bf <= code && code <= 0x115c0) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] SIDDHAM VOWEL SIGN ALTERNATE U..SIDDHAM VOWEL SIGN ALTERNATE UU\n                                                    if (0x115dc <= code && code <= 0x115dd) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1163d) {\n                                            if (code < 0x11633) {\n                                                // Mc   [3] MODI VOWEL SIGN AA..MODI VOWEL SIGN II\n                                                if (0x11630 <= code && code <= 0x11632) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1163b) {\n                                                    // Mn   [8] MODI VOWEL SIGN U..MODI VOWEL SIGN AI\n                                                    if (0x11633 <= code && code <= 0x1163a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] MODI VOWEL SIGN O..MODI VOWEL SIGN AU\n                                                    if (0x1163b <= code && code <= 0x1163c) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1163e) {\n                                                // Mn       MODI SIGN ANUSVARA\n                                                if (0x1163d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1163f) {\n                                                    // Mc       MODI SIGN VISARGA\n                                                    if (0x1163e === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] MODI SIGN VIRAMA..MODI SIGN ARDHACANDRA\n                                                    if (0x1163f <= code && code <= 0x11640) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1193f) {\n                                if (code < 0x11727) {\n                                    if (code < 0x116b6) {\n                                        if (code < 0x116ad) {\n                                            // Mn       TAKRI SIGN ANUSVARA\n                                            if (0x116ab === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                            // Mc       TAKRI SIGN VISARGA\n                                            if (0x116ac === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x116ae) {\n                                                // Mn       TAKRI VOWEL SIGN AA\n                                                if (0x116ad === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x116b0) {\n                                                    // Mc   [2] TAKRI VOWEL SIGN I..TAKRI VOWEL SIGN II\n                                                    if (0x116ae <= code && code <= 0x116af) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [6] TAKRI VOWEL SIGN U..TAKRI VOWEL SIGN AU\n                                                    if (0x116b0 <= code && code <= 0x116b5) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1171d) {\n                                            // Mc       TAKRI SIGN VIRAMA\n                                            if (0x116b6 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       TAKRI SIGN NUKTA\n                                            if (0x116b7 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11722) {\n                                                // Mn   [3] AHOM CONSONANT SIGN MEDIAL LA..AHOM CONSONANT SIGN MEDIAL LIGATING RA\n                                                if (0x1171d <= code && code <= 0x1171f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11726) {\n                                                    // Mn   [4] AHOM VOWEL SIGN I..AHOM VOWEL SIGN UU\n                                                    if (0x11722 <= code && code <= 0x11725) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc       AHOM VOWEL SIGN E\n                                                    if (0x11726 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11930) {\n                                        if (code < 0x1182f) {\n                                            if (code < 0x1182c) {\n                                                // Mn   [5] AHOM VOWEL SIGN AW..AHOM SIGN KILLER\n                                                if (0x11727 <= code && code <= 0x1172b) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [3] DOGRA VOWEL SIGN AA..DOGRA VOWEL SIGN II\n                                                if (0x1182c <= code && code <= 0x1182e) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11838) {\n                                                // Mn   [9] DOGRA VOWEL SIGN U..DOGRA SIGN ANUSVARA\n                                                if (0x1182f <= code && code <= 0x11837) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11839) {\n                                                    // Mc       DOGRA SIGN VISARGA\n                                                    if (0x11838 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] DOGRA SIGN VIRAMA..DOGRA SIGN NUKTA\n                                                    if (0x11839 <= code && code <= 0x1183a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1193b) {\n                                            if (code < 0x11931) {\n                                                // Mc       DIVES AKURU VOWEL SIGN AA\n                                                if (0x11930 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11937) {\n                                                    // Mc   [5] DIVES AKURU VOWEL SIGN I..DIVES AKURU VOWEL SIGN E\n                                                    if (0x11931 <= code && code <= 0x11935) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] DIVES AKURU VOWEL SIGN AI..DIVES AKURU VOWEL SIGN O\n                                                    if (0x11937 <= code && code <= 0x11938) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1193d) {\n                                                // Mn   [2] DIVES AKURU SIGN ANUSVARA..DIVES AKURU SIGN CANDRABINDU\n                                                if (0x1193b <= code && code <= 0x1193c) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       DIVES AKURU SIGN HALANTA\n                                                if (0x1193d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       DIVES AKURU VIRAMA\n                                                if (0x1193e === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x11a01) {\n                                    if (code < 0x119d1) {\n                                        if (code < 0x11941) {\n                                            // Lo       DIVES AKURU PREFIXED NASAL SIGN\n                                            if (0x1193f === code) {\n                                                return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                            }\n                                            // Mc       DIVES AKURU MEDIAL YA\n                                            if (0x11940 === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11942) {\n                                                // Lo       DIVES AKURU INITIAL RA\n                                                if (0x11941 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       DIVES AKURU MEDIAL RA\n                                                if (0x11942 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       DIVES AKURU SIGN NUKTA\n                                                if (0x11943 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x119dc) {\n                                            if (code < 0x119d4) {\n                                                // Mc   [3] NANDINAGARI VOWEL SIGN AA..NANDINAGARI VOWEL SIGN II\n                                                if (0x119d1 <= code && code <= 0x119d3) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x119da) {\n                                                    // Mn   [4] NANDINAGARI VOWEL SIGN U..NANDINAGARI VOWEL SIGN VOCALIC RR\n                                                    if (0x119d4 <= code && code <= 0x119d7) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] NANDINAGARI VOWEL SIGN E..NANDINAGARI VOWEL SIGN AI\n                                                    if (0x119da <= code && code <= 0x119db) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x119e0) {\n                                                // Mc   [4] NANDINAGARI VOWEL SIGN O..NANDINAGARI SIGN VISARGA\n                                                if (0x119dc <= code && code <= 0x119df) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn       NANDINAGARI SIGN VIRAMA\n                                                if (0x119e0 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mc       NANDINAGARI VOWEL SIGN PRISHTHAMATRA E\n                                                if (0x119e4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11a47) {\n                                        if (code < 0x11a39) {\n                                            if (code < 0x11a33) {\n                                                // Mn  [10] ZANABAZAR SQUARE VOWEL SIGN I..ZANABAZAR SQUARE VOWEL LENGTH MARK\n                                                if (0x11a01 <= code && code <= 0x11a0a) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [6] ZANABAZAR SQUARE FINAL CONSONANT MARK..ZANABAZAR SQUARE SIGN ANUSVARA\n                                                if (0x11a33 <= code && code <= 0x11a38) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11a3a) {\n                                                // Mc       ZANABAZAR SQUARE SIGN VISARGA\n                                                if (0x11a39 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11a3b) {\n                                                    // Lo       ZANABAZAR SQUARE CLUSTER-INITIAL LETTER RA\n                                                    if (0x11a3a === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [4] ZANABAZAR SQUARE CLUSTER-FINAL LETTER YA..ZANABAZAR SQUARE CLUSTER-FINAL LETTER VA\n                                                    if (0x11a3b <= code && code <= 0x11a3e) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x11a59) {\n                                            if (code < 0x11a51) {\n                                                // Mn       ZANABAZAR SQUARE SUBJOINER\n                                                if (0x11a47 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11a57) {\n                                                    // Mn   [6] SOYOMBO VOWEL SIGN I..SOYOMBO VOWEL SIGN OE\n                                                    if (0x11a51 <= code && code <= 0x11a56) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] SOYOMBO VOWEL SIGN AI..SOYOMBO VOWEL SIGN AU\n                                                    if (0x11a57 <= code && code <= 0x11a58) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11a84) {\n                                                // Mn   [3] SOYOMBO VOWEL SIGN VOCALIC R..SOYOMBO VOWEL LENGTH MARK\n                                                if (0x11a59 <= code && code <= 0x11a5b) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11a8a) {\n                                                    // Lo   [6] SOYOMBO SIGN JIHVAMULIYA..SOYOMBO CLUSTER-INITIAL LETTER SA\n                                                    if (0x11a84 <= code && code <= 0x11a89) {\n                                                        return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [13] SOYOMBO FINAL CONSONANT SIGN G..SOYOMBO SIGN ANUSVARA\n                                                    if (0x11a8a <= code && code <= 0x11a96) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x16f51) {\n                            if (code < 0x11d90) {\n                                if (code < 0x11cb1) {\n                                    if (code < 0x11c3e) {\n                                        if (code < 0x11c2f) {\n                                            if (code < 0x11a98) {\n                                                // Mc       SOYOMBO SIGN VISARGA\n                                                if (0x11a97 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] SOYOMBO GEMINATION MARK..SOYOMBO SUBJOINER\n                                                if (0x11a98 <= code && code <= 0x11a99) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11c30) {\n                                                // Mc       BHAIKSUKI VOWEL SIGN AA\n                                                if (0x11c2f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11c38) {\n                                                    // Mn   [7] BHAIKSUKI VOWEL SIGN I..BHAIKSUKI VOWEL SIGN VOCALIC L\n                                                    if (0x11c30 <= code && code <= 0x11c36) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [6] BHAIKSUKI VOWEL SIGN E..BHAIKSUKI SIGN ANUSVARA\n                                                    if (0x11c38 <= code && code <= 0x11c3d) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x11c92) {\n                                            // Mc       BHAIKSUKI SIGN VISARGA\n                                            if (0x11c3e === code) {\n                                                return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                            }\n                                            // Mn       BHAIKSUKI SIGN VIRAMA\n                                            if (0x11c3f === code) {\n                                                return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11ca9) {\n                                                // Mn  [22] MARCHEN SUBJOINED LETTER KA..MARCHEN SUBJOINED LETTER ZA\n                                                if (0x11c92 <= code && code <= 0x11ca7) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11caa) {\n                                                    // Mc       MARCHEN SUBJOINED LETTER YA\n                                                    if (0x11ca9 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [7] MARCHEN SUBJOINED LETTER RA..MARCHEN VOWEL SIGN AA\n                                                    if (0x11caa <= code && code <= 0x11cb0) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x11d3a) {\n                                        if (code < 0x11cb4) {\n                                            if (code < 0x11cb2) {\n                                                // Mc       MARCHEN VOWEL SIGN I\n                                                if (0x11cb1 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [2] MARCHEN VOWEL SIGN U..MARCHEN VOWEL SIGN E\n                                                if (0x11cb2 <= code && code <= 0x11cb3) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11cb5) {\n                                                // Mc       MARCHEN VOWEL SIGN O\n                                                if (0x11cb4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11d31) {\n                                                    // Mn   [2] MARCHEN SIGN ANUSVARA..MARCHEN SIGN CANDRABINDU\n                                                    if (0x11cb5 <= code && code <= 0x11cb6) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [6] MASARAM GONDI VOWEL SIGN AA..MASARAM GONDI VOWEL SIGN VOCALIC R\n                                                    if (0x11d31 <= code && code <= 0x11d36) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x11d46) {\n                                            if (code < 0x11d3c) {\n                                                // Mn       MASARAM GONDI VOWEL SIGN E\n                                                if (0x11d3a === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11d3f) {\n                                                    // Mn   [2] MASARAM GONDI VOWEL SIGN AI..MASARAM GONDI VOWEL SIGN O\n                                                    if (0x11d3c <= code && code <= 0x11d3d) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [7] MASARAM GONDI VOWEL SIGN AU..MASARAM GONDI VIRAMA\n                                                    if (0x11d3f <= code && code <= 0x11d45) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11d47) {\n                                                // Lo       MASARAM GONDI REPHA\n                                                if (0x11d46 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11d8a) {\n                                                    // Mn       MASARAM GONDI RA-KARA\n                                                    if (0x11d47 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [5] GUNJALA GONDI VOWEL SIGN AA..GUNJALA GONDI VOWEL SIGN UU\n                                                    if (0x11d8a <= code && code <= 0x11d8e) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x11f36) {\n                                    if (code < 0x11ef3) {\n                                        if (code < 0x11d95) {\n                                            if (code < 0x11d93) {\n                                                // Mn   [2] GUNJALA GONDI VOWEL SIGN EE..GUNJALA GONDI VOWEL SIGN AI\n                                                if (0x11d90 <= code && code <= 0x11d91) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [2] GUNJALA GONDI VOWEL SIGN OO..GUNJALA GONDI VOWEL SIGN AU\n                                                if (0x11d93 <= code && code <= 0x11d94) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11d96) {\n                                                // Mn       GUNJALA GONDI SIGN ANUSVARA\n                                                if (0x11d95 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       GUNJALA GONDI SIGN VISARGA\n                                                if (0x11d96 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       GUNJALA GONDI VIRAMA\n                                                if (0x11d97 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x11f02) {\n                                            if (code < 0x11ef5) {\n                                                // Mn   [2] MAKASAR VOWEL SIGN I..MAKASAR VOWEL SIGN U\n                                                if (0x11ef3 <= code && code <= 0x11ef4) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11f00) {\n                                                    // Mc   [2] MAKASAR VOWEL SIGN E..MAKASAR VOWEL SIGN O\n                                                    if (0x11ef5 <= code && code <= 0x11ef6) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] KAWI SIGN CANDRABINDU..KAWI SIGN ANUSVARA\n                                                    if (0x11f00 <= code && code <= 0x11f01) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11f03) {\n                                                // Lo       KAWI SIGN REPHA\n                                                if (0x11f02 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.PREPEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x11f34) {\n                                                    // Mc       KAWI SIGN VISARGA\n                                                    if (0x11f03 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mc   [2] KAWI VOWEL SIGN AA..KAWI VOWEL SIGN ALTERNATE AA\n                                                    if (0x11f34 <= code && code <= 0x11f35) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x13430) {\n                                        if (code < 0x11f40) {\n                                            if (code < 0x11f3e) {\n                                                // Mn   [5] KAWI VOWEL SIGN I..KAWI VOWEL SIGN VOCALIC R\n                                                if (0x11f36 <= code && code <= 0x11f3a) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc   [2] KAWI VOWEL SIGN E..KAWI VOWEL SIGN AI\n                                                if (0x11f3e <= code && code <= 0x11f3f) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x11f41) {\n                                                // Mn       KAWI VOWEL SIGN EU\n                                                if (0x11f40 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       KAWI SIGN KILLER\n                                                if (0x11f41 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                                // Mn       KAWI CONJOINER\n                                                if (0x11f42 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x16af0) {\n                                            if (code < 0x13440) {\n                                                // Cf  [16] EGYPTIAN HIEROGLYPH VERTICAL JOINER..EGYPTIAN HIEROGLYPH END WALLED ENCLOSURE\n                                                if (0x13430 <= code && code <= 0x1343f) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x13447) {\n                                                    // Mn       EGYPTIAN HIEROGLYPH MIRROR HORIZONTALLY\n                                                    if (0x13440 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [15] EGYPTIAN HIEROGLYPH MODIFIER DAMAGED AT TOP START..EGYPTIAN HIEROGLYPH MODIFIER DAMAGED\n                                                    if (0x13447 <= code && code <= 0x13455) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x16b30) {\n                                                // Mn   [5] BASSA VAH COMBINING HIGH TONE..BASSA VAH COMBINING HIGH-LOW TONE\n                                                if (0x16af0 <= code && code <= 0x16af4) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x16f4f) {\n                                                    // Mn   [7] PAHAWH HMONG MARK CIM TUB..PAHAWH HMONG MARK CIM TAUM\n                                                    if (0x16b30 <= code && code <= 0x16b36) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       MIAO SIGN CONSONANT MODIFIER BAR\n                                                    if (0x16f4f === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1da84) {\n                                if (code < 0x1d167) {\n                                    if (code < 0x1bca0) {\n                                        if (code < 0x16fe4) {\n                                            if (code < 0x16f8f) {\n                                                // Mc  [55] MIAO SIGN ASPIRATION..MIAO VOWEL SIGN UI\n                                                if (0x16f51 <= code && code <= 0x16f87) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [4] MIAO TONE RIGHT..MIAO TONE BELOW\n                                                if (0x16f8f <= code && code <= 0x16f92) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x16ff0) {\n                                                // Mn       KHITAN SMALL SCRIPT FILLER\n                                                if (0x16fe4 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1bc9d) {\n                                                    // Mc   [2] VIETNAMESE ALTERNATE READING MARK CA..VIETNAMESE ALTERNATE READING MARK NHAY\n                                                    if (0x16ff0 <= code && code <= 0x16ff1) {\n                                                        return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [2] DUPLOYAN THICK LETTER SELECTOR..DUPLOYAN DOUBLE MARK\n                                                    if (0x1bc9d <= code && code <= 0x1bc9e) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1cf30) {\n                                            if (code < 0x1cf00) {\n                                                // Cf   [4] SHORTHAND FORMAT LETTER OVERLAP..SHORTHAND FORMAT UP STEP\n                                                if (0x1bca0 <= code && code <= 0x1bca3) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                // Mn  [46] ZNAMENNY COMBINING MARK GORAZDO NIZKO S KRYZHEM ON LEFT..ZNAMENNY COMBINING MARK KRYZH ON LEFT\n                                                if (0x1cf00 <= code && code <= 0x1cf2d) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1d165) {\n                                                // Mn  [23] ZNAMENNY COMBINING TONAL RANGE MARK MRACHNO..ZNAMENNY PRIZNAK MODIFIER ROG\n                                                if (0x1cf30 <= code && code <= 0x1cf46) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       MUSICAL SYMBOL COMBINING STEM\n                                                if (0x1d165 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                                // Mc       MUSICAL SYMBOL COMBINING SPRECHGESANG STEM\n                                                if (0x1d166 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x1d185) {\n                                        if (code < 0x1d16e) {\n                                            if (code < 0x1d16d) {\n                                                // Mn   [3] MUSICAL SYMBOL COMBINING TREMOLO-1..MUSICAL SYMBOL COMBINING TREMOLO-3\n                                                if (0x1d167 <= code && code <= 0x1d169) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mc       MUSICAL SYMBOL COMBINING AUGMENTATION DOT\n                                                if (0x1d16d === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.SPACINGMARK;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1d173) {\n                                                // Mc   [5] MUSICAL SYMBOL COMBINING FLAG-1..MUSICAL SYMBOL COMBINING FLAG-5\n                                                if (0x1d16e <= code && code <= 0x1d172) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1d17b) {\n                                                    // Cf   [8] MUSICAL SYMBOL BEGIN BEAM..MUSICAL SYMBOL END PHRASE\n                                                    if (0x1d173 <= code && code <= 0x1d17a) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [8] MUSICAL SYMBOL COMBINING ACCENT..MUSICAL SYMBOL COMBINING LOURE\n                                                    if (0x1d17b <= code && code <= 0x1d182) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1da00) {\n                                            if (code < 0x1d1aa) {\n                                                // Mn   [7] MUSICAL SYMBOL COMBINING DOIT..MUSICAL SYMBOL COMBINING TRIPLE TONGUE\n                                                if (0x1d185 <= code && code <= 0x1d18b) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1d242) {\n                                                    // Mn   [4] MUSICAL SYMBOL COMBINING DOWN BOW..MUSICAL SYMBOL COMBINING SNAP PIZZICATO\n                                                    if (0x1d1aa <= code && code <= 0x1d1ad) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [3] COMBINING GREEK MUSICAL TRISEME..COMBINING GREEK MUSICAL PENTASEME\n                                                    if (0x1d242 <= code && code <= 0x1d244) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1da3b) {\n                                                // Mn  [55] SIGNWRITING HEAD RIM..SIGNWRITING AIR SUCKING IN\n                                                if (0x1da00 <= code && code <= 0x1da36) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1da75) {\n                                                    // Mn  [50] SIGNWRITING MOUTH CLOSED NEUTRAL..SIGNWRITING EXCITEMENT\n                                                    if (0x1da3b <= code && code <= 0x1da6c) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       SIGNWRITING UPPER BODY TILTING FROM HIP JOINTS\n                                                    if (0x1da75 === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            else {\n                                if (code < 0x1e2ec) {\n                                    if (code < 0x1e01b) {\n                                        if (code < 0x1daa1) {\n                                            if (code < 0x1da9b) {\n                                                // Mn       SIGNWRITING LOCATION HEAD NECK\n                                                if (0x1da84 === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [5] SIGNWRITING FILL MODIFIER-2..SIGNWRITING FILL MODIFIER-6\n                                                if (0x1da9b <= code && code <= 0x1da9f) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1e000) {\n                                                // Mn  [15] SIGNWRITING ROTATION MODIFIER-2..SIGNWRITING ROTATION MODIFIER-16\n                                                if (0x1daa1 <= code && code <= 0x1daaf) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1e008) {\n                                                    // Mn   [7] COMBINING GLAGOLITIC LETTER AZU..COMBINING GLAGOLITIC LETTER ZHIVETE\n                                                    if (0x1e000 <= code && code <= 0x1e006) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn  [17] COMBINING GLAGOLITIC LETTER ZEMLJA..COMBINING GLAGOLITIC LETTER HERU\n                                                    if (0x1e008 <= code && code <= 0x1e018) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0x1e08f) {\n                                            if (code < 0x1e023) {\n                                                // Mn   [7] COMBINING GLAGOLITIC LETTER SHTA..COMBINING GLAGOLITIC LETTER YATI\n                                                if (0x1e01b <= code && code <= 0x1e021) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1e026) {\n                                                    // Mn   [2] COMBINING GLAGOLITIC LETTER YU..COMBINING GLAGOLITIC LETTER SMALL YUS\n                                                    if (0x1e023 <= code && code <= 0x1e024) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn   [5] COMBINING GLAGOLITIC LETTER YO..COMBINING GLAGOLITIC LETTER FITA\n                                                    if (0x1e026 <= code && code <= 0x1e02a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1e130) {\n                                                // Mn       COMBINING CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I\n                                                if (0x1e08f === code) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1e2ae) {\n                                                    // Mn   [7] NYIAKENG PUACHUE HMONG TONE-B..NYIAKENG PUACHUE HMONG TONE-D\n                                                    if (0x1e130 <= code && code <= 0x1e136) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Mn       TOTO SIGN RISING TONE\n                                                    if (0x1e2ae === code) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    if (code < 0x1f3fb) {\n                                        if (code < 0x1e8d0) {\n                                            if (code < 0x1e4ec) {\n                                                // Mn   [4] WANCHO TONE TUP..WANCHO TONE KOINI\n                                                if (0x1e2ec <= code && code <= 0x1e2ef) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                // Mn   [4] NAG MUNDARI SIGN MUHOR..NAG MUNDARI SIGN SUTUH\n                                                if (0x1e4ec <= code && code <= 0x1e4ef) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0x1e944) {\n                                                // Mn   [7] MENDE KIKAKUI COMBINING NUMBER TEENS..MENDE KIKAKUI COMBINING NUMBER MILLIONS\n                                                if (0x1e8d0 <= code && code <= 0x1e8d6) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0x1f1e6) {\n                                                    // Mn   [7] ADLAM ALIF LENGTHENER..ADLAM NUKTA\n                                                    if (0x1e944 <= code && code <= 0x1e94a) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // So  [26] REGIONAL INDICATOR SYMBOL LETTER A..REGIONAL INDICATOR SYMBOL LETTER Z\n                                                    if (0x1f1e6 <= code && code <= 0x1f1ff) {\n                                                        return boundaries_1.CLUSTER_BREAK.REGIONAL_INDICATOR;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                    else {\n                                        if (code < 0xe0080) {\n                                            if (code < 0xe0000) {\n                                                // Sk   [5] EMOJI MODIFIER FITZPATRICK TYPE-1-2..EMOJI MODIFIER FITZPATRICK TYPE-6\n                                                if (0x1f3fb <= code && code <= 0x1f3ff) {\n                                                    return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xe0020) {\n                                                    // Cn       <reserved-E0000>\n                                                    // Cf       LANGUAGE TAG\n                                                    // Cn  [30] <reserved-E0002>..<reserved-E001F>\n                                                    if (0xe0000 <= code && code <= 0xe001f) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cf  [96] TAG SPACE..CANCEL TAG\n                                                    if (0xe0020 <= code && code <= 0xe007f) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            if (code < 0xe0100) {\n                                                // Cn [128] <reserved-E0080>..<reserved-E00FF>\n                                                if (0xe0080 <= code && code <= 0xe00ff) {\n                                                    return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                }\n                                            }\n                                            else {\n                                                if (code < 0xe01f0) {\n                                                    // Mn [240] VARIATION SELECTOR-17..VARIATION SELECTOR-256\n                                                    if (0xe0100 <= code && code <= 0xe01ef) {\n                                                        return boundaries_1.CLUSTER_BREAK.EXTEND;\n                                                    }\n                                                }\n                                                else {\n                                                    // Cn [3600] <reserved-E01F0>..<reserved-E0FFF>\n                                                    if (0xe01f0 <= code && code <= 0xe0fff) {\n                                                        return boundaries_1.CLUSTER_BREAK.CONTROL;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // unlisted code points are treated as a break property of \"Other\"\n        return boundaries_1.CLUSTER_BREAK.OTHER;\n    }\n    /**\n     * Given a Unicode code point, returns if symbol is an extended pictographic or some other break\n     * @param code {number} Unicode code point\n     * @returns {number}\n     */\n    static getEmojiProperty(code) {\n        // emoji property taken from:\n        // https://www.unicode.org/Public/UCD/latest/ucd/emoji/emoji-data.txt\n        // and generated by\n        // node ./scripts/generate-emoji-extended-pictographic.js\n        if (code < 0x27b0) {\n            if (code < 0x2600) {\n                if (code < 0x2328) {\n                    if (code < 0x2122) {\n                        if (code < 0x203c) {\n                            // E0.6   [1] (©️)       copyright\n                            if (0xa9 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E0.6   [1] (®️)       registered\n                            if (0xae === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                        else {\n                            // E0.6   [1] (‼️)       double exclamation mark\n                            if (0x203c === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E0.6   [1] (⁉️)       exclamation question mark\n                            if (0x2049 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x2194) {\n                            // E0.6   [1] (™️)       trade mark\n                            if (0x2122 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E0.6   [1] (ℹ️)       information\n                            if (0x2139 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                        else {\n                            if (code < 0x21a9) {\n                                // E0.6   [6] (↔️..↙️)    left-right arrow..down-left arrow\n                                if (0x2194 <= code && code <= 0x2199) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x231a) {\n                                    // E0.6   [2] (↩️..↪️)    right arrow curving left..left arrow curving right\n                                    if (0x21a9 <= code && code <= 0x21aa) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.6   [2] (⌚..⌛)    watch..hourglass done\n                                    if (0x231a <= code && code <= 0x231b) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0x24c2) {\n                        if (code < 0x23cf) {\n                            // E1.0   [1] (⌨️)       keyboard\n                            if (0x2328 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E0.0   [1] (⎈)       HELM SYMBOL\n                            if (0x2388 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                        else {\n                            if (code < 0x23e9) {\n                                // E1.0   [1] (⏏️)       eject button\n                                if (0x23cf === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x23f8) {\n                                    // E0.6   [4] (⏩..⏬)    fast-forward button..fast down button\n                                    // E0.7   [2] (⏭️..⏮️)    next track button..last track button\n                                    // E1.0   [1] (⏯️)       play or pause button\n                                    // E0.6   [1] (⏰)       alarm clock\n                                    // E1.0   [2] (⏱️..⏲️)    stopwatch..timer clock\n                                    // E0.6   [1] (⏳)       hourglass not done\n                                    if (0x23e9 <= code && code <= 0x23f3) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.7   [3] (⏸️..⏺️)    pause button..record button\n                                    if (0x23f8 <= code && code <= 0x23fa) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x25b6) {\n                            if (code < 0x25aa) {\n                                // E0.6   [1] (Ⓜ️)       circled M\n                                if (0x24c2 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [2] (▪️..▫️)    black small square..white small square\n                                if (0x25aa <= code && code <= 0x25ab) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x25c0) {\n                                // E0.6   [1] (▶️)       play button\n                                if (0x25b6 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x25fb) {\n                                    // E0.6   [1] (◀️)       reverse button\n                                    if (0x25c0 === code) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.6   [4] (◻️..◾)    white medium square..black medium-small square\n                                    if (0x25fb <= code && code <= 0x25fe) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (code < 0x2733) {\n                    if (code < 0x2714) {\n                        if (code < 0x2614) {\n                            if (code < 0x2607) {\n                                // E0.6   [2] (☀️..☁️)    sun..cloud\n                                // E0.7   [2] (☂️..☃️)    umbrella..snowman\n                                // E1.0   [1] (☄️)       comet\n                                // E0.0   [1] (★)       BLACK STAR\n                                if (0x2600 <= code && code <= 0x2605) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.0   [7] (☇..☍)    LIGHTNING..OPPOSITION\n                                // E0.6   [1] (☎️)       telephone\n                                // E0.0   [2] (☏..☐)    WHITE TELEPHONE..BALLOT BOX\n                                // E0.6   [1] (☑️)       check box with check\n                                // E0.0   [1] (☒)       BALLOT BOX WITH X\n                                if (0x2607 <= code && code <= 0x2612) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x2690) {\n                                // E0.6   [2] (☔..☕)    umbrella with rain drops..hot beverage\n                                // E0.0   [2] (☖..☗)    WHITE SHOGI PIECE..BLACK SHOGI PIECE\n                                // E1.0   [1] (☘️)       shamrock\n                                // E0.0   [4] (☙..☜)    REVERSED ROTATED FLORAL HEART BULLET..WHITE LEFT POINTING INDEX\n                                // E0.6   [1] (☝️)       index pointing up\n                                // E0.0   [2] (☞..☟)    WHITE RIGHT POINTING INDEX..WHITE DOWN POINTING INDEX\n                                // E1.0   [1] (☠️)       skull and crossbones\n                                // E0.0   [1] (☡)       CAUTION SIGN\n                                // E1.0   [2] (☢️..☣️)    radioactive..biohazard\n                                // E0.0   [2] (☤..☥)    CADUCEUS..ANKH\n                                // E1.0   [1] (☦️)       orthodox cross\n                                // E0.0   [3] (☧..☩)    CHI RHO..CROSS OF JERUSALEM\n                                // E0.7   [1] (☪️)       star and crescent\n                                // E0.0   [3] (☫..☭)    FARSI SYMBOL..HAMMER AND SICKLE\n                                // E1.0   [1] (☮️)       peace symbol\n                                // E0.7   [1] (☯️)       yin yang\n                                // E0.0   [8] (☰..☷)    TRIGRAM FOR HEAVEN..TRIGRAM FOR EARTH\n                                // E0.7   [2] (☸️..☹️)    wheel of dharma..frowning face\n                                // E0.6   [1] (☺️)       smiling face\n                                // E0.0   [5] (☻..☿)    BLACK SMILING FACE..MERCURY\n                                // E4.0   [1] (♀️)       female sign\n                                // E0.0   [1] (♁)       EARTH\n                                // E4.0   [1] (♂️)       male sign\n                                // E0.0   [5] (♃..♇)    JUPITER..PLUTO\n                                // E0.6  [12] (♈..♓)    Aries..Pisces\n                                // E0.0  [11] (♔..♞)    WHITE CHESS KING..BLACK CHESS KNIGHT\n                                // E11.0  [1] (♟️)       chess pawn\n                                // E0.6   [1] (♠️)       spade suit\n                                // E0.0   [2] (♡..♢)    WHITE HEART SUIT..WHITE DIAMOND SUIT\n                                // E0.6   [1] (♣️)       club suit\n                                // E0.0   [1] (♤)       WHITE SPADE SUIT\n                                // E0.6   [2] (♥️..♦️)    heart suit..diamond suit\n                                // E0.0   [1] (♧)       WHITE CLUB SUIT\n                                // E0.6   [1] (♨️)       hot springs\n                                // E0.0  [18] (♩..♺)    QUARTER NOTE..RECYCLING SYMBOL FOR GENERIC MATERIALS\n                                // E0.6   [1] (♻️)       recycling symbol\n                                // E0.0   [2] (♼..♽)    RECYCLED PAPER SYMBOL..PARTIALLY-RECYCLED PAPER SYMBOL\n                                // E11.0  [1] (♾️)       infinity\n                                // E0.6   [1] (♿)       wheelchair symbol\n                                // E0.0   [6] (⚀..⚅)    DIE FACE-1..DIE FACE-6\n                                if (0x2614 <= code && code <= 0x2685) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x2708) {\n                                    // E0.0   [2] (⚐..⚑)    WHITE FLAG..BLACK FLAG\n                                    // E1.0   [1] (⚒️)       hammer and pick\n                                    // E0.6   [1] (⚓)       anchor\n                                    // E1.0   [1] (⚔️)       crossed swords\n                                    // E4.0   [1] (⚕️)       medical symbol\n                                    // E1.0   [2] (⚖️..⚗️)    balance scale..alembic\n                                    // E0.0   [1] (⚘)       FLOWER\n                                    // E1.0   [1] (⚙️)       gear\n                                    // E0.0   [1] (⚚)       STAFF OF HERMES\n                                    // E1.0   [2] (⚛️..⚜️)    atom symbol..fleur-de-lis\n                                    // E0.0   [3] (⚝..⚟)    OUTLINED WHITE STAR..THREE LINES CONVERGING LEFT\n                                    // E0.6   [2] (⚠️..⚡)    warning..high voltage\n                                    // E0.0   [5] (⚢..⚦)    DOUBLED FEMALE SIGN..MALE WITH STROKE SIGN\n                                    // E13.0  [1] (⚧️)       transgender symbol\n                                    // E0.0   [2] (⚨..⚩)    VERTICAL MALE WITH STROKE SIGN..HORIZONTAL MALE WITH STROKE SIGN\n                                    // E0.6   [2] (⚪..⚫)    white circle..black circle\n                                    // E0.0   [4] (⚬..⚯)    MEDIUM SMALL WHITE CIRCLE..UNMARRIED PARTNERSHIP SYMBOL\n                                    // E1.0   [2] (⚰️..⚱️)    coffin..funeral urn\n                                    // E0.0  [11] (⚲..⚼)    NEUTER..SESQUIQUADRATE\n                                    // E0.6   [2] (⚽..⚾)    soccer ball..baseball\n                                    // E0.0   [5] (⚿..⛃)    SQUARED KEY..BLACK DRAUGHTS KING\n                                    // E0.6   [2] (⛄..⛅)    snowman without snow..sun behind cloud\n                                    // E0.0   [2] (⛆..⛇)    RAIN..BLACK SNOWMAN\n                                    // E0.7   [1] (⛈️)       cloud with lightning and rain\n                                    // E0.0   [5] (⛉..⛍)    TURNED WHITE SHOGI PIECE..DISABLED CAR\n                                    // E0.6   [1] (⛎)       Ophiuchus\n                                    // E0.7   [1] (⛏️)       pick\n                                    // E0.0   [1] (⛐)       CAR SLIDING\n                                    // E0.7   [1] (⛑️)       rescue worker’s helmet\n                                    // E0.0   [1] (⛒)       CIRCLED CROSSING LANES\n                                    // E0.7   [1] (⛓️)       chains\n                                    // E0.6   [1] (⛔)       no entry\n                                    // E0.0  [20] (⛕..⛨)    ALTERNATE ONE-WAY LEFT WAY TRAFFIC..BLACK CROSS ON SHIELD\n                                    // E0.7   [1] (⛩️)       shinto shrine\n                                    // E0.6   [1] (⛪)       church\n                                    // E0.0   [5] (⛫..⛯)    CASTLE..MAP SYMBOL FOR LIGHTHOUSE\n                                    // E0.7   [2] (⛰️..⛱️)    mountain..umbrella on ground\n                                    // E0.6   [2] (⛲..⛳)    fountain..flag in hole\n                                    // E0.7   [1] (⛴️)       ferry\n                                    // E0.6   [1] (⛵)       sailboat\n                                    // E0.0   [1] (⛶)       SQUARE FOUR CORNERS\n                                    // E0.7   [3] (⛷️..⛹️)    skier..person bouncing ball\n                                    // E0.6   [1] (⛺)       tent\n                                    // E0.0   [2] (⛻..⛼)    JAPANESE BANK SYMBOL..HEADSTONE GRAVEYARD SYMBOL\n                                    // E0.6   [1] (⛽)       fuel pump\n                                    // E0.0   [4] (⛾..✁)    CUP ON BLACK SQUARE..UPPER BLADE SCISSORS\n                                    // E0.6   [1] (✂️)       scissors\n                                    // E0.0   [2] (✃..✄)    LOWER BLADE SCISSORS..WHITE SCISSORS\n                                    // E0.6   [1] (✅)       check mark button\n                                    if (0x2690 <= code && code <= 0x2705) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.6   [5] (✈️..✌️)    airplane..victory hand\n                                    // E0.7   [1] (✍️)       writing hand\n                                    // E0.0   [1] (✎)       LOWER RIGHT PENCIL\n                                    // E0.6   [1] (✏️)       pencil\n                                    // E0.0   [2] (✐..✑)    UPPER RIGHT PENCIL..WHITE NIB\n                                    // E0.6   [1] (✒️)       black nib\n                                    if (0x2708 <= code && code <= 0x2712) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x271d) {\n                            // E0.6   [1] (✔️)       check mark\n                            if (0x2714 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E0.6   [1] (✖️)       multiply\n                            if (0x2716 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                        else {\n                            if (code < 0x2721) {\n                                // E0.7   [1] (✝️)       latin cross\n                                if (0x271d === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.7   [1] (✡️)       star of David\n                                if (0x2721 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                                // E0.6   [1] (✨)       sparkles\n                                if (0x2728 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0x2753) {\n                        if (code < 0x2747) {\n                            if (code < 0x2744) {\n                                // E0.6   [2] (✳️..✴️)    eight-spoked asterisk..eight-pointed star\n                                if (0x2733 <= code && code <= 0x2734) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [1] (❄️)       snowflake\n                                if (0x2744 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x274c) {\n                                // E0.6   [1] (❇️)       sparkle\n                                if (0x2747 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [1] (❌)       cross mark\n                                if (0x274c === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                                // E0.6   [1] (❎)       cross mark button\n                                if (0x274e === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x2763) {\n                            if (code < 0x2757) {\n                                // E0.6   [3] (❓..❕)    red question mark..white exclamation mark\n                                if (0x2753 <= code && code <= 0x2755) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [1] (❗)       red exclamation mark\n                                if (0x2757 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x2795) {\n                                // E1.0   [1] (❣️)       heart exclamation\n                                // E0.6   [1] (❤️)       red heart\n                                // E0.0   [3] (❥..❧)    ROTATED HEAVY BLACK HEART BULLET..ROTATED FLORAL HEART BULLET\n                                if (0x2763 <= code && code <= 0x2767) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x27a1) {\n                                    // E0.6   [3] (➕..➗)    plus..divide\n                                    if (0x2795 <= code && code <= 0x2797) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.6   [1] (➡️)       right arrow\n                                    if (0x27a1 === code) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            if (code < 0x1f201) {\n                if (code < 0x3297) {\n                    if (code < 0x2b1b) {\n                        if (code < 0x2934) {\n                            // E0.6   [1] (➰)       curly loop\n                            if (0x27b0 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E1.0   [1] (➿)       double curly loop\n                            if (0x27bf === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                        else {\n                            if (code < 0x2b05) {\n                                // E0.6   [2] (⤴️..⤵️)    right arrow curving up..right arrow curving down\n                                if (0x2934 <= code && code <= 0x2935) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [3] (⬅️..⬇️)    left arrow..down arrow\n                                if (0x2b05 <= code && code <= 0x2b07) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x2b55) {\n                            if (code < 0x2b50) {\n                                // E0.6   [2] (⬛..⬜)    black large square..white large square\n                                if (0x2b1b <= code && code <= 0x2b1c) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [1] (⭐)       star\n                                if (0x2b50 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x3030) {\n                                // E0.6   [1] (⭕)       hollow red circle\n                                if (0x2b55 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [1] (〰️)       wavy dash\n                                if (0x3030 === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                                // E0.6   [1] (〽️)       part alternation mark\n                                if (0x303d === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0x1f16c) {\n                        if (code < 0x1f000) {\n                            // E0.6   [1] (㊗️)       Japanese “congratulations” button\n                            if (0x3297 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                            // E0.6   [1] (㊙️)       Japanese “secret” button\n                            if (0x3299 === code) {\n                                return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                            }\n                        }\n                        else {\n                            if (code < 0x1f10d) {\n                                // E0.0   [4] (🀀..🀃)    MAHJONG TILE EAST WIND..MAHJONG TILE NORTH WIND\n                                // E0.6   [1] (🀄)       mahjong red dragon\n                                // E0.0 [202] (🀅..🃎)    MAHJONG TILE GREEN DRAGON..PLAYING CARD KING OF DIAMONDS\n                                // E0.6   [1] (🃏)       joker\n                                // E0.0  [48] (🃐..🃿)    <reserved-1F0D0>..<reserved-1F0FF>\n                                if (0x1f000 <= code && code <= 0x1f0ff) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x1f12f) {\n                                    // E0.0   [3] (🄍..🄏)    CIRCLED ZERO WITH SLASH..CIRCLED DOLLAR SIGN WITH OVERLAID BACKSLASH\n                                    if (0x1f10d <= code && code <= 0x1f10f) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.0   [1] (🄯)       COPYLEFT SYMBOL\n                                    if (0x1f12f === code) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x1f18e) {\n                            if (code < 0x1f17e) {\n                                // E0.0   [4] (🅬..🅯)    RAISED MR SIGN..CIRCLED HUMAN FIGURE\n                                // E0.6   [2] (🅰️..🅱️)    A button (blood type)..B button (blood type)\n                                if (0x1f16c <= code && code <= 0x1f171) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [2] (🅾️..🅿️)    O button (blood type)..P button\n                                if (0x1f17e <= code && code <= 0x1f17f) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1f191) {\n                                // E0.6   [1] (🆎)       AB button (blood type)\n                                if (0x1f18e === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x1f1ad) {\n                                    // E0.6  [10] (🆑..🆚)    CL button..VS button\n                                    if (0x1f191 <= code && code <= 0x1f19a) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.0  [57] (🆭..🇥)    MASK WORK SYMBOL..<reserved-1F1E5>\n                                    if (0x1f1ad <= code && code <= 0x1f1e5) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (code < 0x1f7d5) {\n                    if (code < 0x1f249) {\n                        if (code < 0x1f22f) {\n                            if (code < 0x1f21a) {\n                                // E0.6   [2] (🈁..🈂️)    Japanese “here” button..Japanese “service charge” button\n                                // E0.0  [13] (🈃..🈏)    <reserved-1F203>..<reserved-1F20F>\n                                if (0x1f201 <= code && code <= 0x1f20f) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.6   [1] (🈚)       Japanese “free of charge” button\n                                if (0x1f21a === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1f232) {\n                                // E0.6   [1] (🈯)       Japanese “reserved” button\n                                if (0x1f22f === code) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x1f23c) {\n                                    // E0.6   [9] (🈲..🈺)    Japanese “prohibited” button..Japanese “open for business” button\n                                    if (0x1f232 <= code && code <= 0x1f23a) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.0   [4] (🈼..🈿)    <reserved-1F23C>..<reserved-1F23F>\n                                    if (0x1f23c <= code && code <= 0x1f23f) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x1f546) {\n                            if (code < 0x1f400) {\n                                // E0.0   [7] (🉉..🉏)    <reserved-1F249>..<reserved-1F24F>\n                                // E0.6   [2] (🉐..🉑)    Japanese “bargain” button..Japanese “acceptable” button\n                                // E0.0 [174] (🉒..🋿)    <reserved-1F252>..<reserved-1F2FF>\n                                // E0.6  [13] (🌀..🌌)    cyclone..milky way\n                                // E0.7   [2] (🌍..🌎)    globe showing Europe-Africa..globe showing Americas\n                                // E0.6   [1] (🌏)       globe showing Asia-Australia\n                                // E1.0   [1] (🌐)       globe with meridians\n                                // E0.6   [1] (🌑)       new moon\n                                // E1.0   [1] (🌒)       waxing crescent moon\n                                // E0.6   [3] (🌓..🌕)    first quarter moon..full moon\n                                // E1.0   [3] (🌖..🌘)    waning gibbous moon..waning crescent moon\n                                // E0.6   [1] (🌙)       crescent moon\n                                // E1.0   [1] (🌚)       new moon face\n                                // E0.6   [1] (🌛)       first quarter moon face\n                                // E0.7   [1] (🌜)       last quarter moon face\n                                // E1.0   [2] (🌝..🌞)    full moon face..sun with face\n                                // E0.6   [2] (🌟..🌠)    glowing star..shooting star\n                                // E0.7   [1] (🌡️)       thermometer\n                                // E0.0   [2] (🌢..🌣)    BLACK DROPLET..WHITE SUN\n                                // E0.7   [9] (🌤️..🌬️)    sun behind small cloud..wind face\n                                // E1.0   [3] (🌭..🌯)    hot dog..burrito\n                                // E0.6   [2] (🌰..🌱)    chestnut..seedling\n                                // E1.0   [2] (🌲..🌳)    evergreen tree..deciduous tree\n                                // E0.6   [2] (🌴..🌵)    palm tree..cactus\n                                // E0.7   [1] (🌶️)       hot pepper\n                                // E0.6  [20] (🌷..🍊)    tulip..tangerine\n                                // E1.0   [1] (🍋)       lemon\n                                // E0.6   [4] (🍌..🍏)    banana..green apple\n                                // E1.0   [1] (🍐)       pear\n                                // E0.6  [43] (🍑..🍻)    peach..clinking beer mugs\n                                // E1.0   [1] (🍼)       baby bottle\n                                // E0.7   [1] (🍽️)       fork and knife with plate\n                                // E1.0   [2] (🍾..🍿)    bottle with popping cork..popcorn\n                                // E0.6  [20] (🎀..🎓)    ribbon..graduation cap\n                                // E0.0   [2] (🎔..🎕)    HEART WITH TIP ON THE LEFT..BOUQUET OF FLOWERS\n                                // E0.7   [2] (🎖️..🎗️)    military medal..reminder ribbon\n                                // E0.0   [1] (🎘)       MUSICAL KEYBOARD WITH JACKS\n                                // E0.7   [3] (🎙️..🎛️)    studio microphone..control knobs\n                                // E0.0   [2] (🎜..🎝)    BEAMED ASCENDING MUSICAL NOTES..BEAMED DESCENDING MUSICAL NOTES\n                                // E0.7   [2] (🎞️..🎟️)    film frames..admission tickets\n                                // E0.6  [37] (🎠..🏄)    carousel horse..person surfing\n                                // E1.0   [1] (🏅)       sports medal\n                                // E0.6   [1] (🏆)       trophy\n                                // E1.0   [1] (🏇)       horse racing\n                                // E0.6   [1] (🏈)       american football\n                                // E1.0   [1] (🏉)       rugby football\n                                // E0.6   [1] (🏊)       person swimming\n                                // E0.7   [4] (🏋️..🏎️)    person lifting weights..racing car\n                                // E1.0   [5] (🏏..🏓)    cricket game..ping pong\n                                // E0.7  [12] (🏔️..🏟️)    snow-capped mountain..stadium\n                                // E0.6   [4] (🏠..🏣)    house..Japanese post office\n                                // E1.0   [1] (🏤)       post office\n                                // E0.6  [12] (🏥..🏰)    hospital..castle\n                                // E0.0   [2] (🏱..🏲)    WHITE PENNANT..BLACK PENNANT\n                                // E0.7   [1] (🏳️)       white flag\n                                // E1.0   [1] (🏴)       black flag\n                                // E0.7   [1] (🏵️)       rosette\n                                // E0.0   [1] (🏶)       BLACK ROSETTE\n                                // E0.7   [1] (🏷️)       label\n                                // E1.0   [3] (🏸..🏺)    badminton..amphora\n                                if (0x1f249 <= code && code <= 0x1f3fa) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E1.0   [8] (🐀..🐇)    rat..rabbit\n                                // E0.7   [1] (🐈)       cat\n                                // E1.0   [3] (🐉..🐋)    dragon..whale\n                                // E0.6   [3] (🐌..🐎)    snail..horse\n                                // E1.0   [2] (🐏..🐐)    ram..goat\n                                // E0.6   [2] (🐑..🐒)    ewe..monkey\n                                // E1.0   [1] (🐓)       rooster\n                                // E0.6   [1] (🐔)       chicken\n                                // E0.7   [1] (🐕)       dog\n                                // E1.0   [1] (🐖)       pig\n                                // E0.6  [19] (🐗..🐩)    boar..poodle\n                                // E1.0   [1] (🐪)       camel\n                                // E0.6  [20] (🐫..🐾)    two-hump camel..paw prints\n                                // E0.7   [1] (🐿️)       chipmunk\n                                // E0.6   [1] (👀)       eyes\n                                // E0.7   [1] (👁️)       eye\n                                // E0.6  [35] (👂..👤)    ear..bust in silhouette\n                                // E1.0   [1] (👥)       busts in silhouette\n                                // E0.6   [6] (👦..👫)    boy..woman and man holding hands\n                                // E1.0   [2] (👬..👭)    men holding hands..women holding hands\n                                // E0.6  [63] (👮..💬)    police officer..speech balloon\n                                // E1.0   [1] (💭)       thought balloon\n                                // E0.6   [8] (💮..💵)    white flower..dollar banknote\n                                // E1.0   [2] (💶..💷)    euro banknote..pound banknote\n                                // E0.6  [52] (💸..📫)    money with wings..closed mailbox with raised flag\n                                // E0.7   [2] (📬..📭)    open mailbox with raised flag..open mailbox with lowered flag\n                                // E0.6   [1] (📮)       postbox\n                                // E1.0   [1] (📯)       postal horn\n                                // E0.6   [5] (📰..📴)    newspaper..mobile phone off\n                                // E1.0   [1] (📵)       no mobile phones\n                                // E0.6   [2] (📶..📷)    antenna bars..camera\n                                // E1.0   [1] (📸)       camera with flash\n                                // E0.6   [4] (📹..📼)    video camera..videocassette\n                                // E0.7   [1] (📽️)       film projector\n                                // E0.0   [1] (📾)       PORTABLE STEREO\n                                // E1.0   [4] (📿..🔂)    prayer beads..repeat single button\n                                // E0.6   [1] (🔃)       clockwise vertical arrows\n                                // E1.0   [4] (🔄..🔇)    counterclockwise arrows button..muted speaker\n                                // E0.7   [1] (🔈)       speaker low volume\n                                // E1.0   [1] (🔉)       speaker medium volume\n                                // E0.6  [11] (🔊..🔔)    speaker high volume..bell\n                                // E1.0   [1] (🔕)       bell with slash\n                                // E0.6  [22] (🔖..🔫)    bookmark..water pistol\n                                // E1.0   [2] (🔬..🔭)    microscope..telescope\n                                // E0.6  [16] (🔮..🔽)    crystal ball..downwards button\n                                if (0x1f400 <= code && code <= 0x1f53d) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1f680) {\n                                // E0.0   [3] (🕆..🕈)    WHITE LATIN CROSS..CELTIC CROSS\n                                // E0.7   [2] (🕉️..🕊️)    om..dove\n                                // E1.0   [4] (🕋..🕎)    kaaba..menorah\n                                // E0.0   [1] (🕏)       BOWL OF HYGIEIA\n                                // E0.6  [12] (🕐..🕛)    one o’clock..twelve o’clock\n                                // E0.7  [12] (🕜..🕧)    one-thirty..twelve-thirty\n                                // E0.0   [7] (🕨..🕮)    RIGHT SPEAKER..BOOK\n                                // E0.7   [2] (🕯️..🕰️)    candle..mantelpiece clock\n                                // E0.0   [2] (🕱..🕲)    BLACK SKULL AND CROSSBONES..NO PIRACY\n                                // E0.7   [7] (🕳️..🕹️)    hole..joystick\n                                // E3.0   [1] (🕺)       man dancing\n                                // E0.0  [12] (🕻..🖆)    LEFT HAND TELEPHONE RECEIVER..PEN OVER STAMPED ENVELOPE\n                                // E0.7   [1] (🖇️)       linked paperclips\n                                // E0.0   [2] (🖈..🖉)    BLACK PUSHPIN..LOWER LEFT PENCIL\n                                // E0.7   [4] (🖊️..🖍️)    pen..crayon\n                                // E0.0   [2] (🖎..🖏)    LEFT WRITING HAND..TURNED OK HAND SIGN\n                                // E0.7   [1] (🖐️)       hand with fingers splayed\n                                // E0.0   [4] (🖑..🖔)    REVERSED RAISED HAND WITH FINGERS SPLAYED..REVERSED VICTORY HAND\n                                // E1.0   [2] (🖕..🖖)    middle finger..vulcan salute\n                                // E0.0  [13] (🖗..🖣)    WHITE DOWN POINTING LEFT HAND INDEX..BLACK DOWN POINTING BACKHAND INDEX\n                                // E3.0   [1] (🖤)       black heart\n                                // E0.7   [1] (🖥️)       desktop computer\n                                // E0.0   [2] (🖦..🖧)    KEYBOARD AND MOUSE..THREE NETWORKED COMPUTERS\n                                // E0.7   [1] (🖨️)       printer\n                                // E0.0   [8] (🖩..🖰)    POCKET CALCULATOR..TWO BUTTON MOUSE\n                                // E0.7   [2] (🖱️..🖲️)    computer mouse..trackball\n                                // E0.0   [9] (🖳..🖻)    OLD PERSONAL COMPUTER..DOCUMENT WITH PICTURE\n                                // E0.7   [1] (🖼️)       framed picture\n                                // E0.0   [5] (🖽..🗁)    FRAME WITH TILES..OPEN FOLDER\n                                // E0.7   [3] (🗂️..🗄️)    card index dividers..file cabinet\n                                // E0.0  [12] (🗅..🗐)    EMPTY NOTE..PAGES\n                                // E0.7   [3] (🗑️..🗓️)    wastebasket..spiral calendar\n                                // E0.0   [8] (🗔..🗛)    DESKTOP WINDOW..DECREASE FONT SIZE SYMBOL\n                                // E0.7   [3] (🗜️..🗞️)    clamp..rolled-up newspaper\n                                // E0.0   [2] (🗟..🗠)    PAGE WITH CIRCLED TEXT..STOCK CHART\n                                // E0.7   [1] (🗡️)       dagger\n                                // E0.0   [1] (🗢)       LIPS\n                                // E0.7   [1] (🗣️)       speaking head\n                                // E0.0   [4] (🗤..🗧)    THREE RAYS ABOVE..THREE RAYS RIGHT\n                                // E2.0   [1] (🗨️)       left speech bubble\n                                // E0.0   [6] (🗩..🗮)    RIGHT SPEECH BUBBLE..LEFT ANGER BUBBLE\n                                // E0.7   [1] (🗯️)       right anger bubble\n                                // E0.0   [3] (🗰..🗲)    MOOD BUBBLE..LIGHTNING MOOD\n                                // E0.7   [1] (🗳️)       ballot box with ballot\n                                // E0.0   [6] (🗴..🗹)    BALLOT SCRIPT X..BALLOT BOX WITH BOLD CHECK\n                                // E0.7   [1] (🗺️)       world map\n                                // E0.6   [5] (🗻..🗿)    mount fuji..moai\n                                // E1.0   [1] (😀)       grinning face\n                                // E0.6   [6] (😁..😆)    beaming face with smiling eyes..grinning squinting face\n                                // E1.0   [2] (😇..😈)    smiling face with halo..smiling face with horns\n                                // E0.6   [5] (😉..😍)    winking face..smiling face with heart-eyes\n                                // E1.0   [1] (😎)       smiling face with sunglasses\n                                // E0.6   [1] (😏)       smirking face\n                                // E0.7   [1] (😐)       neutral face\n                                // E1.0   [1] (😑)       expressionless face\n                                // E0.6   [3] (😒..😔)    unamused face..pensive face\n                                // E1.0   [1] (😕)       confused face\n                                // E0.6   [1] (😖)       confounded face\n                                // E1.0   [1] (😗)       kissing face\n                                // E0.6   [1] (😘)       face blowing a kiss\n                                // E1.0   [1] (😙)       kissing face with smiling eyes\n                                // E0.6   [1] (😚)       kissing face with closed eyes\n                                // E1.0   [1] (😛)       face with tongue\n                                // E0.6   [3] (😜..😞)    winking face with tongue..disappointed face\n                                // E1.0   [1] (😟)       worried face\n                                // E0.6   [6] (😠..😥)    angry face..sad but relieved face\n                                // E1.0   [2] (😦..😧)    frowning face with open mouth..anguished face\n                                // E0.6   [4] (😨..😫)    fearful face..tired face\n                                // E1.0   [1] (😬)       grimacing face\n                                // E0.6   [1] (😭)       loudly crying face\n                                // E1.0   [2] (😮..😯)    face with open mouth..hushed face\n                                // E0.6   [4] (😰..😳)    anxious face with sweat..flushed face\n                                // E1.0   [1] (😴)       sleeping face\n                                // E0.6   [1] (😵)       face with crossed-out eyes\n                                // E1.0   [1] (😶)       face without mouth\n                                // E0.6  [10] (😷..🙀)    face with medical mask..weary cat\n                                // E1.0   [4] (🙁..🙄)    slightly frowning face..face with rolling eyes\n                                // E0.6  [11] (🙅..🙏)    person gesturing NO..folded hands\n                                if (0x1f546 <= code && code <= 0x1f64f) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x1f774) {\n                                    // E0.6   [1] (🚀)       rocket\n                                    // E1.0   [2] (🚁..🚂)    helicopter..locomotive\n                                    // E0.6   [3] (🚃..🚅)    railway car..bullet train\n                                    // E1.0   [1] (🚆)       train\n                                    // E0.6   [1] (🚇)       metro\n                                    // E1.0   [1] (🚈)       light rail\n                                    // E0.6   [1] (🚉)       station\n                                    // E1.0   [2] (🚊..🚋)    tram..tram car\n                                    // E0.6   [1] (🚌)       bus\n                                    // E0.7   [1] (🚍)       oncoming bus\n                                    // E1.0   [1] (🚎)       trolleybus\n                                    // E0.6   [1] (🚏)       bus stop\n                                    // E1.0   [1] (🚐)       minibus\n                                    // E0.6   [3] (🚑..🚓)    ambulance..police car\n                                    // E0.7   [1] (🚔)       oncoming police car\n                                    // E0.6   [1] (🚕)       taxi\n                                    // E1.0   [1] (🚖)       oncoming taxi\n                                    // E0.6   [1] (🚗)       automobile\n                                    // E0.7   [1] (🚘)       oncoming automobile\n                                    // E0.6   [2] (🚙..🚚)    sport utility vehicle..delivery truck\n                                    // E1.0   [7] (🚛..🚡)    articulated lorry..aerial tramway\n                                    // E0.6   [1] (🚢)       ship\n                                    // E1.0   [1] (🚣)       person rowing boat\n                                    // E0.6   [2] (🚤..🚥)    speedboat..horizontal traffic light\n                                    // E1.0   [1] (🚦)       vertical traffic light\n                                    // E0.6   [7] (🚧..🚭)    construction..no smoking\n                                    // E1.0   [4] (🚮..🚱)    litter in bin sign..non-potable water\n                                    // E0.6   [1] (🚲)       bicycle\n                                    // E1.0   [3] (🚳..🚵)    no bicycles..person mountain biking\n                                    // E0.6   [1] (🚶)       person walking\n                                    // E1.0   [2] (🚷..🚸)    no pedestrians..children crossing\n                                    // E0.6   [6] (🚹..🚾)    men’s room..water closet\n                                    // E1.0   [1] (🚿)       shower\n                                    // E0.6   [1] (🛀)       person taking bath\n                                    // E1.0   [5] (🛁..🛅)    bathtub..left luggage\n                                    // E0.0   [5] (🛆..🛊)    TRIANGLE WITH ROUNDED CORNERS..GIRLS SYMBOL\n                                    // E0.7   [1] (🛋️)       couch and lamp\n                                    // E1.0   [1] (🛌)       person in bed\n                                    // E0.7   [3] (🛍️..🛏️)    shopping bags..bed\n                                    // E1.0   [1] (🛐)       place of worship\n                                    // E3.0   [2] (🛑..🛒)    stop sign..shopping cart\n                                    // E0.0   [2] (🛓..🛔)    STUPA..PAGODA\n                                    // E12.0  [1] (🛕)       hindu temple\n                                    // E13.0  [2] (🛖..🛗)    hut..elevator\n                                    // E0.0   [4] (🛘..🛛)    <reserved-1F6D8>..<reserved-1F6DB>\n                                    // E15.0  [1] (🛜)       wireless\n                                    // E14.0  [3] (🛝..🛟)    playground slide..ring buoy\n                                    // E0.7   [6] (🛠️..🛥️)    hammer and wrench..motor boat\n                                    // E0.0   [3] (🛦..🛨)    UP-POINTING MILITARY AIRPLANE..UP-POINTING SMALL AIRPLANE\n                                    // E0.7   [1] (🛩️)       small airplane\n                                    // E0.0   [1] (🛪)       NORTHEAST-POINTING AIRPLANE\n                                    // E1.0   [2] (🛫..🛬)    airplane departure..airplane arrival\n                                    // E0.0   [3] (🛭..🛯)    <reserved-1F6ED>..<reserved-1F6EF>\n                                    // E0.7   [1] (🛰️)       satellite\n                                    // E0.0   [2] (🛱..🛲)    ONCOMING FIRE ENGINE..DIESEL LOCOMOTIVE\n                                    // E0.7   [1] (🛳️)       passenger ship\n                                    // E3.0   [3] (🛴..🛶)    kick scooter..canoe\n                                    // E5.0   [2] (🛷..🛸)    sled..flying saucer\n                                    // E11.0  [1] (🛹)       skateboard\n                                    // E12.0  [1] (🛺)       auto rickshaw\n                                    // E13.0  [2] (🛻..🛼)    pickup truck..roller skate\n                                    // E0.0   [3] (🛽..🛿)    <reserved-1F6FD>..<reserved-1F6FF>\n                                    if (0x1f680 <= code && code <= 0x1f6ff) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.0  [12] (🝴..🝿)    LOT OF FORTUNE..ORCUS\n                                    if (0x1f774 <= code && code <= 0x1f77f) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                else {\n                    if (code < 0x1f8ae) {\n                        if (code < 0x1f848) {\n                            if (code < 0x1f80c) {\n                                // E0.0  [11] (🟕..🟟)    CIRCLED TRIANGLE..<reserved-1F7DF>\n                                // E12.0 [12] (🟠..🟫)    orange circle..brown square\n                                // E0.0   [4] (🟬..🟯)    <reserved-1F7EC>..<reserved-1F7EF>\n                                // E14.0  [1] (🟰)       heavy equals sign\n                                // E0.0  [15] (🟱..🟿)    <reserved-1F7F1>..<reserved-1F7FF>\n                                if (0x1f7d5 <= code && code <= 0x1f7ff) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E0.0   [4] (🠌..🠏)    <reserved-1F80C>..<reserved-1F80F>\n                                if (0x1f80c <= code && code <= 0x1f80f) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1f85a) {\n                                // E0.0   [8] (🡈..🡏)    <reserved-1F848>..<reserved-1F84F>\n                                if (0x1f848 <= code && code <= 0x1f84f) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x1f888) {\n                                    // E0.0   [6] (🡚..🡟)    <reserved-1F85A>..<reserved-1F85F>\n                                    if (0x1f85a <= code && code <= 0x1f85f) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.0   [8] (🢈..🢏)    <reserved-1F888>..<reserved-1F88F>\n                                    if (0x1f888 <= code && code <= 0x1f88f) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        if (code < 0x1f93c) {\n                            if (code < 0x1f90c) {\n                                // E0.0  [82] (🢮..🣿)    <reserved-1F8AE>..<reserved-1F8FF>\n                                if (0x1f8ae <= code && code <= 0x1f8ff) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                // E13.0  [1] (🤌)       pinched fingers\n                                // E12.0  [3] (🤍..🤏)    white heart..pinching hand\n                                // E1.0   [9] (🤐..🤘)    zipper-mouth face..sign of the horns\n                                // E3.0   [6] (🤙..🤞)    call me hand..crossed fingers\n                                // E5.0   [1] (🤟)       love-you gesture\n                                // E3.0   [8] (🤠..🤧)    cowboy hat face..sneezing face\n                                // E5.0   [8] (🤨..🤯)    face with raised eyebrow..exploding head\n                                // E3.0   [1] (🤰)       pregnant woman\n                                // E5.0   [2] (🤱..🤲)    breast-feeding..palms up together\n                                // E3.0   [8] (🤳..🤺)    selfie..person fencing\n                                if (0x1f90c <= code && code <= 0x1f93a) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                        }\n                        else {\n                            if (code < 0x1f947) {\n                                // E3.0   [3] (🤼..🤾)    people wrestling..person playing handball\n                                // E12.0  [1] (🤿)       diving mask\n                                // E3.0   [6] (🥀..🥅)    wilted flower..goal net\n                                if (0x1f93c <= code && code <= 0x1f945) {\n                                    return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                }\n                            }\n                            else {\n                                if (code < 0x1fc00) {\n                                    // E3.0   [5] (🥇..🥋)    1st place medal..martial arts uniform\n                                    // E5.0   [1] (🥌)       curling stone\n                                    // E11.0  [3] (🥍..🥏)    lacrosse..flying disc\n                                    // E3.0  [15] (🥐..🥞)    croissant..pancakes\n                                    // E5.0  [13] (🥟..🥫)    dumpling..canned food\n                                    // E11.0  [5] (🥬..🥰)    leafy green..smiling face with hearts\n                                    // E12.0  [1] (🥱)       yawning face\n                                    // E13.0  [1] (🥲)       smiling face with tear\n                                    // E11.0  [4] (🥳..🥶)    partying face..cold face\n                                    // E13.0  [2] (🥷..🥸)    ninja..disguised face\n                                    // E14.0  [1] (🥹)       face holding back tears\n                                    // E11.0  [1] (🥺)       pleading face\n                                    // E12.0  [1] (🥻)       sari\n                                    // E11.0  [4] (🥼..🥿)    lab coat..flat shoe\n                                    // E1.0   [5] (🦀..🦄)    crab..unicorn\n                                    // E3.0  [13] (🦅..🦑)    eagle..squid\n                                    // E5.0   [6] (🦒..🦗)    giraffe..cricket\n                                    // E11.0 [11] (🦘..🦢)    kangaroo..swan\n                                    // E13.0  [2] (🦣..🦤)    mammoth..dodo\n                                    // E12.0  [6] (🦥..🦪)    sloth..oyster\n                                    // E13.0  [3] (🦫..🦭)    beaver..seal\n                                    // E12.0  [2] (🦮..🦯)    guide dog..white cane\n                                    // E11.0 [10] (🦰..🦹)    red hair..supervillain\n                                    // E12.0  [6] (🦺..🦿)    safety vest..mechanical leg\n                                    // E1.0   [1] (🧀)       cheese wedge\n                                    // E11.0  [2] (🧁..🧂)    cupcake..salt\n                                    // E12.0  [8] (🧃..🧊)    beverage box..ice\n                                    // E13.0  [1] (🧋)       bubble tea\n                                    // E14.0  [1] (🧌)       troll\n                                    // E12.0  [3] (🧍..🧏)    person standing..deaf person\n                                    // E5.0  [23] (🧐..🧦)    face with monocle..socks\n                                    // E11.0 [25] (🧧..🧿)    red envelope..nazar amulet\n                                    // E0.0 [112] (🨀..🩯)    NEUTRAL CHESS KING..<reserved-1FA6F>\n                                    // E12.0  [4] (🩰..🩳)    ballet shoes..shorts\n                                    // E13.0  [1] (🩴)       thong sandal\n                                    // E15.0  [3] (🩵..🩷)    light blue heart..pink heart\n                                    // E12.0  [3] (🩸..🩺)    drop of blood..stethoscope\n                                    // E14.0  [2] (🩻..🩼)    x-ray..crutch\n                                    // E0.0   [3] (🩽..🩿)    <reserved-1FA7D>..<reserved-1FA7F>\n                                    // E12.0  [3] (🪀..🪂)    yo-yo..parachute\n                                    // E13.0  [4] (🪃..🪆)    boomerang..nesting dolls\n                                    // E15.0  [2] (🪇..🪈)    maracas..flute\n                                    // E0.0   [7] (🪉..🪏)    <reserved-1FA89>..<reserved-1FA8F>\n                                    // E12.0  [6] (🪐..🪕)    ringed planet..banjo\n                                    // E13.0 [19] (🪖..🪨)    military helmet..rock\n                                    // E14.0  [4] (🪩..🪬)    mirror ball..hamsa\n                                    // E15.0  [3] (🪭..🪯)    folding hand fan..khanda\n                                    // E13.0  [7] (🪰..🪶)    fly..feather\n                                    // E14.0  [4] (🪷..🪺)    lotus..nest with eggs\n                                    // E15.0  [3] (🪻..🪽)    hyacinth..wing\n                                    // E0.0   [1] (🪾)       <reserved-1FABE>\n                                    // E15.0  [1] (🪿)       goose\n                                    // E13.0  [3] (🫀..🫂)    anatomical heart..people hugging\n                                    // E14.0  [3] (🫃..🫅)    pregnant man..person with crown\n                                    // E0.0   [8] (🫆..🫍)    <reserved-1FAC6>..<reserved-1FACD>\n                                    // E15.0  [2] (🫎..🫏)    moose..donkey\n                                    // E13.0  [7] (🫐..🫖)    blueberries..teapot\n                                    // E14.0  [3] (🫗..🫙)    pouring liquid..jar\n                                    // E15.0  [2] (🫚..🫛)    ginger root..pea pod\n                                    // E0.0   [4] (🫜..🫟)    <reserved-1FADC>..<reserved-1FADF>\n                                    // E14.0  [8] (🫠..🫧)    melting face..bubbles\n                                    // E15.0  [1] (🫨)       shaking face\n                                    // E0.0   [7] (🫩..🫯)    <reserved-1FAE9>..<reserved-1FAEF>\n                                    // E14.0  [7] (🫰..🫶)    hand with index finger and thumb crossed..heart hands\n                                    // E15.0  [2] (🫷..🫸)    leftwards pushing hand..rightwards pushing hand\n                                    // E0.0   [7] (🫹..🫿)    <reserved-1FAF9>..<reserved-1FAFF>\n                                    if (0x1f947 <= code && code <= 0x1faff) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                                else {\n                                    // E0.0[1022] (🰀..🿽)    <reserved-1FC00>..<reserved-1FFFD>\n                                    if (0x1fc00 <= code && code <= 0x1fffd) {\n                                        return boundaries_1.EXTENDED_PICTOGRAPHIC;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // unlisted code points are treated as a break property of \"Other\"\n        return boundaries_1.CLUSTER_BREAK.OTHER;\n    }\n}\nexports.default = Graphemer;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst Graphemer_1 = __importDefault(require(\"./Graphemer\"));\nexports.default = Graphemer_1.default;\n","(()=>{\"use strict\";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(e,\"__esModule\",{value:!0})}},t={};function r(e,t){return void 0===t&&(t=\"-\"),new RegExp(\"^(?!0{4}\"+t+\"0{2}\"+t+\"0{2})((?=[0-9]{4}\"+t+\"(((0[^2])|1[0-2])|02(?=\"+t+\"(([0-1][0-9])|2[0-8])))\"+t+\"[0-9]{2})|(?=((([13579][26])|([2468][048])|(0[48]))0{2})|([0-9]{2}((((0|[2468])[48])|[2468][048])|([13579][26])))\"+t+\"02\"+t+\"29))([0-9]{4})\"+t+\"(?!((0[469])|11)\"+t+\"31)((0[1,3-9]|1[0-2])|(02(?!\"+t+\"3)))\"+t+\"(0[1-9]|[1-2][0-9]|3[0-1])$\").test(e)}function n(e){var t=/\\D/.exec(e);return t?t[0]:\"\"}function i(e,t,r){void 0===t&&(t=\":\"),void 0===r&&(r=!1);var i=new RegExp(\"^([0-1]|2(?=([0-3])|4\"+t+\"00))[0-9]\"+t+\"[0-5][0-9](\"+t+\"([0-5]|6(?=0))[0-9])?(.[0-9]{1,9})?$\");if(!r||!/[Z+\\-]/.test(e))return i.test(e);if(/Z$/.test(e))return i.test(e.replace(\"Z\",\"\"));var o=e.includes(\"+\"),a=e.split(/[+-]/),u=a[0],d=a[1];return i.test(u)&&function(e,t,r){return void 0===r&&(r=\":\"),new RegExp(t?\"^(0(?!(2\"+r+\"4)|0\"+r+\"3)|1(?=([0-1]|2(?=\"+r+\"[04])|[34](?=\"+r+\"0))))([03469](?=\"+r+\"[03])|[17](?=\"+r+\"0)|2(?=\"+r+\"[04])|5(?=\"+r+\"[034])|8(?=\"+r+\"[04]))\"+r+\"([03](?=0)|4(?=5))[05]$\":\"^(0(?=[^0])|1(?=[0-2]))([39](?=\"+r+\"[03])|[0-24-8](?=\"+r+\"00))\"+r+\"[03]0$\").test(e)}(d,o,n(d))}function o(e){var t=e.split(\"T\"),o=t[0],a=t[1],u=r(o,n(o));if(!a)return!1;var d,s=(d=a.match(/([^Z+\\-\\d])(?=\\d+\\1)/),Array.isArray(d)?d[0]:\"\");return u&&i(a,s,!0)}function a(e,t){return void 0===t&&(t=\"-\"),new RegExp(\"^[0-9]{4}\"+t+\"(0(?=[^0])|1(?=[0-2]))[0-9]$\").test(e)}e.r(t),e.d(t,{isValidDate:()=>r,isValidISODateString:()=>o,isValidTime:()=>i,isValidYearMonth:()=>a});var u=exports;for(var d in t)u[d]=t[d];t.__esModule&&Object.defineProperty(u,\"__esModule\",{value:!0})})();","export { AtUri } from '@atproto/syntax'\nexport {\n  BlobRef,\n  lexToJson,\n  stringifyLex,\n  jsonToLex,\n  jsonStringToLex,\n} from '@atproto/lexicon'\nexport { parseLanguage } from '@atproto/common-web'\nexport * from './types'\nexport * from './client'\nexport * from './agent'\nexport * from './rich-text/rich-text'\nexport * from './rich-text/sanitization'\nexport * from './rich-text/unicode'\nexport * from './moderation'\nexport * from './moderation/types'\nexport { LABELS } from './moderation/const/labels'\nexport { LABEL_GROUPS } from './moderation/const/label-groups'\nexport { BskyAgent } from './bsky-agent'\nexport { AtpAgent as default } from './agent'\n","export const INVALID_HANDLE = 'handle.invalid'\n\n// Currently these are registration-time restrictions, not protocol-level\n// restrictions. We have a couple accounts in the wild that we need to clean up\n// before hard-disallow.\n// See also: https://en.wikipedia.org/wiki/Top-level_domain#Reserved_domains\nexport const DISALLOWED_TLDS = [\n  '.local',\n  '.arpa',\n  '.invalid',\n  '.localhost',\n  '.internal',\n  '.example',\n  '.alt',\n  // policy could concievably change on \".onion\" some day\n  '.onion',\n  // NOTE: .test is allowed in testing and devopment. In practical terms\n  // \"should\" \"never\" actually resolve and get registered in production\n]\n\n// Handle constraints, in English:\n//  - must be a possible domain name\n//    - RFC-1035 is commonly referenced, but has been updated. eg, RFC-3696,\n//      section 2. and RFC-3986, section 3. can now have leading numbers (eg,\n//      4chan.org)\n//    - \"labels\" (sub-names) are made of ASCII letters, digits, hyphens\n//    - can not start or end with a hyphen\n//    - TLD (last component) should not start with a digit\n//    - can't end with a hyphen (can end with digit)\n//    - each segment must be between 1 and 63 characters (not including any periods)\n//    - overall length can't be more than 253 characters\n//    - separated by (ASCII) periods; does not start or end with period\n//    - case insensitive\n//    - domains (handles) are equal if they are the same lower-case\n//    - punycode allowed for internationalization\n//  - no whitespace, null bytes, joining chars, etc\n//  - does not validate whether domain or TLD exists, or is a reserved or\n//    special TLD (eg, .onion or .local)\n//  - does not validate punycode\nexport const ensureValidHandle = (handle: string): void => {\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9.-]*$/.test(handle)) {\n    throw new InvalidHandleError(\n      'Disallowed characters in handle (ASCII letters, digits, dashes, periods only)',\n    )\n  }\n\n  if (handle.length > 253) {\n    throw new InvalidHandleError('Handle is too long (253 chars max)')\n  }\n  const labels = handle.split('.')\n  if (labels.length < 2) {\n    throw new InvalidHandleError('Handle domain needs at least two parts')\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i]\n    if (l.length < 1) {\n      throw new InvalidHandleError('Handle parts can not be empty')\n    }\n    if (l.length > 63) {\n      throw new InvalidHandleError('Handle part too long (max 63 chars)')\n    }\n    if (l.endsWith('-') || l.startsWith('-')) {\n      throw new InvalidHandleError(\n        'Handle parts can not start or end with hyphens',\n      )\n    }\n    if (i + 1 == labels.length && !/^[a-zA-Z]/.test(l)) {\n      throw new InvalidHandleError(\n        'Handle final component (TLD) must start with ASCII letter',\n      )\n    }\n  }\n}\n\n// simple regex translation of above constraints\nexport const ensureValidHandleRegex = (handle: string): void => {\n  if (\n    !/^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?$/.test(\n      handle,\n    )\n  ) {\n    throw new InvalidHandleError(\"Handle didn't validate via regex\")\n  }\n  if (handle.length > 253) {\n    throw new InvalidHandleError('Handle is too long (253 chars max)')\n  }\n}\n\nexport const normalizeHandle = (handle: string): string => {\n  return handle.toLowerCase()\n}\n\nexport const normalizeAndEnsureValidHandle = (handle: string): string => {\n  const normalized = normalizeHandle(handle)\n  ensureValidHandle(normalized)\n  return normalized\n}\n\nexport const isValidHandle = (handle: string): boolean => {\n  try {\n    ensureValidHandle(handle)\n  } catch (err) {\n    if (err instanceof InvalidHandleError) {\n      return false\n    }\n    throw err\n  }\n\n  return true\n}\n\nexport const isValidTld = (handle: string): boolean => {\n  return !DISALLOWED_TLDS.some((domain) => handle.endsWith(domain))\n}\n\nexport class InvalidHandleError extends Error {}\nexport class ReservedHandleError extends Error {}\nexport class UnsupportedDomainError extends Error {}\nexport class DisallowedDomainError extends Error {}\n","// Human-readable constraints:\n//   - valid W3C DID (https://www.w3.org/TR/did-core/#did-syntax)\n//      - entire URI is ASCII: [a-zA-Z0-9._:%-]\n//      - always starts \"did:\" (lower-case)\n//      - method name is one or more lower-case letters, followed by \":\"\n//      - remaining identifier can have any of the above chars, but can not end in \":\"\n//      - it seems that a bunch of \":\" can be included, and don't need spaces between\n//      - \"%\" is used only for \"percent encoding\" and must be followed by two hex characters (and thus can't end in \"%\")\n//      - query (\"?\") and fragment (\"#\") stuff is defined for \"DID URIs\", but not as part of identifier itself\n//      - \"The current specification does not take a position on the maximum length of a DID\"\n//   - in current atproto, only allowing did:plc and did:web. But not *forcing* this at lexicon layer\n//   - hard length limit of 8KBytes\n//   - not going to validate \"percent encoding\" here\nexport const ensureValidDid = (did: string): void => {\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9._:%-]*$/.test(did)) {\n    throw new InvalidDidError(\n      'Disallowed characters in DID (ASCII letters, digits, and a couple other characters only)',\n    )\n  }\n\n  const parts = did.split(':')\n  if (parts.length < 3) {\n    throw new InvalidDidError(\n      'DID requires prefix, method, and method-specific content',\n    )\n  }\n\n  if (parts[0] != 'did') {\n    throw new InvalidDidError('DID requires \"did:\" prefix')\n  }\n\n  if (!/^[a-z]+$/.test(parts[1])) {\n    throw new InvalidDidError('DID method must be lower-case letters')\n  }\n\n  if (did.endsWith(':') || did.endsWith('%')) {\n    throw new InvalidDidError('DID can not end with \":\" or \"%\"')\n  }\n\n  if (did.length > 2 * 1024) {\n    throw new InvalidDidError('DID is too long (2048 chars max)')\n  }\n}\n\nexport const ensureValidDidRegex = (did: string): void => {\n  // simple regex to enforce most constraints via just regex and length.\n  // hand wrote this regex based on above constraints\n  if (!/^did:[a-z]+:[a-zA-Z0-9._:%-]*[a-zA-Z0-9._-]$/.test(did)) {\n    throw new InvalidDidError(\"DID didn't validate via regex\")\n  }\n\n  if (did.length > 2 * 1024) {\n    throw new InvalidDidError('DID is too long (2048 chars max)')\n  }\n}\n\nexport class InvalidDidError extends Error {}\n","/*\nGrammar:\n\nalpha     = \"a\" / \"b\" / \"c\" / \"d\" / \"e\" / \"f\" / \"g\" / \"h\" / \"i\" / \"j\" / \"k\" / \"l\" / \"m\" / \"n\" / \"o\" / \"p\" / \"q\" / \"r\" / \"s\" / \"t\" / \"u\" / \"v\" / \"w\" / \"x\" / \"y\" / \"z\" / \"A\" / \"B\" / \"C\" / \"D\" / \"E\" / \"F\" / \"G\" / \"H\" / \"I\" / \"J\" / \"K\" / \"L\" / \"M\" / \"N\" / \"O\" / \"P\" / \"Q\" / \"R\" / \"S\" / \"T\" / \"U\" / \"V\" / \"W\" / \"X\" / \"Y\" / \"Z\"\nnumber    = \"1\" / \"2\" / \"3\" / \"4\" / \"5\" / \"6\" / \"7\" / \"8\" / \"9\" / \"0\"\ndelim     = \".\"\nsegment   = alpha *( alpha / number / \"-\" )\nauthority = segment *( delim segment )\nname      = alpha *( alpha )\nnsid      = authority delim name\n\n*/\n\nexport class NSID {\n  segments: string[] = []\n\n  static parse(nsid: string): NSID {\n    return new NSID(nsid)\n  }\n\n  static create(authority: string, name: string): NSID {\n    const segments = [...authority.split('.').reverse(), name].join('.')\n    return new NSID(segments)\n  }\n\n  static isValid(nsid: string): boolean {\n    try {\n      NSID.parse(nsid)\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  constructor(nsid: string) {\n    ensureValidNsid(nsid)\n    this.segments = nsid.split('.')\n  }\n\n  get authority() {\n    return this.segments\n      .slice(0, this.segments.length - 1)\n      .reverse()\n      .join('.')\n  }\n\n  get name() {\n    return this.segments.at(this.segments.length - 1)\n  }\n\n  toString() {\n    return this.segments.join('.')\n  }\n}\n\n// Human readable constraints on NSID:\n// - a valid domain in reversed notation\n// - followed by an additional period-separated name, which is camel-case letters\nexport const ensureValidNsid = (nsid: string): void => {\n  const toCheck = nsid\n\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9.-]*$/.test(toCheck)) {\n    throw new InvalidNsidError(\n      'Disallowed characters in NSID (ASCII letters, digits, dashes, periods only)',\n    )\n  }\n\n  if (toCheck.length > 253 + 1 + 63) {\n    throw new InvalidNsidError('NSID is too long (317 chars max)')\n  }\n  const labels = toCheck.split('.')\n  if (labels.length < 3) {\n    throw new InvalidNsidError('NSID needs at least three parts')\n  }\n  for (let i = 0; i < labels.length; i++) {\n    const l = labels[i]\n    if (l.length < 1) {\n      throw new InvalidNsidError('NSID parts can not be empty')\n    }\n    if (l.length > 63) {\n      throw new InvalidNsidError('NSID part too long (max 63 chars)')\n    }\n    if (l.endsWith('-') || l.startsWith('-')) {\n      throw new InvalidNsidError('NSID parts can not start or end with hyphen')\n    }\n    if (/^[0-9]/.test(l) && i == 0) {\n      throw new InvalidNsidError('NSID first part may not start with a digit')\n    }\n    if (!/^[a-zA-Z]+$/.test(l) && i + 1 == labels.length) {\n      throw new InvalidNsidError('NSID name part must be only letters')\n    }\n  }\n}\n\nexport const ensureValidNsidRegex = (nsid: string): void => {\n  // simple regex to enforce most constraints via just regex and length.\n  // hand wrote this regex based on above constraints\n  if (\n    !/^[a-zA-Z]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(\\.[a-zA-Z]([a-zA-Z]{0,61}[a-zA-Z])?)$/.test(\n      nsid,\n    )\n  ) {\n    throw new InvalidNsidError(\"NSID didn't validate via regex\")\n  }\n  if (nsid.length > 253 + 1 + 63) {\n    throw new InvalidNsidError('NSID is too long (317 chars max)')\n  }\n}\n\nexport class InvalidNsidError extends Error {}\n","import { ensureValidHandle, ensureValidHandleRegex } from './handle'\nimport { ensureValidDid, ensureValidDidRegex } from './did'\nimport { ensureValidNsid, ensureValidNsidRegex } from './nsid'\n\n// Human-readable constraints on ATURI:\n//   - following regular URLs, a 8KByte hard total length limit\n//   - follows ATURI docs on website\n//      - all ASCII characters, no whitespace. non-ASCII could be URL-encoded\n//      - starts \"at://\"\n//      - \"authority\" is a valid DID or a valid handle\n//      - optionally, follow \"authority\" with \"/\" and valid NSID as start of path\n//      - optionally, if NSID given, follow that with \"/\" and rkey\n//      - rkey path component can include URL-encoded (\"percent encoded\"), or:\n//          ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \":\" / \"@\" / \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\" / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n//          [a-zA-Z0-9._~:@!$&'\\(\\)*+,;=-]\n//      - rkey must have at least one char\n//      - regardless of path component, a fragment can follow  as \"#\" and then a JSON pointer (RFC-6901)\nexport const ensureValidAtUri = (uri: string) => {\n  // JSON pointer is pretty different from rest of URI, so split that out first\n  const uriParts = uri.split('#')\n  if (uriParts.length > 2) {\n    throw new Error('ATURI can have at most one \"#\", separating fragment out')\n  }\n  const fragmentPart = uriParts[1] || null\n  uri = uriParts[0]\n\n  // check that all chars are boring ASCII\n  if (!/^[a-zA-Z0-9._~:@!$&')(*+,;=%/-]*$/.test(uri)) {\n    throw new Error('Disallowed characters in ATURI (ASCII)')\n  }\n\n  const parts = uri.split('/')\n  if (parts.length >= 3 && (parts[0] != 'at:' || parts[1].length != 0)) {\n    throw new Error('ATURI must start with \"at://\"')\n  }\n  if (parts.length < 3) {\n    throw new Error('ATURI requires at least method and authority sections')\n  }\n\n  try {\n    if (parts[2].startsWith('did:')) {\n      ensureValidDid(parts[2])\n    } else {\n      ensureValidHandle(parts[2])\n    }\n  } catch {\n    throw new Error('ATURI authority must be a valid handle or DID')\n  }\n\n  if (parts.length >= 4) {\n    if (parts[3].length == 0) {\n      throw new Error(\n        'ATURI can not have a slash after authority without a path segment',\n      )\n    }\n    try {\n      ensureValidNsid(parts[3])\n    } catch {\n      throw new Error(\n        'ATURI requires first path segment (if supplied) to be valid NSID',\n      )\n    }\n  }\n\n  if (parts.length >= 5) {\n    if (parts[4].length == 0) {\n      throw new Error(\n        'ATURI can not have a slash after collection, unless record key is provided',\n      )\n    }\n    // would validate rkey here, but there are basically no constraints!\n  }\n\n  if (parts.length >= 6) {\n    throw new Error(\n      'ATURI path can have at most two parts, and no trailing slash',\n    )\n  }\n\n  if (uriParts.length >= 2 && fragmentPart == null) {\n    throw new Error('ATURI fragment must be non-empty and start with slash')\n  }\n\n  if (fragmentPart != null) {\n    if (fragmentPart.length == 0 || fragmentPart[0] != '/') {\n      throw new Error('ATURI fragment must be non-empty and start with slash')\n    }\n    // NOTE: enforcing *some* checks here for sanity. Eg, at least no whitespace\n    if (!/^\\/[a-zA-Z0-9._~:@!$&')(*+,;=%[\\]/-]*$/.test(fragmentPart)) {\n      throw new Error('Disallowed characters in ATURI fragment (ASCII)')\n    }\n  }\n\n  if (uri.length > 8 * 1024) {\n    throw new Error('ATURI is far too long')\n  }\n}\n\nexport const ensureValidAtUriRegex = (uri: string): void => {\n  // simple regex to enforce most constraints via just regex and length.\n  // hand wrote this regex based on above constraints. whew!\n  const aturiRegex =\n    /^at:\\/\\/(?<authority>[a-zA-Z0-9._:%-]+)(\\/(?<collection>[a-zA-Z0-9-.]+)(\\/(?<rkey>[a-zA-Z0-9._~:@!$&%')(*+,;=-]+))?)?(#(?<fragment>\\/[a-zA-Z0-9._~:@!$&%')(*+,;=\\-[\\]/\\\\]*))?$/\n  const rm = uri.match(aturiRegex)\n  if (!rm || !rm.groups) {\n    throw new Error(\"ATURI didn't validate via regex\")\n  }\n  const groups = rm.groups\n\n  try {\n    ensureValidHandleRegex(groups.authority)\n  } catch {\n    try {\n      ensureValidDidRegex(groups.authority)\n    } catch {\n      throw new Error('ATURI authority must be a valid handle or DID')\n    }\n  }\n\n  if (groups.collection) {\n    try {\n      ensureValidNsidRegex(groups.collection)\n    } catch {\n      throw new Error('ATURI collection path segment must be a valid NSID')\n    }\n  }\n\n  if (uri.length > 8 * 1024) {\n    throw new Error('ATURI is far too long')\n  }\n}\n","export * from './aturi_validation'\n\nexport const ATP_URI_REGEX =\n  // proto-    --did--------------   --name----------------   --path----   --query--   --hash--\n  /^(at:\\/\\/)?((?:did:[a-z0-9:%-]+)|(?:[a-z0-9][a-z0-9.:-]*))(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i\n//                       --path-----   --query--  --hash--\nconst RELATIVE_REGEX = /^(\\/[^?#\\s]*)?(\\?[^#\\s]+)?(#[^\\s]+)?$/i\n\nexport class AtUri {\n  hash: string\n  host: string\n  pathname: string\n  searchParams: URLSearchParams\n\n  constructor(uri: string, base?: string) {\n    let parsed\n    if (base) {\n      parsed = parse(base)\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${base}`)\n      }\n      const relativep = parseRelative(uri)\n      if (!relativep) {\n        throw new Error(`Invalid path: ${uri}`)\n      }\n      Object.assign(parsed, relativep)\n    } else {\n      parsed = parse(uri)\n      if (!parsed) {\n        throw new Error(`Invalid at uri: ${uri}`)\n      }\n    }\n\n    this.hash = parsed.hash\n    this.host = parsed.host\n    this.pathname = parsed.pathname\n    this.searchParams = parsed.searchParams\n  }\n\n  static make(handleOrDid: string, collection?: string, rkey?: string) {\n    let str = handleOrDid\n    if (collection) str += '/' + collection\n    if (rkey) str += '/' + rkey\n    return new AtUri(str)\n  }\n\n  get protocol() {\n    return 'at:'\n  }\n\n  get origin() {\n    return `at://${this.host}`\n  }\n\n  get hostname() {\n    return this.host\n  }\n\n  set hostname(v: string) {\n    this.host = v\n  }\n\n  get search() {\n    return this.searchParams.toString()\n  }\n\n  set search(v: string) {\n    this.searchParams = new URLSearchParams(v)\n  }\n\n  get collection() {\n    return this.pathname.split('/').filter(Boolean)[0] || ''\n  }\n\n  set collection(v: string) {\n    const parts = this.pathname.split('/').filter(Boolean)\n    parts[0] = v\n    this.pathname = parts.join('/')\n  }\n\n  get rkey() {\n    return this.pathname.split('/').filter(Boolean)[1] || ''\n  }\n\n  set rkey(v: string) {\n    const parts = this.pathname.split('/').filter(Boolean)\n    if (!parts[0]) parts[0] = 'undefined'\n    parts[1] = v\n    this.pathname = parts.join('/')\n  }\n\n  get href() {\n    return this.toString()\n  }\n\n  toString() {\n    let path = this.pathname || '/'\n    if (!path.startsWith('/')) {\n      path = `/${path}`\n    }\n    let qs = this.searchParams.toString()\n    if (qs && !qs.startsWith('?')) {\n      qs = `?${qs}`\n    }\n    let hash = this.hash\n    if (hash && !hash.startsWith('#')) {\n      hash = `#${hash}`\n    }\n    return `at://${this.host}${path}${qs}${hash}`\n  }\n}\n\nfunction parse(str: string) {\n  const match = ATP_URI_REGEX.exec(str)\n  if (match) {\n    return {\n      hash: match[5] || '',\n      host: match[2] || '',\n      pathname: match[3] || '',\n      searchParams: new URLSearchParams(match[4] || ''),\n    }\n  }\n  return undefined\n}\n\nfunction parseRelative(str: string) {\n  const match = RELATIVE_REGEX.exec(str)\n  if (match) {\n    return {\n      hash: match[3] || '',\n      pathname: match[1] || '',\n      searchParams: new URLSearchParams(match[2] || ''),\n    }\n  }\n  return undefined\n}\n","var util;\n(function (util) {\n    util.assertEqual = (val) => val;\n    function assertIs(_arg) { }\n    util.assertIs = assertIs;\n    function assertNever(_x) {\n        throw new Error();\n    }\n    util.assertNever = assertNever;\n    util.arrayToEnum = (items) => {\n        const obj = {};\n        for (const item of items) {\n            obj[item] = item;\n        }\n        return obj;\n    };\n    util.getValidEnumValues = (obj) => {\n        const validKeys = util.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== \"number\");\n        const filtered = {};\n        for (const k of validKeys) {\n            filtered[k] = obj[k];\n        }\n        return util.objectValues(filtered);\n    };\n    util.objectValues = (obj) => {\n        return util.objectKeys(obj).map(function (e) {\n            return obj[e];\n        });\n    };\n    util.objectKeys = typeof Object.keys === \"function\" // eslint-disable-line ban/ban\n        ? (obj) => Object.keys(obj) // eslint-disable-line ban/ban\n        : (object) => {\n            const keys = [];\n            for (const key in object) {\n                if (Object.prototype.hasOwnProperty.call(object, key)) {\n                    keys.push(key);\n                }\n            }\n            return keys;\n        };\n    util.find = (arr, checker) => {\n        for (const item of arr) {\n            if (checker(item))\n                return item;\n        }\n        return undefined;\n    };\n    util.isInteger = typeof Number.isInteger === \"function\"\n        ? (val) => Number.isInteger(val) // eslint-disable-line ban/ban\n        : (val) => typeof val === \"number\" && isFinite(val) && Math.floor(val) === val;\n    function joinValues(array, separator = \" | \") {\n        return array\n            .map((val) => (typeof val === \"string\" ? `'${val}'` : val))\n            .join(separator);\n    }\n    util.joinValues = joinValues;\n    util.jsonStringifyReplacer = (_, value) => {\n        if (typeof value === \"bigint\") {\n            return value.toString();\n        }\n        return value;\n    };\n})(util || (util = {}));\nvar objectUtil;\n(function (objectUtil) {\n    objectUtil.mergeShapes = (first, second) => {\n        return {\n            ...first,\n            ...second, // second overwrites first\n        };\n    };\n})(objectUtil || (objectUtil = {}));\nconst ZodParsedType = util.arrayToEnum([\n    \"string\",\n    \"nan\",\n    \"number\",\n    \"integer\",\n    \"float\",\n    \"boolean\",\n    \"date\",\n    \"bigint\",\n    \"symbol\",\n    \"function\",\n    \"undefined\",\n    \"null\",\n    \"array\",\n    \"object\",\n    \"unknown\",\n    \"promise\",\n    \"void\",\n    \"never\",\n    \"map\",\n    \"set\",\n]);\nconst getParsedType = (data) => {\n    const t = typeof data;\n    switch (t) {\n        case \"undefined\":\n            return ZodParsedType.undefined;\n        case \"string\":\n            return ZodParsedType.string;\n        case \"number\":\n            return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;\n        case \"boolean\":\n            return ZodParsedType.boolean;\n        case \"function\":\n            return ZodParsedType.function;\n        case \"bigint\":\n            return ZodParsedType.bigint;\n        case \"symbol\":\n            return ZodParsedType.symbol;\n        case \"object\":\n            if (Array.isArray(data)) {\n                return ZodParsedType.array;\n            }\n            if (data === null) {\n                return ZodParsedType.null;\n            }\n            if (data.then &&\n                typeof data.then === \"function\" &&\n                data.catch &&\n                typeof data.catch === \"function\") {\n                return ZodParsedType.promise;\n            }\n            if (typeof Map !== \"undefined\" && data instanceof Map) {\n                return ZodParsedType.map;\n            }\n            if (typeof Set !== \"undefined\" && data instanceof Set) {\n                return ZodParsedType.set;\n            }\n            if (typeof Date !== \"undefined\" && data instanceof Date) {\n                return ZodParsedType.date;\n            }\n            return ZodParsedType.object;\n        default:\n            return ZodParsedType.unknown;\n    }\n};\n\nconst ZodIssueCode = util.arrayToEnum([\n    \"invalid_type\",\n    \"invalid_literal\",\n    \"custom\",\n    \"invalid_union\",\n    \"invalid_union_discriminator\",\n    \"invalid_enum_value\",\n    \"unrecognized_keys\",\n    \"invalid_arguments\",\n    \"invalid_return_type\",\n    \"invalid_date\",\n    \"invalid_string\",\n    \"too_small\",\n    \"too_big\",\n    \"invalid_intersection_types\",\n    \"not_multiple_of\",\n    \"not_finite\",\n]);\nconst quotelessJson = (obj) => {\n    const json = JSON.stringify(obj, null, 2);\n    return json.replace(/\"([^\"]+)\":/g, \"$1:\");\n};\nclass ZodError extends Error {\n    constructor(issues) {\n        super();\n        this.issues = [];\n        this.addIssue = (sub) => {\n            this.issues = [...this.issues, sub];\n        };\n        this.addIssues = (subs = []) => {\n            this.issues = [...this.issues, ...subs];\n        };\n        const actualProto = new.target.prototype;\n        if (Object.setPrototypeOf) {\n            // eslint-disable-next-line ban/ban\n            Object.setPrototypeOf(this, actualProto);\n        }\n        else {\n            this.__proto__ = actualProto;\n        }\n        this.name = \"ZodError\";\n        this.issues = issues;\n    }\n    get errors() {\n        return this.issues;\n    }\n    format(_mapper) {\n        const mapper = _mapper ||\n            function (issue) {\n                return issue.message;\n            };\n        const fieldErrors = { _errors: [] };\n        const processError = (error) => {\n            for (const issue of error.issues) {\n                if (issue.code === \"invalid_union\") {\n                    issue.unionErrors.map(processError);\n                }\n                else if (issue.code === \"invalid_return_type\") {\n                    processError(issue.returnTypeError);\n                }\n                else if (issue.code === \"invalid_arguments\") {\n                    processError(issue.argumentsError);\n                }\n                else if (issue.path.length === 0) {\n                    fieldErrors._errors.push(mapper(issue));\n                }\n                else {\n                    let curr = fieldErrors;\n                    let i = 0;\n                    while (i < issue.path.length) {\n                        const el = issue.path[i];\n                        const terminal = i === issue.path.length - 1;\n                        if (!terminal) {\n                            curr[el] = curr[el] || { _errors: [] };\n                            // if (typeof el === \"string\") {\n                            //   curr[el] = curr[el] || { _errors: [] };\n                            // } else if (typeof el === \"number\") {\n                            //   const errorArray: any = [];\n                            //   errorArray._errors = [];\n                            //   curr[el] = curr[el] || errorArray;\n                            // }\n                        }\n                        else {\n                            curr[el] = curr[el] || { _errors: [] };\n                            curr[el]._errors.push(mapper(issue));\n                        }\n                        curr = curr[el];\n                        i++;\n                    }\n                }\n            }\n        };\n        processError(this);\n        return fieldErrors;\n    }\n    toString() {\n        return this.message;\n    }\n    get message() {\n        return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);\n    }\n    get isEmpty() {\n        return this.issues.length === 0;\n    }\n    flatten(mapper = (issue) => issue.message) {\n        const fieldErrors = {};\n        const formErrors = [];\n        for (const sub of this.issues) {\n            if (sub.path.length > 0) {\n                fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];\n                fieldErrors[sub.path[0]].push(mapper(sub));\n            }\n            else {\n                formErrors.push(mapper(sub));\n            }\n        }\n        return { formErrors, fieldErrors };\n    }\n    get formErrors() {\n        return this.flatten();\n    }\n}\nZodError.create = (issues) => {\n    const error = new ZodError(issues);\n    return error;\n};\n\nconst errorMap = (issue, _ctx) => {\n    let message;\n    switch (issue.code) {\n        case ZodIssueCode.invalid_type:\n            if (issue.received === ZodParsedType.undefined) {\n                message = \"Required\";\n            }\n            else {\n                message = `Expected ${issue.expected}, received ${issue.received}`;\n            }\n            break;\n        case ZodIssueCode.invalid_literal:\n            message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;\n            break;\n        case ZodIssueCode.unrecognized_keys:\n            message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, \", \")}`;\n            break;\n        case ZodIssueCode.invalid_union:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_union_discriminator:\n            message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;\n            break;\n        case ZodIssueCode.invalid_enum_value:\n            message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;\n            break;\n        case ZodIssueCode.invalid_arguments:\n            message = `Invalid function arguments`;\n            break;\n        case ZodIssueCode.invalid_return_type:\n            message = `Invalid function return type`;\n            break;\n        case ZodIssueCode.invalid_date:\n            message = `Invalid date`;\n            break;\n        case ZodIssueCode.invalid_string:\n            if (typeof issue.validation === \"object\") {\n                if (\"includes\" in issue.validation) {\n                    message = `Invalid input: must include \"${issue.validation.includes}\"`;\n                    if (typeof issue.validation.position === \"number\") {\n                        message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;\n                    }\n                }\n                else if (\"startsWith\" in issue.validation) {\n                    message = `Invalid input: must start with \"${issue.validation.startsWith}\"`;\n                }\n                else if (\"endsWith\" in issue.validation) {\n                    message = `Invalid input: must end with \"${issue.validation.endsWith}\"`;\n                }\n                else {\n                    util.assertNever(issue.validation);\n                }\n            }\n            else if (issue.validation !== \"regex\") {\n                message = `Invalid ${issue.validation}`;\n            }\n            else {\n                message = \"Invalid\";\n            }\n            break;\n        case ZodIssueCode.too_small:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? \"exactly\" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${issue.minimum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly equal to `\n                    : issue.inclusive\n                        ? `greater than or equal to `\n                        : `greater than `}${new Date(Number(issue.minimum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.too_big:\n            if (issue.type === \"array\")\n                message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;\n            else if (issue.type === \"string\")\n                message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;\n            else if (issue.type === \"number\")\n                message = `Number must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"bigint\")\n                message = `BigInt must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `less than or equal to`\n                        : `less than`} ${issue.maximum}`;\n            else if (issue.type === \"date\")\n                message = `Date must be ${issue.exact\n                    ? `exactly`\n                    : issue.inclusive\n                        ? `smaller than or equal to`\n                        : `smaller than`} ${new Date(Number(issue.maximum))}`;\n            else\n                message = \"Invalid input\";\n            break;\n        case ZodIssueCode.custom:\n            message = `Invalid input`;\n            break;\n        case ZodIssueCode.invalid_intersection_types:\n            message = `Intersection results could not be merged`;\n            break;\n        case ZodIssueCode.not_multiple_of:\n            message = `Number must be a multiple of ${issue.multipleOf}`;\n            break;\n        case ZodIssueCode.not_finite:\n            message = \"Number must be finite\";\n            break;\n        default:\n            message = _ctx.defaultError;\n            util.assertNever(issue);\n    }\n    return { message };\n};\n\nlet overrideErrorMap = errorMap;\nfunction setErrorMap(map) {\n    overrideErrorMap = map;\n}\nfunction getErrorMap() {\n    return overrideErrorMap;\n}\n\nconst makeIssue = (params) => {\n    const { data, path, errorMaps, issueData } = params;\n    const fullPath = [...path, ...(issueData.path || [])];\n    const fullIssue = {\n        ...issueData,\n        path: fullPath,\n    };\n    let errorMessage = \"\";\n    const maps = errorMaps\n        .filter((m) => !!m)\n        .slice()\n        .reverse();\n    for (const map of maps) {\n        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;\n    }\n    return {\n        ...issueData,\n        path: fullPath,\n        message: issueData.message || errorMessage,\n    };\n};\nconst EMPTY_PATH = [];\nfunction addIssueToContext(ctx, issueData) {\n    const issue = makeIssue({\n        issueData: issueData,\n        data: ctx.data,\n        path: ctx.path,\n        errorMaps: [\n            ctx.common.contextualErrorMap,\n            ctx.schemaErrorMap,\n            getErrorMap(),\n            errorMap, // then global default map\n        ].filter((x) => !!x),\n    });\n    ctx.common.issues.push(issue);\n}\nclass ParseStatus {\n    constructor() {\n        this.value = \"valid\";\n    }\n    dirty() {\n        if (this.value === \"valid\")\n            this.value = \"dirty\";\n    }\n    abort() {\n        if (this.value !== \"aborted\")\n            this.value = \"aborted\";\n    }\n    static mergeArray(status, results) {\n        const arrayValue = [];\n        for (const s of results) {\n            if (s.status === \"aborted\")\n                return INVALID;\n            if (s.status === \"dirty\")\n                status.dirty();\n            arrayValue.push(s.value);\n        }\n        return { status: status.value, value: arrayValue };\n    }\n    static async mergeObjectAsync(status, pairs) {\n        const syncPairs = [];\n        for (const pair of pairs) {\n            syncPairs.push({\n                key: await pair.key,\n                value: await pair.value,\n            });\n        }\n        return ParseStatus.mergeObjectSync(status, syncPairs);\n    }\n    static mergeObjectSync(status, pairs) {\n        const finalObject = {};\n        for (const pair of pairs) {\n            const { key, value } = pair;\n            if (key.status === \"aborted\")\n                return INVALID;\n            if (value.status === \"aborted\")\n                return INVALID;\n            if (key.status === \"dirty\")\n                status.dirty();\n            if (value.status === \"dirty\")\n                status.dirty();\n            if (typeof value.value !== \"undefined\" || pair.alwaysSet) {\n                finalObject[key.value] = value.value;\n            }\n        }\n        return { status: status.value, value: finalObject };\n    }\n}\nconst INVALID = Object.freeze({\n    status: \"aborted\",\n});\nconst DIRTY = (value) => ({ status: \"dirty\", value });\nconst OK = (value) => ({ status: \"valid\", value });\nconst isAborted = (x) => x.status === \"aborted\";\nconst isDirty = (x) => x.status === \"dirty\";\nconst isValid = (x) => x.status === \"valid\";\nconst isAsync = (x) => typeof Promise !== \"undefined\" && x instanceof Promise;\n\nvar errorUtil;\n(function (errorUtil) {\n    errorUtil.errToObj = (message) => typeof message === \"string\" ? { message } : message || {};\n    errorUtil.toString = (message) => typeof message === \"string\" ? message : message === null || message === void 0 ? void 0 : message.message;\n})(errorUtil || (errorUtil = {}));\n\nclass ParseInputLazyPath {\n    constructor(parent, value, path, key) {\n        this._cachedPath = [];\n        this.parent = parent;\n        this.data = value;\n        this._path = path;\n        this._key = key;\n    }\n    get path() {\n        if (!this._cachedPath.length) {\n            if (this._key instanceof Array) {\n                this._cachedPath.push(...this._path, ...this._key);\n            }\n            else {\n                this._cachedPath.push(...this._path, this._key);\n            }\n        }\n        return this._cachedPath;\n    }\n}\nconst handleResult = (ctx, result) => {\n    if (isValid(result)) {\n        return { success: true, data: result.value };\n    }\n    else {\n        if (!ctx.common.issues.length) {\n            throw new Error(\"Validation failed but no issues detected.\");\n        }\n        return {\n            success: false,\n            get error() {\n                if (this._error)\n                    return this._error;\n                const error = new ZodError(ctx.common.issues);\n                this._error = error;\n                return this._error;\n            },\n        };\n    }\n};\nfunction processCreateParams(params) {\n    if (!params)\n        return {};\n    const { errorMap, invalid_type_error, required_error, description } = params;\n    if (errorMap && (invalid_type_error || required_error)) {\n        throw new Error(`Can't use \"invalid_type_error\" or \"required_error\" in conjunction with custom error map.`);\n    }\n    if (errorMap)\n        return { errorMap: errorMap, description };\n    const customMap = (iss, ctx) => {\n        if (iss.code !== \"invalid_type\")\n            return { message: ctx.defaultError };\n        if (typeof ctx.data === \"undefined\") {\n            return { message: required_error !== null && required_error !== void 0 ? required_error : ctx.defaultError };\n        }\n        return { message: invalid_type_error !== null && invalid_type_error !== void 0 ? invalid_type_error : ctx.defaultError };\n    };\n    return { errorMap: customMap, description };\n}\nclass ZodType {\n    constructor(def) {\n        /** Alias of safeParseAsync */\n        this.spa = this.safeParseAsync;\n        this._def = def;\n        this.parse = this.parse.bind(this);\n        this.safeParse = this.safeParse.bind(this);\n        this.parseAsync = this.parseAsync.bind(this);\n        this.safeParseAsync = this.safeParseAsync.bind(this);\n        this.spa = this.spa.bind(this);\n        this.refine = this.refine.bind(this);\n        this.refinement = this.refinement.bind(this);\n        this.superRefine = this.superRefine.bind(this);\n        this.optional = this.optional.bind(this);\n        this.nullable = this.nullable.bind(this);\n        this.nullish = this.nullish.bind(this);\n        this.array = this.array.bind(this);\n        this.promise = this.promise.bind(this);\n        this.or = this.or.bind(this);\n        this.and = this.and.bind(this);\n        this.transform = this.transform.bind(this);\n        this.brand = this.brand.bind(this);\n        this.default = this.default.bind(this);\n        this.catch = this.catch.bind(this);\n        this.describe = this.describe.bind(this);\n        this.pipe = this.pipe.bind(this);\n        this.isNullable = this.isNullable.bind(this);\n        this.isOptional = this.isOptional.bind(this);\n    }\n    get description() {\n        return this._def.description;\n    }\n    _getType(input) {\n        return getParsedType(input.data);\n    }\n    _getOrReturnCtx(input, ctx) {\n        return (ctx || {\n            common: input.parent.common,\n            data: input.data,\n            parsedType: getParsedType(input.data),\n            schemaErrorMap: this._def.errorMap,\n            path: input.path,\n            parent: input.parent,\n        });\n    }\n    _processInputParams(input) {\n        return {\n            status: new ParseStatus(),\n            ctx: {\n                common: input.parent.common,\n                data: input.data,\n                parsedType: getParsedType(input.data),\n                schemaErrorMap: this._def.errorMap,\n                path: input.path,\n                parent: input.parent,\n            },\n        };\n    }\n    _parseSync(input) {\n        const result = this._parse(input);\n        if (isAsync(result)) {\n            throw new Error(\"Synchronous parse encountered promise.\");\n        }\n        return result;\n    }\n    _parseAsync(input) {\n        const result = this._parse(input);\n        return Promise.resolve(result);\n    }\n    parse(data, params) {\n        const result = this.safeParse(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    safeParse(data, params) {\n        var _a;\n        const ctx = {\n            common: {\n                issues: [],\n                async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const result = this._parseSync({ data, path: ctx.path, parent: ctx });\n        return handleResult(ctx, result);\n    }\n    async parseAsync(data, params) {\n        const result = await this.safeParseAsync(data, params);\n        if (result.success)\n            return result.data;\n        throw result.error;\n    }\n    async safeParseAsync(data, params) {\n        const ctx = {\n            common: {\n                issues: [],\n                contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,\n                async: true,\n            },\n            path: (params === null || params === void 0 ? void 0 : params.path) || [],\n            schemaErrorMap: this._def.errorMap,\n            parent: null,\n            data,\n            parsedType: getParsedType(data),\n        };\n        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });\n        const result = await (isAsync(maybeAsyncResult)\n            ? maybeAsyncResult\n            : Promise.resolve(maybeAsyncResult));\n        return handleResult(ctx, result);\n    }\n    refine(check, message) {\n        const getIssueProperties = (val) => {\n            if (typeof message === \"string\" || typeof message === \"undefined\") {\n                return { message };\n            }\n            else if (typeof message === \"function\") {\n                return message(val);\n            }\n            else {\n                return message;\n            }\n        };\n        return this._refinement((val, ctx) => {\n            const result = check(val);\n            const setError = () => ctx.addIssue({\n                code: ZodIssueCode.custom,\n                ...getIssueProperties(val),\n            });\n            if (typeof Promise !== \"undefined\" && result instanceof Promise) {\n                return result.then((data) => {\n                    if (!data) {\n                        setError();\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                });\n            }\n            if (!result) {\n                setError();\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    refinement(check, refinementData) {\n        return this._refinement((val, ctx) => {\n            if (!check(val)) {\n                ctx.addIssue(typeof refinementData === \"function\"\n                    ? refinementData(val, ctx)\n                    : refinementData);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    _refinement(refinement) {\n        return new ZodEffects({\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"refinement\", refinement },\n        });\n    }\n    superRefine(refinement) {\n        return this._refinement(refinement);\n    }\n    optional() {\n        return ZodOptional.create(this, this._def);\n    }\n    nullable() {\n        return ZodNullable.create(this, this._def);\n    }\n    nullish() {\n        return this.nullable().optional();\n    }\n    array() {\n        return ZodArray.create(this, this._def);\n    }\n    promise() {\n        return ZodPromise.create(this, this._def);\n    }\n    or(option) {\n        return ZodUnion.create([this, option], this._def);\n    }\n    and(incoming) {\n        return ZodIntersection.create(this, incoming, this._def);\n    }\n    transform(transform) {\n        return new ZodEffects({\n            ...processCreateParams(this._def),\n            schema: this,\n            typeName: ZodFirstPartyTypeKind.ZodEffects,\n            effect: { type: \"transform\", transform },\n        });\n    }\n    default(def) {\n        const defaultValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodDefault({\n            ...processCreateParams(this._def),\n            innerType: this,\n            defaultValue: defaultValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodDefault,\n        });\n    }\n    brand() {\n        return new ZodBranded({\n            typeName: ZodFirstPartyTypeKind.ZodBranded,\n            type: this,\n            ...processCreateParams(this._def),\n        });\n    }\n    catch(def) {\n        const catchValueFunc = typeof def === \"function\" ? def : () => def;\n        return new ZodCatch({\n            ...processCreateParams(this._def),\n            innerType: this,\n            catchValue: catchValueFunc,\n            typeName: ZodFirstPartyTypeKind.ZodCatch,\n        });\n    }\n    describe(description) {\n        const This = this.constructor;\n        return new This({\n            ...this._def,\n            description,\n        });\n    }\n    pipe(target) {\n        return ZodPipeline.create(this, target);\n    }\n    isOptional() {\n        return this.safeParse(undefined).success;\n    }\n    isNullable() {\n        return this.safeParse(null).success;\n    }\n}\nconst cuidRegex = /^c[^\\s-]{8,}$/i;\nconst cuid2Regex = /^[a-z][a-z0-9]*$/;\nconst ulidRegex = /[0-9A-HJKMNP-TV-Z]{26}/;\nconst uuidRegex = /^([a-f0-9]{8}-[a-f0-9]{4}-[1-5][a-f0-9]{3}-[a-f0-9]{4}-[a-f0-9]{12}|00000000-0000-0000-0000-000000000000)$/i;\n// from https://stackoverflow.com/a/46181/1550155\n// old version: too slow, didn't support unicode\n// const emailRegex = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i;\n//old email regex\n// const emailRegex = /^(([^<>()[\\].,;:\\s@\"]+(\\.[^<>()[\\].,;:\\s@\"]+)*)|(\".+\"))@((?!-)([^<>()[\\].,;:\\s@\"]+\\.)+[^<>()[\\].,;:\\s@\"]{1,})[^-<>()[\\].,;:\\s@\"]$/i;\n// eslint-disable-next-line\nconst emailRegex = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\])|(\\[IPv6:(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))\\])|([A-Za-z0-9]([A-Za-z0-9-]*[A-Za-z0-9])*(\\.[A-Za-z]{2,})+))$/;\n// from https://thekevinscott.com/emojis-in-javascript/#writing-a-regular-expression\nconst emojiRegex = /^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$/u;\nconst ipv4Regex = /^(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))$/;\nconst ipv6Regex = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/;\n// Adapted from https://stackoverflow.com/a/3143231\nconst datetimeRegex = (args) => {\n    if (args.precision) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{${args.precision}}Z$`);\n        }\n    }\n    else if (args.precision === 0) {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}Z$`);\n        }\n    }\n    else {\n        if (args.offset) {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?(([+-]\\\\d{2}(:?\\\\d{2})?)|Z)$`);\n        }\n        else {\n            return new RegExp(`^\\\\d{4}-\\\\d{2}-\\\\d{2}T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d+)?Z$`);\n        }\n    }\n};\nfunction isValidIP(ip, version) {\n    if ((version === \"v4\" || !version) && ipv4Regex.test(ip)) {\n        return true;\n    }\n    if ((version === \"v6\" || !version) && ipv6Regex.test(ip)) {\n        return true;\n    }\n    return false;\n}\nclass ZodString extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._regex = (regex, validation, message) => this.refinement((data) => regex.test(data), {\n            validation,\n            code: ZodIssueCode.invalid_string,\n            ...errorUtil.errToObj(message),\n        });\n        /**\n         * @deprecated Use z.string().min(1) instead.\n         * @see {@link ZodString.min}\n         */\n        this.nonempty = (message) => this.min(1, errorUtil.errToObj(message));\n        this.trim = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"trim\" }],\n        });\n        this.toLowerCase = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toLowerCase\" }],\n        });\n        this.toUpperCase = () => new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, { kind: \"toUpperCase\" }],\n        });\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = String(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.string) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.string,\n                received: ctx.parsedType,\n            }\n            //\n            );\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.length < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.length > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"string\",\n                        inclusive: true,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"length\") {\n                const tooBig = input.data.length > check.value;\n                const tooSmall = input.data.length < check.value;\n                if (tooBig || tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    if (tooBig) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_big,\n                            maximum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    else if (tooSmall) {\n                        addIssueToContext(ctx, {\n                            code: ZodIssueCode.too_small,\n                            minimum: check.value,\n                            type: \"string\",\n                            inclusive: true,\n                            exact: true,\n                            message: check.message,\n                        });\n                    }\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"email\") {\n                if (!emailRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"email\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"emoji\") {\n                if (!emojiRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"emoji\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"uuid\") {\n                if (!uuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"uuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid\") {\n                if (!cuidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"cuid2\") {\n                if (!cuid2Regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"cuid2\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ulid\") {\n                if (!ulidRegex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ulid\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"url\") {\n                try {\n                    new URL(input.data);\n                }\n                catch (_a) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"url\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"regex\") {\n                check.regex.lastIndex = 0;\n                const testResult = check.regex.test(input.data);\n                if (!testResult) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"regex\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"trim\") {\n                input.data = input.data.trim();\n            }\n            else if (check.kind === \"includes\") {\n                if (!input.data.includes(check.value, check.position)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { includes: check.value, position: check.position },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"toLowerCase\") {\n                input.data = input.data.toLowerCase();\n            }\n            else if (check.kind === \"toUpperCase\") {\n                input.data = input.data.toUpperCase();\n            }\n            else if (check.kind === \"startsWith\") {\n                if (!input.data.startsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { startsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"endsWith\") {\n                if (!input.data.endsWith(check.value)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: { endsWith: check.value },\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"datetime\") {\n                const regex = datetimeRegex(check);\n                if (!regex.test(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_string,\n                        validation: \"datetime\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"ip\") {\n                if (!isValidIP(input.data, check.version)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        validation: \"ip\",\n                        code: ZodIssueCode.invalid_string,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    _addCheck(check) {\n        return new ZodString({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    email(message) {\n        return this._addCheck({ kind: \"email\", ...errorUtil.errToObj(message) });\n    }\n    url(message) {\n        return this._addCheck({ kind: \"url\", ...errorUtil.errToObj(message) });\n    }\n    emoji(message) {\n        return this._addCheck({ kind: \"emoji\", ...errorUtil.errToObj(message) });\n    }\n    uuid(message) {\n        return this._addCheck({ kind: \"uuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid(message) {\n        return this._addCheck({ kind: \"cuid\", ...errorUtil.errToObj(message) });\n    }\n    cuid2(message) {\n        return this._addCheck({ kind: \"cuid2\", ...errorUtil.errToObj(message) });\n    }\n    ulid(message) {\n        return this._addCheck({ kind: \"ulid\", ...errorUtil.errToObj(message) });\n    }\n    ip(options) {\n        return this._addCheck({ kind: \"ip\", ...errorUtil.errToObj(options) });\n    }\n    datetime(options) {\n        var _a;\n        if (typeof options === \"string\") {\n            return this._addCheck({\n                kind: \"datetime\",\n                precision: null,\n                offset: false,\n                message: options,\n            });\n        }\n        return this._addCheck({\n            kind: \"datetime\",\n            precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === \"undefined\" ? null : options === null || options === void 0 ? void 0 : options.precision,\n            offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    regex(regex, message) {\n        return this._addCheck({\n            kind: \"regex\",\n            regex: regex,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    includes(value, options) {\n        return this._addCheck({\n            kind: \"includes\",\n            value: value,\n            position: options === null || options === void 0 ? void 0 : options.position,\n            ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message),\n        });\n    }\n    startsWith(value, message) {\n        return this._addCheck({\n            kind: \"startsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    endsWith(value, message) {\n        return this._addCheck({\n            kind: \"endsWith\",\n            value: value,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    min(minLength, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    max(maxLength, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxLength,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    length(len, message) {\n        return this._addCheck({\n            kind: \"length\",\n            value: len,\n            ...errorUtil.errToObj(message),\n        });\n    }\n    get isDatetime() {\n        return !!this._def.checks.find((ch) => ch.kind === \"datetime\");\n    }\n    get isEmail() {\n        return !!this._def.checks.find((ch) => ch.kind === \"email\");\n    }\n    get isURL() {\n        return !!this._def.checks.find((ch) => ch.kind === \"url\");\n    }\n    get isEmoji() {\n        return !!this._def.checks.find((ch) => ch.kind === \"emoji\");\n    }\n    get isUUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"uuid\");\n    }\n    get isCUID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid\");\n    }\n    get isCUID2() {\n        return !!this._def.checks.find((ch) => ch.kind === \"cuid2\");\n    }\n    get isULID() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ulid\");\n    }\n    get isIP() {\n        return !!this._def.checks.find((ch) => ch.kind === \"ip\");\n    }\n    get minLength() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxLength() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodString.create = (params) => {\n    var _a;\n    return new ZodString({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodString,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\n// https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034\nfunction floatSafeRemainder(val, step) {\n    const valDecCount = (val.toString().split(\".\")[1] || \"\").length;\n    const stepDecCount = (step.toString().split(\".\")[1] || \"\").length;\n    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;\n    const valInt = parseInt(val.toFixed(decCount).replace(\".\", \"\"));\n    const stepInt = parseInt(step.toFixed(decCount).replace(\".\", \"\"));\n    return (valInt % stepInt) / Math.pow(10, decCount);\n}\nclass ZodNumber extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n        this.step = this.multipleOf;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Number(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.number) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.number,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"int\") {\n                if (!util.isInteger(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.invalid_type,\n                        expected: \"integer\",\n                        received: \"float\",\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        minimum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        maximum: check.value,\n                        type: \"number\",\n                        inclusive: check.inclusive,\n                        exact: false,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (floatSafeRemainder(input.data, check.value) !== 0) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"finite\") {\n                if (!Number.isFinite(input.data)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_finite,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodNumber({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    int(message) {\n        return this._addCheck({\n            kind: \"int\",\n            message: errorUtil.toString(message),\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: 0,\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value: value,\n            message: errorUtil.toString(message),\n        });\n    }\n    finite(message) {\n        return this._addCheck({\n            kind: \"finite\",\n            message: errorUtil.toString(message),\n        });\n    }\n    safe(message) {\n        return this._addCheck({\n            kind: \"min\",\n            inclusive: true,\n            value: Number.MIN_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        })._addCheck({\n            kind: \"max\",\n            inclusive: true,\n            value: Number.MAX_SAFE_INTEGER,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n    get isInt() {\n        return !!this._def.checks.find((ch) => ch.kind === \"int\" ||\n            (ch.kind === \"multipleOf\" && util.isInteger(ch.value)));\n    }\n    get isFinite() {\n        let max = null, min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"finite\" ||\n                ch.kind === \"int\" ||\n                ch.kind === \"multipleOf\") {\n                return true;\n            }\n            else if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n            else if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return Number.isFinite(min) && Number.isFinite(max);\n    }\n}\nZodNumber.create = (params) => {\n    return new ZodNumber({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodNumber,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBigInt extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.min = this.gte;\n        this.max = this.lte;\n    }\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = BigInt(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.bigint) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.bigint,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        let ctx = undefined;\n        const status = new ParseStatus();\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                const tooSmall = check.inclusive\n                    ? input.data < check.value\n                    : input.data <= check.value;\n                if (tooSmall) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        type: \"bigint\",\n                        minimum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                const tooBig = check.inclusive\n                    ? input.data > check.value\n                    : input.data >= check.value;\n                if (tooBig) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        type: \"bigint\",\n                        maximum: check.value,\n                        inclusive: check.inclusive,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"multipleOf\") {\n                if (input.data % check.value !== BigInt(0)) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.not_multiple_of,\n                        multipleOf: check.value,\n                        message: check.message,\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return { status: status.value, value: input.data };\n    }\n    gte(value, message) {\n        return this.setLimit(\"min\", value, true, errorUtil.toString(message));\n    }\n    gt(value, message) {\n        return this.setLimit(\"min\", value, false, errorUtil.toString(message));\n    }\n    lte(value, message) {\n        return this.setLimit(\"max\", value, true, errorUtil.toString(message));\n    }\n    lt(value, message) {\n        return this.setLimit(\"max\", value, false, errorUtil.toString(message));\n    }\n    setLimit(kind, value, inclusive, message) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [\n                ...this._def.checks,\n                {\n                    kind,\n                    value,\n                    inclusive,\n                    message: errorUtil.toString(message),\n                },\n            ],\n        });\n    }\n    _addCheck(check) {\n        return new ZodBigInt({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    positive(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    negative(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: false,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonpositive(message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    nonnegative(message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: BigInt(0),\n            inclusive: true,\n            message: errorUtil.toString(message),\n        });\n    }\n    multipleOf(value, message) {\n        return this._addCheck({\n            kind: \"multipleOf\",\n            value,\n            message: errorUtil.toString(message),\n        });\n    }\n    get minValue() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min;\n    }\n    get maxValue() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max;\n    }\n}\nZodBigInt.create = (params) => {\n    var _a;\n    return new ZodBigInt({\n        checks: [],\n        typeName: ZodFirstPartyTypeKind.ZodBigInt,\n        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodBoolean extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = Boolean(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.boolean) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.boolean,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodBoolean.create = (params) => {\n    return new ZodBoolean({\n        typeName: ZodFirstPartyTypeKind.ZodBoolean,\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDate extends ZodType {\n    _parse(input) {\n        if (this._def.coerce) {\n            input.data = new Date(input.data);\n        }\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.date) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.date,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (isNaN(input.data.getTime())) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_date,\n            });\n            return INVALID;\n        }\n        const status = new ParseStatus();\n        let ctx = undefined;\n        for (const check of this._def.checks) {\n            if (check.kind === \"min\") {\n                if (input.data.getTime() < check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_small,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        minimum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else if (check.kind === \"max\") {\n                if (input.data.getTime() > check.value) {\n                    ctx = this._getOrReturnCtx(input, ctx);\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.too_big,\n                        message: check.message,\n                        inclusive: true,\n                        exact: false,\n                        maximum: check.value,\n                        type: \"date\",\n                    });\n                    status.dirty();\n                }\n            }\n            else {\n                util.assertNever(check);\n            }\n        }\n        return {\n            status: status.value,\n            value: new Date(input.data.getTime()),\n        };\n    }\n    _addCheck(check) {\n        return new ZodDate({\n            ...this._def,\n            checks: [...this._def.checks, check],\n        });\n    }\n    min(minDate, message) {\n        return this._addCheck({\n            kind: \"min\",\n            value: minDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    max(maxDate, message) {\n        return this._addCheck({\n            kind: \"max\",\n            value: maxDate.getTime(),\n            message: errorUtil.toString(message),\n        });\n    }\n    get minDate() {\n        let min = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"min\") {\n                if (min === null || ch.value > min)\n                    min = ch.value;\n            }\n        }\n        return min != null ? new Date(min) : null;\n    }\n    get maxDate() {\n        let max = null;\n        for (const ch of this._def.checks) {\n            if (ch.kind === \"max\") {\n                if (max === null || ch.value < max)\n                    max = ch.value;\n            }\n        }\n        return max != null ? new Date(max) : null;\n    }\n}\nZodDate.create = (params) => {\n    return new ZodDate({\n        checks: [],\n        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,\n        typeName: ZodFirstPartyTypeKind.ZodDate,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSymbol extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.symbol) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.symbol,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodSymbol.create = (params) => {\n    return new ZodSymbol({\n        typeName: ZodFirstPartyTypeKind.ZodSymbol,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUndefined extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.undefined,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodUndefined.create = (params) => {\n    return new ZodUndefined({\n        typeName: ZodFirstPartyTypeKind.ZodUndefined,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNull extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.null) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.null,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodNull.create = (params) => {\n    return new ZodNull({\n        typeName: ZodFirstPartyTypeKind.ZodNull,\n        ...processCreateParams(params),\n    });\n};\nclass ZodAny extends ZodType {\n    constructor() {\n        super(...arguments);\n        // to prevent instances of other classes from extending ZodAny. this causes issues with catchall in ZodObject.\n        this._any = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodAny.create = (params) => {\n    return new ZodAny({\n        typeName: ZodFirstPartyTypeKind.ZodAny,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnknown extends ZodType {\n    constructor() {\n        super(...arguments);\n        // required\n        this._unknown = true;\n    }\n    _parse(input) {\n        return OK(input.data);\n    }\n}\nZodUnknown.create = (params) => {\n    return new ZodUnknown({\n        typeName: ZodFirstPartyTypeKind.ZodUnknown,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNever extends ZodType {\n    _parse(input) {\n        const ctx = this._getOrReturnCtx(input);\n        addIssueToContext(ctx, {\n            code: ZodIssueCode.invalid_type,\n            expected: ZodParsedType.never,\n            received: ctx.parsedType,\n        });\n        return INVALID;\n    }\n}\nZodNever.create = (params) => {\n    return new ZodNever({\n        typeName: ZodFirstPartyTypeKind.ZodNever,\n        ...processCreateParams(params),\n    });\n};\nclass ZodVoid extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.undefined) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.void,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n}\nZodVoid.create = (params) => {\n    return new ZodVoid({\n        typeName: ZodFirstPartyTypeKind.ZodVoid,\n        ...processCreateParams(params),\n    });\n};\nclass ZodArray extends ZodType {\n    _parse(input) {\n        const { ctx, status } = this._processInputParams(input);\n        const def = this._def;\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (def.exactLength !== null) {\n            const tooBig = ctx.data.length > def.exactLength.value;\n            const tooSmall = ctx.data.length < def.exactLength.value;\n            if (tooBig || tooSmall) {\n                addIssueToContext(ctx, {\n                    code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,\n                    minimum: (tooSmall ? def.exactLength.value : undefined),\n                    maximum: (tooBig ? def.exactLength.value : undefined),\n                    type: \"array\",\n                    inclusive: true,\n                    exact: true,\n                    message: def.exactLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.minLength !== null) {\n            if (ctx.data.length < def.minLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxLength !== null) {\n            if (ctx.data.length > def.maxLength.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxLength.value,\n                    type: \"array\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxLength.message,\n                });\n                status.dirty();\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.all([...ctx.data].map((item, i) => {\n                return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n            })).then((result) => {\n                return ParseStatus.mergeArray(status, result);\n            });\n        }\n        const result = [...ctx.data].map((item, i) => {\n            return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));\n        });\n        return ParseStatus.mergeArray(status, result);\n    }\n    get element() {\n        return this._def.type;\n    }\n    min(minLength, message) {\n        return new ZodArray({\n            ...this._def,\n            minLength: { value: minLength, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxLength, message) {\n        return new ZodArray({\n            ...this._def,\n            maxLength: { value: maxLength, message: errorUtil.toString(message) },\n        });\n    }\n    length(len, message) {\n        return new ZodArray({\n            ...this._def,\n            exactLength: { value: len, message: errorUtil.toString(message) },\n        });\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodArray.create = (schema, params) => {\n    return new ZodArray({\n        type: schema,\n        minLength: null,\n        maxLength: null,\n        exactLength: null,\n        typeName: ZodFirstPartyTypeKind.ZodArray,\n        ...processCreateParams(params),\n    });\n};\nfunction deepPartialify(schema) {\n    if (schema instanceof ZodObject) {\n        const newShape = {};\n        for (const key in schema.shape) {\n            const fieldSchema = schema.shape[key];\n            newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));\n        }\n        return new ZodObject({\n            ...schema._def,\n            shape: () => newShape,\n        });\n    }\n    else if (schema instanceof ZodArray) {\n        return new ZodArray({\n            ...schema._def,\n            type: deepPartialify(schema.element),\n        });\n    }\n    else if (schema instanceof ZodOptional) {\n        return ZodOptional.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodNullable) {\n        return ZodNullable.create(deepPartialify(schema.unwrap()));\n    }\n    else if (schema instanceof ZodTuple) {\n        return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));\n    }\n    else {\n        return schema;\n    }\n}\nclass ZodObject extends ZodType {\n    constructor() {\n        super(...arguments);\n        this._cached = null;\n        /**\n         * @deprecated In most cases, this is no longer needed - unknown properties are now silently stripped.\n         * If you want to pass through unknown properties, use `.passthrough()` instead.\n         */\n        this.nonstrict = this.passthrough;\n        // extend<\n        //   Augmentation extends ZodRawShape,\n        //   NewOutput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_output\"]\n        //       : k extends keyof Output\n        //       ? Output[k]\n        //       : never;\n        //   }>,\n        //   NewInput extends util.flatten<{\n        //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n        //       ? Augmentation[k][\"_input\"]\n        //       : k extends keyof Input\n        //       ? Input[k]\n        //       : never;\n        //   }>\n        // >(\n        //   augmentation: Augmentation\n        // ): ZodObject<\n        //   extendShape<T, Augmentation>,\n        //   UnknownKeys,\n        //   Catchall,\n        //   NewOutput,\n        //   NewInput\n        // > {\n        //   return new ZodObject({\n        //     ...this._def,\n        //     shape: () => ({\n        //       ...this._def.shape(),\n        //       ...augmentation,\n        //     }),\n        //   }) as any;\n        // }\n        /**\n         * @deprecated Use `.extend` instead\n         *  */\n        this.augment = this.extend;\n    }\n    _getCached() {\n        if (this._cached !== null)\n            return this._cached;\n        const shape = this._def.shape();\n        const keys = util.objectKeys(shape);\n        return (this._cached = { shape, keys });\n    }\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.object) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const { status, ctx } = this._processInputParams(input);\n        const { shape, keys: shapeKeys } = this._getCached();\n        const extraKeys = [];\n        if (!(this._def.catchall instanceof ZodNever &&\n            this._def.unknownKeys === \"strip\")) {\n            for (const key in ctx.data) {\n                if (!shapeKeys.includes(key)) {\n                    extraKeys.push(key);\n                }\n            }\n        }\n        const pairs = [];\n        for (const key of shapeKeys) {\n            const keyValidator = shape[key];\n            const value = ctx.data[key];\n            pairs.push({\n                key: { status: \"valid\", value: key },\n                value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),\n                alwaysSet: key in ctx.data,\n            });\n        }\n        if (this._def.catchall instanceof ZodNever) {\n            const unknownKeys = this._def.unknownKeys;\n            if (unknownKeys === \"passthrough\") {\n                for (const key of extraKeys) {\n                    pairs.push({\n                        key: { status: \"valid\", value: key },\n                        value: { status: \"valid\", value: ctx.data[key] },\n                    });\n                }\n            }\n            else if (unknownKeys === \"strict\") {\n                if (extraKeys.length > 0) {\n                    addIssueToContext(ctx, {\n                        code: ZodIssueCode.unrecognized_keys,\n                        keys: extraKeys,\n                    });\n                    status.dirty();\n                }\n            }\n            else if (unknownKeys === \"strip\") ;\n            else {\n                throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);\n            }\n        }\n        else {\n            // run catchall validation\n            const catchall = this._def.catchall;\n            for (const key of extraKeys) {\n                const value = ctx.data[key];\n                pairs.push({\n                    key: { status: \"valid\", value: key },\n                    value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key) //, ctx.child(key), value, getParsedType(value)\n                    ),\n                    alwaysSet: key in ctx.data,\n                });\n            }\n        }\n        if (ctx.common.async) {\n            return Promise.resolve()\n                .then(async () => {\n                const syncPairs = [];\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    syncPairs.push({\n                        key,\n                        value: await pair.value,\n                        alwaysSet: pair.alwaysSet,\n                    });\n                }\n                return syncPairs;\n            })\n                .then((syncPairs) => {\n                return ParseStatus.mergeObjectSync(status, syncPairs);\n            });\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get shape() {\n        return this._def.shape();\n    }\n    strict(message) {\n        errorUtil.errToObj;\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strict\",\n            ...(message !== undefined\n                ? {\n                    errorMap: (issue, ctx) => {\n                        var _a, _b, _c, _d;\n                        const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;\n                        if (issue.code === \"unrecognized_keys\")\n                            return {\n                                message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError,\n                            };\n                        return {\n                            message: defaultError,\n                        };\n                    },\n                }\n                : {}),\n        });\n    }\n    strip() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"strip\",\n        });\n    }\n    passthrough() {\n        return new ZodObject({\n            ...this._def,\n            unknownKeys: \"passthrough\",\n        });\n    }\n    // const AugmentFactory =\n    //   <Def extends ZodObjectDef>(def: Def) =>\n    //   <Augmentation extends ZodRawShape>(\n    //     augmentation: Augmentation\n    //   ): ZodObject<\n    //     extendShape<ReturnType<Def[\"shape\"]>, Augmentation>,\n    //     Def[\"unknownKeys\"],\n    //     Def[\"catchall\"]\n    //   > => {\n    //     return new ZodObject({\n    //       ...def,\n    //       shape: () => ({\n    //         ...def.shape(),\n    //         ...augmentation,\n    //       }),\n    //     }) as any;\n    //   };\n    extend(augmentation) {\n        return new ZodObject({\n            ...this._def,\n            shape: () => ({\n                ...this._def.shape(),\n                ...augmentation,\n            }),\n        });\n    }\n    /**\n     * Prior to zod@1.0.12 there was a bug in the\n     * inferred type of merged objects. Please\n     * upgrade if you are experiencing issues.\n     */\n    merge(merging) {\n        const merged = new ZodObject({\n            unknownKeys: merging._def.unknownKeys,\n            catchall: merging._def.catchall,\n            shape: () => ({\n                ...this._def.shape(),\n                ...merging._def.shape(),\n            }),\n            typeName: ZodFirstPartyTypeKind.ZodObject,\n        });\n        return merged;\n    }\n    // merge<\n    //   Incoming extends AnyZodObject,\n    //   Augmentation extends Incoming[\"shape\"],\n    //   NewOutput extends {\n    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_output\"]\n    //       : k extends keyof Output\n    //       ? Output[k]\n    //       : never;\n    //   },\n    //   NewInput extends {\n    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation\n    //       ? Augmentation[k][\"_input\"]\n    //       : k extends keyof Input\n    //       ? Input[k]\n    //       : never;\n    //   }\n    // >(\n    //   merging: Incoming\n    // ): ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"],\n    //   NewOutput,\n    //   NewInput\n    // > {\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    setKey(key, schema) {\n        return this.augment({ [key]: schema });\n    }\n    // merge<Incoming extends AnyZodObject>(\n    //   merging: Incoming\n    // ): //ZodObject<T & Incoming[\"_shape\"], UnknownKeys, Catchall> = (merging) => {\n    // ZodObject<\n    //   extendShape<T, ReturnType<Incoming[\"_def\"][\"shape\"]>>,\n    //   Incoming[\"_def\"][\"unknownKeys\"],\n    //   Incoming[\"_def\"][\"catchall\"]\n    // > {\n    //   // const mergedShape = objectUtil.mergeShapes(\n    //   //   this._def.shape(),\n    //   //   merging._def.shape()\n    //   // );\n    //   const merged: any = new ZodObject({\n    //     unknownKeys: merging._def.unknownKeys,\n    //     catchall: merging._def.catchall,\n    //     shape: () =>\n    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),\n    //     typeName: ZodFirstPartyTypeKind.ZodObject,\n    //   }) as any;\n    //   return merged;\n    // }\n    catchall(index) {\n        return new ZodObject({\n            ...this._def,\n            catchall: index,\n        });\n    }\n    pick(mask) {\n        const shape = {};\n        util.objectKeys(mask).forEach((key) => {\n            if (mask[key] && this.shape[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    omit(mask) {\n        const shape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (!mask[key]) {\n                shape[key] = this.shape[key];\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => shape,\n        });\n    }\n    /**\n     * @deprecated\n     */\n    deepPartial() {\n        return deepPartialify(this);\n    }\n    partial(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            const fieldSchema = this.shape[key];\n            if (mask && !mask[key]) {\n                newShape[key] = fieldSchema;\n            }\n            else {\n                newShape[key] = fieldSchema.optional();\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    required(mask) {\n        const newShape = {};\n        util.objectKeys(this.shape).forEach((key) => {\n            if (mask && !mask[key]) {\n                newShape[key] = this.shape[key];\n            }\n            else {\n                const fieldSchema = this.shape[key];\n                let newField = fieldSchema;\n                while (newField instanceof ZodOptional) {\n                    newField = newField._def.innerType;\n                }\n                newShape[key] = newField;\n            }\n        });\n        return new ZodObject({\n            ...this._def,\n            shape: () => newShape,\n        });\n    }\n    keyof() {\n        return createZodEnum(util.objectKeys(this.shape));\n    }\n}\nZodObject.create = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.strictCreate = (shape, params) => {\n    return new ZodObject({\n        shape: () => shape,\n        unknownKeys: \"strict\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nZodObject.lazycreate = (shape, params) => {\n    return new ZodObject({\n        shape,\n        unknownKeys: \"strip\",\n        catchall: ZodNever.create(),\n        typeName: ZodFirstPartyTypeKind.ZodObject,\n        ...processCreateParams(params),\n    });\n};\nclass ZodUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const options = this._def.options;\n        function handleResults(results) {\n            // return first issue-free validation if it exists\n            for (const result of results) {\n                if (result.result.status === \"valid\") {\n                    return result.result;\n                }\n            }\n            for (const result of results) {\n                if (result.result.status === \"dirty\") {\n                    // add issues from dirty option\n                    ctx.common.issues.push(...result.ctx.common.issues);\n                    return result.result;\n                }\n            }\n            // return invalid\n            const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return Promise.all(options.map(async (option) => {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                return {\n                    result: await option._parseAsync({\n                        data: ctx.data,\n                        path: ctx.path,\n                        parent: childCtx,\n                    }),\n                    ctx: childCtx,\n                };\n            })).then(handleResults);\n        }\n        else {\n            let dirty = undefined;\n            const issues = [];\n            for (const option of options) {\n                const childCtx = {\n                    ...ctx,\n                    common: {\n                        ...ctx.common,\n                        issues: [],\n                    },\n                    parent: null,\n                };\n                const result = option._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: childCtx,\n                });\n                if (result.status === \"valid\") {\n                    return result;\n                }\n                else if (result.status === \"dirty\" && !dirty) {\n                    dirty = { result, ctx: childCtx };\n                }\n                if (childCtx.common.issues.length) {\n                    issues.push(childCtx.common.issues);\n                }\n            }\n            if (dirty) {\n                ctx.common.issues.push(...dirty.ctx.common.issues);\n                return dirty.result;\n            }\n            const unionErrors = issues.map((issues) => new ZodError(issues));\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union,\n                unionErrors,\n            });\n            return INVALID;\n        }\n    }\n    get options() {\n        return this._def.options;\n    }\n}\nZodUnion.create = (types, params) => {\n    return new ZodUnion({\n        options: types,\n        typeName: ZodFirstPartyTypeKind.ZodUnion,\n        ...processCreateParams(params),\n    });\n};\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\n//////////                                 //////////\n//////////      ZodDiscriminatedUnion      //////////\n//////////                                 //////////\n/////////////////////////////////////////////////////\n/////////////////////////////////////////////////////\nconst getDiscriminator = (type) => {\n    if (type instanceof ZodLazy) {\n        return getDiscriminator(type.schema);\n    }\n    else if (type instanceof ZodEffects) {\n        return getDiscriminator(type.innerType());\n    }\n    else if (type instanceof ZodLiteral) {\n        return [type.value];\n    }\n    else if (type instanceof ZodEnum) {\n        return type.options;\n    }\n    else if (type instanceof ZodNativeEnum) {\n        // eslint-disable-next-line ban/ban\n        return Object.keys(type.enum);\n    }\n    else if (type instanceof ZodDefault) {\n        return getDiscriminator(type._def.innerType);\n    }\n    else if (type instanceof ZodUndefined) {\n        return [undefined];\n    }\n    else if (type instanceof ZodNull) {\n        return [null];\n    }\n    else {\n        return null;\n    }\n};\nclass ZodDiscriminatedUnion extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const discriminator = this.discriminator;\n        const discriminatorValue = ctx.data[discriminator];\n        const option = this.optionsMap.get(discriminatorValue);\n        if (!option) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_union_discriminator,\n                options: Array.from(this.optionsMap.keys()),\n                path: [discriminator],\n            });\n            return INVALID;\n        }\n        if (ctx.common.async) {\n            return option._parseAsync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n        else {\n            return option._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n        }\n    }\n    get discriminator() {\n        return this._def.discriminator;\n    }\n    get options() {\n        return this._def.options;\n    }\n    get optionsMap() {\n        return this._def.optionsMap;\n    }\n    /**\n     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.\n     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must\n     * have a different value for each object in the union.\n     * @param discriminator the name of the discriminator property\n     * @param types an array of object schemas\n     * @param params\n     */\n    static create(discriminator, options, params) {\n        // Get all the valid discriminator values\n        const optionsMap = new Map();\n        // try {\n        for (const type of options) {\n            const discriminatorValues = getDiscriminator(type.shape[discriminator]);\n            if (!discriminatorValues) {\n                throw new Error(`A discriminator value for key \\`${discriminator}\\` could not be extracted from all schema options`);\n            }\n            for (const value of discriminatorValues) {\n                if (optionsMap.has(value)) {\n                    throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);\n                }\n                optionsMap.set(value, type);\n            }\n        }\n        return new ZodDiscriminatedUnion({\n            typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,\n            discriminator,\n            options,\n            optionsMap,\n            ...processCreateParams(params),\n        });\n    }\n}\nfunction mergeValues(a, b) {\n    const aType = getParsedType(a);\n    const bType = getParsedType(b);\n    if (a === b) {\n        return { valid: true, data: a };\n    }\n    else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {\n        const bKeys = util.objectKeys(b);\n        const sharedKeys = util\n            .objectKeys(a)\n            .filter((key) => bKeys.indexOf(key) !== -1);\n        const newObj = { ...a, ...b };\n        for (const key of sharedKeys) {\n            const sharedValue = mergeValues(a[key], b[key]);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newObj[key] = sharedValue.data;\n        }\n        return { valid: true, data: newObj };\n    }\n    else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {\n        if (a.length !== b.length) {\n            return { valid: false };\n        }\n        const newArray = [];\n        for (let index = 0; index < a.length; index++) {\n            const itemA = a[index];\n            const itemB = b[index];\n            const sharedValue = mergeValues(itemA, itemB);\n            if (!sharedValue.valid) {\n                return { valid: false };\n            }\n            newArray.push(sharedValue.data);\n        }\n        return { valid: true, data: newArray };\n    }\n    else if (aType === ZodParsedType.date &&\n        bType === ZodParsedType.date &&\n        +a === +b) {\n        return { valid: true, data: a };\n    }\n    else {\n        return { valid: false };\n    }\n}\nclass ZodIntersection extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const handleParsed = (parsedLeft, parsedRight) => {\n            if (isAborted(parsedLeft) || isAborted(parsedRight)) {\n                return INVALID;\n            }\n            const merged = mergeValues(parsedLeft.value, parsedRight.value);\n            if (!merged.valid) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.invalid_intersection_types,\n                });\n                return INVALID;\n            }\n            if (isDirty(parsedLeft) || isDirty(parsedRight)) {\n                status.dirty();\n            }\n            return { status: status.value, value: merged.data };\n        };\n        if (ctx.common.async) {\n            return Promise.all([\n                this._def.left._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n                this._def.right._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                }),\n            ]).then(([left, right]) => handleParsed(left, right));\n        }\n        else {\n            return handleParsed(this._def.left._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }), this._def.right._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            }));\n        }\n    }\n}\nZodIntersection.create = (left, right, params) => {\n    return new ZodIntersection({\n        left: left,\n        right: right,\n        typeName: ZodFirstPartyTypeKind.ZodIntersection,\n        ...processCreateParams(params),\n    });\n};\nclass ZodTuple extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.array) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.array,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        if (ctx.data.length < this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_small,\n                minimum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            return INVALID;\n        }\n        const rest = this._def.rest;\n        if (!rest && ctx.data.length > this._def.items.length) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.too_big,\n                maximum: this._def.items.length,\n                inclusive: true,\n                exact: false,\n                type: \"array\",\n            });\n            status.dirty();\n        }\n        const items = [...ctx.data]\n            .map((item, itemIndex) => {\n            const schema = this._def.items[itemIndex] || this._def.rest;\n            if (!schema)\n                return null;\n            return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));\n        })\n            .filter((x) => !!x); // filter nulls\n        if (ctx.common.async) {\n            return Promise.all(items).then((results) => {\n                return ParseStatus.mergeArray(status, results);\n            });\n        }\n        else {\n            return ParseStatus.mergeArray(status, items);\n        }\n    }\n    get items() {\n        return this._def.items;\n    }\n    rest(rest) {\n        return new ZodTuple({\n            ...this._def,\n            rest,\n        });\n    }\n}\nZodTuple.create = (schemas, params) => {\n    if (!Array.isArray(schemas)) {\n        throw new Error(\"You must pass an array of schemas to z.tuple([ ... ])\");\n    }\n    return new ZodTuple({\n        items: schemas,\n        typeName: ZodFirstPartyTypeKind.ZodTuple,\n        rest: null,\n        ...processCreateParams(params),\n    });\n};\nclass ZodRecord extends ZodType {\n    get keySchema() {\n        return this._def.keyType;\n    }\n    get valueSchema() {\n        return this._def.valueType;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.object) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.object,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const pairs = [];\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        for (const key in ctx.data) {\n            pairs.push({\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),\n                value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),\n            });\n        }\n        if (ctx.common.async) {\n            return ParseStatus.mergeObjectAsync(status, pairs);\n        }\n        else {\n            return ParseStatus.mergeObjectSync(status, pairs);\n        }\n    }\n    get element() {\n        return this._def.valueType;\n    }\n    static create(first, second, third) {\n        if (second instanceof ZodType) {\n            return new ZodRecord({\n                keyType: first,\n                valueType: second,\n                typeName: ZodFirstPartyTypeKind.ZodRecord,\n                ...processCreateParams(third),\n            });\n        }\n        return new ZodRecord({\n            keyType: ZodString.create(),\n            valueType: first,\n            typeName: ZodFirstPartyTypeKind.ZodRecord,\n            ...processCreateParams(second),\n        });\n    }\n}\nclass ZodMap extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.map) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.map,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const keyType = this._def.keyType;\n        const valueType = this._def.valueType;\n        const pairs = [...ctx.data.entries()].map(([key, value], index) => {\n            return {\n                key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, \"key\"])),\n                value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, \"value\"])),\n            };\n        });\n        if (ctx.common.async) {\n            const finalMap = new Map();\n            return Promise.resolve().then(async () => {\n                for (const pair of pairs) {\n                    const key = await pair.key;\n                    const value = await pair.value;\n                    if (key.status === \"aborted\" || value.status === \"aborted\") {\n                        return INVALID;\n                    }\n                    if (key.status === \"dirty\" || value.status === \"dirty\") {\n                        status.dirty();\n                    }\n                    finalMap.set(key.value, value.value);\n                }\n                return { status: status.value, value: finalMap };\n            });\n        }\n        else {\n            const finalMap = new Map();\n            for (const pair of pairs) {\n                const key = pair.key;\n                const value = pair.value;\n                if (key.status === \"aborted\" || value.status === \"aborted\") {\n                    return INVALID;\n                }\n                if (key.status === \"dirty\" || value.status === \"dirty\") {\n                    status.dirty();\n                }\n                finalMap.set(key.value, value.value);\n            }\n            return { status: status.value, value: finalMap };\n        }\n    }\n}\nZodMap.create = (keyType, valueType, params) => {\n    return new ZodMap({\n        valueType,\n        keyType,\n        typeName: ZodFirstPartyTypeKind.ZodMap,\n        ...processCreateParams(params),\n    });\n};\nclass ZodSet extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.set) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.set,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const def = this._def;\n        if (def.minSize !== null) {\n            if (ctx.data.size < def.minSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_small,\n                    minimum: def.minSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.minSize.message,\n                });\n                status.dirty();\n            }\n        }\n        if (def.maxSize !== null) {\n            if (ctx.data.size > def.maxSize.value) {\n                addIssueToContext(ctx, {\n                    code: ZodIssueCode.too_big,\n                    maximum: def.maxSize.value,\n                    type: \"set\",\n                    inclusive: true,\n                    exact: false,\n                    message: def.maxSize.message,\n                });\n                status.dirty();\n            }\n        }\n        const valueType = this._def.valueType;\n        function finalizeSet(elements) {\n            const parsedSet = new Set();\n            for (const element of elements) {\n                if (element.status === \"aborted\")\n                    return INVALID;\n                if (element.status === \"dirty\")\n                    status.dirty();\n                parsedSet.add(element.value);\n            }\n            return { status: status.value, value: parsedSet };\n        }\n        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));\n        if (ctx.common.async) {\n            return Promise.all(elements).then((elements) => finalizeSet(elements));\n        }\n        else {\n            return finalizeSet(elements);\n        }\n    }\n    min(minSize, message) {\n        return new ZodSet({\n            ...this._def,\n            minSize: { value: minSize, message: errorUtil.toString(message) },\n        });\n    }\n    max(maxSize, message) {\n        return new ZodSet({\n            ...this._def,\n            maxSize: { value: maxSize, message: errorUtil.toString(message) },\n        });\n    }\n    size(size, message) {\n        return this.min(size, message).max(size, message);\n    }\n    nonempty(message) {\n        return this.min(1, message);\n    }\n}\nZodSet.create = (valueType, params) => {\n    return new ZodSet({\n        valueType,\n        minSize: null,\n        maxSize: null,\n        typeName: ZodFirstPartyTypeKind.ZodSet,\n        ...processCreateParams(params),\n    });\n};\nclass ZodFunction extends ZodType {\n    constructor() {\n        super(...arguments);\n        this.validate = this.implement;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.function) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.function,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        function makeArgsIssue(args, error) {\n            return makeIssue({\n                data: args,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_arguments,\n                    argumentsError: error,\n                },\n            });\n        }\n        function makeReturnsIssue(returns, error) {\n            return makeIssue({\n                data: returns,\n                path: ctx.path,\n                errorMaps: [\n                    ctx.common.contextualErrorMap,\n                    ctx.schemaErrorMap,\n                    getErrorMap(),\n                    errorMap,\n                ].filter((x) => !!x),\n                issueData: {\n                    code: ZodIssueCode.invalid_return_type,\n                    returnTypeError: error,\n                },\n            });\n        }\n        const params = { errorMap: ctx.common.contextualErrorMap };\n        const fn = ctx.data;\n        if (this._def.returns instanceof ZodPromise) {\n            return OK(async (...args) => {\n                const error = new ZodError([]);\n                const parsedArgs = await this._def.args\n                    .parseAsync(args, params)\n                    .catch((e) => {\n                    error.addIssue(makeArgsIssue(args, e));\n                    throw error;\n                });\n                const result = await fn(...parsedArgs);\n                const parsedReturns = await this._def.returns._def.type\n                    .parseAsync(result, params)\n                    .catch((e) => {\n                    error.addIssue(makeReturnsIssue(result, e));\n                    throw error;\n                });\n                return parsedReturns;\n            });\n        }\n        else {\n            return OK((...args) => {\n                const parsedArgs = this._def.args.safeParse(args, params);\n                if (!parsedArgs.success) {\n                    throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);\n                }\n                const result = fn(...parsedArgs.data);\n                const parsedReturns = this._def.returns.safeParse(result, params);\n                if (!parsedReturns.success) {\n                    throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);\n                }\n                return parsedReturns.data;\n            });\n        }\n    }\n    parameters() {\n        return this._def.args;\n    }\n    returnType() {\n        return this._def.returns;\n    }\n    args(...items) {\n        return new ZodFunction({\n            ...this._def,\n            args: ZodTuple.create(items).rest(ZodUnknown.create()),\n        });\n    }\n    returns(returnType) {\n        return new ZodFunction({\n            ...this._def,\n            returns: returnType,\n        });\n    }\n    implement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    strictImplement(func) {\n        const validatedFunc = this.parse(func);\n        return validatedFunc;\n    }\n    static create(args, returns, params) {\n        return new ZodFunction({\n            args: (args\n                ? args\n                : ZodTuple.create([]).rest(ZodUnknown.create())),\n            returns: returns || ZodUnknown.create(),\n            typeName: ZodFirstPartyTypeKind.ZodFunction,\n            ...processCreateParams(params),\n        });\n    }\n}\nclass ZodLazy extends ZodType {\n    get schema() {\n        return this._def.getter();\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const lazySchema = this._def.getter();\n        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });\n    }\n}\nZodLazy.create = (getter, params) => {\n    return new ZodLazy({\n        getter: getter,\n        typeName: ZodFirstPartyTypeKind.ZodLazy,\n        ...processCreateParams(params),\n    });\n};\nclass ZodLiteral extends ZodType {\n    _parse(input) {\n        if (input.data !== this._def.value) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_literal,\n                expected: this._def.value,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n    get value() {\n        return this._def.value;\n    }\n}\nZodLiteral.create = (value, params) => {\n    return new ZodLiteral({\n        value: value,\n        typeName: ZodFirstPartyTypeKind.ZodLiteral,\n        ...processCreateParams(params),\n    });\n};\nfunction createZodEnum(values, params) {\n    return new ZodEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodEnum,\n        ...processCreateParams(params),\n    });\n}\nclass ZodEnum extends ZodType {\n    _parse(input) {\n        if (typeof input.data !== \"string\") {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (this._def.values.indexOf(input.data) === -1) {\n            const ctx = this._getOrReturnCtx(input);\n            const expectedValues = this._def.values;\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get options() {\n        return this._def.values;\n    }\n    get enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Values() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    get Enum() {\n        const enumValues = {};\n        for (const val of this._def.values) {\n            enumValues[val] = val;\n        }\n        return enumValues;\n    }\n    extract(values) {\n        return ZodEnum.create(values);\n    }\n    exclude(values) {\n        return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)));\n    }\n}\nZodEnum.create = createZodEnum;\nclass ZodNativeEnum extends ZodType {\n    _parse(input) {\n        const nativeEnumValues = util.getValidEnumValues(this._def.values);\n        const ctx = this._getOrReturnCtx(input);\n        if (ctx.parsedType !== ZodParsedType.string &&\n            ctx.parsedType !== ZodParsedType.number) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                expected: util.joinValues(expectedValues),\n                received: ctx.parsedType,\n                code: ZodIssueCode.invalid_type,\n            });\n            return INVALID;\n        }\n        if (nativeEnumValues.indexOf(input.data) === -1) {\n            const expectedValues = util.objectValues(nativeEnumValues);\n            addIssueToContext(ctx, {\n                received: ctx.data,\n                code: ZodIssueCode.invalid_enum_value,\n                options: expectedValues,\n            });\n            return INVALID;\n        }\n        return OK(input.data);\n    }\n    get enum() {\n        return this._def.values;\n    }\n}\nZodNativeEnum.create = (values, params) => {\n    return new ZodNativeEnum({\n        values: values,\n        typeName: ZodFirstPartyTypeKind.ZodNativeEnum,\n        ...processCreateParams(params),\n    });\n};\nclass ZodPromise extends ZodType {\n    unwrap() {\n        return this._def.type;\n    }\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        if (ctx.parsedType !== ZodParsedType.promise &&\n            ctx.common.async === false) {\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.promise,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        const promisified = ctx.parsedType === ZodParsedType.promise\n            ? ctx.data\n            : Promise.resolve(ctx.data);\n        return OK(promisified.then((data) => {\n            return this._def.type.parseAsync(data, {\n                path: ctx.path,\n                errorMap: ctx.common.contextualErrorMap,\n            });\n        }));\n    }\n}\nZodPromise.create = (schema, params) => {\n    return new ZodPromise({\n        type: schema,\n        typeName: ZodFirstPartyTypeKind.ZodPromise,\n        ...processCreateParams(params),\n    });\n};\nclass ZodEffects extends ZodType {\n    innerType() {\n        return this._def.schema;\n    }\n    sourceType() {\n        return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects\n            ? this._def.schema.sourceType()\n            : this._def.schema;\n    }\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        const effect = this._def.effect || null;\n        if (effect.type === \"preprocess\") {\n            const processed = effect.transform(ctx.data);\n            if (ctx.common.async) {\n                return Promise.resolve(processed).then((processed) => {\n                    return this._def.schema._parseAsync({\n                        data: processed,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                });\n            }\n            else {\n                return this._def.schema._parseSync({\n                    data: processed,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n        const checkCtx = {\n            addIssue: (arg) => {\n                addIssueToContext(ctx, arg);\n                if (arg.fatal) {\n                    status.abort();\n                }\n                else {\n                    status.dirty();\n                }\n            },\n            get path() {\n                return ctx.path;\n            },\n        };\n        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);\n        if (effect.type === \"refinement\") {\n            const executeRefinement = (acc\n            // effect: RefinementEffect<any>\n            ) => {\n                const result = effect.refinement(acc, checkCtx);\n                if (ctx.common.async) {\n                    return Promise.resolve(result);\n                }\n                if (result instanceof Promise) {\n                    throw new Error(\"Async refinement encountered during synchronous parse operation. Use .parseAsync instead.\");\n                }\n                return acc;\n            };\n            if (ctx.common.async === false) {\n                const inner = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inner.status === \"aborted\")\n                    return INVALID;\n                if (inner.status === \"dirty\")\n                    status.dirty();\n                // return value is ignored\n                executeRefinement(inner.value);\n                return { status: status.value, value: inner.value };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((inner) => {\n                    if (inner.status === \"aborted\")\n                        return INVALID;\n                    if (inner.status === \"dirty\")\n                        status.dirty();\n                    return executeRefinement(inner.value).then(() => {\n                        return { status: status.value, value: inner.value };\n                    });\n                });\n            }\n        }\n        if (effect.type === \"transform\") {\n            if (ctx.common.async === false) {\n                const base = this._def.schema._parseSync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (!isValid(base))\n                    return base;\n                const result = effect.transform(base.value, checkCtx);\n                if (result instanceof Promise) {\n                    throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);\n                }\n                return { status: status.value, value: result };\n            }\n            else {\n                return this._def.schema\n                    ._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx })\n                    .then((base) => {\n                    if (!isValid(base))\n                        return base;\n                    return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));\n                });\n            }\n        }\n        util.assertNever(effect);\n    }\n}\nZodEffects.create = (schema, effect, params) => {\n    return new ZodEffects({\n        schema,\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        effect,\n        ...processCreateParams(params),\n    });\n};\nZodEffects.createWithPreprocess = (preprocess, schema, params) => {\n    return new ZodEffects({\n        schema,\n        effect: { type: \"preprocess\", transform: preprocess },\n        typeName: ZodFirstPartyTypeKind.ZodEffects,\n        ...processCreateParams(params),\n    });\n};\nclass ZodOptional extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.undefined) {\n            return OK(undefined);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodOptional.create = (type, params) => {\n    return new ZodOptional({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodOptional,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNullable extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType === ZodParsedType.null) {\n            return OK(null);\n        }\n        return this._def.innerType._parse(input);\n    }\n    unwrap() {\n        return this._def.innerType;\n    }\n}\nZodNullable.create = (type, params) => {\n    return new ZodNullable({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodNullable,\n        ...processCreateParams(params),\n    });\n};\nclass ZodDefault extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        let data = ctx.data;\n        if (ctx.parsedType === ZodParsedType.undefined) {\n            data = this._def.defaultValue();\n        }\n        return this._def.innerType._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    removeDefault() {\n        return this._def.innerType;\n    }\n}\nZodDefault.create = (type, params) => {\n    return new ZodDefault({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodDefault,\n        defaultValue: typeof params.default === \"function\"\n            ? params.default\n            : () => params.default,\n        ...processCreateParams(params),\n    });\n};\nclass ZodCatch extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        // newCtx is used to not collect issues from inner types in ctx\n        const newCtx = {\n            ...ctx,\n            common: {\n                ...ctx.common,\n                issues: [],\n            },\n        };\n        const result = this._def.innerType._parse({\n            data: newCtx.data,\n            path: newCtx.path,\n            parent: {\n                ...newCtx,\n            },\n        });\n        if (isAsync(result)) {\n            return result.then((result) => {\n                return {\n                    status: \"valid\",\n                    value: result.status === \"valid\"\n                        ? result.value\n                        : this._def.catchValue({\n                            get error() {\n                                return new ZodError(newCtx.common.issues);\n                            },\n                            input: newCtx.data,\n                        }),\n                };\n            });\n        }\n        else {\n            return {\n                status: \"valid\",\n                value: result.status === \"valid\"\n                    ? result.value\n                    : this._def.catchValue({\n                        get error() {\n                            return new ZodError(newCtx.common.issues);\n                        },\n                        input: newCtx.data,\n                    }),\n            };\n        }\n    }\n    removeCatch() {\n        return this._def.innerType;\n    }\n}\nZodCatch.create = (type, params) => {\n    return new ZodCatch({\n        innerType: type,\n        typeName: ZodFirstPartyTypeKind.ZodCatch,\n        catchValue: typeof params.catch === \"function\" ? params.catch : () => params.catch,\n        ...processCreateParams(params),\n    });\n};\nclass ZodNaN extends ZodType {\n    _parse(input) {\n        const parsedType = this._getType(input);\n        if (parsedType !== ZodParsedType.nan) {\n            const ctx = this._getOrReturnCtx(input);\n            addIssueToContext(ctx, {\n                code: ZodIssueCode.invalid_type,\n                expected: ZodParsedType.nan,\n                received: ctx.parsedType,\n            });\n            return INVALID;\n        }\n        return { status: \"valid\", value: input.data };\n    }\n}\nZodNaN.create = (params) => {\n    return new ZodNaN({\n        typeName: ZodFirstPartyTypeKind.ZodNaN,\n        ...processCreateParams(params),\n    });\n};\nconst BRAND = Symbol(\"zod_brand\");\nclass ZodBranded extends ZodType {\n    _parse(input) {\n        const { ctx } = this._processInputParams(input);\n        const data = ctx.data;\n        return this._def.type._parse({\n            data,\n            path: ctx.path,\n            parent: ctx,\n        });\n    }\n    unwrap() {\n        return this._def.type;\n    }\n}\nclass ZodPipeline extends ZodType {\n    _parse(input) {\n        const { status, ctx } = this._processInputParams(input);\n        if (ctx.common.async) {\n            const handleAsync = async () => {\n                const inResult = await this._def.in._parseAsync({\n                    data: ctx.data,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n                if (inResult.status === \"aborted\")\n                    return INVALID;\n                if (inResult.status === \"dirty\") {\n                    status.dirty();\n                    return DIRTY(inResult.value);\n                }\n                else {\n                    return this._def.out._parseAsync({\n                        data: inResult.value,\n                        path: ctx.path,\n                        parent: ctx,\n                    });\n                }\n            };\n            return handleAsync();\n        }\n        else {\n            const inResult = this._def.in._parseSync({\n                data: ctx.data,\n                path: ctx.path,\n                parent: ctx,\n            });\n            if (inResult.status === \"aborted\")\n                return INVALID;\n            if (inResult.status === \"dirty\") {\n                status.dirty();\n                return {\n                    status: \"dirty\",\n                    value: inResult.value,\n                };\n            }\n            else {\n                return this._def.out._parseSync({\n                    data: inResult.value,\n                    path: ctx.path,\n                    parent: ctx,\n                });\n            }\n        }\n    }\n    static create(a, b) {\n        return new ZodPipeline({\n            in: a,\n            out: b,\n            typeName: ZodFirstPartyTypeKind.ZodPipeline,\n        });\n    }\n}\nconst custom = (check, params = {}, \n/*\n * @deprecated\n *\n * Pass `fatal` into the params object instead:\n *\n * ```ts\n * z.string().custom((val) => val.length > 5, { fatal: false })\n * ```\n *\n */\nfatal) => {\n    if (check)\n        return ZodAny.create().superRefine((data, ctx) => {\n            var _a, _b;\n            if (!check(data)) {\n                const p = typeof params === \"function\"\n                    ? params(data)\n                    : typeof params === \"string\"\n                        ? { message: params }\n                        : params;\n                const _fatal = (_b = (_a = p.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;\n                const p2 = typeof p === \"string\" ? { message: p } : p;\n                ctx.addIssue({ code: \"custom\", ...p2, fatal: _fatal });\n            }\n        });\n    return ZodAny.create();\n};\nconst late = {\n    object: ZodObject.lazycreate,\n};\nvar ZodFirstPartyTypeKind;\n(function (ZodFirstPartyTypeKind) {\n    ZodFirstPartyTypeKind[\"ZodString\"] = \"ZodString\";\n    ZodFirstPartyTypeKind[\"ZodNumber\"] = \"ZodNumber\";\n    ZodFirstPartyTypeKind[\"ZodNaN\"] = \"ZodNaN\";\n    ZodFirstPartyTypeKind[\"ZodBigInt\"] = \"ZodBigInt\";\n    ZodFirstPartyTypeKind[\"ZodBoolean\"] = \"ZodBoolean\";\n    ZodFirstPartyTypeKind[\"ZodDate\"] = \"ZodDate\";\n    ZodFirstPartyTypeKind[\"ZodSymbol\"] = \"ZodSymbol\";\n    ZodFirstPartyTypeKind[\"ZodUndefined\"] = \"ZodUndefined\";\n    ZodFirstPartyTypeKind[\"ZodNull\"] = \"ZodNull\";\n    ZodFirstPartyTypeKind[\"ZodAny\"] = \"ZodAny\";\n    ZodFirstPartyTypeKind[\"ZodUnknown\"] = \"ZodUnknown\";\n    ZodFirstPartyTypeKind[\"ZodNever\"] = \"ZodNever\";\n    ZodFirstPartyTypeKind[\"ZodVoid\"] = \"ZodVoid\";\n    ZodFirstPartyTypeKind[\"ZodArray\"] = \"ZodArray\";\n    ZodFirstPartyTypeKind[\"ZodObject\"] = \"ZodObject\";\n    ZodFirstPartyTypeKind[\"ZodUnion\"] = \"ZodUnion\";\n    ZodFirstPartyTypeKind[\"ZodDiscriminatedUnion\"] = \"ZodDiscriminatedUnion\";\n    ZodFirstPartyTypeKind[\"ZodIntersection\"] = \"ZodIntersection\";\n    ZodFirstPartyTypeKind[\"ZodTuple\"] = \"ZodTuple\";\n    ZodFirstPartyTypeKind[\"ZodRecord\"] = \"ZodRecord\";\n    ZodFirstPartyTypeKind[\"ZodMap\"] = \"ZodMap\";\n    ZodFirstPartyTypeKind[\"ZodSet\"] = \"ZodSet\";\n    ZodFirstPartyTypeKind[\"ZodFunction\"] = \"ZodFunction\";\n    ZodFirstPartyTypeKind[\"ZodLazy\"] = \"ZodLazy\";\n    ZodFirstPartyTypeKind[\"ZodLiteral\"] = \"ZodLiteral\";\n    ZodFirstPartyTypeKind[\"ZodEnum\"] = \"ZodEnum\";\n    ZodFirstPartyTypeKind[\"ZodEffects\"] = \"ZodEffects\";\n    ZodFirstPartyTypeKind[\"ZodNativeEnum\"] = \"ZodNativeEnum\";\n    ZodFirstPartyTypeKind[\"ZodOptional\"] = \"ZodOptional\";\n    ZodFirstPartyTypeKind[\"ZodNullable\"] = \"ZodNullable\";\n    ZodFirstPartyTypeKind[\"ZodDefault\"] = \"ZodDefault\";\n    ZodFirstPartyTypeKind[\"ZodCatch\"] = \"ZodCatch\";\n    ZodFirstPartyTypeKind[\"ZodPromise\"] = \"ZodPromise\";\n    ZodFirstPartyTypeKind[\"ZodBranded\"] = \"ZodBranded\";\n    ZodFirstPartyTypeKind[\"ZodPipeline\"] = \"ZodPipeline\";\n})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));\nconst instanceOfType = (\n// const instanceOfType = <T extends new (...args: any[]) => any>(\ncls, params = {\n    message: `Input not instance of ${cls.name}`,\n}) => custom((data) => data instanceof cls, params);\nconst stringType = ZodString.create;\nconst numberType = ZodNumber.create;\nconst nanType = ZodNaN.create;\nconst bigIntType = ZodBigInt.create;\nconst booleanType = ZodBoolean.create;\nconst dateType = ZodDate.create;\nconst symbolType = ZodSymbol.create;\nconst undefinedType = ZodUndefined.create;\nconst nullType = ZodNull.create;\nconst anyType = ZodAny.create;\nconst unknownType = ZodUnknown.create;\nconst neverType = ZodNever.create;\nconst voidType = ZodVoid.create;\nconst arrayType = ZodArray.create;\nconst objectType = ZodObject.create;\nconst strictObjectType = ZodObject.strictCreate;\nconst unionType = ZodUnion.create;\nconst discriminatedUnionType = ZodDiscriminatedUnion.create;\nconst intersectionType = ZodIntersection.create;\nconst tupleType = ZodTuple.create;\nconst recordType = ZodRecord.create;\nconst mapType = ZodMap.create;\nconst setType = ZodSet.create;\nconst functionType = ZodFunction.create;\nconst lazyType = ZodLazy.create;\nconst literalType = ZodLiteral.create;\nconst enumType = ZodEnum.create;\nconst nativeEnumType = ZodNativeEnum.create;\nconst promiseType = ZodPromise.create;\nconst effectsType = ZodEffects.create;\nconst optionalType = ZodOptional.create;\nconst nullableType = ZodNullable.create;\nconst preprocessType = ZodEffects.createWithPreprocess;\nconst pipelineType = ZodPipeline.create;\nconst ostring = () => stringType().optional();\nconst onumber = () => numberType().optional();\nconst oboolean = () => booleanType().optional();\nconst coerce = {\n    string: ((arg) => ZodString.create({ ...arg, coerce: true })),\n    number: ((arg) => ZodNumber.create({ ...arg, coerce: true })),\n    boolean: ((arg) => ZodBoolean.create({\n        ...arg,\n        coerce: true,\n    })),\n    bigint: ((arg) => ZodBigInt.create({ ...arg, coerce: true })),\n    date: ((arg) => ZodDate.create({ ...arg, coerce: true })),\n};\nconst NEVER = INVALID;\n\nvar z = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    defaultErrorMap: errorMap,\n    setErrorMap: setErrorMap,\n    getErrorMap: getErrorMap,\n    makeIssue: makeIssue,\n    EMPTY_PATH: EMPTY_PATH,\n    addIssueToContext: addIssueToContext,\n    ParseStatus: ParseStatus,\n    INVALID: INVALID,\n    DIRTY: DIRTY,\n    OK: OK,\n    isAborted: isAborted,\n    isDirty: isDirty,\n    isValid: isValid,\n    isAsync: isAsync,\n    get util () { return util; },\n    get objectUtil () { return objectUtil; },\n    ZodParsedType: ZodParsedType,\n    getParsedType: getParsedType,\n    ZodType: ZodType,\n    ZodString: ZodString,\n    ZodNumber: ZodNumber,\n    ZodBigInt: ZodBigInt,\n    ZodBoolean: ZodBoolean,\n    ZodDate: ZodDate,\n    ZodSymbol: ZodSymbol,\n    ZodUndefined: ZodUndefined,\n    ZodNull: ZodNull,\n    ZodAny: ZodAny,\n    ZodUnknown: ZodUnknown,\n    ZodNever: ZodNever,\n    ZodVoid: ZodVoid,\n    ZodArray: ZodArray,\n    ZodObject: ZodObject,\n    ZodUnion: ZodUnion,\n    ZodDiscriminatedUnion: ZodDiscriminatedUnion,\n    ZodIntersection: ZodIntersection,\n    ZodTuple: ZodTuple,\n    ZodRecord: ZodRecord,\n    ZodMap: ZodMap,\n    ZodSet: ZodSet,\n    ZodFunction: ZodFunction,\n    ZodLazy: ZodLazy,\n    ZodLiteral: ZodLiteral,\n    ZodEnum: ZodEnum,\n    ZodNativeEnum: ZodNativeEnum,\n    ZodPromise: ZodPromise,\n    ZodEffects: ZodEffects,\n    ZodTransformer: ZodEffects,\n    ZodOptional: ZodOptional,\n    ZodNullable: ZodNullable,\n    ZodDefault: ZodDefault,\n    ZodCatch: ZodCatch,\n    ZodNaN: ZodNaN,\n    BRAND: BRAND,\n    ZodBranded: ZodBranded,\n    ZodPipeline: ZodPipeline,\n    custom: custom,\n    Schema: ZodType,\n    ZodSchema: ZodType,\n    late: late,\n    get ZodFirstPartyTypeKind () { return ZodFirstPartyTypeKind; },\n    coerce: coerce,\n    any: anyType,\n    array: arrayType,\n    bigint: bigIntType,\n    boolean: booleanType,\n    date: dateType,\n    discriminatedUnion: discriminatedUnionType,\n    effect: effectsType,\n    'enum': enumType,\n    'function': functionType,\n    'instanceof': instanceOfType,\n    intersection: intersectionType,\n    lazy: lazyType,\n    literal: literalType,\n    map: mapType,\n    nan: nanType,\n    nativeEnum: nativeEnumType,\n    never: neverType,\n    'null': nullType,\n    nullable: nullableType,\n    number: numberType,\n    object: objectType,\n    oboolean: oboolean,\n    onumber: onumber,\n    optional: optionalType,\n    ostring: ostring,\n    pipeline: pipelineType,\n    preprocess: preprocessType,\n    promise: promiseType,\n    record: recordType,\n    set: setType,\n    strictObject: strictObjectType,\n    string: stringType,\n    symbol: symbolType,\n    transformer: effectsType,\n    tuple: tupleType,\n    'undefined': undefinedType,\n    union: unionType,\n    unknown: unknownType,\n    'void': voidType,\n    NEVER: NEVER,\n    ZodIssueCode: ZodIssueCode,\n    quotelessJson: quotelessJson,\n    ZodError: ZodError\n});\n\nexport { BRAND, DIRTY, EMPTY_PATH, INVALID, NEVER, OK, ParseStatus, ZodType as Schema, ZodAny, ZodArray, ZodBigInt, ZodBoolean, ZodBranded, ZodCatch, ZodDate, ZodDefault, ZodDiscriminatedUnion, ZodEffects, ZodEnum, ZodError, ZodFirstPartyTypeKind, ZodFunction, ZodIntersection, ZodIssueCode, ZodLazy, ZodLiteral, ZodMap, ZodNaN, ZodNativeEnum, ZodNever, ZodNull, ZodNullable, ZodNumber, ZodObject, ZodOptional, ZodParsedType, ZodPipeline, ZodPromise, ZodRecord, ZodType as ZodSchema, ZodSet, ZodString, ZodSymbol, ZodEffects as ZodTransformer, ZodTuple, ZodType, ZodUndefined, ZodUnion, ZodUnknown, ZodVoid, addIssueToContext, anyType as any, arrayType as array, bigIntType as bigint, booleanType as boolean, coerce, custom, dateType as date, z as default, errorMap as defaultErrorMap, discriminatedUnionType as discriminatedUnion, effectsType as effect, enumType as enum, functionType as function, getErrorMap, getParsedType, instanceOfType as instanceof, intersectionType as intersection, isAborted, isAsync, isDirty, isValid, late, lazyType as lazy, literalType as literal, makeIssue, mapType as map, nanType as nan, nativeEnumType as nativeEnum, neverType as never, nullType as null, nullableType as nullable, numberType as number, objectType as object, objectUtil, oboolean, onumber, optionalType as optional, ostring, pipelineType as pipeline, preprocessType as preprocess, promiseType as promise, quotelessJson, recordType as record, setType as set, setErrorMap, strictObjectType as strictObject, stringType as string, symbolType as symbol, effectsType as transformer, tupleType as tuple, undefinedType as undefined, unionType as union, unknownType as unknown, util, voidType as void, z };\n","import { ZodError } from 'zod'\n\nexport interface Checkable<T> {\n  parse: (obj: unknown) => T\n  safeParse: (\n    obj: unknown,\n  ) => { success: true; data: T } | { success: false; error: ZodError }\n}\n\nexport interface Def<T> {\n  name: string\n  schema: Checkable<T>\n}\n\nexport const is = <T>(obj: unknown, def: Checkable<T>): obj is T => {\n  return def.safeParse(obj).success\n}\n\nexport const assure = <T>(def: Checkable<T>, obj: unknown): T => {\n  return def.parse(obj)\n}\n\nexport const isObject = (obj: unknown): obj is Record<string, unknown> => {\n  return typeof obj === 'object' && obj !== null\n}\n","var encode_1 = encode;\nvar MSB = 128, REST = 127, MSBALL = ~REST, INT = Math.pow(2, 31);\nfunction encode(num, out, offset) {\n  out = out || [];\n  offset = offset || 0;\n  var oldOffset = offset;\n  while (num >= INT) {\n    out[offset++] = num & 255 | MSB;\n    num /= 128;\n  }\n  while (num & MSBALL) {\n    out[offset++] = num & 255 | MSB;\n    num >>>= 7;\n  }\n  out[offset] = num | 0;\n  encode.bytes = offset - oldOffset + 1;\n  return out;\n}\nvar decode = read;\nvar MSB$1 = 128, REST$1 = 127;\nfunction read(buf, offset) {\n  var res = 0, offset = offset || 0, shift = 0, counter = offset, b, l = buf.length;\n  do {\n    if (counter >= l) {\n      read.bytes = 0;\n      throw new RangeError('Could not decode varint');\n    }\n    b = buf[counter++];\n    res += shift < 28 ? (b & REST$1) << shift : (b & REST$1) * Math.pow(2, shift);\n    shift += 7;\n  } while (b >= MSB$1);\n  read.bytes = counter - offset;\n  return res;\n}\nvar N1 = Math.pow(2, 7);\nvar N2 = Math.pow(2, 14);\nvar N3 = Math.pow(2, 21);\nvar N4 = Math.pow(2, 28);\nvar N5 = Math.pow(2, 35);\nvar N6 = Math.pow(2, 42);\nvar N7 = Math.pow(2, 49);\nvar N8 = Math.pow(2, 56);\nvar N9 = Math.pow(2, 63);\nvar length = function (value) {\n  return value < N1 ? 1 : value < N2 ? 2 : value < N3 ? 3 : value < N4 ? 4 : value < N5 ? 5 : value < N6 ? 6 : value < N7 ? 7 : value < N8 ? 8 : value < N9 ? 9 : 10;\n};\nvar varint = {\n  encode: encode_1,\n  decode: decode,\n  encodingLength: length\n};\nvar _brrp_varint = varint;\nexport default _brrp_varint;","import varint from '../vendor/varint.js';\nexport const decode = (data, offset = 0) => {\n  const code = varint.decode(data, offset);\n  return [\n    code,\n    varint.decode.bytes\n  ];\n};\nexport const encodeTo = (int, target, offset = 0) => {\n  varint.encode(int, target, offset);\n  return target;\n};\nexport const encodingLength = int => {\n  return varint.encodingLength(int);\n};","const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};","import {\n  coerce,\n  equals as equalBytes\n} from '../bytes.js';\nimport * as varint from '../varint.js';\nexport const create = (code, digest) => {\n  const size = digest.byteLength;\n  const sizeOffset = varint.encodingLength(code);\n  const digestOffset = sizeOffset + varint.encodingLength(size);\n  const bytes = new Uint8Array(digestOffset + size);\n  varint.encodeTo(code, bytes, 0);\n  varint.encodeTo(size, bytes, sizeOffset);\n  bytes.set(digest, digestOffset);\n  return new Digest(code, size, digest, bytes);\n};\nexport const decode = multihash => {\n  const bytes = coerce(multihash);\n  const [code, sizeOffset] = varint.decode(bytes);\n  const [size, digestOffset] = varint.decode(bytes.subarray(sizeOffset));\n  const digest = bytes.subarray(sizeOffset + digestOffset);\n  if (digest.byteLength !== size) {\n    throw new Error('Incorrect length');\n  }\n  return new Digest(code, size, digest, bytes);\n};\nexport const equals = (a, b) => {\n  if (a === b) {\n    return true;\n  } else {\n    return a.code === b.code && a.size === b.size && equalBytes(a.bytes, b.bytes);\n  }\n};\nexport class Digest {\n  constructor(code, size, digest, bytes) {\n    this.code = code;\n    this.size = size;\n    this.digest = digest;\n    this.bytes = bytes;\n  }\n}","import { baseX } from './base.js';\nexport const base58btc = baseX({\n  name: 'base58btc',\n  prefix: 'z',\n  alphabet: '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n});\nexport const base58flickr = baseX({\n  name: 'base58flickr',\n  prefix: 'Z',\n  alphabet: '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'\n});","function base(ALPHABET, name) {\n  if (ALPHABET.length >= 255) {\n    throw new TypeError('Alphabet too long');\n  }\n  var BASE_MAP = new Uint8Array(256);\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255;\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i);\n    var xc = x.charCodeAt(0);\n    if (BASE_MAP[xc] !== 255) {\n      throw new TypeError(x + ' is ambiguous');\n    }\n    BASE_MAP[xc] = i;\n  }\n  var BASE = ALPHABET.length;\n  var LEADER = ALPHABET.charAt(0);\n  var FACTOR = Math.log(BASE) / Math.log(256);\n  var iFACTOR = Math.log(256) / Math.log(BASE);\n  function encode(source) {\n    if (source instanceof Uint8Array);\n    else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source);\n    }\n    if (!(source instanceof Uint8Array)) {\n      throw new TypeError('Expected Uint8Array');\n    }\n    if (source.length === 0) {\n      return '';\n    }\n    var zeroes = 0;\n    var length = 0;\n    var pbegin = 0;\n    var pend = source.length;\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++;\n      zeroes++;\n    }\n    var size = (pend - pbegin) * iFACTOR + 1 >>> 0;\n    var b58 = new Uint8Array(size);\n    while (pbegin !== pend) {\n      var carry = source[pbegin];\n      var i = 0;\n      for (var it1 = size - 1; (carry !== 0 || i < length) && it1 !== -1; it1--, i++) {\n        carry += 256 * b58[it1] >>> 0;\n        b58[it1] = carry % BASE >>> 0;\n        carry = carry / BASE >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      pbegin++;\n    }\n    var it2 = size - length;\n    while (it2 !== size && b58[it2] === 0) {\n      it2++;\n    }\n    var str = LEADER.repeat(zeroes);\n    for (; it2 < size; ++it2) {\n      str += ALPHABET.charAt(b58[it2]);\n    }\n    return str;\n  }\n  function decodeUnsafe(source) {\n    if (typeof source !== 'string') {\n      throw new TypeError('Expected String');\n    }\n    if (source.length === 0) {\n      return new Uint8Array();\n    }\n    var psz = 0;\n    if (source[psz] === ' ') {\n      return;\n    }\n    var zeroes = 0;\n    var length = 0;\n    while (source[psz] === LEADER) {\n      zeroes++;\n      psz++;\n    }\n    var size = (source.length - psz) * FACTOR + 1 >>> 0;\n    var b256 = new Uint8Array(size);\n    while (source[psz]) {\n      var carry = BASE_MAP[source.charCodeAt(psz)];\n      if (carry === 255) {\n        return;\n      }\n      var i = 0;\n      for (var it3 = size - 1; (carry !== 0 || i < length) && it3 !== -1; it3--, i++) {\n        carry += BASE * b256[it3] >>> 0;\n        b256[it3] = carry % 256 >>> 0;\n        carry = carry / 256 >>> 0;\n      }\n      if (carry !== 0) {\n        throw new Error('Non-zero carry');\n      }\n      length = i;\n      psz++;\n    }\n    if (source[psz] === ' ') {\n      return;\n    }\n    var it4 = size - length;\n    while (it4 !== size && b256[it4] === 0) {\n      it4++;\n    }\n    var vch = new Uint8Array(zeroes + (size - it4));\n    var j = zeroes;\n    while (it4 !== size) {\n      vch[j++] = b256[it4++];\n    }\n    return vch;\n  }\n  function decode(string) {\n    var buffer = decodeUnsafe(string);\n    if (buffer) {\n      return buffer;\n    }\n    throw new Error(`Non-${ name } character`);\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  };\n}\nvar src = base;\nvar _brrp__multiformats_scope_baseX = src;\nexport default _brrp__multiformats_scope_baseX;","import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    if (prefix.codePointAt(0) === undefined) {\n      throw new Error('Invalid prefix character');\n    }\n    this.prefixCodePoint = prefix.codePointAt(0);\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      if (text.codePointAt(0) !== this.prefixCodePoint) {\n        throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n      }\n      return this.baseDecode(text.slice(this.prefix.length));\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};","import { rfc4648 } from './base.js';\nexport const base32 = rfc4648({\n  prefix: 'b',\n  name: 'base32',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567',\n  bitsPerChar: 5\n});\nexport const base32upper = rfc4648({\n  prefix: 'B',\n  name: 'base32upper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567',\n  bitsPerChar: 5\n});\nexport const base32pad = rfc4648({\n  prefix: 'c',\n  name: 'base32pad',\n  alphabet: 'abcdefghijklmnopqrstuvwxyz234567=',\n  bitsPerChar: 5\n});\nexport const base32padupper = rfc4648({\n  prefix: 'C',\n  name: 'base32padupper',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=',\n  bitsPerChar: 5\n});\nexport const base32hex = rfc4648({\n  prefix: 'v',\n  name: 'base32hex',\n  alphabet: '0123456789abcdefghijklmnopqrstuv',\n  bitsPerChar: 5\n});\nexport const base32hexupper = rfc4648({\n  prefix: 'V',\n  name: 'base32hexupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV',\n  bitsPerChar: 5\n});\nexport const base32hexpad = rfc4648({\n  prefix: 't',\n  name: 'base32hexpad',\n  alphabet: '0123456789abcdefghijklmnopqrstuv=',\n  bitsPerChar: 5\n});\nexport const base32hexpadupper = rfc4648({\n  prefix: 'T',\n  name: 'base32hexpadupper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUV=',\n  bitsPerChar: 5\n});\nexport const base32z = rfc4648({\n  prefix: 'h',\n  name: 'base32z',\n  alphabet: 'ybndrfg8ejkmcpqxot1uwisza345h769',\n  bitsPerChar: 5\n});","import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","import { from } from './base.js';\nimport {\n  fromString,\n  toString\n} from '../bytes.js';\nexport const identity = from({\n  prefix: '\\0',\n  name: 'identity',\n  encode: buf => toString(buf),\n  decode: str => fromString(str)\n});","import { rfc4648 } from './base.js';\nexport const base2 = rfc4648({\n  prefix: '0',\n  name: 'base2',\n  alphabet: '01',\n  bitsPerChar: 1\n});","import { rfc4648 } from './base.js';\nexport const base8 = rfc4648({\n  prefix: '7',\n  name: 'base8',\n  alphabet: '01234567',\n  bitsPerChar: 3\n});","import { baseX } from './base.js';\nexport const base10 = baseX({\n  prefix: '9',\n  name: 'base10',\n  alphabet: '0123456789'\n});","import { rfc4648 } from './base.js';\nexport const base16 = rfc4648({\n  prefix: 'f',\n  name: 'base16',\n  alphabet: '0123456789abcdef',\n  bitsPerChar: 4\n});\nexport const base16upper = rfc4648({\n  prefix: 'F',\n  name: 'base16upper',\n  alphabet: '0123456789ABCDEF',\n  bitsPerChar: 4\n});","import { baseX } from './base.js';\nexport const base36 = baseX({\n  prefix: 'k',\n  name: 'base36',\n  alphabet: '0123456789abcdefghijklmnopqrstuvwxyz'\n});\nexport const base36upper = baseX({\n  prefix: 'K',\n  name: 'base36upper',\n  alphabet: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n});","import { rfc4648 } from './base.js';\nexport const base64 = rfc4648({\n  prefix: 'm',\n  name: 'base64',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n  bitsPerChar: 6\n});\nexport const base64pad = rfc4648({\n  prefix: 'M',\n  name: 'base64pad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n  bitsPerChar: 6\n});\nexport const base64url = rfc4648({\n  prefix: 'u',\n  name: 'base64url',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n  bitsPerChar: 6\n});\nexport const base64urlpad = rfc4648({\n  prefix: 'U',\n  name: 'base64urlpad',\n  alphabet: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=',\n  bitsPerChar: 6\n});","import { from } from './base.js';\nconst alphabet = Array.from('\\uD83D\\uDE80\\uD83E\\uDE90\\u2604\\uD83D\\uDEF0\\uD83C\\uDF0C\\uD83C\\uDF11\\uD83C\\uDF12\\uD83C\\uDF13\\uD83C\\uDF14\\uD83C\\uDF15\\uD83C\\uDF16\\uD83C\\uDF17\\uD83C\\uDF18\\uD83C\\uDF0D\\uD83C\\uDF0F\\uD83C\\uDF0E\\uD83D\\uDC09\\u2600\\uD83D\\uDCBB\\uD83D\\uDDA5\\uD83D\\uDCBE\\uD83D\\uDCBF\\uD83D\\uDE02\\u2764\\uD83D\\uDE0D\\uD83E\\uDD23\\uD83D\\uDE0A\\uD83D\\uDE4F\\uD83D\\uDC95\\uD83D\\uDE2D\\uD83D\\uDE18\\uD83D\\uDC4D\\uD83D\\uDE05\\uD83D\\uDC4F\\uD83D\\uDE01\\uD83D\\uDD25\\uD83E\\uDD70\\uD83D\\uDC94\\uD83D\\uDC96\\uD83D\\uDC99\\uD83D\\uDE22\\uD83E\\uDD14\\uD83D\\uDE06\\uD83D\\uDE44\\uD83D\\uDCAA\\uD83D\\uDE09\\u263A\\uD83D\\uDC4C\\uD83E\\uDD17\\uD83D\\uDC9C\\uD83D\\uDE14\\uD83D\\uDE0E\\uD83D\\uDE07\\uD83C\\uDF39\\uD83E\\uDD26\\uD83C\\uDF89\\uD83D\\uDC9E\\u270C\\u2728\\uD83E\\uDD37\\uD83D\\uDE31\\uD83D\\uDE0C\\uD83C\\uDF38\\uD83D\\uDE4C\\uD83D\\uDE0B\\uD83D\\uDC97\\uD83D\\uDC9A\\uD83D\\uDE0F\\uD83D\\uDC9B\\uD83D\\uDE42\\uD83D\\uDC93\\uD83E\\uDD29\\uD83D\\uDE04\\uD83D\\uDE00\\uD83D\\uDDA4\\uD83D\\uDE03\\uD83D\\uDCAF\\uD83D\\uDE48\\uD83D\\uDC47\\uD83C\\uDFB6\\uD83D\\uDE12\\uD83E\\uDD2D\\u2763\\uD83D\\uDE1C\\uD83D\\uDC8B\\uD83D\\uDC40\\uD83D\\uDE2A\\uD83D\\uDE11\\uD83D\\uDCA5\\uD83D\\uDE4B\\uD83D\\uDE1E\\uD83D\\uDE29\\uD83D\\uDE21\\uD83E\\uDD2A\\uD83D\\uDC4A\\uD83E\\uDD73\\uD83D\\uDE25\\uD83E\\uDD24\\uD83D\\uDC49\\uD83D\\uDC83\\uD83D\\uDE33\\u270B\\uD83D\\uDE1A\\uD83D\\uDE1D\\uD83D\\uDE34\\uD83C\\uDF1F\\uD83D\\uDE2C\\uD83D\\uDE43\\uD83C\\uDF40\\uD83C\\uDF37\\uD83D\\uDE3B\\uD83D\\uDE13\\u2B50\\u2705\\uD83E\\uDD7A\\uD83C\\uDF08\\uD83D\\uDE08\\uD83E\\uDD18\\uD83D\\uDCA6\\u2714\\uD83D\\uDE23\\uD83C\\uDFC3\\uD83D\\uDC90\\u2639\\uD83C\\uDF8A\\uD83D\\uDC98\\uD83D\\uDE20\\u261D\\uD83D\\uDE15\\uD83C\\uDF3A\\uD83C\\uDF82\\uD83C\\uDF3B\\uD83D\\uDE10\\uD83D\\uDD95\\uD83D\\uDC9D\\uD83D\\uDE4A\\uD83D\\uDE39\\uD83D\\uDDE3\\uD83D\\uDCAB\\uD83D\\uDC80\\uD83D\\uDC51\\uD83C\\uDFB5\\uD83E\\uDD1E\\uD83D\\uDE1B\\uD83D\\uDD34\\uD83D\\uDE24\\uD83C\\uDF3C\\uD83D\\uDE2B\\u26BD\\uD83E\\uDD19\\u2615\\uD83C\\uDFC6\\uD83E\\uDD2B\\uD83D\\uDC48\\uD83D\\uDE2E\\uD83D\\uDE46\\uD83C\\uDF7B\\uD83C\\uDF43\\uD83D\\uDC36\\uD83D\\uDC81\\uD83D\\uDE32\\uD83C\\uDF3F\\uD83E\\uDDE1\\uD83C\\uDF81\\u26A1\\uD83C\\uDF1E\\uD83C\\uDF88\\u274C\\u270A\\uD83D\\uDC4B\\uD83D\\uDE30\\uD83E\\uDD28\\uD83D\\uDE36\\uD83E\\uDD1D\\uD83D\\uDEB6\\uD83D\\uDCB0\\uD83C\\uDF53\\uD83D\\uDCA2\\uD83E\\uDD1F\\uD83D\\uDE41\\uD83D\\uDEA8\\uD83D\\uDCA8\\uD83E\\uDD2C\\u2708\\uD83C\\uDF80\\uD83C\\uDF7A\\uD83E\\uDD13\\uD83D\\uDE19\\uD83D\\uDC9F\\uD83C\\uDF31\\uD83D\\uDE16\\uD83D\\uDC76\\uD83E\\uDD74\\u25B6\\u27A1\\u2753\\uD83D\\uDC8E\\uD83D\\uDCB8\\u2B07\\uD83D\\uDE28\\uD83C\\uDF1A\\uD83E\\uDD8B\\uD83D\\uDE37\\uD83D\\uDD7A\\u26A0\\uD83D\\uDE45\\uD83D\\uDE1F\\uD83D\\uDE35\\uD83D\\uDC4E\\uD83E\\uDD32\\uD83E\\uDD20\\uD83E\\uDD27\\uD83D\\uDCCC\\uD83D\\uDD35\\uD83D\\uDC85\\uD83E\\uDDD0\\uD83D\\uDC3E\\uD83C\\uDF52\\uD83D\\uDE17\\uD83E\\uDD11\\uD83C\\uDF0A\\uD83E\\uDD2F\\uD83D\\uDC37\\u260E\\uD83D\\uDCA7\\uD83D\\uDE2F\\uD83D\\uDC86\\uD83D\\uDC46\\uD83C\\uDFA4\\uD83D\\uDE47\\uD83C\\uDF51\\u2744\\uD83C\\uDF34\\uD83D\\uDCA3\\uD83D\\uDC38\\uD83D\\uDC8C\\uD83D\\uDCCD\\uD83E\\uDD40\\uD83E\\uDD22\\uD83D\\uDC45\\uD83D\\uDCA1\\uD83D\\uDCA9\\uD83D\\uDC50\\uD83D\\uDCF8\\uD83D\\uDC7B\\uD83E\\uDD10\\uD83E\\uDD2E\\uD83C\\uDFBC\\uD83E\\uDD75\\uD83D\\uDEA9\\uD83C\\uDF4E\\uD83C\\uDF4A\\uD83D\\uDC7C\\uD83D\\uDC8D\\uD83D\\uDCE3\\uD83E\\uDD42');\nconst alphabetBytesToChars = alphabet.reduce((p, c, i) => {\n  p[i] = c;\n  return p;\n}, []);\nconst alphabetCharsToBytes = alphabet.reduce((p, c, i) => {\n  p[c.codePointAt(0)] = i;\n  return p;\n}, []);\nfunction encode(data) {\n  return data.reduce((p, c) => {\n    p += alphabetBytesToChars[c];\n    return p;\n  }, '');\n}\nfunction decode(str) {\n  const byts = [];\n  for (const char of str) {\n    const byt = alphabetCharsToBytes[char.codePointAt(0)];\n    if (byt === undefined) {\n      throw new Error(`Non-base256emoji character: ${ char }`);\n    }\n    byts.push(byt);\n  }\n  return new Uint8Array(byts);\n}\nexport const base256emoji = from({\n  prefix: '\\uD83D\\uDE80',\n  name: 'base256emoji',\n  encode,\n  decode\n});","import { from } from './hasher.js';\nconst sha = name => async data => new Uint8Array(await crypto.subtle.digest(name, data));\nexport const sha256 = from({\n  name: 'sha2-256',\n  code: 18,\n  encode: sha('SHA-256')\n});\nexport const sha512 = from({\n  name: 'sha2-512',\n  code: 19,\n  encode: sha('SHA-512')\n});","import * as Digest from './digest.js';\nexport const from = ({name, code, encode}) => new Hasher(name, code, encode);\nexport class Hasher {\n  constructor(name, code, encode) {\n    this.name = name;\n    this.code = code;\n    this.encode = encode;\n  }\n  digest(input) {\n    if (input instanceof Uint8Array) {\n      const result = this.encode(input);\n      return result instanceof Uint8Array ? Digest.create(this.code, result) : result.then(digest => Digest.create(this.code, digest));\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}","import { coerce } from '../bytes.js';\nimport * as Digest from './digest.js';\nconst code = 0;\nconst name = 'identity';\nconst encode = coerce;\nconst digest = input => Digest.create(code, encode(input));\nexport const identity = {\n  code,\n  name,\n  encode,\n  digest\n};","const textEncoder = new TextEncoder();\nconst textDecoder = new TextDecoder();\nexport const name = 'json';\nexport const code = 512;\nexport const encode = node => textEncoder.encode(JSON.stringify(node));\nexport const decode = data => JSON.parse(textDecoder.decode(data));","import * as identityBase from './bases/identity.js';\nimport * as base2 from './bases/base2.js';\nimport * as base8 from './bases/base8.js';\nimport * as base10 from './bases/base10.js';\nimport * as base16 from './bases/base16.js';\nimport * as base32 from './bases/base32.js';\nimport * as base36 from './bases/base36.js';\nimport * as base58 from './bases/base58.js';\nimport * as base64 from './bases/base64.js';\nimport * as base256emoji from './bases/base256emoji.js';\nimport * as sha2 from './hashes/sha2.js';\nimport * as identity from './hashes/identity.js';\nimport * as raw from './codecs/raw.js';\nimport * as json from './codecs/json.js';\nimport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes\n} from './index.js';\nconst bases = {\n  ...identityBase,\n  ...base2,\n  ...base8,\n  ...base10,\n  ...base16,\n  ...base32,\n  ...base36,\n  ...base58,\n  ...base64,\n  ...base256emoji\n};\nconst hashes = {\n  ...sha2,\n  ...identity\n};\nconst codecs = {\n  raw,\n  json\n};\nexport {\n  CID,\n  hasher,\n  digest,\n  varint,\n  bytes,\n  hashes,\n  bases,\n  codecs\n};","import { bases } from 'multiformats/basics';\nfunction createCodec(name, prefix, encode, decode) {\n  return {\n    name,\n    prefix,\n    encoder: {\n      name,\n      prefix,\n      encode\n    },\n    decoder: { decode }\n  };\n}\nconst string = createCodec('utf8', 'u', buf => {\n  const decoder = new TextDecoder('utf8');\n  return 'u' + decoder.decode(buf);\n}, str => {\n  const encoder = new TextEncoder();\n  return encoder.encode(str.substring(1));\n});\nconst ascii = createCodec('ascii', 'a', buf => {\n  let string = 'a';\n  for (let i = 0; i < buf.length; i++) {\n    string += String.fromCharCode(buf[i]);\n  }\n  return string;\n}, str => {\n  str = str.substring(1);\n  const buf = new Uint8Array(str.length);\n  for (let i = 0; i < str.length; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n});\nconst BASES = {\n  utf8: string,\n  'utf-8': string,\n  hex: bases.base16,\n  latin1: ascii,\n  ascii: ascii,\n  binary: ascii,\n  ...bases\n};\nexport default BASES;","import bases from './util/bases.js';\nexport function fromString(string, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  return base.decoder.decode(`${ base.prefix }${ string }`);\n}","import bases from './util/bases.js';\nexport function toString(array, encoding = 'utf8') {\n  const base = bases[encoding];\n  if (!base) {\n    throw new Error(`Unsupported encoding \"${ encoding }\"`);\n  }\n  return base.encoder.encode(array).substring(1);\n}","import { CID } from 'multiformats/cid'\nimport * as ui8 from 'uint8arrays'\n\nexport type JsonValue =\n  | boolean\n  | number\n  | string\n  | null\n  | undefined\n  | unknown\n  | Array<JsonValue>\n  | { [key: string]: JsonValue }\n\nexport type IpldValue =\n  | JsonValue\n  | CID\n  | Uint8Array\n  | Array<IpldValue>\n  | { [key: string]: IpldValue }\n\n// @NOTE avoiding use of check.is() here only because it makes\n// these implementations slow, and they often live in hot paths.\n\nexport const jsonToIpld = (val: JsonValue): IpldValue => {\n  // walk arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => jsonToIpld(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // check for dag json values\n    if (typeof val['$link'] === 'string' && Object.keys(val).length === 1) {\n      return CID.parse(val['$link'])\n    }\n    if (typeof val['$bytes'] === 'string' && Object.keys(val).length === 1) {\n      return ui8.fromString(val['$bytes'], 'base64')\n    }\n    // walk plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = jsonToIpld(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val\n}\n\nexport const ipldToJson = (val: IpldValue): JsonValue => {\n  // walk arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => ipldToJson(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // convert bytes\n    if (val instanceof Uint8Array) {\n      return {\n        $bytes: ui8.toString(val, 'base64'),\n      }\n    }\n    // convert cids\n    if (CID.asCID(val)) {\n      return {\n        $link: (val as CID).toString(),\n      }\n    }\n    // walk plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToJson(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val as JsonValue\n}\n\nexport const ipldEquals = (a: IpldValue, b: IpldValue): boolean => {\n  // walk arrays\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false\n    for (let i = 0; i < a.length; i++) {\n      if (!ipldEquals(a[i], b[i])) return false\n    }\n    return true\n  }\n  // objects\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    // check bytes\n    if (a instanceof Uint8Array && b instanceof Uint8Array) {\n      return ui8.equals(a, b)\n    }\n    // check cids\n    if (CID.asCID(a) && CID.asCID(b)) {\n      return CID.asCID(a)?.equals(CID.asCID(b))\n    }\n    // walk plain objects\n    if (Object.keys(a).length !== Object.keys(b).length) return false\n    for (const key of Object.keys(a)) {\n      if (!ipldEquals(a[key], b[key])) return false\n    }\n    return true\n  }\n  return a === b\n}\n","import { CID } from 'multiformats/cid'\nimport { z } from 'zod'\nimport { Def } from './check'\n\nconst cidSchema = z\n  .any()\n  .refine((obj: unknown) => CID.asCID(obj) !== null, {\n    message: 'Not a CID',\n  })\n  .transform((obj: unknown) => CID.asCID(obj) as CID)\n\nexport const schema = {\n  cid: cidSchema,\n  bytes: z.instanceof(Uint8Array),\n  string: z.string(),\n  array: z.array(z.unknown()),\n  map: z.record(z.string(), z.unknown()),\n  unknown: z.unknown(),\n}\n\nexport const def = {\n  cid: {\n    name: 'cid',\n    schema: schema.cid,\n  } as Def<CID>,\n  bytes: {\n    name: 'bytes',\n    schema: schema.bytes,\n  } as Def<Uint8Array>,\n  string: {\n    name: 'string',\n    schema: schema.string,\n  } as Def<string>,\n  map: {\n    name: 'map',\n    schema: schema.map,\n  } as Def<Record<string, unknown>>,\n  unknown: {\n    name: 'unknown',\n    schema: schema.unknown,\n  } as Def<unknown>,\n}\n\nexport type ArrayEl<A> = A extends readonly (infer T)[] ? T : never\n\nexport type NotEmptyArray<T> = [T, ...T[]]\n","export const SECOND = 1000\nexport const MINUTE = SECOND * 60\nexport const HOUR = MINUTE * 60\nexport const DAY = HOUR * 24\n\nexport const lessThanAgoMs = (time: Date, range: number) => {\n  return Date.now() < time.getTime() + range\n}\n\nexport const addHoursToDate = (hours: number, startingDate?: Date): Date => {\n  // When date is passed, clone before calling `setHours()` so that we are not mutating the original date\n  const currentDate = startingDate ? new Date(startingDate) : new Date()\n  currentDate.setHours(currentDate.getHours() + hours)\n  return currentDate\n}\n","import Graphemer from 'graphemer'\nimport * as ui8 from 'uint8arrays'\n\n// counts the number of bytes in a utf8 string\nexport const utf8Len = (str: string): number => {\n  return new TextEncoder().encode(str).byteLength\n}\n\n// counts the number of graphemes (user-displayed characters) in a string\nexport const graphemeLen = (str: string): number => {\n  const splitter = new Graphemer()\n  return splitter.countGraphemes(str)\n}\n\nexport const utf8ToB64Url = (utf8: string): string => {\n  return ui8.toString(ui8.fromString(utf8, 'utf8'), 'base64url')\n}\n\nexport const b64UrlToUtf8 = (b64: string): string => {\n  return ui8.toString(ui8.fromString(b64, 'base64url'), 'utf8')\n}\n\nexport const parseLanguage = (langTag: string): LanguageTag | null => {\n  const parsed = langTag.match(bcp47Regexp)\n  if (!parsed?.groups) return null\n  const parts = parsed.groups\n  return {\n    grandfathered: parts.grandfathered,\n    language: parts.language,\n    extlang: parts.extlang,\n    script: parts.script,\n    region: parts.region,\n    variant: parts.variant,\n    extension: parts.extension,\n    privateUse: parts.privateUseA || parts.privateUseB,\n  }\n}\n\nexport const validateLanguage = (langTag: string): boolean => {\n  return bcp47Regexp.test(langTag)\n}\n\nexport type LanguageTag = {\n  grandfathered?: string\n  language?: string\n  extlang?: string\n  script?: string\n  region?: string\n  variant?: string\n  extension?: string\n  privateUse?: string\n}\n\n// Validates well-formed BCP 47 syntax: https://www.rfc-editor.org/rfc/rfc5646.html#section-2.1\nconst bcp47Regexp =\n  /^((?<grandfathered>(en-GB-oed|i-ami|i-bnn|i-default|i-enochian|i-hak|i-klingon|i-lux|i-mingo|i-navajo|i-pwn|i-tao|i-tay|i-tsu|sgn-BE-FR|sgn-BE-NL|sgn-CH-DE)|(art-lojban|cel-gaulish|no-bok|no-nyn|zh-guoyu|zh-hakka|zh-min|zh-min-nan|zh-xiang))|((?<language>([A-Za-z]{2,3}(-(?<extlang>[A-Za-z]{3}(-[A-Za-z]{3}){0,2}))?)|[A-Za-z]{4}|[A-Za-z]{5,8})(-(?<script>[A-Za-z]{4}))?(-(?<region>[A-Za-z]{2}|[0-9]{3}))?(-(?<variant>[A-Za-z0-9]{5,8}|[0-9][A-Za-z0-9]{3}))*(-(?<extension>[0-9A-WY-Za-wy-z](-[A-Za-z0-9]{2,8})+))*(-(?<privateUseA>x(-[A-Za-z0-9]{1,8})+))?)|(?<privateUseB>x(-[A-Za-z0-9]{1,8})+))$/\n","import { z } from 'zod'\n\n// Parsing atproto data\n// --------\n\nexport const isValidDidDoc = (doc: unknown): doc is DidDocument => {\n  return didDocument.safeParse(doc).success\n}\n\nexport const getDid = (doc: DidDocument): string => {\n  const id = doc.id\n  if (typeof id !== 'string') {\n    throw new Error('No `id` on document')\n  }\n  return id\n}\n\nexport const getHandle = (doc: DidDocument): string | undefined => {\n  const aka = doc.alsoKnownAs\n  if (!aka) return undefined\n  const found = aka.find((name) => name.startsWith('at://'))\n  if (!found) return undefined\n  // strip off at:// prefix\n  return found.slice(5)\n}\n\n// @NOTE we parse to type/publicKeyMultibase to avoid the dependency on @atproto/crypto\nexport const getSigningKey = (\n  doc: DidDocument,\n): { type: string; publicKeyMultibase: string } | undefined => {\n  const did = getDid(doc)\n  let keys = doc.verificationMethod\n  if (!keys) return undefined\n  if (typeof keys !== 'object') return undefined\n  if (!Array.isArray(keys)) {\n    keys = [keys]\n  }\n  const found = keys.find(\n    (key) => key.id === '#atproto' || key.id === `${did}#atproto`,\n  )\n  if (!found?.publicKeyMultibase) return undefined\n  return {\n    type: found.type,\n    publicKeyMultibase: found.publicKeyMultibase,\n  }\n}\n\nexport const getPdsEndpoint = (doc: DidDocument): string | undefined => {\n  return getServiceEndpoint(doc, {\n    id: '#atproto_pds',\n    type: 'AtprotoPersonalDataServer',\n  })\n}\n\nexport const getFeedGenEndpoint = (doc: DidDocument): string | undefined => {\n  return getServiceEndpoint(doc, {\n    id: '#bsky_fg',\n    type: 'BskyFeedGenerator',\n  })\n}\n\nexport const getNotifEndpoint = (doc: DidDocument): string | undefined => {\n  return getServiceEndpoint(doc, {\n    id: '#bsky_notif',\n    type: 'BskyNotificationService',\n  })\n}\n\nexport const getServiceEndpoint = (\n  doc: DidDocument,\n  opts: { id: string; type: string },\n) => {\n  const did = getDid(doc)\n  let services = doc.service\n  if (!services) return undefined\n  if (typeof services !== 'object') return undefined\n  if (!Array.isArray(services)) {\n    services = [services]\n  }\n  const found = services.find(\n    (service) => service.id === opts.id || service.id === `${did}${opts.id}`,\n  )\n  if (!found) return undefined\n  if (found.type !== opts.type) {\n    return undefined\n  }\n  if (typeof found.serviceEndpoint !== 'string') {\n    return undefined\n  }\n  return validateUrl(found.serviceEndpoint)\n}\n\n// Check protocol and hostname to prevent potential SSRF\nconst validateUrl = (urlStr: string): string | undefined => {\n  let url\n  try {\n    url = new URL(urlStr)\n  } catch {\n    return undefined\n  }\n  if (!['http:', 'https:'].includes(url.protocol)) {\n    return undefined\n  } else if (!url.hostname) {\n    return undefined\n  } else {\n    return urlStr\n  }\n}\n\n// Types\n// --------\n\nconst verificationMethod = z.object({\n  id: z.string(),\n  type: z.string(),\n  controller: z.string(),\n  publicKeyMultibase: z.string().optional(),\n})\n\nconst service = z.object({\n  id: z.string(),\n  type: z.string(),\n  serviceEndpoint: z.union([z.string(), z.record(z.unknown())]),\n})\n\nexport const didDocument = z.object({\n  id: z.string(),\n  alsoKnownAs: z.array(z.string()).optional(),\n  verificationMethod: z.array(verificationMethod).optional(),\n  service: z.array(service).optional(),\n})\n\nexport type DidDocument = z.infer<typeof didDocument>\n","import { isValidISODateString } from 'iso-datestring-validator'\nimport { CID } from 'multiformats/cid'\nimport { ValidationResult, ValidationError } from '../types'\nimport {\n  ensureValidDid,\n  ensureValidHandle,\n  ensureValidNsid,\n  ensureValidAtUri,\n} from '@atproto/syntax'\nimport { validateLanguage } from '@atproto/common-web'\n\nexport function datetime(path: string, value: string): ValidationResult {\n  try {\n    if (!isValidISODateString(value)) {\n      throw new Error()\n    }\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(\n        `${path} must be an valid atproto datetime (both RFC-3339 and ISO-8601)`,\n      ),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function uri(path: string, value: string): ValidationResult {\n  const isUri = value.match(/^\\w+:(?:\\/\\/)?[^\\s/][^\\s]*$/) !== null\n  if (!isUri) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a uri`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function atUri(path: string, value: string): ValidationResult {\n  try {\n    ensureValidAtUri(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid at-uri`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function did(path: string, value: string): ValidationResult {\n  try {\n    ensureValidDid(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid did`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function handle(path: string, value: string): ValidationResult {\n  try {\n    ensureValidHandle(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid handle`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function atIdentifier(path: string, value: string): ValidationResult {\n  const isDid = did(path, value)\n  if (!isDid.success) {\n    const isHandle = handle(path, value)\n    if (!isHandle.success) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be a valid did or a handle`),\n      }\n    }\n  }\n  return { success: true, value }\n}\n\nexport function nsid(path: string, value: string): ValidationResult {\n  try {\n    ensureValidNsid(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a valid nsid`),\n    }\n  }\n  return { success: true, value }\n}\n\nexport function cid(path: string, value: string): ValidationResult {\n  try {\n    CID.parse(value)\n  } catch {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a cid string`),\n    }\n  }\n  return { success: true, value }\n}\n\n// The language format validates well-formed BCP 47 language tags: https://www.rfc-editor.org/info/bcp47\nexport function language(path: string, value: string): ValidationResult {\n  if (validateLanguage(value)) {\n    return { success: true, value }\n  }\n  return {\n    success: false,\n    error: new ValidationError(\n      `${path} must be a well-formed BCP 47 language tag`,\n    ),\n  }\n}\n","import { utf8Len, graphemeLen } from '@atproto/common-web'\nimport { CID } from 'multiformats/cid'\nimport { Lexicons } from '../lexicons'\nimport * as formats from './formats'\nimport {\n  LexUserType,\n  LexBoolean,\n  LexInteger,\n  LexString,\n  ValidationResult,\n  ValidationError,\n  LexBytes,\n} from '../types'\n\nexport function validate(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  switch (def.type) {\n    case 'boolean':\n      return boolean(lexicons, path, def, value)\n    case 'integer':\n      return integer(lexicons, path, def, value)\n    case 'string':\n      return string(lexicons, path, def, value)\n    case 'bytes':\n      return bytes(lexicons, path, def, value)\n    case 'cid-link':\n      return cidLink(lexicons, path, def, value)\n    case 'unknown':\n      return unknown(lexicons, path, def, value)\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def.type}`),\n      }\n  }\n}\n\nexport function boolean(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexBoolean\n\n  // type\n  const type = typeof value\n  if (type === 'undefined') {\n    if (typeof def.default === 'boolean') {\n      return { success: true, value: def.default }\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`),\n    }\n  } else if (type !== 'boolean') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a boolean`),\n    }\n  }\n\n  // const\n  if (typeof def.const === 'boolean') {\n    if (value !== def.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def.const}`),\n      }\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function integer(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexInteger\n\n  // type\n  const type = typeof value\n  if (type === 'undefined') {\n    if (typeof def.default === 'number') {\n      return { success: true, value: def.default }\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`),\n    }\n  } else if (!Number.isInteger(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an integer`),\n    }\n  }\n\n  // const\n  if (typeof def.const === 'number') {\n    if (value !== def.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def.const}`),\n      }\n    }\n  }\n\n  // enum\n  if (Array.isArray(def.enum)) {\n    if (!def.enum.includes(value as number)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be one of (${def.enum.join('|')})`,\n        ),\n      }\n    }\n  }\n\n  // maximum\n  if (typeof def.maximum === 'number') {\n    if ((value as number) > def.maximum) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} can not be greater than ${def.maximum}`,\n        ),\n      }\n    }\n  }\n\n  // minimum\n  if (typeof def.minimum === 'number') {\n    if ((value as number) < def.minimum) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} can not be less than ${def.minimum}`,\n        ),\n      }\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function string(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexString\n\n  // type\n  if (typeof value === 'undefined') {\n    if (typeof def.default === 'string') {\n      return { success: true, value: def.default }\n    }\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`),\n    }\n  } else if (typeof value !== 'string') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a string`),\n    }\n  }\n\n  // const\n  if (typeof def.const === 'string') {\n    if (value !== def.const) {\n      return {\n        success: false,\n        error: new ValidationError(`${path} must be ${def.const}`),\n      }\n    }\n  }\n\n  // enum\n  if (Array.isArray(def.enum)) {\n    if (!def.enum.includes(value as string)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be one of (${def.enum.join('|')})`,\n        ),\n      }\n    }\n  }\n\n  // maxLength\n  if (typeof def.maxLength === 'number') {\n    if (utf8Len(value) > def.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be longer than ${def.maxLength} characters`,\n        ),\n      }\n    }\n  }\n\n  // minLength\n  if (typeof def.minLength === 'number') {\n    if (utf8Len(value) < def.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be shorter than ${def.minLength} characters`,\n        ),\n      }\n    }\n  }\n\n  // maxGraphemes\n  if (typeof def.maxGraphemes === 'number') {\n    if (graphemeLen(value) > def.maxGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be longer than ${def.maxGraphemes} graphemes`,\n        ),\n      }\n    }\n  }\n\n  // minGraphemes\n  if (typeof def.minGraphemes === 'number') {\n    if (graphemeLen(value) < def.minGraphemes) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be shorter than ${def.minGraphemes} graphemes`,\n        ),\n      }\n    }\n  }\n\n  if (typeof def.format === 'string') {\n    switch (def.format) {\n      case 'datetime':\n        return formats.datetime(path, value)\n      case 'uri':\n        return formats.uri(path, value)\n      case 'at-uri':\n        return formats.atUri(path, value)\n      case 'did':\n        return formats.did(path, value)\n      case 'handle':\n        return formats.handle(path, value)\n      case 'at-identifier':\n        return formats.atIdentifier(path, value)\n      case 'nsid':\n        return formats.nsid(path, value)\n      case 'cid':\n        return formats.cid(path, value)\n      case 'language':\n        return formats.language(path, value)\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function bytes(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexBytes\n\n  if (!value || !(value instanceof Uint8Array)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a byte array`),\n    }\n  }\n\n  // maxLength\n  if (typeof def.maxLength === 'number') {\n    if (value.byteLength > def.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be larger than ${def.maxLength} bytes`,\n        ),\n      }\n    }\n  }\n\n  // minLength\n  if (typeof def.minLength === 'number') {\n    if (value.byteLength < def.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not be smaller than ${def.minLength} bytes`,\n        ),\n      }\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function cidLink(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  if (CID.asCID(value) === null) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be a CID`),\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function unknown(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  // type\n  if (!value || typeof value !== 'object') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`),\n    }\n  }\n\n  return { success: true, value }\n}\n","import { check, ipldToJson, schema } from '@atproto/common-web'\nimport { CID } from 'multiformats/cid'\nimport { z } from 'zod'\n\nexport const typedJsonBlobRef = z\n  .object({\n    $type: z.literal('blob'),\n    ref: schema.cid,\n    mimeType: z.string(),\n    size: z.number(),\n  })\n  .strict()\nexport type TypedJsonBlobRef = z.infer<typeof typedJsonBlobRef>\n\nexport const untypedJsonBlobRef = z\n  .object({\n    cid: z.string(),\n    mimeType: z.string(),\n  })\n  .strict()\nexport type UntypedJsonBlobRef = z.infer<typeof untypedJsonBlobRef>\n\nexport const jsonBlobRef = z.union([typedJsonBlobRef, untypedJsonBlobRef])\nexport type JsonBlobRef = z.infer<typeof jsonBlobRef>\n\nexport class BlobRef {\n  public original: JsonBlobRef\n\n  constructor(\n    public ref: CID,\n    public mimeType: string,\n    public size: number,\n    original?: JsonBlobRef,\n  ) {\n    this.original = original ?? {\n      $type: 'blob',\n      ref,\n      mimeType,\n      size,\n    }\n  }\n\n  static asBlobRef(obj: unknown): BlobRef | null {\n    if (check.is(obj, jsonBlobRef)) {\n      return BlobRef.fromJsonRef(obj)\n    }\n    return null\n  }\n\n  static fromJsonRef(json: JsonBlobRef): BlobRef {\n    if (check.is(json, typedJsonBlobRef)) {\n      return new BlobRef(json.ref, json.mimeType, json.size)\n    } else {\n      return new BlobRef(CID.parse(json.cid), json.mimeType, -1, json)\n    }\n  }\n\n  ipld(): TypedJsonBlobRef {\n    return {\n      $type: 'blob',\n      ref: this.ref,\n      mimeType: this.mimeType,\n      size: this.size,\n    }\n  }\n\n  toJSON() {\n    return ipldToJson(this.ipld())\n  }\n}\n","import { BlobRef } from '../blob-refs'\nimport { Lexicons } from '../lexicons'\nimport { LexUserType, ValidationResult, ValidationError } from '../types'\n\nexport function blob(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  // check\n  if (!value || !(value instanceof BlobRef)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} should be a blob ref`),\n    }\n  }\n  return { success: true, value }\n}\n","import { Lexicons } from '../lexicons'\nimport {\n  LexArray,\n  LexObject,\n  LexUserType,\n  ValidationResult,\n  ValidationError,\n} from '../types'\nimport { validateOneOf } from '../util'\n\nimport * as Primitives from './primitives'\nimport * as Blob from './blob'\n\nexport function validate(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  switch (def.type) {\n    case 'boolean':\n      return Primitives.boolean(lexicons, path, def, value)\n    case 'integer':\n      return Primitives.integer(lexicons, path, def, value)\n    case 'string':\n      return Primitives.string(lexicons, path, def, value)\n    case 'bytes':\n      return Primitives.bytes(lexicons, path, def, value)\n    case 'cid-link':\n      return Primitives.cidLink(lexicons, path, def, value)\n    case 'unknown':\n      return Primitives.unknown(lexicons, path, def, value)\n    case 'object':\n      return object(lexicons, path, def, value)\n    case 'array':\n      return array(lexicons, path, def, value)\n    case 'blob':\n      return Blob.blob(lexicons, path, def, value)\n    default:\n      return {\n        success: false,\n        error: new ValidationError(`Unexpected lexicon type: ${def.type}`),\n      }\n  }\n}\n\nexport function array(\n  lexicons: Lexicons,\n  path: string,\n  def: LexArray,\n  value: unknown,\n): ValidationResult {\n  // type\n  if (!Array.isArray(value)) {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an array`),\n    }\n  }\n\n  // maxLength\n  if (typeof def.maxLength === 'number') {\n    if ((value as Array<unknown>).length > def.maxLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not have more than ${def.maxLength} elements`,\n        ),\n      }\n    }\n  }\n\n  // minLength\n  if (typeof def.minLength === 'number') {\n    if ((value as Array<unknown>).length < def.minLength) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must not have fewer than ${def.minLength} elements`,\n        ),\n      }\n    }\n  }\n\n  // items\n  const itemsDef = def.items\n  for (let i = 0; i < (value as Array<unknown>).length; i++) {\n    const itemValue = value[i]\n    const itemPath = `${path}/${i}`\n    const res = validateOneOf(lexicons, itemPath, itemsDef, itemValue)\n    if (!res.success) {\n      return res\n    }\n  }\n\n  return { success: true, value }\n}\n\nexport function object(\n  lexicons: Lexicons,\n  path: string,\n  def: LexUserType,\n  value: unknown,\n): ValidationResult {\n  def = def as LexObject\n\n  // type\n  if (!value || typeof value !== 'object') {\n    return {\n      success: false,\n      error: new ValidationError(`${path} must be an object`),\n    }\n  }\n\n  const requiredProps = new Set(def.required)\n  const nullableProps = new Set(def.nullable)\n\n  // properties\n  let resultValue = value\n  if (typeof def.properties === 'object') {\n    for (const key in def.properties) {\n      if (value[key] === null && nullableProps.has(key)) {\n        continue\n      }\n      const propDef = def.properties[key]\n      const propPath = `${path}/${key}`\n      const validated = validateOneOf(lexicons, propPath, propDef, value[key])\n      const propValue = validated.success ? validated.value : value[key]\n      const propIsUndefined = typeof propValue === 'undefined'\n      // Return error for bad validation, giving required rule precedence\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`),\n        }\n      } else if (!propIsUndefined && !validated.success) {\n        return validated\n      }\n      // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          // Lazy shallow clone\n          resultValue = { ...value }\n        }\n        resultValue[key] = propValue\n      }\n    }\n  }\n\n  return { success: true, value: resultValue }\n}\n","import { Lexicons } from './lexicons'\nimport * as ComplexValidators from './validators/complex'\nimport {\n  LexUserType,\n  LexRefVariant,\n  ValidationError,\n  ValidationResult,\n  isDiscriminatedObject,\n} from './types'\nimport { z } from 'zod'\n\nexport function toLexUri(str: string, baseUri?: string): string {\n  if (str.split('#').length > 2) {\n    throw new Error('Uri can only have one hash segment')\n  }\n\n  if (str.startsWith('lex:')) {\n    return str\n  }\n  if (str.startsWith('#')) {\n    if (!baseUri) {\n      throw new Error(`Unable to resolve uri without anchor: ${str}`)\n    }\n    return `${baseUri}${str}`\n  }\n  return `lex:${str}`\n}\n\nexport function validateOneOf(\n  lexicons: Lexicons,\n  path: string,\n  def: LexRefVariant | LexUserType,\n  value: unknown,\n  mustBeObj = false, // this is the only type constraint we need currently (used by xrpc body schema validators)\n): ValidationResult {\n  let error\n\n  let concreteDefs\n  if (def.type === 'union') {\n    if (!isDiscriminatedObject(value)) {\n      return {\n        success: false,\n        error: new ValidationError(\n          `${path} must be an object which includes the \"$type\" property`,\n        ),\n      }\n    }\n    if (!refsContainType(def.refs, value.$type)) {\n      if (def.closed) {\n        return {\n          success: false,\n          error: new ValidationError(\n            `${path} $type must be one of ${def.refs.join(', ')}`,\n          ),\n        }\n      }\n      return { success: true, value }\n    } else {\n      concreteDefs = toConcreteTypes(lexicons, {\n        type: 'ref',\n        ref: value.$type,\n      })\n    }\n  } else {\n    concreteDefs = toConcreteTypes(lexicons, def)\n  }\n\n  for (const concreteDef of concreteDefs) {\n    const result = mustBeObj\n      ? ComplexValidators.object(lexicons, path, concreteDef, value)\n      : ComplexValidators.validate(lexicons, path, concreteDef, value)\n    if (result.success) {\n      return result\n    }\n    error ??= result.error\n  }\n  if (concreteDefs.length > 1) {\n    return {\n      success: false,\n      error: new ValidationError(\n        `${path} did not match any of the expected definitions`,\n      ),\n    }\n  }\n  return { success: false, error }\n}\n\nexport function assertValidOneOf(\n  lexicons: Lexicons,\n  path: string,\n  def: LexRefVariant | LexUserType,\n  value: unknown,\n  mustBeObj = false,\n) {\n  const res = validateOneOf(lexicons, path, def, value, mustBeObj)\n  if (!res.success) throw res.error\n  return res.value\n}\n\nexport function toConcreteTypes(\n  lexicons: Lexicons,\n  def: LexRefVariant | LexUserType,\n): LexUserType[] {\n  if (def.type === 'ref') {\n    return [lexicons.getDefOrThrow(def.ref)]\n  } else if (def.type === 'union') {\n    return def.refs.map((ref) => lexicons.getDefOrThrow(ref)).flat()\n  } else {\n    return [def]\n  }\n}\n\nexport function requiredPropertiesRefinement<\n  ObjectType extends {\n    required?: string[]\n    properties?: Record<string, unknown>\n  },\n>(object: ObjectType, ctx: z.RefinementCtx) {\n  // Required fields check\n  if (object.required === undefined) {\n    return\n  }\n\n  if (!Array.isArray(object.required)) {\n    ctx.addIssue({\n      code: z.ZodIssueCode.invalid_type,\n      received: typeof object.required,\n      expected: 'array',\n    })\n    return\n  }\n\n  if (object.properties === undefined) {\n    if (object.required.length > 0) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Required fields defined but no properties defined`,\n      })\n    }\n    return\n  }\n\n  for (const field of object.required) {\n    if (object.properties[field] === undefined) {\n      ctx.addIssue({\n        code: z.ZodIssueCode.custom,\n        message: `Required field \"${field}\" not defined`,\n      })\n    }\n  }\n}\n\n// to avoid bugs like #0189 this needs to handle both\n// explicit and implicit #main\nconst refsContainType = (refs: string[], type: string) => {\n  const lexUri = toLexUri(type)\n  if (refs.includes(lexUri)) {\n    return true\n  }\n\n  if (lexUri.endsWith('#main')) {\n    return refs.includes(lexUri.replace('#main', ''))\n  } else {\n    return refs.includes(lexUri + '#main')\n  }\n}\n","import { z } from 'zod'\nimport { NSID } from '@atproto/syntax'\nimport { requiredPropertiesRefinement } from './util'\n\n// primitives\n// =\n\nexport const lexBoolean = z\n  .object({\n    type: z.literal('boolean'),\n    description: z.string().optional(),\n    default: z.boolean().optional(),\n    const: z.boolean().optional(),\n  })\n  .strict()\nexport type LexBoolean = z.infer<typeof lexBoolean>\n\nexport const lexInteger = z\n  .object({\n    type: z.literal('integer'),\n    description: z.string().optional(),\n    default: z.number().int().optional(),\n    minimum: z.number().int().optional(),\n    maximum: z.number().int().optional(),\n    enum: z.number().int().array().optional(),\n    const: z.number().int().optional(),\n  })\n  .strict()\nexport type LexInteger = z.infer<typeof lexInteger>\n\nexport const lexStringFormat = z.enum([\n  'datetime',\n  'uri',\n  'at-uri',\n  'did',\n  'handle',\n  'at-identifier',\n  'nsid',\n  'cid',\n  'language',\n])\nexport type LexStringFormat = z.infer<typeof lexStringFormat>\n\nexport const lexString = z\n  .object({\n    type: z.literal('string'),\n    format: lexStringFormat.optional(),\n    description: z.string().optional(),\n    default: z.string().optional(),\n    minLength: z.number().int().optional(),\n    maxLength: z.number().int().optional(),\n    minGraphemes: z.number().int().optional(),\n    maxGraphemes: z.number().int().optional(),\n    enum: z.string().array().optional(),\n    const: z.string().optional(),\n    knownValues: z.string().array().optional(),\n  })\n  .strict()\nexport type LexString = z.infer<typeof lexString>\n\nexport const lexUnknown = z\n  .object({\n    type: z.literal('unknown'),\n    description: z.string().optional(),\n  })\n  .strict()\nexport type LexUnknown = z.infer<typeof lexUnknown>\n\nexport const lexPrimitive = z.discriminatedUnion('type', [\n  lexBoolean,\n  lexInteger,\n  lexString,\n  lexUnknown,\n])\nexport type LexPrimitive = z.infer<typeof lexPrimitive>\n\n// ipld types\n// =\n\nexport const lexBytes = z\n  .object({\n    type: z.literal('bytes'),\n    description: z.string().optional(),\n    maxLength: z.number().optional(),\n    minLength: z.number().optional(),\n  })\n  .strict()\nexport type LexBytes = z.infer<typeof lexBytes>\n\nexport const lexCidLink = z\n  .object({\n    type: z.literal('cid-link'),\n    description: z.string().optional(),\n  })\n  .strict()\nexport type LexCidLink = z.infer<typeof lexCidLink>\n\nexport const lexIpldType = z.discriminatedUnion('type', [lexBytes, lexCidLink])\nexport type LexIpldType = z.infer<typeof lexIpldType>\n\n// references\n// =\n\nexport const lexRef = z\n  .object({\n    type: z.literal('ref'),\n    description: z.string().optional(),\n    ref: z.string(),\n  })\n  .strict()\nexport type LexRef = z.infer<typeof lexRef>\n\nexport const lexRefUnion = z\n  .object({\n    type: z.literal('union'),\n    description: z.string().optional(),\n    refs: z.string().array(),\n    closed: z.boolean().optional(),\n  })\n  .strict()\nexport type LexRefUnion = z.infer<typeof lexRefUnion>\n\nexport const lexRefVariant = z.discriminatedUnion('type', [lexRef, lexRefUnion])\nexport type LexRefVariant = z.infer<typeof lexRefVariant>\n\n// blobs\n// =\n\nexport const lexBlob = z\n  .object({\n    type: z.literal('blob'),\n    description: z.string().optional(),\n    accept: z.string().array().optional(),\n    maxSize: z.number().optional(),\n  })\n  .strict()\nexport type LexBlob = z.infer<typeof lexBlob>\n\n// complex types\n// =\n\nexport const lexArray = z\n  .object({\n    type: z.literal('array'),\n    description: z.string().optional(),\n    items: z.union([lexPrimitive, lexIpldType, lexBlob, lexRefVariant]),\n    minLength: z.number().int().optional(),\n    maxLength: z.number().int().optional(),\n  })\n  .strict()\nexport type LexArray = z.infer<typeof lexArray>\n\nexport const lexPrimitiveArray = lexArray.merge(\n  z\n    .object({\n      items: lexPrimitive,\n    })\n    .strict(),\n)\nexport type LexPrimitiveArray = z.infer<typeof lexPrimitiveArray>\n\nexport const lexToken = z\n  .object({\n    type: z.literal('token'),\n    description: z.string().optional(),\n  })\n  .strict()\nexport type LexToken = z.infer<typeof lexToken>\n\nexport const lexObject = z\n  .object({\n    type: z.literal('object'),\n    description: z.string().optional(),\n    required: z.string().array().optional(),\n    nullable: z.string().array().optional(),\n    properties: z.record(\n      z.union([lexRefVariant, lexIpldType, lexArray, lexBlob, lexPrimitive]),\n    ),\n  })\n  .strict()\n  .superRefine(requiredPropertiesRefinement)\nexport type LexObject = z.infer<typeof lexObject>\n\n// xrpc\n// =\n\nexport const lexXrpcParameters = z\n  .object({\n    type: z.literal('params'),\n    description: z.string().optional(),\n    required: z.string().array().optional(),\n    properties: z.record(z.union([lexPrimitive, lexPrimitiveArray])),\n  })\n  .strict()\n  .superRefine(requiredPropertiesRefinement)\nexport type LexXrpcParameters = z.infer<typeof lexXrpcParameters>\n\nexport const lexXrpcBody = z\n  .object({\n    description: z.string().optional(),\n    encoding: z.string(),\n    schema: z.union([lexRefVariant, lexObject]).optional(),\n  })\n  .strict()\nexport type LexXrpcBody = z.infer<typeof lexXrpcBody>\n\nexport const lexXrpcSubscriptionMessage = z\n  .object({\n    description: z.string().optional(),\n    schema: z.union([lexRefVariant, lexObject]).optional(),\n  })\n  .strict()\nexport type LexXrpcSubscriptionMessage = z.infer<\n  typeof lexXrpcSubscriptionMessage\n>\n\nexport const lexXrpcError = z\n  .object({\n    name: z.string(),\n    description: z.string().optional(),\n  })\n  .strict()\nexport type LexXrpcError = z.infer<typeof lexXrpcError>\n\nexport const lexXrpcQuery = z\n  .object({\n    type: z.literal('query'),\n    description: z.string().optional(),\n    parameters: lexXrpcParameters.optional(),\n    output: lexXrpcBody.optional(),\n    errors: lexXrpcError.array().optional(),\n  })\n  .strict()\nexport type LexXrpcQuery = z.infer<typeof lexXrpcQuery>\n\nexport const lexXrpcProcedure = z\n  .object({\n    type: z.literal('procedure'),\n    description: z.string().optional(),\n    parameters: lexXrpcParameters.optional(),\n    input: lexXrpcBody.optional(),\n    output: lexXrpcBody.optional(),\n    errors: lexXrpcError.array().optional(),\n  })\n  .strict()\nexport type LexXrpcProcedure = z.infer<typeof lexXrpcProcedure>\n\nexport const lexXrpcSubscription = z\n  .object({\n    type: z.literal('subscription'),\n    description: z.string().optional(),\n    parameters: lexXrpcParameters.optional(),\n    message: lexXrpcSubscriptionMessage.optional(),\n    errors: lexXrpcError.array().optional(),\n  })\n  .strict()\nexport type LexXrpcSubscription = z.infer<typeof lexXrpcSubscription>\n\n// database\n// =\n\nexport const lexRecord = z\n  .object({\n    type: z.literal('record'),\n    description: z.string().optional(),\n    key: z.string().optional(),\n    record: lexObject,\n  })\n  .strict()\nexport type LexRecord = z.infer<typeof lexRecord>\n\n// core\n// =\n\n// We need to use `z.custom` here because\n// lexXrpcProperty and lexObject are refined\n// `z.union` would work, but it's too slow\n// see #915 for details\nexport const lexUserType = z.custom<\n  | LexRecord\n  | LexXrpcQuery\n  | LexXrpcProcedure\n  | LexXrpcSubscription\n  | LexBlob\n  | LexArray\n  | LexToken\n  | LexObject\n  | LexBoolean\n  | LexInteger\n  | LexString\n  | LexBytes\n  | LexCidLink\n  | LexUnknown\n>(\n  (val) => {\n    if (!val || typeof val !== 'object') {\n      return\n    }\n\n    if (val['type'] === undefined) {\n      return\n    }\n\n    switch (val['type']) {\n      case 'record':\n        return lexRecord.parse(val)\n\n      case 'query':\n        return lexXrpcQuery.parse(val)\n      case 'procedure':\n        return lexXrpcProcedure.parse(val)\n      case 'subscription':\n        return lexXrpcSubscription.parse(val)\n\n      case 'blob':\n        return lexBlob.parse(val)\n\n      case 'array':\n        return lexArray.parse(val)\n      case 'token':\n        return lexToken.parse(val)\n      case 'object':\n        return lexObject.parse(val)\n\n      case 'boolean':\n        return lexBoolean.parse(val)\n      case 'integer':\n        return lexInteger.parse(val)\n      case 'string':\n        return lexString.parse(val)\n      case 'bytes':\n        return lexBytes.parse(val)\n      case 'cid-link':\n        return lexCidLink.parse(val)\n      case 'unknown':\n        return lexUnknown.parse(val)\n    }\n  },\n  (val) => {\n    if (!val || typeof val !== 'object') {\n      return {\n        message: 'Must be an object',\n        fatal: true,\n      }\n    }\n\n    if (val['type'] === undefined) {\n      return {\n        message: 'Must have a type',\n        fatal: true,\n      }\n    }\n\n    return {\n      message: `Invalid type: ${val['type']} must be one of: record, query, procedure, subscription, blob, array, token, object, boolean, integer, string, bytes, cid-link, unknown`,\n      fatal: true,\n    }\n  },\n)\nexport type LexUserType = z.infer<typeof lexUserType>\n\nexport const lexiconDoc = z\n  .object({\n    lexicon: z.literal(1),\n    id: z.string().refine((v: string) => NSID.isValid(v), {\n      message: 'Must be a valid NSID',\n    }),\n    revision: z.number().optional(),\n    description: z.string().optional(),\n    defs: z.record(lexUserType),\n  })\n  .strict()\n  .superRefine((doc, ctx) => {\n    for (const defId in doc.defs) {\n      const def = doc.defs[defId]\n      if (\n        defId !== 'main' &&\n        (def.type === 'record' ||\n          def.type === 'procedure' ||\n          def.type === 'query' ||\n          def.type === 'subscription')\n      ) {\n        ctx.addIssue({\n          code: z.ZodIssueCode.custom,\n          message: `Records, procedures, queries, and subscriptions must be the main definition.`,\n        })\n      }\n    }\n  })\nexport type LexiconDoc = z.infer<typeof lexiconDoc>\n\n// helpers\n// =\n\nexport function isValidLexiconDoc(v: unknown): v is LexiconDoc {\n  return lexiconDoc.safeParse(v).success\n}\n\nexport function isObj(obj: unknown): obj is Record<string, unknown> {\n  return obj !== null && typeof obj === 'object'\n}\n\nexport function hasProp<K extends PropertyKey>(\n  data: object,\n  prop: K,\n): data is Record<K, unknown> {\n  return prop in data\n}\n\nexport const discriminatedObject = z.object({ $type: z.string() })\nexport type DiscriminatedObject = z.infer<typeof discriminatedObject>\nexport function isDiscriminatedObject(\n  value: unknown,\n): value is DiscriminatedObject {\n  return discriminatedObject.safeParse(value).success\n}\n\nexport function parseLexiconDoc(v: unknown): LexiconDoc {\n  lexiconDoc.parse(v)\n  return v as LexiconDoc\n}\n\nexport type ValidationResult =\n  | {\n      success: true\n      value: unknown\n    }\n  | {\n      success: false\n      error: ValidationError\n    }\n\nexport class ValidationError extends Error {}\nexport class InvalidLexiconError extends Error {}\nexport class LexiconDefNotFoundError extends Error {}\n","import { Lexicons } from '../lexicons'\nimport { LexXrpcParameters, ValidationResult, ValidationError } from '../types'\n\nimport * as PrimitiveValidators from './primitives'\nimport { array } from './complex'\n\nexport function params(\n  lexicons: Lexicons,\n  path: string,\n  def: LexXrpcParameters,\n  val: unknown,\n): ValidationResult {\n  // type\n  const value = val && typeof val === 'object' ? val : {}\n\n  const requiredProps = new Set(def.required ?? [])\n\n  // properties\n  let resultValue = value\n  if (typeof def.properties === 'object') {\n    for (const key in def.properties) {\n      const propDef = def.properties[key]\n      const validated =\n        propDef.type === 'array'\n          ? array(lexicons, key, propDef, value[key])\n          : PrimitiveValidators.validate(lexicons, key, propDef, value[key])\n      const propValue = validated.success ? validated.value : value[key]\n      const propIsUndefined = typeof propValue === 'undefined'\n      // Return error for bad validation, giving required rule precedence\n      if (propIsUndefined && requiredProps.has(key)) {\n        return {\n          success: false,\n          error: new ValidationError(`${path} must have the property \"${key}\"`),\n        }\n      } else if (!propIsUndefined && !validated.success) {\n        return validated\n      }\n      // Adjust value based on e.g. applied defaults, cloning shallowly if there was a changed value\n      if (propValue !== value[key]) {\n        if (resultValue === value) {\n          // Lazy shallow clone\n          resultValue = { ...value }\n        }\n        resultValue[key] = propValue\n      }\n    }\n  }\n\n  return { success: true, value: resultValue }\n}\n","import { Lexicons } from './lexicons'\nimport {\n  LexRecord,\n  LexXrpcProcedure,\n  LexXrpcQuery,\n  LexXrpcSubscription,\n} from './types'\nimport { assertValidOneOf } from './util'\n\nimport * as ComplexValidators from './validators/complex'\nimport * as XrpcValidators from './validators/xrpc'\n\nexport function assertValidRecord(\n  lexicons: Lexicons,\n  def: LexRecord,\n  value: unknown,\n) {\n  const res = ComplexValidators.object(lexicons, 'Record', def.record, value)\n  if (!res.success) throw res.error\n  return res.value\n}\n\nexport function assertValidXrpcParams(\n  lexicons: Lexicons,\n  def: LexXrpcProcedure | LexXrpcQuery | LexXrpcSubscription,\n  value: unknown,\n) {\n  if (def.parameters) {\n    const res = XrpcValidators.params(lexicons, 'Params', def.parameters, value)\n    if (!res.success) throw res.error\n    return res.value\n  }\n}\n\nexport function assertValidXrpcInput(\n  lexicons: Lexicons,\n  def: LexXrpcProcedure,\n  value: unknown,\n) {\n  if (def.input?.schema) {\n    // loop: all input schema definitions\n    return assertValidOneOf(lexicons, 'Input', def.input.schema, value, true)\n  }\n}\n\nexport function assertValidXrpcOutput(\n  lexicons: Lexicons,\n  def: LexXrpcProcedure | LexXrpcQuery,\n  value: unknown,\n) {\n  if (def.output?.schema) {\n    // loop: all output schema definitions\n    return assertValidOneOf(lexicons, 'Output', def.output.schema, value, true)\n  }\n}\n\nexport function assertValidXrpcMessage(\n  lexicons: Lexicons,\n  def: LexXrpcSubscription,\n  value: unknown,\n) {\n  if (def.message?.schema) {\n    // loop: all output schema definitions\n    return assertValidOneOf(\n      lexicons,\n      'Message',\n      def.message.schema,\n      value,\n      true,\n    )\n  }\n}\n","import {\n  LexiconDoc,\n  LexRecord,\n  LexUserType,\n  LexiconDefNotFoundError,\n  InvalidLexiconError,\n  ValidationResult,\n  ValidationError,\n  isObj,\n  hasProp,\n} from './types'\nimport {\n  assertValidRecord,\n  assertValidXrpcParams,\n  assertValidXrpcInput,\n  assertValidXrpcOutput,\n  assertValidXrpcMessage,\n} from './validation'\nimport { toLexUri } from './util'\nimport * as ComplexValidators from './validators/complex'\n\n/**\n * A collection of compiled lexicons.\n */\nexport class Lexicons {\n  docs: Map<string, LexiconDoc> = new Map()\n  defs: Map<string, LexUserType> = new Map()\n\n  constructor(docs?: LexiconDoc[]) {\n    if (docs?.length) {\n      for (const doc of docs) {\n        this.add(doc)\n      }\n    }\n  }\n\n  /**\n   * Add a lexicon doc.\n   */\n  add(doc: LexiconDoc): void {\n    const uri = toLexUri(doc.id)\n    if (this.docs.has(uri)) {\n      throw new Error(`${uri} has already been registered`)\n    }\n\n    // WARNING\n    // mutates the object\n    // -prf\n    resolveRefUris(doc, uri)\n\n    this.docs.set(uri, doc)\n    for (const [defUri, def] of iterDefs(doc)) {\n      this.defs.set(defUri, def)\n    }\n  }\n\n  /**\n   * Remove a lexicon doc.\n   */\n  remove(uri: string) {\n    uri = toLexUri(uri)\n    const doc = this.docs.get(uri)\n    if (!doc) {\n      throw new Error(`Unable to remove \"${uri}\": does not exist`)\n    }\n    for (const [defUri, _def] of iterDefs(doc)) {\n      this.defs.delete(defUri)\n    }\n    this.docs.delete(uri)\n  }\n\n  /**\n   * Get a lexicon doc.\n   */\n  get(uri: string): LexiconDoc | undefined {\n    uri = toLexUri(uri)\n    return this.docs.get(uri)\n  }\n\n  /**\n   * Get a definition.\n   */\n  getDef(uri: string): LexUserType | undefined {\n    uri = toLexUri(uri)\n    return this.defs.get(uri)\n  }\n\n  /**\n   * Get a def, throw if not found. Throws on not found.\n   */\n  getDefOrThrow<T extends LexUserType['type'] = LexUserType['type']>(\n    uri: string,\n    types?: readonly T[],\n  ): Extract<LexUserType, { type: T }>\n  getDefOrThrow(\n    uri: string,\n    types?: readonly LexUserType['type'][],\n  ): LexUserType {\n    const def = this.getDef(uri)\n    if (!def) {\n      throw new LexiconDefNotFoundError(`Lexicon not found: ${uri}`)\n    }\n    if (types && !types.includes(def.type)) {\n      throw new InvalidLexiconError(\n        `Not a ${types.join(' or ')} lexicon: ${uri}`,\n      )\n    }\n    return def\n  }\n\n  /**\n   * Validate a record or object.\n   */\n  validate(lexUri: string, value: unknown): ValidationResult {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['record', 'object'])\n    if (!isObj(value)) {\n      throw new ValidationError(`Value must be an object`)\n    }\n    if (def.type === 'record') {\n      return ComplexValidators.object(this, 'Record', def.record, value)\n    } else if (def.type === 'object') {\n      return ComplexValidators.object(this, 'Object', def, value)\n    } else {\n      // shouldn't happen\n      throw new InvalidLexiconError('Definition must be a record or object')\n    }\n  }\n\n  /**\n   * Validate a record and throw on any error.\n   */\n  assertValidRecord(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['record'])\n    if (!isObj(value)) {\n      throw new ValidationError(`Record must be an object`)\n    }\n    if (!hasProp(value, '$type') || typeof value.$type !== 'string') {\n      throw new ValidationError(`Record/$type must be a string`)\n    }\n    const $type = (value as Record<string, string>).$type || ''\n    if (toLexUri($type) !== lexUri) {\n      throw new ValidationError(\n        `Invalid $type: must be ${lexUri}, got ${$type}`,\n      )\n    }\n    return assertValidRecord(this, def as LexRecord, value)\n  }\n\n  /**\n   * Validate xrpc query params and throw on any error.\n   */\n  assertValidXrpcParams(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, [\n      'query',\n      'procedure',\n      'subscription',\n    ])\n    return assertValidXrpcParams(this, def, value)\n  }\n\n  /**\n   * Validate xrpc input body and throw on any error.\n   */\n  assertValidXrpcInput(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['procedure'])\n    return assertValidXrpcInput(this, def, value)\n  }\n\n  /**\n   * Validate xrpc output body and throw on any error.\n   */\n  assertValidXrpcOutput(lexUri: string, value: unknown) {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['query', 'procedure'])\n    return assertValidXrpcOutput(this, def, value)\n  }\n\n  /**\n   * Validate xrpc subscription message and throw on any error.\n   */\n  assertValidXrpcMessage<T = unknown>(lexUri: string, value: unknown): T {\n    lexUri = toLexUri(lexUri)\n    const def = this.getDefOrThrow(lexUri, ['subscription'])\n    return assertValidXrpcMessage(this, def, value) as T\n  }\n\n  /**\n   * Resolve a lex uri given a ref\n   */\n  resolveLexUri(lexUri: string, ref: string) {\n    lexUri = toLexUri(lexUri)\n    return toLexUri(ref, lexUri)\n  }\n}\n\nfunction* iterDefs(doc: LexiconDoc): Generator<[string, LexUserType]> {\n  for (const defId in doc.defs) {\n    yield [`lex:${doc.id}#${defId}`, doc.defs[defId]]\n    if (defId === 'main') {\n      yield [`lex:${doc.id}`, doc.defs[defId]]\n    }\n  }\n}\n\n// WARNING\n// this method mutates objects\n// -prf\nfunction resolveRefUris(obj: any, baseUri: string): any {\n  for (const k in obj) {\n    if (obj.type === 'ref') {\n      obj.ref = toLexUri(obj.ref, baseUri)\n    } else if (obj.type === 'union') {\n      obj.refs = obj.refs.map((ref) => toLexUri(ref, baseUri))\n    } else if (Array.isArray(obj[k])) {\n      obj[k] = obj[k].map((item: any) => {\n        if (typeof item === 'string') {\n          return item.startsWith('#') ? toLexUri(item, baseUri) : item\n        } else if (item && typeof item === 'object') {\n          return resolveRefUris(item, baseUri)\n        }\n        return item\n      })\n    } else if (obj[k] && typeof obj[k] === 'object') {\n      obj[k] = resolveRefUris(obj[k], baseUri)\n    }\n  }\n  return obj\n}\n","import {\n  check,\n  IpldValue,\n  ipldToJson,\n  jsonToIpld,\n  JsonValue,\n} from '@atproto/common-web'\nimport { CID } from 'multiformats/cid'\nimport { BlobRef, jsonBlobRef } from './blob-refs'\n\nexport type LexValue =\n  | IpldValue\n  | BlobRef\n  | Array<LexValue>\n  | { [key: string]: LexValue }\n\nexport type RepoRecord = Record<string, LexValue>\n\n// @NOTE avoiding use of check.is() here only because it makes\n// these implementations slow, and they often live in hot paths.\n\nexport const lexToIpld = (val: LexValue): IpldValue => {\n  // walk arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => lexToIpld(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // convert blobs, leaving the original encoding so that we don't change CIDs on re-encode\n    if (val instanceof BlobRef) {\n      return val.original\n    }\n    // retain cids & bytes\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val\n    }\n    // walk plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = lexToIpld(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val\n}\n\nexport const ipldToLex = (val: IpldValue): LexValue => {\n  // map arrays\n  if (Array.isArray(val)) {\n    return val.map((item) => ipldToLex(item))\n  }\n  // objects\n  if (val && typeof val === 'object') {\n    // convert blobs, using hints to avoid expensive is() check\n    if (\n      (val['$type'] === 'blob' ||\n        (typeof val['cid'] === 'string' &&\n          typeof val['mimeType'] === 'string')) &&\n      check.is(val, jsonBlobRef)\n    ) {\n      return BlobRef.fromJsonRef(val)\n    }\n    // retain cids, bytes\n    if (CID.asCID(val) || val instanceof Uint8Array) {\n      return val\n    }\n    // map plain objects\n    const toReturn = {}\n    for (const key of Object.keys(val)) {\n      toReturn[key] = ipldToLex(val[key])\n    }\n    return toReturn\n  }\n  // pass through\n  return val\n}\n\nexport const lexToJson = (val: LexValue): JsonValue => {\n  return ipldToJson(lexToIpld(val))\n}\n\nexport const stringifyLex = (val: LexValue): string => {\n  return JSON.stringify(lexToJson(val))\n}\n\nexport const jsonToLex = (val: JsonValue): LexValue => {\n  return ipldToLex(jsonToIpld(val))\n}\n\nexport const jsonStringToLex = (val: string): LexValue => {\n  return jsonToLex(JSON.parse(val))\n}\n","import { z } from 'zod'\nimport { ValidationError } from '@atproto/lexicon'\n\nexport type QueryParams = Record<string, any>\nexport type Headers = Record<string, string>\n\nexport interface CallOptions {\n  encoding?: string\n  headers?: Headers\n}\n\nexport interface FetchHandlerResponse {\n  status: number\n  headers: Headers\n  body: ArrayBuffer | undefined\n}\n\nexport type FetchHandler = (\n  httpUri: string,\n  httpMethod: string,\n  httpHeaders: Headers,\n  httpReqBody: any,\n) => Promise<FetchHandlerResponse>\n\nexport const errorResponseBody = z.object({\n  error: z.string().optional(),\n  message: z.string().optional(),\n})\nexport type ErrorResponseBody = z.infer<typeof errorResponseBody>\n\nexport enum ResponseType {\n  Unknown = 1,\n  InvalidResponse = 2,\n  Success = 200,\n  InvalidRequest = 400,\n  AuthRequired = 401,\n  Forbidden = 403,\n  XRPCNotSupported = 404,\n  PayloadTooLarge = 413,\n  RateLimitExceeded = 429,\n  InternalServerError = 500,\n  MethodNotImplemented = 501,\n  UpstreamFailure = 502,\n  NotEnoughResources = 503,\n  UpstreamTimeout = 504,\n}\n\nexport const ResponseTypeNames = {\n  [ResponseType.InvalidResponse]: 'InvalidResponse',\n  [ResponseType.Success]: 'Success',\n  [ResponseType.InvalidRequest]: 'InvalidRequest',\n  [ResponseType.AuthRequired]: 'AuthenticationRequired',\n  [ResponseType.Forbidden]: 'Forbidden',\n  [ResponseType.XRPCNotSupported]: 'XRPCNotSupported',\n  [ResponseType.PayloadTooLarge]: 'PayloadTooLarge',\n  [ResponseType.RateLimitExceeded]: 'RateLimitExceeded',\n  [ResponseType.InternalServerError]: 'InternalServerError',\n  [ResponseType.MethodNotImplemented]: 'MethodNotImplemented',\n  [ResponseType.UpstreamFailure]: 'UpstreamFailure',\n  [ResponseType.NotEnoughResources]: 'NotEnoughResources',\n  [ResponseType.UpstreamTimeout]: 'UpstreamTimeout',\n}\n\nexport const ResponseTypeStrings = {\n  [ResponseType.InvalidResponse]: 'Invalid Response',\n  [ResponseType.Success]: 'Success',\n  [ResponseType.InvalidRequest]: 'Invalid Request',\n  [ResponseType.AuthRequired]: 'Authentication Required',\n  [ResponseType.Forbidden]: 'Forbidden',\n  [ResponseType.XRPCNotSupported]: 'XRPC Not Supported',\n  [ResponseType.PayloadTooLarge]: 'Payload Too Large',\n  [ResponseType.RateLimitExceeded]: 'Rate Limit Exceeded',\n  [ResponseType.InternalServerError]: 'Internal Server Error',\n  [ResponseType.MethodNotImplemented]: 'Method Not Implemented',\n  [ResponseType.UpstreamFailure]: 'Upstream Failure',\n  [ResponseType.NotEnoughResources]: 'Not Enough Resources',\n  [ResponseType.UpstreamTimeout]: 'Upstream Timeout',\n}\n\nexport class XRPCResponse {\n  success = true\n\n  constructor(public data: any, public headers: Headers) {}\n}\n\nexport class XRPCError extends Error {\n  success = false\n  headers?: Headers\n\n  constructor(\n    public status: ResponseType,\n    public error?: string,\n    message?: string,\n    headers?: Headers,\n  ) {\n    super(message || error || ResponseTypeStrings[status])\n    if (!this.error) {\n      this.error = ResponseTypeNames[status]\n    }\n    this.headers = headers\n  }\n}\n\nexport class XRPCInvalidResponseError extends XRPCError {\n  constructor(\n    public lexiconNsid: string,\n    public validationError: ValidationError,\n    public responseBody: unknown,\n  ) {\n    super(\n      ResponseType.InvalidResponse,\n      ResponseTypeStrings[ResponseType.InvalidResponse],\n      `The server gave an invalid response and may be out of date.`,\n    )\n  }\n}\n","import {\n  jsonStringToLex,\n  LexXrpcProcedure,\n  LexXrpcQuery,\n  stringifyLex,\n} from '@atproto/lexicon'\nimport {\n  CallOptions,\n  Headers,\n  QueryParams,\n  ResponseType,\n  XRPCError,\n} from './types'\n\nexport function getMethodSchemaHTTPMethod(\n  schema: LexXrpcProcedure | LexXrpcQuery,\n) {\n  if (schema.type === 'procedure') {\n    return 'post'\n  }\n  return 'get'\n}\n\nexport function constructMethodCallUri(\n  nsid: string,\n  schema: LexXrpcProcedure | LexXrpcQuery,\n  serviceUri: URL,\n  params?: QueryParams,\n): string {\n  const uri = new URL(serviceUri)\n  uri.pathname = `/xrpc/${nsid}`\n\n  // given parameters\n  if (params) {\n    for (const [key, value] of Object.entries(params)) {\n      const paramSchema = schema.parameters?.properties?.[key]\n      if (!paramSchema) {\n        throw new Error(`Invalid query parameter: ${key}`)\n      }\n      if (value !== undefined) {\n        if (paramSchema.type === 'array') {\n          const vals: typeof value[] = []\n          vals.concat(value).forEach((val) => {\n            uri.searchParams.append(\n              key,\n              encodeQueryParam(paramSchema.items.type, val),\n            )\n          })\n        } else {\n          uri.searchParams.set(key, encodeQueryParam(paramSchema.type, value))\n        }\n      }\n    }\n  }\n\n  return uri.toString()\n}\n\nexport function encodeQueryParam(\n  type:\n    | 'string'\n    | 'float'\n    | 'integer'\n    | 'boolean'\n    | 'datetime'\n    | 'array'\n    | 'unknown',\n  value: any,\n): string {\n  if (type === 'string' || type === 'unknown') {\n    return String(value)\n  }\n  if (type === 'float') {\n    return String(Number(value))\n  } else if (type === 'integer') {\n    return String(Number(value) | 0)\n  } else if (type === 'boolean') {\n    return value ? 'true' : 'false'\n  } else if (type === 'datetime') {\n    if (value instanceof Date) {\n      return value.toISOString()\n    }\n    return String(value)\n  }\n  throw new Error(`Unsupported query param type: ${type}`)\n}\n\nexport function normalizeHeaders(headers: Headers): Headers {\n  const normalized: Headers = {}\n  for (const [header, value] of Object.entries(headers)) {\n    normalized[header.toLowerCase()] = value\n  }\n\n  return normalized\n}\n\nexport function constructMethodCallHeaders(\n  schema: LexXrpcProcedure | LexXrpcQuery,\n  data?: any,\n  opts?: CallOptions,\n): Headers {\n  const headers: Headers = opts?.headers || {}\n  if (schema.type === 'procedure') {\n    if (opts?.encoding) {\n      headers['Content-Type'] = opts.encoding\n    }\n    if (data && typeof data === 'object') {\n      if (!headers['Content-Type']) {\n        headers['Content-Type'] = 'application/json'\n      }\n    }\n  }\n  return headers\n}\n\nexport function encodeMethodCallBody(\n  headers: Headers,\n  data?: any,\n): ArrayBuffer | undefined {\n  if (!headers['content-type'] || typeof data === 'undefined') {\n    return undefined\n  }\n  if (data instanceof ArrayBuffer) {\n    return data\n  }\n  if (headers['content-type'].startsWith('text/')) {\n    return new TextEncoder().encode(data.toString())\n  }\n  if (headers['content-type'].startsWith('application/json')) {\n    return new TextEncoder().encode(stringifyLex(data))\n  }\n  return data\n}\n\nexport function httpResponseCodeToEnum(status: number): ResponseType {\n  let resCode: ResponseType\n  if (status in ResponseType) {\n    resCode = status\n  } else if (status >= 100 && status < 200) {\n    resCode = ResponseType.XRPCNotSupported\n  } else if (status >= 200 && status < 300) {\n    resCode = ResponseType.Success\n  } else if (status >= 300 && status < 400) {\n    resCode = ResponseType.XRPCNotSupported\n  } else if (status >= 400 && status < 500) {\n    resCode = ResponseType.InvalidRequest\n  } else {\n    resCode = ResponseType.InternalServerError\n  }\n  return resCode\n}\n\nexport function httpResponseBodyParse(\n  mimeType: string | null,\n  data: ArrayBuffer | undefined,\n): any {\n  if (mimeType) {\n    if (mimeType.includes('application/json') && data?.byteLength) {\n      try {\n        const str = new TextDecoder().decode(data)\n        return jsonStringToLex(str)\n      } catch (e) {\n        throw new XRPCError(\n          ResponseType.InvalidResponse,\n          `Failed to parse response body: ${String(e)}`,\n        )\n      }\n    }\n    if (mimeType.startsWith('text/') && data?.byteLength) {\n      try {\n        return new TextDecoder().decode(data)\n      } catch (e) {\n        throw new XRPCError(\n          ResponseType.InvalidResponse,\n          `Failed to parse response body: ${String(e)}`,\n        )\n      }\n    }\n  }\n  if (data instanceof ArrayBuffer) {\n    return new Uint8Array(data)\n  }\n  return data\n}\n","import { LexiconDoc, Lexicons, ValidationError } from '@atproto/lexicon'\nimport {\n  getMethodSchemaHTTPMethod,\n  constructMethodCallUri,\n  constructMethodCallHeaders,\n  encodeMethodCallBody,\n  httpResponseCodeToEnum,\n  httpResponseBodyParse,\n  normalizeHeaders,\n} from './util'\nimport {\n  FetchHandler,\n  FetchHandlerResponse,\n  Headers,\n  CallOptions,\n  QueryParams,\n  ResponseType,\n  errorResponseBody,\n  ErrorResponseBody,\n  XRPCResponse,\n  XRPCError,\n  XRPCInvalidResponseError,\n} from './types'\n\nexport class Client {\n  fetch: FetchHandler = defaultFetchHandler\n  lex = new Lexicons()\n\n  // method calls\n  //\n\n  async call(\n    serviceUri: string | URL,\n    methodNsid: string,\n    params?: QueryParams,\n    data?: unknown,\n    opts?: CallOptions,\n  ) {\n    return this.service(serviceUri).call(methodNsid, params, data, opts)\n  }\n\n  service(serviceUri: string | URL) {\n    return new ServiceClient(this, serviceUri)\n  }\n\n  // schemas\n  // =\n\n  addLexicon(doc: LexiconDoc) {\n    this.lex.add(doc)\n  }\n\n  addLexicons(docs: LexiconDoc[]) {\n    for (const doc of docs) {\n      this.addLexicon(doc)\n    }\n  }\n\n  removeLexicon(uri: string) {\n    this.lex.remove(uri)\n  }\n}\n\nexport class ServiceClient {\n  baseClient: Client\n  uri: URL\n  headers: Record<string, string> = {}\n\n  constructor(baseClient: Client, serviceUri: string | URL) {\n    this.baseClient = baseClient\n    this.uri = typeof serviceUri === 'string' ? new URL(serviceUri) : serviceUri\n  }\n\n  setHeader(key: string, value: string): void {\n    this.headers[key] = value\n  }\n\n  unsetHeader(key: string): void {\n    delete this.headers[key]\n  }\n\n  async call(\n    methodNsid: string,\n    params?: QueryParams,\n    data?: unknown,\n    opts?: CallOptions,\n  ) {\n    const def = this.baseClient.lex.getDefOrThrow(methodNsid)\n    if (!def || (def.type !== 'query' && def.type !== 'procedure')) {\n      throw new Error(\n        `Invalid lexicon: ${methodNsid}. Must be a query or procedure.`,\n      )\n    }\n\n    const httpMethod = getMethodSchemaHTTPMethod(def)\n    const httpUri = constructMethodCallUri(methodNsid, def, this.uri, params)\n    const httpHeaders = constructMethodCallHeaders(def, data, {\n      headers: {\n        ...this.headers,\n        ...opts?.headers,\n      },\n      encoding: opts?.encoding,\n    })\n\n    const res = await this.baseClient.fetch(\n      httpUri,\n      httpMethod,\n      httpHeaders,\n      data,\n    )\n\n    const resCode = httpResponseCodeToEnum(res.status)\n    if (resCode === ResponseType.Success) {\n      try {\n        this.baseClient.lex.assertValidXrpcOutput(methodNsid, res.body)\n      } catch (e: any) {\n        if (e instanceof ValidationError) {\n          throw new XRPCInvalidResponseError(methodNsid, e, res.body)\n        } else {\n          throw e\n        }\n      }\n      return new XRPCResponse(res.body, res.headers)\n    } else {\n      if (res.body && isErrorResponseBody(res.body)) {\n        throw new XRPCError(\n          resCode,\n          res.body.error,\n          res.body.message,\n          res.headers,\n        )\n      } else {\n        throw new XRPCError(resCode)\n      }\n    }\n  }\n}\n\nexport async function defaultFetchHandler(\n  httpUri: string,\n  httpMethod: string,\n  httpHeaders: Headers,\n  httpReqBody: unknown,\n): Promise<FetchHandlerResponse> {\n  try {\n    // The duplex field is now required for streaming bodies, but not yet reflected\n    // anywhere in docs or types. See whatwg/fetch#1438, nodejs/node#46221.\n    const headers = normalizeHeaders(httpHeaders)\n    const reqInit: RequestInit & { duplex: string } = {\n      method: httpMethod,\n      headers,\n      body: encodeMethodCallBody(headers, httpReqBody),\n      duplex: 'half',\n    }\n    const res = await fetch(httpUri, reqInit)\n    const resBody = await res.arrayBuffer()\n    return {\n      status: res.status,\n      headers: Object.fromEntries(res.headers.entries()),\n      body: httpResponseBodyParse(res.headers.get('content-type'), resBody),\n    }\n  } catch (e) {\n    throw new XRPCError(ResponseType.Unknown, String(e))\n  }\n}\n\nfunction isErrorResponseBody(v: unknown): v is ErrorResponseBody {\n  return errorResponseBody.safeParse(v).success\n}\n","export * from './types'\nexport * from './client'\n\nimport { Client } from './client'\nconst defaultInst = new Client()\nexport default defaultInst\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { LexiconDoc, Lexicons } from '@atproto/lexicon'\n\nexport const schemaDict = {\n  ComAtprotoAdminCreateCommunicationTemplate: {\n    lexicon: 1,\n    id: 'com.atproto.admin.createCommunicationTemplate',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Administrative action to create a new, re-usable communication (email for now) template.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject', 'contentMarkdown', 'name'],\n            properties: {\n              name: {\n                type: 'string',\n                description: 'Name of the template.',\n              },\n              contentMarkdown: {\n                type: 'string',\n                description:\n                  'Content of the template, markdown supported, can contain variable placeholders.',\n              },\n              subject: {\n                type: 'string',\n                description: 'Subject of the message, used in emails.',\n              },\n              createdBy: {\n                type: 'string',\n                format: 'did',\n                description: 'DID of the user who is creating the template.',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#communicationTemplateView',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminDefs: {\n    lexicon: 1,\n    id: 'com.atproto.admin.defs',\n    defs: {\n      statusAttr: {\n        type: 'object',\n        required: ['applied'],\n        properties: {\n          applied: {\n            type: 'boolean',\n          },\n          ref: {\n            type: 'string',\n          },\n        },\n      },\n      modEventView: {\n        type: 'object',\n        required: [\n          'id',\n          'event',\n          'subject',\n          'subjectBlobCids',\n          'createdBy',\n          'createdAt',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          event: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#modEventTakedown',\n              'lex:com.atproto.admin.defs#modEventReverseTakedown',\n              'lex:com.atproto.admin.defs#modEventComment',\n              'lex:com.atproto.admin.defs#modEventReport',\n              'lex:com.atproto.admin.defs#modEventLabel',\n              'lex:com.atproto.admin.defs#modEventAcknowledge',\n              'lex:com.atproto.admin.defs#modEventEscalate',\n              'lex:com.atproto.admin.defs#modEventMute',\n              'lex:com.atproto.admin.defs#modEventEmail',\n              'lex:com.atproto.admin.defs#modEventResolveAppeal',\n            ],\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoRef',\n              'lex:com.atproto.repo.strongRef',\n            ],\n          },\n          subjectBlobCids: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          createdBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          creatorHandle: {\n            type: 'string',\n          },\n          subjectHandle: {\n            type: 'string',\n          },\n        },\n      },\n      modEventViewDetail: {\n        type: 'object',\n        required: [\n          'id',\n          'event',\n          'subject',\n          'subjectBlobs',\n          'createdBy',\n          'createdAt',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          event: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#modEventTakedown',\n              'lex:com.atproto.admin.defs#modEventReverseTakedown',\n              'lex:com.atproto.admin.defs#modEventComment',\n              'lex:com.atproto.admin.defs#modEventReport',\n              'lex:com.atproto.admin.defs#modEventLabel',\n              'lex:com.atproto.admin.defs#modEventAcknowledge',\n              'lex:com.atproto.admin.defs#modEventEscalate',\n              'lex:com.atproto.admin.defs#modEventMute',\n              'lex:com.atproto.admin.defs#modEventEmail',\n              'lex:com.atproto.admin.defs#modEventResolveAppeal',\n            ],\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoView',\n              'lex:com.atproto.admin.defs#repoViewNotFound',\n              'lex:com.atproto.admin.defs#recordView',\n              'lex:com.atproto.admin.defs#recordViewNotFound',\n            ],\n          },\n          subjectBlobs: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#blobView',\n            },\n          },\n          createdBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      reportView: {\n        type: 'object',\n        required: [\n          'id',\n          'reasonType',\n          'subject',\n          'reportedBy',\n          'createdAt',\n          'resolvedByActionIds',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          reasonType: {\n            type: 'ref',\n            ref: 'lex:com.atproto.moderation.defs#reasonType',\n          },\n          comment: {\n            type: 'string',\n          },\n          subjectRepoHandle: {\n            type: 'string',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoRef',\n              'lex:com.atproto.repo.strongRef',\n            ],\n          },\n          reportedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          resolvedByActionIds: {\n            type: 'array',\n            items: {\n              type: 'integer',\n            },\n          },\n        },\n      },\n      subjectStatusView: {\n        type: 'object',\n        required: ['id', 'subject', 'createdAt', 'updatedAt', 'reviewState'],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoRef',\n              'lex:com.atproto.repo.strongRef',\n            ],\n          },\n          subjectBlobCids: {\n            type: 'array',\n            items: {\n              type: 'string',\n              format: 'cid',\n            },\n          },\n          subjectRepoHandle: {\n            type: 'string',\n          },\n          updatedAt: {\n            type: 'string',\n            format: 'datetime',\n            description:\n              'Timestamp referencing when the last update was made to the moderation status of the subject',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n            description:\n              'Timestamp referencing the first moderation status impacting event was emitted on the subject',\n          },\n          reviewState: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#subjectReviewState',\n          },\n          comment: {\n            type: 'string',\n            description: 'Sticky comment on the subject.',\n          },\n          muteUntil: {\n            type: 'string',\n            format: 'datetime',\n          },\n          lastReviewedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          lastReviewedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          lastReportedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          lastAppealedAt: {\n            type: 'string',\n            format: 'datetime',\n            description:\n              'Timestamp referencing when the author of the subject appealed a moderation action',\n          },\n          takendown: {\n            type: 'boolean',\n          },\n          appealed: {\n            type: 'boolean',\n            description:\n              'True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.',\n          },\n          suspendUntil: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      reportViewDetail: {\n        type: 'object',\n        required: [\n          'id',\n          'reasonType',\n          'subject',\n          'reportedBy',\n          'createdAt',\n          'resolvedByActions',\n        ],\n        properties: {\n          id: {\n            type: 'integer',\n          },\n          reasonType: {\n            type: 'ref',\n            ref: 'lex:com.atproto.moderation.defs#reasonType',\n          },\n          comment: {\n            type: 'string',\n          },\n          subject: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#repoView',\n              'lex:com.atproto.admin.defs#repoViewNotFound',\n              'lex:com.atproto.admin.defs#recordView',\n              'lex:com.atproto.admin.defs#recordViewNotFound',\n            ],\n          },\n          subjectStatus: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#subjectStatusView',\n          },\n          reportedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          resolvedByActions: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#modEventView',\n            },\n          },\n        },\n      },\n      repoView: {\n        type: 'object',\n        required: [\n          'did',\n          'handle',\n          'relatedRecords',\n          'indexedAt',\n          'moderation',\n        ],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          email: {\n            type: 'string',\n          },\n          relatedRecords: {\n            type: 'array',\n            items: {\n              type: 'unknown',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderation',\n          },\n          invitedBy: {\n            type: 'ref',\n            ref: 'lex:com.atproto.server.defs#inviteCode',\n          },\n          invitesDisabled: {\n            type: 'boolean',\n          },\n          inviteNote: {\n            type: 'string',\n          },\n        },\n      },\n      repoViewDetail: {\n        type: 'object',\n        required: [\n          'did',\n          'handle',\n          'relatedRecords',\n          'indexedAt',\n          'moderation',\n        ],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          email: {\n            type: 'string',\n          },\n          relatedRecords: {\n            type: 'array',\n            items: {\n              type: 'unknown',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderationDetail',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n          invitedBy: {\n            type: 'ref',\n            ref: 'lex:com.atproto.server.defs#inviteCode',\n          },\n          invites: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.server.defs#inviteCode',\n            },\n          },\n          invitesDisabled: {\n            type: 'boolean',\n          },\n          inviteNote: {\n            type: 'string',\n          },\n          emailConfirmedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      accountView: {\n        type: 'object',\n        required: ['did', 'handle', 'indexedAt'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          email: {\n            type: 'string',\n          },\n          relatedRecords: {\n            type: 'array',\n            items: {\n              type: 'unknown',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          invitedBy: {\n            type: 'ref',\n            ref: 'lex:com.atproto.server.defs#inviteCode',\n          },\n          invites: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.server.defs#inviteCode',\n            },\n          },\n          invitesDisabled: {\n            type: 'boolean',\n          },\n          emailConfirmedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          inviteNote: {\n            type: 'string',\n          },\n        },\n      },\n      repoViewNotFound: {\n        type: 'object',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n        },\n      },\n      repoRef: {\n        type: 'object',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n        },\n      },\n      repoBlobRef: {\n        type: 'object',\n        required: ['did', 'cid'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          recordUri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      recordView: {\n        type: 'object',\n        required: [\n          'uri',\n          'cid',\n          'value',\n          'blobCids',\n          'indexedAt',\n          'moderation',\n          'repo',\n        ],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          value: {\n            type: 'unknown',\n          },\n          blobCids: {\n            type: 'array',\n            items: {\n              type: 'string',\n              format: 'cid',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderation',\n          },\n          repo: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#repoView',\n          },\n        },\n      },\n      recordViewDetail: {\n        type: 'object',\n        required: [\n          'uri',\n          'cid',\n          'value',\n          'blobs',\n          'indexedAt',\n          'moderation',\n          'repo',\n        ],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          value: {\n            type: 'unknown',\n          },\n          blobs: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.admin.defs#blobView',\n            },\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderationDetail',\n          },\n          repo: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#repoView',\n          },\n        },\n      },\n      recordViewNotFound: {\n        type: 'object',\n        required: ['uri'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      moderation: {\n        type: 'object',\n        properties: {\n          subjectStatus: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#subjectStatusView',\n          },\n        },\n      },\n      moderationDetail: {\n        type: 'object',\n        properties: {\n          subjectStatus: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#subjectStatusView',\n          },\n        },\n      },\n      blobView: {\n        type: 'object',\n        required: ['cid', 'mimeType', 'size', 'createdAt'],\n        properties: {\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          mimeType: {\n            type: 'string',\n          },\n          size: {\n            type: 'integer',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          details: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.admin.defs#imageDetails',\n              'lex:com.atproto.admin.defs#videoDetails',\n            ],\n          },\n          moderation: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#moderation',\n          },\n        },\n      },\n      imageDetails: {\n        type: 'object',\n        required: ['width', 'height'],\n        properties: {\n          width: {\n            type: 'integer',\n          },\n          height: {\n            type: 'integer',\n          },\n        },\n      },\n      videoDetails: {\n        type: 'object',\n        required: ['width', 'height', 'length'],\n        properties: {\n          width: {\n            type: 'integer',\n          },\n          height: {\n            type: 'integer',\n          },\n          length: {\n            type: 'integer',\n          },\n        },\n      },\n      subjectReviewState: {\n        type: 'string',\n        knownValues: [\n          'lex:com.atproto.admin.defs#reviewOpen',\n          'lex:com.atproto.admin.defs#reviewEscalated',\n          'lex:com.atproto.admin.defs#reviewClosed',\n        ],\n      },\n      reviewOpen: {\n        type: 'token',\n        description:\n          'Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator',\n      },\n      reviewEscalated: {\n        type: 'token',\n        description:\n          'Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator',\n      },\n      reviewClosed: {\n        type: 'token',\n        description:\n          'Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator',\n      },\n      modEventTakedown: {\n        type: 'object',\n        description: 'Take down a subject permanently or temporarily',\n        properties: {\n          comment: {\n            type: 'string',\n          },\n          durationInHours: {\n            type: 'integer',\n            description:\n              'Indicates how long the takedown should be in effect before automatically expiring.',\n          },\n        },\n      },\n      modEventReverseTakedown: {\n        type: 'object',\n        description: 'Revert take down action on a subject',\n        properties: {\n          comment: {\n            type: 'string',\n            description: 'Describe reasoning behind the reversal.',\n          },\n        },\n      },\n      modEventResolveAppeal: {\n        type: 'object',\n        description: 'Resolve appeal on a subject',\n        properties: {\n          comment: {\n            type: 'string',\n            description: 'Describe resolution.',\n          },\n        },\n      },\n      modEventComment: {\n        type: 'object',\n        description: 'Add a comment to a subject',\n        required: ['comment'],\n        properties: {\n          comment: {\n            type: 'string',\n          },\n          sticky: {\n            type: 'boolean',\n            description: 'Make the comment persistent on the subject',\n          },\n        },\n      },\n      modEventReport: {\n        type: 'object',\n        description: 'Report a subject',\n        required: ['reportType'],\n        properties: {\n          comment: {\n            type: 'string',\n          },\n          reportType: {\n            type: 'ref',\n            ref: 'lex:com.atproto.moderation.defs#reasonType',\n          },\n        },\n      },\n      modEventLabel: {\n        type: 'object',\n        description: 'Apply/Negate labels on a subject',\n        required: ['createLabelVals', 'negateLabelVals'],\n        properties: {\n          comment: {\n            type: 'string',\n          },\n          createLabelVals: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n          negateLabelVals: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n      modEventAcknowledge: {\n        type: 'object',\n        properties: {\n          comment: {\n            type: 'string',\n          },\n        },\n      },\n      modEventEscalate: {\n        type: 'object',\n        properties: {\n          comment: {\n            type: 'string',\n          },\n        },\n      },\n      modEventMute: {\n        type: 'object',\n        description: 'Mute incoming reports on a subject',\n        required: ['durationInHours'],\n        properties: {\n          comment: {\n            type: 'string',\n          },\n          durationInHours: {\n            type: 'integer',\n            description: 'Indicates how long the subject should remain muted.',\n          },\n        },\n      },\n      modEventUnmute: {\n        type: 'object',\n        description: 'Unmute action on a subject',\n        properties: {\n          comment: {\n            type: 'string',\n            description: 'Describe reasoning behind the reversal.',\n          },\n        },\n      },\n      modEventEmail: {\n        type: 'object',\n        description: 'Keep a log of outgoing email to a user',\n        required: ['subjectLine'],\n        properties: {\n          subjectLine: {\n            type: 'string',\n            description: 'The subject line of the email sent to the user.',\n          },\n          comment: {\n            type: 'string',\n            description: 'Additional comment about the outgoing comm.',\n          },\n        },\n      },\n      communicationTemplateView: {\n        type: 'object',\n        required: [\n          'id',\n          'name',\n          'contentMarkdown',\n          'disabled',\n          'lastUpdatedBy',\n          'createdAt',\n          'updatedAt',\n        ],\n        properties: {\n          id: {\n            type: 'string',\n          },\n          name: {\n            type: 'string',\n            description: 'Name of the template.',\n          },\n          subject: {\n            type: 'string',\n            description:\n              'Content of the template, can contain markdown and variable placeholders.',\n          },\n          contentMarkdown: {\n            type: 'string',\n            description: 'Subject of the message, used in emails.',\n          },\n          disabled: {\n            type: 'boolean',\n          },\n          lastUpdatedBy: {\n            type: 'string',\n            format: 'did',\n            description: 'DID of the user who last updated the template.',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          updatedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminDeleteAccount: {\n    lexicon: 1,\n    id: 'com.atproto.admin.deleteAccount',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Delete a user account as an administrator.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminDeleteCommunicationTemplate: {\n    lexicon: 1,\n    id: 'com.atproto.admin.deleteCommunicationTemplate',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Delete a communication template.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['id'],\n            properties: {\n              id: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminDisableAccountInvites: {\n    lexicon: 1,\n    id: 'com.atproto.admin.disableAccountInvites',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Disable an account from receiving new invite codes, but does not invalidate existing codes.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['account'],\n            properties: {\n              account: {\n                type: 'string',\n                format: 'did',\n              },\n              note: {\n                type: 'string',\n                description: 'Optional reason for disabled invites.',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminDisableInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.admin.disableInviteCodes',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Disable some set of codes and/or all codes associated with a set of users.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            properties: {\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              accounts: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminEmitModerationEvent: {\n    lexicon: 1,\n    id: 'com.atproto.admin.emitModerationEvent',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Take a moderation action on an actor.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['event', 'subject', 'createdBy'],\n            properties: {\n              event: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#modEventTakedown',\n                  'lex:com.atproto.admin.defs#modEventAcknowledge',\n                  'lex:com.atproto.admin.defs#modEventEscalate',\n                  'lex:com.atproto.admin.defs#modEventComment',\n                  'lex:com.atproto.admin.defs#modEventLabel',\n                  'lex:com.atproto.admin.defs#modEventReport',\n                  'lex:com.atproto.admin.defs#modEventMute',\n                  'lex:com.atproto.admin.defs#modEventReverseTakedown',\n                  'lex:com.atproto.admin.defs#modEventUnmute',\n                  'lex:com.atproto.admin.defs#modEventEmail',\n                ],\n              },\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                ],\n              },\n              subjectBlobCids: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'cid',\n                },\n              },\n              createdBy: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#modEventView',\n          },\n        },\n        errors: [\n          {\n            name: 'SubjectHasAction',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoAdminEnableAccountInvites: {\n    lexicon: 1,\n    id: 'com.atproto.admin.enableAccountInvites',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Re-enable an account's ability to receive invite codes.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['account'],\n            properties: {\n              account: {\n                type: 'string',\n                format: 'did',\n              },\n              note: {\n                type: 'string',\n                description: 'Optional reason for enabled invites.',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetAccountInfo: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getAccountInfo',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get details about an account.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#accountView',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetAccountInfos: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getAccountInfos',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get details about some accounts.',\n        parameters: {\n          type: 'params',\n          required: ['dids'],\n          properties: {\n            dids: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['infos'],\n            properties: {\n              infos: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#accountView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getInviteCodes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get an admin view of invite codes.',\n        parameters: {\n          type: 'params',\n          properties: {\n            sort: {\n              type: 'string',\n              knownValues: ['recent', 'usage'],\n              default: 'recent',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 500,\n              default: 100,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codes'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.server.defs#inviteCode',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetModerationEvent: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getModerationEvent',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get details about a moderation event.',\n        parameters: {\n          type: 'params',\n          required: ['id'],\n          properties: {\n            id: {\n              type: 'integer',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#modEventViewDetail',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminGetRecord: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getRecord',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get details about a record.',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#recordViewDetail',\n          },\n        },\n        errors: [\n          {\n            name: 'RecordNotFound',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoAdminGetRepo: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getRepo',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get details about a repository.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#repoViewDetail',\n          },\n        },\n        errors: [\n          {\n            name: 'RepoNotFound',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoAdminGetSubjectStatus: {\n    lexicon: 1,\n    id: 'com.atproto.admin.getSubjectStatus',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get the service-specific admin status of a subject (account, record, or blob).',\n        parameters: {\n          type: 'params',\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n            },\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            blob: {\n              type: 'string',\n              format: 'cid',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject'],\n            properties: {\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                  'lex:com.atproto.admin.defs#repoBlobRef',\n                ],\n              },\n              takedown: {\n                type: 'ref',\n                ref: 'lex:com.atproto.admin.defs#statusAttr',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminListCommunicationTemplates: {\n    lexicon: 1,\n    id: 'com.atproto.admin.listCommunicationTemplates',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get list of all communication templates.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['communicationTemplates'],\n            properties: {\n              communicationTemplates: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#communicationTemplateView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminQueryModerationEvents: {\n    lexicon: 1,\n    id: 'com.atproto.admin.queryModerationEvents',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List moderation events related to a subject.',\n        parameters: {\n          type: 'params',\n          properties: {\n            types: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n              description:\n                'The types of events (fully qualified string in the format of com.atproto.admin#modEvent<name>) to filter by. If not specified, all events are returned.',\n            },\n            createdBy: {\n              type: 'string',\n              format: 'did',\n            },\n            sortDirection: {\n              type: 'string',\n              default: 'desc',\n              enum: ['asc', 'desc'],\n              description:\n                'Sort direction for the events. Defaults to descending order of created at timestamp.',\n            },\n            createdAfter: {\n              type: 'string',\n              format: 'datetime',\n              description: 'Retrieve events created after a given timestamp',\n            },\n            createdBefore: {\n              type: 'string',\n              format: 'datetime',\n              description: 'Retrieve events created before a given timestamp',\n            },\n            subject: {\n              type: 'string',\n              format: 'uri',\n            },\n            includeAllUserRecords: {\n              type: 'boolean',\n              default: false,\n              description:\n                'If true, events on all record types (posts, lists, profile etc.) owned by the did are returned',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            hasComment: {\n              type: 'boolean',\n              description: 'If true, only events with comments are returned',\n            },\n            comment: {\n              type: 'string',\n              description:\n                'If specified, only events with comments containing the keyword are returned',\n            },\n            addedLabels: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n              description:\n                'If specified, only events where all of these labels were added are returned',\n            },\n            removedLabels: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n              description:\n                'If specified, only events where all of these labels were removed are returned',\n            },\n            reportTypes: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['events'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              events: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#modEventView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminQueryModerationStatuses: {\n    lexicon: 1,\n    id: 'com.atproto.admin.queryModerationStatuses',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'View moderation statuses of subjects (record or repo).',\n        parameters: {\n          type: 'params',\n          properties: {\n            subject: {\n              type: 'string',\n              format: 'uri',\n            },\n            comment: {\n              type: 'string',\n              description: 'Search subjects by keyword from comments',\n            },\n            reportedAfter: {\n              type: 'string',\n              format: 'datetime',\n              description: 'Search subjects reported after a given timestamp',\n            },\n            reportedBefore: {\n              type: 'string',\n              format: 'datetime',\n              description: 'Search subjects reported before a given timestamp',\n            },\n            reviewedAfter: {\n              type: 'string',\n              format: 'datetime',\n              description: 'Search subjects reviewed after a given timestamp',\n            },\n            reviewedBefore: {\n              type: 'string',\n              format: 'datetime',\n              description: 'Search subjects reviewed before a given timestamp',\n            },\n            includeMuted: {\n              type: 'boolean',\n              description:\n                \"By default, we don't include muted subjects in the results. Set this to true to include them.\",\n            },\n            reviewState: {\n              type: 'string',\n              description: 'Specify when fetching subjects in a certain state',\n            },\n            ignoreSubjects: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'uri',\n              },\n            },\n            lastReviewedBy: {\n              type: 'string',\n              format: 'did',\n              description:\n                'Get all subject statuses that were reviewed by a specific moderator',\n            },\n            sortField: {\n              type: 'string',\n              default: 'lastReportedAt',\n              enum: ['lastReviewedAt', 'lastReportedAt'],\n            },\n            sortDirection: {\n              type: 'string',\n              default: 'desc',\n              enum: ['asc', 'desc'],\n            },\n            takendown: {\n              type: 'boolean',\n              description: 'Get subjects that were taken down',\n            },\n            appealed: {\n              type: 'boolean',\n              description: 'Get subjects in unresolved appealed status',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subjectStatuses'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              subjectStatuses: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#subjectStatusView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminSearchRepos: {\n    lexicon: 1,\n    id: 'com.atproto.admin.searchRepos',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find repositories based on a search term.',\n        parameters: {\n          type: 'params',\n          properties: {\n            term: {\n              type: 'string',\n              description: \"DEPRECATED: use 'q' instead\",\n            },\n            q: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repos'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              repos: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.admin.defs#repoView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminSendEmail: {\n    lexicon: 1,\n    id: 'com.atproto.admin.sendEmail',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Send email to a user's account email address.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['recipientDid', 'content', 'senderDid'],\n            properties: {\n              recipientDid: {\n                type: 'string',\n                format: 'did',\n              },\n              content: {\n                type: 'string',\n              },\n              subject: {\n                type: 'string',\n              },\n              senderDid: {\n                type: 'string',\n                format: 'did',\n              },\n              comment: {\n                type: 'string',\n                description:\n                  \"Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers\",\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['sent'],\n            properties: {\n              sent: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminUpdateAccountEmail: {\n    lexicon: 1,\n    id: 'com.atproto.admin.updateAccountEmail',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Administrative action to update an account's email.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['account', 'email'],\n            properties: {\n              account: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              email: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminUpdateAccountHandle: {\n    lexicon: 1,\n    id: 'com.atproto.admin.updateAccountHandle',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Administrative action to update an account's handle.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did', 'handle'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminUpdateCommunicationTemplate: {\n    lexicon: 1,\n    id: 'com.atproto.admin.updateCommunicationTemplate',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['id'],\n            properties: {\n              id: {\n                type: 'string',\n                description: 'ID of the template to be updated.',\n              },\n              name: {\n                type: 'string',\n                description: 'Name of the template.',\n              },\n              contentMarkdown: {\n                type: 'string',\n                description:\n                  'Content of the template, markdown supported, can contain variable placeholders.',\n              },\n              subject: {\n                type: 'string',\n                description: 'Subject of the message, used in emails.',\n              },\n              updatedBy: {\n                type: 'string',\n                format: 'did',\n                description: 'DID of the user who is updating the template.',\n              },\n              disabled: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.admin.defs#communicationTemplateView',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoAdminUpdateSubjectStatus: {\n    lexicon: 1,\n    id: 'com.atproto.admin.updateSubjectStatus',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Update the service-specific admin status of a subject (account, record, or blob).',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject'],\n            properties: {\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                  'lex:com.atproto.admin.defs#repoBlobRef',\n                ],\n              },\n              takedown: {\n                type: 'ref',\n                ref: 'lex:com.atproto.admin.defs#statusAttr',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject'],\n            properties: {\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                  'lex:com.atproto.admin.defs#repoBlobRef',\n                ],\n              },\n              takedown: {\n                type: 'ref',\n                ref: 'lex:com.atproto.admin.defs#statusAttr',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoIdentityResolveHandle: {\n    lexicon: 1,\n    id: 'com.atproto.identity.resolveHandle',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Provides the DID of a repo.',\n        parameters: {\n          type: 'params',\n          required: ['handle'],\n          properties: {\n            handle: {\n              type: 'string',\n              format: 'handle',\n              description: 'The handle to resolve.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoIdentityUpdateHandle: {\n    lexicon: 1,\n    id: 'com.atproto.identity.updateHandle',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Updates the handle of the account.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle'],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoLabelDefs: {\n    lexicon: 1,\n    id: 'com.atproto.label.defs',\n    defs: {\n      label: {\n        type: 'object',\n        description:\n          'Metadata tag on an atproto resource (eg, repo or record).',\n        required: ['src', 'uri', 'val', 'cts'],\n        properties: {\n          src: {\n            type: 'string',\n            format: 'did',\n            description: 'DID of the actor who created this label.',\n          },\n          uri: {\n            type: 'string',\n            format: 'uri',\n            description:\n              'AT URI of the record, repository (account), or other resource that this label applies to.',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n            description:\n              \"Optionally, CID specifying the specific version of 'uri' resource this label applies to.\",\n          },\n          val: {\n            type: 'string',\n            maxLength: 128,\n            description:\n              'The short string name of the value or type of this label.',\n          },\n          neg: {\n            type: 'boolean',\n            description:\n              'If true, this is a negation label, overwriting a previous label.',\n          },\n          cts: {\n            type: 'string',\n            format: 'datetime',\n            description: 'Timestamp when this label was created.',\n          },\n        },\n      },\n      selfLabels: {\n        type: 'object',\n        description:\n          'Metadata tags on an atproto record, published by the author within the record.',\n        required: ['values'],\n        properties: {\n          values: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#selfLabel',\n            },\n            maxLength: 10,\n          },\n        },\n      },\n      selfLabel: {\n        type: 'object',\n        description:\n          'Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.',\n        required: ['val'],\n        properties: {\n          val: {\n            type: 'string',\n            maxLength: 128,\n            description:\n              'The short string name of the value or type of this label.',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoLabelQueryLabels: {\n    lexicon: 1,\n    id: 'com.atproto.label.queryLabels',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find labels relevant to the provided URI patterns.',\n        parameters: {\n          type: 'params',\n          required: ['uriPatterns'],\n          properties: {\n            uriPatterns: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n              description:\n                \"List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.\",\n            },\n            sources: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'did',\n              },\n              description:\n                'Optional list of label sources (DIDs) to filter on.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 250,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['labels'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              labels: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.label.defs#label',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoLabelSubscribeLabels: {\n    lexicon: 1,\n    id: 'com.atproto.label.subscribeLabels',\n    defs: {\n      main: {\n        type: 'subscription',\n        description: 'Subscribe to label updates.',\n        parameters: {\n          type: 'params',\n          properties: {\n            cursor: {\n              type: 'integer',\n              description: 'The last known event to backfill from.',\n            },\n          },\n        },\n        message: {\n          schema: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.label.subscribeLabels#labels',\n              'lex:com.atproto.label.subscribeLabels#info',\n            ],\n          },\n        },\n        errors: [\n          {\n            name: 'FutureCursor',\n          },\n        ],\n      },\n      labels: {\n        type: 'object',\n        required: ['seq', 'labels'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      info: {\n        type: 'object',\n        required: ['name'],\n        properties: {\n          name: {\n            type: 'string',\n            knownValues: ['OutdatedCursor'],\n          },\n          message: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoModerationCreateReport: {\n    lexicon: 1,\n    id: 'com.atproto.moderation.createReport',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Report a repo or a record.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['reasonType', 'subject'],\n            properties: {\n              reasonType: {\n                type: 'ref',\n                ref: 'lex:com.atproto.moderation.defs#reasonType',\n              },\n              reason: {\n                type: 'string',\n              },\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                ],\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: [\n              'id',\n              'reasonType',\n              'subject',\n              'reportedBy',\n              'createdAt',\n            ],\n            properties: {\n              id: {\n                type: 'integer',\n              },\n              reasonType: {\n                type: 'ref',\n                ref: 'lex:com.atproto.moderation.defs#reasonType',\n              },\n              reason: {\n                type: 'string',\n                maxGraphemes: 2000,\n                maxLength: 20000,\n              },\n              subject: {\n                type: 'union',\n                refs: [\n                  'lex:com.atproto.admin.defs#repoRef',\n                  'lex:com.atproto.repo.strongRef',\n                ],\n              },\n              reportedBy: {\n                type: 'string',\n                format: 'did',\n              },\n              createdAt: {\n                type: 'string',\n                format: 'datetime',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoModerationDefs: {\n    lexicon: 1,\n    id: 'com.atproto.moderation.defs',\n    defs: {\n      reasonType: {\n        type: 'string',\n        knownValues: [\n          'com.atproto.moderation.defs#reasonSpam',\n          'com.atproto.moderation.defs#reasonViolation',\n          'com.atproto.moderation.defs#reasonMisleading',\n          'com.atproto.moderation.defs#reasonSexual',\n          'com.atproto.moderation.defs#reasonRude',\n          'com.atproto.moderation.defs#reasonOther',\n          'com.atproto.moderation.defs#reasonAppeal',\n        ],\n      },\n      reasonSpam: {\n        type: 'token',\n        description: 'Spam: frequent unwanted promotion, replies, mentions',\n      },\n      reasonViolation: {\n        type: 'token',\n        description: 'Direct violation of server rules, laws, terms of service',\n      },\n      reasonMisleading: {\n        type: 'token',\n        description: 'Misleading identity, affiliation, or content',\n      },\n      reasonSexual: {\n        type: 'token',\n        description: 'Unwanted or mislabeled sexual content',\n      },\n      reasonRude: {\n        type: 'token',\n        description:\n          'Rude, harassing, explicit, or otherwise unwelcoming behavior',\n      },\n      reasonOther: {\n        type: 'token',\n        description: 'Other: reports not falling under another report category',\n      },\n      reasonAppeal: {\n        type: 'token',\n        description: 'Appeal: appeal a previously taken moderation action',\n      },\n    },\n  },\n  ComAtprotoRepoApplyWrites: {\n    lexicon: 1,\n    id: 'com.atproto.repo.applyWrites',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Apply a batch transaction of creates, updates, and deletes.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'writes'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              validate: {\n                type: 'boolean',\n                default: true,\n                description: 'Flag for validating the records.',\n              },\n              writes: {\n                type: 'array',\n                items: {\n                  type: 'union',\n                  refs: [\n                    'lex:com.atproto.repo.applyWrites#create',\n                    'lex:com.atproto.repo.applyWrites#update',\n                    'lex:com.atproto.repo.applyWrites#delete',\n                  ],\n                  closed: true,\n                },\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n      create: {\n        type: 'object',\n        description: 'Create a new record.',\n        required: ['collection', 'value'],\n        properties: {\n          collection: {\n            type: 'string',\n            format: 'nsid',\n          },\n          rkey: {\n            type: 'string',\n            maxLength: 15,\n          },\n          value: {\n            type: 'unknown',\n          },\n        },\n      },\n      update: {\n        type: 'object',\n        description: 'Update an existing record.',\n        required: ['collection', 'rkey', 'value'],\n        properties: {\n          collection: {\n            type: 'string',\n            format: 'nsid',\n          },\n          rkey: {\n            type: 'string',\n          },\n          value: {\n            type: 'unknown',\n          },\n        },\n      },\n      delete: {\n        type: 'object',\n        description: 'Delete an existing record.',\n        required: ['collection', 'rkey'],\n        properties: {\n          collection: {\n            type: 'string',\n            format: 'nsid',\n          },\n          rkey: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoCreateRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.createRecord',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create a new record.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'collection', 'record'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              collection: {\n                type: 'string',\n                format: 'nsid',\n                description: 'The NSID of the record collection.',\n              },\n              rkey: {\n                type: 'string',\n                description: 'The key of the record.',\n                maxLength: 15,\n              },\n              validate: {\n                type: 'boolean',\n                default: true,\n                description: 'Flag for validating the record.',\n              },\n              record: {\n                type: 'unknown',\n                description: 'The record to create.',\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous commit by CID.',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'cid'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoRepoDeleteRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.deleteRecord',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Delete a record, or ensure it doesn't exist.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'collection', 'rkey'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              collection: {\n                type: 'string',\n                format: 'nsid',\n                description: 'The NSID of the record collection.',\n              },\n              rkey: {\n                type: 'string',\n                description: 'The key of the record.',\n              },\n              swapRecord: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous record by CID.',\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous commit by CID.',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoRepoDescribeRepo: {\n    lexicon: 1,\n    id: 'com.atproto.repo.describeRepo',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get information about the repo, including the list of collections.',\n        parameters: {\n          type: 'params',\n          required: ['repo'],\n          properties: {\n            repo: {\n              type: 'string',\n              format: 'at-identifier',\n              description: 'The handle or DID of the repo.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: [\n              'handle',\n              'did',\n              'didDoc',\n              'collections',\n              'handleIsCorrect',\n            ],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              didDoc: {\n                type: 'unknown',\n              },\n              collections: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'nsid',\n                },\n              },\n              handleIsCorrect: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoGetRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.getRecord',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a record.',\n        parameters: {\n          type: 'params',\n          required: ['repo', 'collection', 'rkey'],\n          properties: {\n            repo: {\n              type: 'string',\n              format: 'at-identifier',\n              description: 'The handle or DID of the repo.',\n            },\n            collection: {\n              type: 'string',\n              format: 'nsid',\n              description: 'The NSID of the record collection.',\n            },\n            rkey: {\n              type: 'string',\n              description: 'The key of the record.',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n              description:\n                'The CID of the version of the record. If not specified, then return the most recent version.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'value'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              value: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoListRecords: {\n    lexicon: 1,\n    id: 'com.atproto.repo.listRecords',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List a range of records in a collection.',\n        parameters: {\n          type: 'params',\n          required: ['repo', 'collection'],\n          properties: {\n            repo: {\n              type: 'string',\n              format: 'at-identifier',\n              description: 'The handle or DID of the repo.',\n            },\n            collection: {\n              type: 'string',\n              format: 'nsid',\n              description: 'The NSID of the record type.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n              description: 'The number of records to return.',\n            },\n            cursor: {\n              type: 'string',\n            },\n            rkeyStart: {\n              type: 'string',\n              description:\n                'DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)',\n            },\n            rkeyEnd: {\n              type: 'string',\n              description:\n                'DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)',\n            },\n            reverse: {\n              type: 'boolean',\n              description: 'Flag to reverse the order of the returned records.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['records'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              records: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.repo.listRecords#record',\n                },\n              },\n            },\n          },\n        },\n      },\n      record: {\n        type: 'object',\n        required: ['uri', 'cid', 'value'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          value: {\n            type: 'unknown',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoPutRecord: {\n    lexicon: 1,\n    id: 'com.atproto.repo.putRecord',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Write a record, creating or updating it as needed.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repo', 'collection', 'rkey', 'record'],\n            nullable: ['swapRecord'],\n            properties: {\n              repo: {\n                type: 'string',\n                format: 'at-identifier',\n                description: 'The handle or DID of the repo.',\n              },\n              collection: {\n                type: 'string',\n                format: 'nsid',\n                description: 'The NSID of the record collection.',\n              },\n              rkey: {\n                type: 'string',\n                description: 'The key of the record.',\n                maxLength: 15,\n              },\n              validate: {\n                type: 'boolean',\n                default: true,\n                description: 'Flag for validating the record.',\n              },\n              record: {\n                type: 'unknown',\n                description: 'The record to write.',\n              },\n              swapRecord: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous record by CID.',\n              },\n              swapCommit: {\n                type: 'string',\n                format: 'cid',\n                description:\n                  'Compare and swap with the previous commit by CID.',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'cid'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidSwap',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoRepoStrongRef: {\n    lexicon: 1,\n    id: 'com.atproto.repo.strongRef',\n    description: 'A URI with a content-hash fingerprint.',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['uri', 'cid'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoRepoUploadBlob: {\n    lexicon: 1,\n    id: 'com.atproto.repo.uploadBlob',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Upload a new blob to be added to repo in a later request.',\n        input: {\n          encoding: '*/*',\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['blob'],\n            properties: {\n              blob: {\n                type: 'blob',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerConfirmEmail: {\n    lexicon: 1,\n    id: 'com.atproto.server.confirmEmail',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Confirm an email using a token from com.atproto.server.requestEmailConfirmation.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['email', 'token'],\n            properties: {\n              email: {\n                type: 'string',\n              },\n              token: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'AccountNotFound',\n          },\n          {\n            name: 'ExpiredToken',\n          },\n          {\n            name: 'InvalidToken',\n          },\n          {\n            name: 'InvalidEmail',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerCreateAccount: {\n    lexicon: 1,\n    id: 'com.atproto.server.createAccount',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an account.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle'],\n            properties: {\n              email: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              inviteCode: {\n                type: 'string',\n              },\n              verificationCode: {\n                type: 'string',\n              },\n              verificationPhone: {\n                type: 'string',\n              },\n              password: {\n                type: 'string',\n              },\n              recoveryKey: {\n                type: 'string',\n              },\n              plcOp: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              didDoc: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidHandle',\n          },\n          {\n            name: 'InvalidPassword',\n          },\n          {\n            name: 'InvalidInviteCode',\n          },\n          {\n            name: 'HandleNotAvailable',\n          },\n          {\n            name: 'UnsupportedDomain',\n          },\n          {\n            name: 'UnresolvableDid',\n          },\n          {\n            name: 'IncompatibleDidDoc',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerCreateAppPassword: {\n    lexicon: 1,\n    id: 'com.atproto.server.createAppPassword',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an App Password.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['name'],\n            properties: {\n              name: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:com.atproto.server.createAppPassword#appPassword',\n          },\n        },\n        errors: [\n          {\n            name: 'AccountTakedown',\n          },\n        ],\n      },\n      appPassword: {\n        type: 'object',\n        required: ['name', 'password', 'createdAt'],\n        properties: {\n          name: {\n            type: 'string',\n          },\n          password: {\n            type: 'string',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerCreateInviteCode: {\n    lexicon: 1,\n    id: 'com.atproto.server.createInviteCode',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an invite code.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['useCount'],\n            properties: {\n              useCount: {\n                type: 'integer',\n              },\n              forAccount: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['code'],\n            properties: {\n              code: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerCreateInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.server.createInviteCodes',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create invite codes.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codeCount', 'useCount'],\n            properties: {\n              codeCount: {\n                type: 'integer',\n                default: 1,\n              },\n              useCount: {\n                type: 'integer',\n              },\n              forAccounts: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'did',\n                },\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codes'],\n            properties: {\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.server.createInviteCodes#accountCodes',\n                },\n              },\n            },\n          },\n        },\n      },\n      accountCodes: {\n        type: 'object',\n        required: ['account', 'codes'],\n        properties: {\n          account: {\n            type: 'string',\n          },\n          codes: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerCreateSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.createSession',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Create an authentication session.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['identifier', 'password'],\n            properties: {\n              identifier: {\n                type: 'string',\n                description:\n                  'Handle or other identifier supported by the server for the authenticating user.',\n              },\n              password: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              didDoc: {\n                type: 'unknown',\n              },\n              email: {\n                type: 'string',\n              },\n              emailConfirmed: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'AccountTakedown',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerDefs: {\n    lexicon: 1,\n    id: 'com.atproto.server.defs',\n    defs: {\n      inviteCode: {\n        type: 'object',\n        required: [\n          'code',\n          'available',\n          'disabled',\n          'forAccount',\n          'createdBy',\n          'createdAt',\n          'uses',\n        ],\n        properties: {\n          code: {\n            type: 'string',\n          },\n          available: {\n            type: 'integer',\n          },\n          disabled: {\n            type: 'boolean',\n          },\n          forAccount: {\n            type: 'string',\n          },\n          createdBy: {\n            type: 'string',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          uses: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.server.defs#inviteCodeUse',\n            },\n          },\n        },\n      },\n      inviteCodeUse: {\n        type: 'object',\n        required: ['usedBy', 'usedAt'],\n        properties: {\n          usedBy: {\n            type: 'string',\n            format: 'did',\n          },\n          usedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerDeleteAccount: {\n    lexicon: 1,\n    id: 'com.atproto.server.deleteAccount',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Delete an actor's account with a token and password.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did', 'password', 'token'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              password: {\n                type: 'string',\n              },\n              token: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'ExpiredToken',\n          },\n          {\n            name: 'InvalidToken',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerDeleteSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.deleteSession',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Delete the current session.',\n      },\n    },\n  },\n  ComAtprotoServerDescribeServer: {\n    lexicon: 1,\n    id: 'com.atproto.server.describeServer',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          \"Get a document describing the service's accounts configuration.\",\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['availableUserDomains'],\n            properties: {\n              inviteCodeRequired: {\n                type: 'boolean',\n              },\n              phoneVerificationRequired: {\n                type: 'boolean',\n              },\n              availableUserDomains: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n              },\n              links: {\n                type: 'ref',\n                ref: 'lex:com.atproto.server.describeServer#links',\n              },\n            },\n          },\n        },\n      },\n      links: {\n        type: 'object',\n        properties: {\n          privacyPolicy: {\n            type: 'string',\n          },\n          termsOfService: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerGetAccountInviteCodes: {\n    lexicon: 1,\n    id: 'com.atproto.server.getAccountInviteCodes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get all invite codes for a given account.',\n        parameters: {\n          type: 'params',\n          properties: {\n            includeUsed: {\n              type: 'boolean',\n              default: true,\n            },\n            createAvailable: {\n              type: 'boolean',\n              default: true,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['codes'],\n            properties: {\n              codes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.server.defs#inviteCode',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'DuplicateCreate',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerGetSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.getSession',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get information about the current session.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle', 'did'],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              email: {\n                type: 'string',\n              },\n              emailConfirmed: {\n                type: 'boolean',\n              },\n              didDoc: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerListAppPasswords: {\n    lexicon: 1,\n    id: 'com.atproto.server.listAppPasswords',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List all App Passwords.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['passwords'],\n            properties: {\n              passwords: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.server.listAppPasswords#appPassword',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'AccountTakedown',\n          },\n        ],\n      },\n      appPassword: {\n        type: 'object',\n        required: ['name', 'createdAt'],\n        properties: {\n          name: {\n            type: 'string',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerRefreshSession: {\n    lexicon: 1,\n    id: 'com.atproto.server.refreshSession',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Refresh an authentication session.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              didDoc: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'AccountTakedown',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerRequestAccountDelete: {\n    lexicon: 1,\n    id: 'com.atproto.server.requestAccountDelete',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Initiate a user account deletion via email.',\n      },\n    },\n  },\n  ComAtprotoServerRequestEmailConfirmation: {\n    lexicon: 1,\n    id: 'com.atproto.server.requestEmailConfirmation',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Request an email with a code to confirm ownership of email.',\n      },\n    },\n  },\n  ComAtprotoServerRequestEmailUpdate: {\n    lexicon: 1,\n    id: 'com.atproto.server.requestEmailUpdate',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Request a token in order to update email.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['tokenRequired'],\n            properties: {\n              tokenRequired: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerRequestPasswordReset: {\n    lexicon: 1,\n    id: 'com.atproto.server.requestPasswordReset',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Initiate a user account password reset via email.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['email'],\n            properties: {\n              email: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerReserveSigningKey: {\n    lexicon: 1,\n    id: 'com.atproto.server.reserveSigningKey',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Reserve a repo signing key for account creation.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            properties: {\n              did: {\n                type: 'string',\n                description: 'The did to reserve a new did:key for',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['signingKey'],\n            properties: {\n              signingKey: {\n                type: 'string',\n                description: 'Public signing key in the form of a did:key.',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerResetPassword: {\n    lexicon: 1,\n    id: 'com.atproto.server.resetPassword',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Reset a user account password using a token.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['token', 'password'],\n            properties: {\n              token: {\n                type: 'string',\n              },\n              password: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'ExpiredToken',\n          },\n          {\n            name: 'InvalidToken',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoServerRevokeAppPassword: {\n    lexicon: 1,\n    id: 'com.atproto.server.revokeAppPassword',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Revoke an App Password by name.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['name'],\n            properties: {\n              name: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoServerUpdateEmail: {\n    lexicon: 1,\n    id: 'com.atproto.server.updateEmail',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: \"Update an account's email.\",\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['email'],\n            properties: {\n              email: {\n                type: 'string',\n              },\n              token: {\n                type: 'string',\n                description:\n                  \"Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.\",\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'ExpiredToken',\n          },\n          {\n            name: 'InvalidToken',\n          },\n          {\n            name: 'TokenRequired',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoSyncGetBlob: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getBlob',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a blob associated with a given repo.',\n        parameters: {\n          type: 'params',\n          required: ['did', 'cid'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n              description: 'The CID of the blob to fetch',\n            },\n          },\n        },\n        output: {\n          encoding: '*/*',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetBlocks: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getBlocks',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get blocks from a given repo.',\n        parameters: {\n          type: 'params',\n          required: ['did', 'cids'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            cids: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetCheckout: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getCheckout',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'DEPRECATED - please use com.atproto.sync.getRepo instead',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetHead: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getHead',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'DEPRECATED - please use com.atproto.sync.getLatestCommit instead',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['root'],\n            properties: {\n              root: {\n                type: 'string',\n                format: 'cid',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'HeadNotFound',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoSyncGetLatestCommit: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getLatestCommit',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get the current commit CID & revision of the repo.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['cid', 'rev'],\n            properties: {\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              rev: {\n                type: 'string',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'RepoNotFound',\n          },\n        ],\n      },\n    },\n  },\n  ComAtprotoSyncGetRecord: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getRecord',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get blocks needed for existence or non-existence of record.',\n        parameters: {\n          type: 'params',\n          required: ['did', 'collection', 'rkey'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            collection: {\n              type: 'string',\n              format: 'nsid',\n            },\n            rkey: {\n              type: 'string',\n            },\n            commit: {\n              type: 'string',\n              format: 'cid',\n              description: 'An optional past commit CID.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncGetRepo: {\n    lexicon: 1,\n    id: 'com.atproto.sync.getRepo',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          \"Gets the DID's repo, optionally catching up from a specific revision.\",\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            since: {\n              type: 'string',\n              description: 'The revision of the repo to catch up from.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/vnd.ipld.car',\n        },\n      },\n    },\n  },\n  ComAtprotoSyncListBlobs: {\n    lexicon: 1,\n    id: 'com.atproto.sync.listBlobs',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List blob CIDs since some revision.',\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n            since: {\n              type: 'string',\n              description: 'Optional revision of the repo to list blobs since.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 1000,\n              default: 500,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['cids'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              cids: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                  format: 'cid',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncListRepos: {\n    lexicon: 1,\n    id: 'com.atproto.sync.listRepos',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'List DIDs and root CIDs of hosted repos.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 1000,\n              default: 500,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['repos'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              repos: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.sync.listRepos#repo',\n                },\n              },\n            },\n          },\n        },\n      },\n      repo: {\n        type: 'object',\n        required: ['did', 'head', 'rev'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          head: {\n            type: 'string',\n            format: 'cid',\n          },\n          rev: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncNotifyOfUpdate: {\n    lexicon: 1,\n    id: 'com.atproto.sync.notifyOfUpdate',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Notify a crawling service of a recent update; often when a long break between updates causes the connection with the crawling service to break.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['hostname'],\n            properties: {\n              hostname: {\n                type: 'string',\n                description:\n                  'Hostname of the service that is notifying of update.',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncRequestCrawl: {\n    lexicon: 1,\n    id: 'com.atproto.sync.requestCrawl',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Request a service to persistently crawl hosted repos.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['hostname'],\n            properties: {\n              hostname: {\n                type: 'string',\n                description:\n                  'Hostname of the service that is requesting to be crawled.',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoSyncSubscribeRepos: {\n    lexicon: 1,\n    id: 'com.atproto.sync.subscribeRepos',\n    defs: {\n      main: {\n        type: 'subscription',\n        description: 'Subscribe to repo updates.',\n        parameters: {\n          type: 'params',\n          properties: {\n            cursor: {\n              type: 'integer',\n              description: 'The last known event to backfill from.',\n            },\n          },\n        },\n        message: {\n          schema: {\n            type: 'union',\n            refs: [\n              'lex:com.atproto.sync.subscribeRepos#commit',\n              'lex:com.atproto.sync.subscribeRepos#handle',\n              'lex:com.atproto.sync.subscribeRepos#migrate',\n              'lex:com.atproto.sync.subscribeRepos#tombstone',\n              'lex:com.atproto.sync.subscribeRepos#info',\n            ],\n          },\n        },\n        errors: [\n          {\n            name: 'FutureCursor',\n          },\n          {\n            name: 'ConsumerTooSlow',\n          },\n        ],\n      },\n      commit: {\n        type: 'object',\n        required: [\n          'seq',\n          'rebase',\n          'tooBig',\n          'repo',\n          'commit',\n          'rev',\n          'since',\n          'blocks',\n          'ops',\n          'blobs',\n          'time',\n        ],\n        nullable: ['prev', 'since'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          rebase: {\n            type: 'boolean',\n          },\n          tooBig: {\n            type: 'boolean',\n          },\n          repo: {\n            type: 'string',\n            format: 'did',\n          },\n          commit: {\n            type: 'cid-link',\n          },\n          prev: {\n            type: 'cid-link',\n          },\n          rev: {\n            type: 'string',\n            description: 'The rev of the emitted commit.',\n          },\n          since: {\n            type: 'string',\n            description: 'The rev of the last emitted commit from this repo.',\n          },\n          blocks: {\n            type: 'bytes',\n            description: 'CAR file containing relevant blocks.',\n            maxLength: 1000000,\n          },\n          ops: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.sync.subscribeRepos#repoOp',\n            },\n            maxLength: 200,\n          },\n          blobs: {\n            type: 'array',\n            items: {\n              type: 'cid-link',\n            },\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      handle: {\n        type: 'object',\n        required: ['seq', 'did', 'handle', 'time'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      migrate: {\n        type: 'object',\n        required: ['seq', 'did', 'migrateTo', 'time'],\n        nullable: ['migrateTo'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          migrateTo: {\n            type: 'string',\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      tombstone: {\n        type: 'object',\n        required: ['seq', 'did', 'time'],\n        properties: {\n          seq: {\n            type: 'integer',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          time: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      info: {\n        type: 'object',\n        required: ['name'],\n        properties: {\n          name: {\n            type: 'string',\n            knownValues: ['OutdatedCursor'],\n          },\n          message: {\n            type: 'string',\n          },\n        },\n      },\n      repoOp: {\n        type: 'object',\n        description:\n          \"A repo operation, ie a write of a single record. For creates and updates, CID is the record's CID as of this operation. For deletes, it's null.\",\n        required: ['action', 'path', 'cid'],\n        nullable: ['cid'],\n        properties: {\n          action: {\n            type: 'string',\n            knownValues: ['create', 'update', 'delete'],\n          },\n          path: {\n            type: 'string',\n          },\n          cid: {\n            type: 'cid-link',\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoTempCheckSignupQueue: {\n    lexicon: 1,\n    id: 'com.atproto.temp.checkSignupQueue',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Check accounts location in signup queue.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['activated'],\n            properties: {\n              activated: {\n                type: 'boolean',\n              },\n              placeInQueue: {\n                type: 'integer',\n              },\n              estimatedTimeMs: {\n                type: 'integer',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoTempFetchLabels: {\n    lexicon: 1,\n    id: 'com.atproto.temp.fetchLabels',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Fetch all labels from a labeler created after a certain date.',\n        parameters: {\n          type: 'params',\n          properties: {\n            since: {\n              type: 'integer',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 250,\n              default: 50,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['labels'],\n            properties: {\n              labels: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:com.atproto.label.defs#label',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoTempImportRepo: {\n    lexicon: 1,\n    id: 'com.atproto.temp.importRepo',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          \"Gets the did's repo, optionally catching up from a specific revision.\",\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n          },\n        },\n        input: {\n          encoding: 'application/vnd.ipld.car',\n        },\n        output: {\n          encoding: 'text/plain',\n        },\n      },\n    },\n  },\n  ComAtprotoTempPushBlob: {\n    lexicon: 1,\n    id: 'com.atproto.temp.pushBlob',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          \"Gets the did's repo, optionally catching up from a specific revision.\",\n        parameters: {\n          type: 'params',\n          required: ['did'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n              description: 'The DID of the repo.',\n            },\n          },\n        },\n        input: {\n          encoding: '*/*',\n        },\n      },\n    },\n  },\n  ComAtprotoTempRequestPhoneVerification: {\n    lexicon: 1,\n    id: 'com.atproto.temp.requestPhoneVerification',\n    defs: {\n      main: {\n        type: 'procedure',\n        description:\n          'Request a verification code to be sent to the supplied phone number',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['phoneNumber'],\n            properties: {\n              phoneNumber: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  ComAtprotoTempTransferAccount: {\n    lexicon: 1,\n    id: 'com.atproto.temp.transferAccount',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Transfer an account.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['handle', 'did', 'plcOp'],\n            properties: {\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              plcOp: {\n                type: 'unknown',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['accessJwt', 'refreshJwt', 'handle', 'did'],\n            properties: {\n              accessJwt: {\n                type: 'string',\n              },\n              refreshJwt: {\n                type: 'string',\n              },\n              handle: {\n                type: 'string',\n                format: 'handle',\n              },\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'InvalidHandle',\n          },\n          {\n            name: 'InvalidPassword',\n          },\n          {\n            name: 'InvalidInviteCode',\n          },\n          {\n            name: 'HandleNotAvailable',\n          },\n          {\n            name: 'UnsupportedDomain',\n          },\n          {\n            name: 'UnresolvableDid',\n          },\n          {\n            name: 'IncompatibleDidDoc',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyActorDefs: {\n    lexicon: 1,\n    id: 'app.bsky.actor.defs',\n    description: 'A reference to an actor in the network.',\n    defs: {\n      profileViewBasic: {\n        type: 'object',\n        required: ['did', 'handle'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          displayName: {\n            type: 'string',\n            maxGraphemes: 64,\n            maxLength: 640,\n          },\n          avatar: {\n            type: 'string',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      profileView: {\n        type: 'object',\n        required: ['did', 'handle'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          displayName: {\n            type: 'string',\n            maxGraphemes: 64,\n            maxLength: 640,\n          },\n          description: {\n            type: 'string',\n            maxGraphemes: 256,\n            maxLength: 2560,\n          },\n          avatar: {\n            type: 'string',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      profileViewDetailed: {\n        type: 'object',\n        required: ['did', 'handle'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          handle: {\n            type: 'string',\n            format: 'handle',\n          },\n          displayName: {\n            type: 'string',\n            maxGraphemes: 64,\n            maxLength: 640,\n          },\n          description: {\n            type: 'string',\n            maxGraphemes: 256,\n            maxLength: 2560,\n          },\n          avatar: {\n            type: 'string',\n          },\n          banner: {\n            type: 'string',\n          },\n          followersCount: {\n            type: 'integer',\n          },\n          followsCount: {\n            type: 'integer',\n          },\n          postsCount: {\n            type: 'integer',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n      viewerState: {\n        type: 'object',\n        properties: {\n          muted: {\n            type: 'boolean',\n          },\n          mutedByList: {\n            type: 'ref',\n            ref: 'lex:app.bsky.graph.defs#listViewBasic',\n          },\n          blockedBy: {\n            type: 'boolean',\n          },\n          blocking: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          blockingByList: {\n            type: 'ref',\n            ref: 'lex:app.bsky.graph.defs#listViewBasic',\n          },\n          following: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          followedBy: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      preferences: {\n        type: 'array',\n        items: {\n          type: 'union',\n          refs: [\n            'lex:app.bsky.actor.defs#adultContentPref',\n            'lex:app.bsky.actor.defs#contentLabelPref',\n            'lex:app.bsky.actor.defs#savedFeedsPref',\n            'lex:app.bsky.actor.defs#personalDetailsPref',\n            'lex:app.bsky.actor.defs#feedViewPref',\n            'lex:app.bsky.actor.defs#threadViewPref',\n            'lex:app.bsky.actor.defs#interestsPref',\n          ],\n        },\n      },\n      adultContentPref: {\n        type: 'object',\n        required: ['enabled'],\n        properties: {\n          enabled: {\n            type: 'boolean',\n            default: false,\n          },\n        },\n      },\n      contentLabelPref: {\n        type: 'object',\n        required: ['label', 'visibility'],\n        properties: {\n          label: {\n            type: 'string',\n          },\n          visibility: {\n            type: 'string',\n            knownValues: ['show', 'warn', 'hide'],\n          },\n        },\n      },\n      savedFeedsPref: {\n        type: 'object',\n        required: ['pinned', 'saved'],\n        properties: {\n          pinned: {\n            type: 'array',\n            items: {\n              type: 'string',\n              format: 'at-uri',\n            },\n          },\n          saved: {\n            type: 'array',\n            items: {\n              type: 'string',\n              format: 'at-uri',\n            },\n          },\n        },\n      },\n      personalDetailsPref: {\n        type: 'object',\n        properties: {\n          birthDate: {\n            type: 'string',\n            format: 'datetime',\n            description: 'The birth date of account owner.',\n          },\n        },\n      },\n      feedViewPref: {\n        type: 'object',\n        required: ['feed'],\n        properties: {\n          feed: {\n            type: 'string',\n            description:\n              'The URI of the feed, or an identifier which describes the feed.',\n          },\n          hideReplies: {\n            type: 'boolean',\n            description: 'Hide replies in the feed.',\n          },\n          hideRepliesByUnfollowed: {\n            type: 'boolean',\n            description:\n              'Hide replies in the feed if they are not by followed users.',\n          },\n          hideRepliesByLikeCount: {\n            type: 'integer',\n            description:\n              'Hide replies in the feed if they do not have this number of likes.',\n          },\n          hideReposts: {\n            type: 'boolean',\n            description: 'Hide reposts in the feed.',\n          },\n          hideQuotePosts: {\n            type: 'boolean',\n            description: 'Hide quote posts in the feed.',\n          },\n        },\n      },\n      threadViewPref: {\n        type: 'object',\n        properties: {\n          sort: {\n            type: 'string',\n            description: 'Sorting mode for threads.',\n            knownValues: ['oldest', 'newest', 'most-likes', 'random'],\n          },\n          prioritizeFollowedUsers: {\n            type: 'boolean',\n            description: 'Show followed users at the top of all replies.',\n          },\n        },\n      },\n      interestsPref: {\n        type: 'object',\n        required: ['tags'],\n        properties: {\n          tags: {\n            type: 'array',\n            maxLength: 100,\n            items: {\n              type: 'string',\n              maxLength: 640,\n              maxGraphemes: 64,\n            },\n            description:\n              \"A list of tags which describe the account owner's interests gathered during onboarding.\",\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetPreferences: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getPreferences',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get private preferences attached to the account.',\n        parameters: {\n          type: 'params',\n          properties: {},\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['preferences'],\n            properties: {\n              preferences: {\n                type: 'ref',\n                ref: 'lex:app.bsky.actor.defs#preferences',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetProfile: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getProfile',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get detailed profile view of an actor.',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewDetailed',\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetProfiles: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getProfiles',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get detailed profile views of multiple actors.',\n        parameters: {\n          type: 'params',\n          required: ['actors'],\n          properties: {\n            actors: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n              maxLength: 25,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['profiles'],\n            properties: {\n              profiles: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileViewDetailed',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorGetSuggestions: {\n    lexicon: 1,\n    id: 'app.bsky.actor.getSuggestions',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of suggested actors, used for discovery.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorProfile: {\n    lexicon: 1,\n    id: 'app.bsky.actor.profile',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of a profile.',\n        key: 'literal:self',\n        record: {\n          type: 'object',\n          properties: {\n            displayName: {\n              type: 'string',\n              maxGraphemes: 64,\n              maxLength: 640,\n            },\n            description: {\n              type: 'string',\n              maxGraphemes: 256,\n              maxLength: 2560,\n            },\n            avatar: {\n              type: 'blob',\n              accept: ['image/png', 'image/jpeg'],\n              maxSize: 1000000,\n            },\n            banner: {\n              type: 'blob',\n              accept: ['image/png', 'image/jpeg'],\n              maxSize: 1000000,\n            },\n            labels: {\n              type: 'union',\n              refs: ['lex:com.atproto.label.defs#selfLabels'],\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorPutPreferences: {\n    lexicon: 1,\n    id: 'app.bsky.actor.putPreferences',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Set the private preferences attached to the account.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['preferences'],\n            properties: {\n              preferences: {\n                type: 'ref',\n                ref: 'lex:app.bsky.actor.defs#preferences',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorSearchActors: {\n    lexicon: 1,\n    id: 'app.bsky.actor.searchActors',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find actors (profiles) matching search criteria.',\n        parameters: {\n          type: 'params',\n          properties: {\n            term: {\n              type: 'string',\n              description: \"DEPRECATED: use 'q' instead.\",\n            },\n            q: {\n              type: 'string',\n              description:\n                'Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 25,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyActorSearchActorsTypeahead: {\n    lexicon: 1,\n    id: 'app.bsky.actor.searchActorsTypeahead',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find actor suggestions for a prefix search term.',\n        parameters: {\n          type: 'params',\n          properties: {\n            term: {\n              type: 'string',\n              description: \"DEPRECATED: use 'q' instead.\",\n            },\n            q: {\n              type: 'string',\n              description: 'Search query prefix; not a full query string.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 10,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedExternal: {\n    lexicon: 1,\n    id: 'app.bsky.embed.external',\n    description:\n      'A representation of some externally linked content, embedded in another form of content.',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['external'],\n        properties: {\n          external: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.external#external',\n          },\n        },\n      },\n      external: {\n        type: 'object',\n        required: ['uri', 'title', 'description'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'uri',\n          },\n          title: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n          },\n          thumb: {\n            type: 'blob',\n            accept: ['image/*'],\n            maxSize: 1000000,\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['external'],\n        properties: {\n          external: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.external#viewExternal',\n          },\n        },\n      },\n      viewExternal: {\n        type: 'object',\n        required: ['uri', 'title', 'description'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'uri',\n          },\n          title: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n          },\n          thumb: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedImages: {\n    lexicon: 1,\n    id: 'app.bsky.embed.images',\n    description: 'A set of images embedded in some other form of content.',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['images'],\n        properties: {\n          images: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.embed.images#image',\n            },\n            maxLength: 4,\n          },\n        },\n      },\n      image: {\n        type: 'object',\n        required: ['image', 'alt'],\n        properties: {\n          image: {\n            type: 'blob',\n            accept: ['image/*'],\n            maxSize: 1000000,\n          },\n          alt: {\n            type: 'string',\n          },\n          aspectRatio: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.images#aspectRatio',\n          },\n        },\n      },\n      aspectRatio: {\n        type: 'object',\n        description:\n          'width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.',\n        required: ['width', 'height'],\n        properties: {\n          width: {\n            type: 'integer',\n            minimum: 1,\n          },\n          height: {\n            type: 'integer',\n            minimum: 1,\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['images'],\n        properties: {\n          images: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.embed.images#viewImage',\n            },\n            maxLength: 4,\n          },\n        },\n      },\n      viewImage: {\n        type: 'object',\n        required: ['thumb', 'fullsize', 'alt'],\n        properties: {\n          thumb: {\n            type: 'string',\n          },\n          fullsize: {\n            type: 'string',\n          },\n          alt: {\n            type: 'string',\n          },\n          aspectRatio: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.images#aspectRatio',\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedRecord: {\n    lexicon: 1,\n    id: 'app.bsky.embed.record',\n    description:\n      'A representation of a record embedded in another form of content.',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['record'],\n        properties: {\n          record: {\n            type: 'ref',\n            ref: 'lex:com.atproto.repo.strongRef',\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['record'],\n        properties: {\n          record: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.embed.record#viewRecord',\n              'lex:app.bsky.embed.record#viewNotFound',\n              'lex:app.bsky.embed.record#viewBlocked',\n              'lex:app.bsky.feed.defs#generatorView',\n              'lex:app.bsky.graph.defs#listView',\n            ],\n          },\n        },\n      },\n      viewRecord: {\n        type: 'object',\n        required: ['uri', 'cid', 'author', 'value', 'indexedAt'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n          },\n          value: {\n            type: 'unknown',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n          embeds: {\n            type: 'array',\n            items: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.embed.images#view',\n                'lex:app.bsky.embed.external#view',\n                'lex:app.bsky.embed.record#view',\n                'lex:app.bsky.embed.recordWithMedia#view',\n              ],\n            },\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      viewNotFound: {\n        type: 'object',\n        required: ['uri', 'notFound'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          notFound: {\n            type: 'boolean',\n            const: true,\n          },\n        },\n      },\n      viewBlocked: {\n        type: 'object',\n        required: ['uri', 'blocked', 'author'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          blocked: {\n            type: 'boolean',\n            const: true,\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#blockedAuthor',\n          },\n        },\n      },\n    },\n  },\n  AppBskyEmbedRecordWithMedia: {\n    lexicon: 1,\n    id: 'app.bsky.embed.recordWithMedia',\n    description:\n      'A representation of a record embedded in another form of content, alongside other compatible embeds.',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['record', 'media'],\n        properties: {\n          record: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.record',\n          },\n          media: {\n            type: 'union',\n            refs: ['lex:app.bsky.embed.images', 'lex:app.bsky.embed.external'],\n          },\n        },\n      },\n      view: {\n        type: 'object',\n        required: ['record', 'media'],\n        properties: {\n          record: {\n            type: 'ref',\n            ref: 'lex:app.bsky.embed.record#view',\n          },\n          media: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.embed.images#view',\n              'lex:app.bsky.embed.external#view',\n            ],\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedDefs: {\n    lexicon: 1,\n    id: 'app.bsky.feed.defs',\n    defs: {\n      postView: {\n        type: 'object',\n        required: ['uri', 'cid', 'author', 'record', 'indexedAt'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n          },\n          record: {\n            type: 'unknown',\n          },\n          embed: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.embed.images#view',\n              'lex:app.bsky.embed.external#view',\n              'lex:app.bsky.embed.record#view',\n              'lex:app.bsky.embed.recordWithMedia#view',\n            ],\n          },\n          replyCount: {\n            type: 'integer',\n          },\n          repostCount: {\n            type: 'integer',\n          },\n          likeCount: {\n            type: 'integer',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#viewerState',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n          threadgate: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#threadgateView',\n          },\n        },\n      },\n      viewerState: {\n        type: 'object',\n        properties: {\n          repost: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          like: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          replyDisabled: {\n            type: 'boolean',\n          },\n        },\n      },\n      feedViewPost: {\n        type: 'object',\n        required: ['post'],\n        properties: {\n          post: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#postView',\n          },\n          reply: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#replyRef',\n          },\n          reason: {\n            type: 'union',\n            refs: ['lex:app.bsky.feed.defs#reasonRepost'],\n          },\n        },\n      },\n      replyRef: {\n        type: 'object',\n        required: ['root', 'parent'],\n        properties: {\n          root: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.feed.defs#postView',\n              'lex:app.bsky.feed.defs#notFoundPost',\n              'lex:app.bsky.feed.defs#blockedPost',\n            ],\n          },\n          parent: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.feed.defs#postView',\n              'lex:app.bsky.feed.defs#notFoundPost',\n              'lex:app.bsky.feed.defs#blockedPost',\n            ],\n          },\n        },\n      },\n      reasonRepost: {\n        type: 'object',\n        required: ['by', 'indexedAt'],\n        properties: {\n          by: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileViewBasic',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      threadViewPost: {\n        type: 'object',\n        required: ['post'],\n        properties: {\n          post: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#postView',\n          },\n          parent: {\n            type: 'union',\n            refs: [\n              'lex:app.bsky.feed.defs#threadViewPost',\n              'lex:app.bsky.feed.defs#notFoundPost',\n              'lex:app.bsky.feed.defs#blockedPost',\n            ],\n          },\n          replies: {\n            type: 'array',\n            items: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.feed.defs#threadViewPost',\n                'lex:app.bsky.feed.defs#notFoundPost',\n                'lex:app.bsky.feed.defs#blockedPost',\n              ],\n            },\n          },\n        },\n      },\n      notFoundPost: {\n        type: 'object',\n        required: ['uri', 'notFound'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          notFound: {\n            type: 'boolean',\n            const: true,\n          },\n        },\n      },\n      blockedPost: {\n        type: 'object',\n        required: ['uri', 'blocked', 'author'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          blocked: {\n            type: 'boolean',\n            const: true,\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#blockedAuthor',\n          },\n        },\n      },\n      blockedAuthor: {\n        type: 'object',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#viewerState',\n          },\n        },\n      },\n      generatorView: {\n        type: 'object',\n        required: ['uri', 'cid', 'did', 'creator', 'displayName', 'indexedAt'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          creator: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n          displayName: {\n            type: 'string',\n          },\n          description: {\n            type: 'string',\n            maxGraphemes: 300,\n            maxLength: 3000,\n          },\n          descriptionFacets: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.richtext.facet',\n            },\n          },\n          avatar: {\n            type: 'string',\n          },\n          likeCount: {\n            type: 'integer',\n            minimum: 0,\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.defs#generatorViewerState',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      generatorViewerState: {\n        type: 'object',\n        properties: {\n          like: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      skeletonFeedPost: {\n        type: 'object',\n        required: ['post'],\n        properties: {\n          post: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          reason: {\n            type: 'union',\n            refs: ['lex:app.bsky.feed.defs#skeletonReasonRepost'],\n          },\n        },\n      },\n      skeletonReasonRepost: {\n        type: 'object',\n        required: ['repost'],\n        properties: {\n          repost: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      threadgateView: {\n        type: 'object',\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          record: {\n            type: 'unknown',\n          },\n          lists: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.graph.defs#listViewBasic',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedDescribeFeedGenerator: {\n    lexicon: 1,\n    id: 'app.bsky.feed.describeFeedGenerator',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get information about a feed generator, including policies and offered feed URIs.',\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['did', 'feeds'],\n            properties: {\n              did: {\n                type: 'string',\n                format: 'did',\n              },\n              feeds: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.describeFeedGenerator#feed',\n                },\n              },\n              links: {\n                type: 'ref',\n                ref: 'lex:app.bsky.feed.describeFeedGenerator#links',\n              },\n            },\n          },\n        },\n      },\n      feed: {\n        type: 'object',\n        required: ['uri'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      links: {\n        type: 'object',\n        properties: {\n          privacyPolicy: {\n            type: 'string',\n          },\n          termsOfService: {\n            type: 'string',\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGenerator: {\n    lexicon: 1,\n    id: 'app.bsky.feed.generator',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of the existence of a feed generator.',\n        key: 'any',\n        record: {\n          type: 'object',\n          required: ['did', 'displayName', 'createdAt'],\n          properties: {\n            did: {\n              type: 'string',\n              format: 'did',\n            },\n            displayName: {\n              type: 'string',\n              maxGraphemes: 24,\n              maxLength: 240,\n            },\n            description: {\n              type: 'string',\n              maxGraphemes: 300,\n              maxLength: 3000,\n            },\n            descriptionFacets: {\n              type: 'array',\n              items: {\n                type: 'ref',\n                ref: 'lex:app.bsky.richtext.facet',\n              },\n            },\n            avatar: {\n              type: 'blob',\n              accept: ['image/png', 'image/jpeg'],\n              maxSize: 1000000,\n            },\n            labels: {\n              type: 'union',\n              refs: ['lex:com.atproto.label.defs#selfLabels'],\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetActorFeeds: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getActorFeeds',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of feeds created by the actor.',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feeds'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feeds: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#generatorView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetActorLikes: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getActorLikes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of posts liked by an actor.',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'BlockedActor',\n          },\n          {\n            name: 'BlockedByActor',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetAuthorFeed: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getAuthorFeed',\n    defs: {\n      main: {\n        type: 'query',\n        description: \"Get a view of an actor's feed.\",\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n            filter: {\n              type: 'string',\n              knownValues: [\n                'posts_with_replies',\n                'posts_no_replies',\n                'posts_with_media',\n                'posts_and_author_threads',\n              ],\n              default: 'posts_with_replies',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'BlockedActor',\n          },\n          {\n            name: 'BlockedByActor',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetFeed: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getFeed',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          \"Get a hydrated feed from an actor's selected feed generator.\",\n        parameters: {\n          type: 'params',\n          required: ['feed'],\n          properties: {\n            feed: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'UnknownFeed',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetFeedGenerator: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getFeedGenerator',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get information about a feed generator.',\n        parameters: {\n          type: 'params',\n          required: ['feed'],\n          properties: {\n            feed: {\n              type: 'string',\n              format: 'at-uri',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['view', 'isOnline', 'isValid'],\n            properties: {\n              view: {\n                type: 'ref',\n                ref: 'lex:app.bsky.feed.defs#generatorView',\n              },\n              isOnline: {\n                type: 'boolean',\n              },\n              isValid: {\n                type: 'boolean',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetFeedGenerators: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getFeedGenerators',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get information about a list of feed generators.',\n        parameters: {\n          type: 'params',\n          required: ['feeds'],\n          properties: {\n            feeds: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'at-uri',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feeds'],\n            properties: {\n              feeds: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#generatorView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetFeedSkeleton: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getFeedSkeleton',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a skeleton of a feed provided by a feed generator.',\n        parameters: {\n          type: 'params',\n          required: ['feed'],\n          properties: {\n            feed: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#skeletonFeedPost',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'UnknownFeed',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetLikes: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getLikes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get the list of likes.',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'likes'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              cursor: {\n                type: 'string',\n              },\n              likes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.getLikes#like',\n                },\n              },\n            },\n          },\n        },\n      },\n      like: {\n        type: 'object',\n        required: ['indexedAt', 'createdAt', 'actor'],\n        properties: {\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          createdAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          actor: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetListFeed: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getListFeed',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a view of a recent posts from actors in a list.',\n        parameters: {\n          type: 'params',\n          required: ['list'],\n          properties: {\n            list: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'UnknownList',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetPostThread: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getPostThread',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get posts in a thread.',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            depth: {\n              type: 'integer',\n              default: 6,\n              minimum: 0,\n              maximum: 1000,\n            },\n            parentHeight: {\n              type: 'integer',\n              default: 80,\n              minimum: 0,\n              maximum: 1000,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['thread'],\n            properties: {\n              thread: {\n                type: 'union',\n                refs: [\n                  'lex:app.bsky.feed.defs#threadViewPost',\n                  'lex:app.bsky.feed.defs#notFoundPost',\n                  'lex:app.bsky.feed.defs#blockedPost',\n                ],\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'NotFound',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedGetPosts: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getPosts',\n    defs: {\n      main: {\n        type: 'query',\n        description: \"Get a view of an actor's feed.\",\n        parameters: {\n          type: 'params',\n          required: ['uris'],\n          properties: {\n            uris: {\n              type: 'array',\n              items: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              maxLength: 25,\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['posts'],\n            properties: {\n              posts: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#postView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetRepostedBy: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getRepostedBy',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of reposts.',\n        parameters: {\n          type: 'params',\n          required: ['uri'],\n          properties: {\n            uri: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            cid: {\n              type: 'string',\n              format: 'cid',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['uri', 'repostedBy'],\n            properties: {\n              uri: {\n                type: 'string',\n                format: 'at-uri',\n              },\n              cid: {\n                type: 'string',\n                format: 'cid',\n              },\n              cursor: {\n                type: 'string',\n              },\n              repostedBy: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetSuggestedFeeds: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getSuggestedFeeds',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of suggested feeds for the viewer.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feeds'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feeds: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#generatorView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedGetTimeline: {\n    lexicon: 1,\n    id: 'app.bsky.feed.getTimeline',\n    defs: {\n      main: {\n        type: 'query',\n        description: \"Get a view of the actor's home timeline.\",\n        parameters: {\n          type: 'params',\n          properties: {\n            algorithm: {\n              type: 'string',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feed'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feed: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#feedViewPost',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedLike: {\n    lexicon: 1,\n    id: 'app.bsky.feed.like',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of a like.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'ref',\n              ref: 'lex:com.atproto.repo.strongRef',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedPost: {\n    lexicon: 1,\n    id: 'app.bsky.feed.post',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of a post.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['text', 'createdAt'],\n          properties: {\n            text: {\n              type: 'string',\n              maxLength: 3000,\n              maxGraphemes: 300,\n            },\n            entities: {\n              type: 'array',\n              description: 'Deprecated: replaced by app.bsky.richtext.facet.',\n              items: {\n                type: 'ref',\n                ref: 'lex:app.bsky.feed.post#entity',\n              },\n            },\n            facets: {\n              type: 'array',\n              items: {\n                type: 'ref',\n                ref: 'lex:app.bsky.richtext.facet',\n              },\n            },\n            reply: {\n              type: 'ref',\n              ref: 'lex:app.bsky.feed.post#replyRef',\n            },\n            embed: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.embed.images',\n                'lex:app.bsky.embed.external',\n                'lex:app.bsky.embed.record',\n                'lex:app.bsky.embed.recordWithMedia',\n              ],\n            },\n            langs: {\n              type: 'array',\n              maxLength: 3,\n              items: {\n                type: 'string',\n                format: 'language',\n              },\n            },\n            labels: {\n              type: 'union',\n              refs: ['lex:com.atproto.label.defs#selfLabels'],\n            },\n            tags: {\n              type: 'array',\n              maxLength: 8,\n              items: {\n                type: 'string',\n                maxLength: 640,\n                maxGraphemes: 64,\n              },\n              description: 'Additional non-inline tags describing this post.',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n      replyRef: {\n        type: 'object',\n        required: ['root', 'parent'],\n        properties: {\n          root: {\n            type: 'ref',\n            ref: 'lex:com.atproto.repo.strongRef',\n          },\n          parent: {\n            type: 'ref',\n            ref: 'lex:com.atproto.repo.strongRef',\n          },\n        },\n      },\n      entity: {\n        type: 'object',\n        description: 'Deprecated: use facets instead.',\n        required: ['index', 'type', 'value'],\n        properties: {\n          index: {\n            type: 'ref',\n            ref: 'lex:app.bsky.feed.post#textSlice',\n          },\n          type: {\n            type: 'string',\n            description: \"Expected values are 'mention' and 'link'.\",\n          },\n          value: {\n            type: 'string',\n          },\n        },\n      },\n      textSlice: {\n        type: 'object',\n        description:\n          'Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.',\n        required: ['start', 'end'],\n        properties: {\n          start: {\n            type: 'integer',\n            minimum: 0,\n          },\n          end: {\n            type: 'integer',\n            minimum: 0,\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedRepost: {\n    lexicon: 1,\n    id: 'app.bsky.feed.repost',\n    defs: {\n      main: {\n        description: 'A declaration of a repost.',\n        type: 'record',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'ref',\n              ref: 'lex:com.atproto.repo.strongRef',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyFeedSearchPosts: {\n    lexicon: 1,\n    id: 'app.bsky.feed.searchPosts',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Find posts matching search criteria.',\n        parameters: {\n          type: 'params',\n          required: ['q'],\n          properties: {\n            q: {\n              type: 'string',\n              description:\n                'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 25,\n            },\n            cursor: {\n              type: 'string',\n              description:\n                'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['posts'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              hitsTotal: {\n                type: 'integer',\n                description:\n                  'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',\n              },\n              posts: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#postView',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'BadQueryString',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyFeedThreadgate: {\n    lexicon: 1,\n    id: 'app.bsky.feed.threadgate',\n    defs: {\n      main: {\n        type: 'record',\n        key: 'tid',\n        description:\n          \"Defines interaction gating rules for a thread. The rkey of the threadgate record should match the rkey of the thread's root post.\",\n        record: {\n          type: 'object',\n          required: ['post', 'createdAt'],\n          properties: {\n            post: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            allow: {\n              type: 'array',\n              maxLength: 5,\n              items: {\n                type: 'union',\n                refs: [\n                  'lex:app.bsky.feed.threadgate#mentionRule',\n                  'lex:app.bsky.feed.threadgate#followingRule',\n                  'lex:app.bsky.feed.threadgate#listRule',\n                ],\n              },\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n      mentionRule: {\n        type: 'object',\n        description: 'Allow replies from actors mentioned in your post.',\n        properties: {},\n      },\n      followingRule: {\n        type: 'object',\n        description: 'Allow replies from actors you follow.',\n        properties: {},\n      },\n      listRule: {\n        type: 'object',\n        description: 'Allow replies from actors on a list.',\n        required: ['list'],\n        properties: {\n          list: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphBlock: {\n    lexicon: 1,\n    id: 'app.bsky.graph.block',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of a block.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'string',\n              format: 'did',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphDefs: {\n    lexicon: 1,\n    id: 'app.bsky.graph.defs',\n    defs: {\n      listViewBasic: {\n        type: 'object',\n        required: ['uri', 'cid', 'name', 'purpose'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          name: {\n            type: 'string',\n            maxLength: 64,\n            minLength: 1,\n          },\n          purpose: {\n            type: 'ref',\n            ref: 'lex:app.bsky.graph.defs#listPurpose',\n          },\n          avatar: {\n            type: 'string',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.graph.defs#listViewerState',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      listView: {\n        type: 'object',\n        required: ['uri', 'cid', 'creator', 'name', 'purpose', 'indexedAt'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          creator: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n          name: {\n            type: 'string',\n            maxLength: 64,\n            minLength: 1,\n          },\n          purpose: {\n            type: 'ref',\n            ref: 'lex:app.bsky.graph.defs#listPurpose',\n          },\n          description: {\n            type: 'string',\n            maxGraphemes: 300,\n            maxLength: 3000,\n          },\n          descriptionFacets: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:app.bsky.richtext.facet',\n            },\n          },\n          avatar: {\n            type: 'string',\n          },\n          viewer: {\n            type: 'ref',\n            ref: 'lex:app.bsky.graph.defs#listViewerState',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n        },\n      },\n      listItemView: {\n        type: 'object',\n        required: ['uri', 'subject'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          subject: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n        },\n      },\n      listPurpose: {\n        type: 'string',\n        knownValues: [\n          'app.bsky.graph.defs#modlist',\n          'app.bsky.graph.defs#curatelist',\n        ],\n      },\n      modlist: {\n        type: 'token',\n        description:\n          'A list of actors to apply an aggregate moderation action (mute/block) on.',\n      },\n      curatelist: {\n        type: 'token',\n        description:\n          'A list of actors used for curation purposes such as list feeds or interaction gating.',\n      },\n      listViewerState: {\n        type: 'object',\n        properties: {\n          muted: {\n            type: 'boolean',\n          },\n          blocked: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      notFoundActor: {\n        type: 'object',\n        description: 'indicates that a handle or DID could not be resolved',\n        required: ['actor', 'notFound'],\n        properties: {\n          actor: {\n            type: 'string',\n            format: 'at-identifier',\n          },\n          notFound: {\n            type: 'boolean',\n            const: true,\n          },\n        },\n      },\n      relationship: {\n        type: 'object',\n        description:\n          'lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n          following: {\n            type: 'string',\n            format: 'at-uri',\n            description:\n              'if the actor follows this DID, this is the AT-URI of the follow record',\n          },\n          followedBy: {\n            type: 'string',\n            format: 'at-uri',\n            description:\n              'if the actor is followed by this DID, contains the AT-URI of the follow record',\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphFollow: {\n    lexicon: 1,\n    id: 'app.bsky.graph.follow',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of a social follow.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'string',\n              format: 'did',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetBlocks: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getBlocks',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of who the actor is blocking.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['blocks'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              blocks: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetFollowers: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getFollowers',\n    defs: {\n      main: {\n        type: 'query',\n        description: \"Get a list of an actor's followers.\",\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject', 'followers'],\n            properties: {\n              subject: {\n                type: 'ref',\n                ref: 'lex:app.bsky.actor.defs#profileView',\n              },\n              cursor: {\n                type: 'string',\n              },\n              followers: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetFollows: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getFollows',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of who the actor follows.',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['subject', 'follows'],\n            properties: {\n              subject: {\n                type: 'ref',\n                ref: 'lex:app.bsky.actor.defs#profileView',\n              },\n              cursor: {\n                type: 'string',\n              },\n              follows: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetList: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getList',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of actors.',\n        parameters: {\n          type: 'params',\n          required: ['list'],\n          properties: {\n            list: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['list', 'items'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              list: {\n                type: 'ref',\n                ref: 'lex:app.bsky.graph.defs#listView',\n              },\n              items: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.graph.defs#listItemView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetListBlocks: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getListBlocks',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get lists that the actor is blocking.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['lists'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              lists: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.graph.defs#listView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetListMutes: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getListMutes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get lists that the actor is muting.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['lists'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              lists: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.graph.defs#listView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetLists: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getLists',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of lists that belong to an actor.',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['lists'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              lists: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.graph.defs#listView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetMutes: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getMutes',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of who the actor mutes.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['mutes'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              mutes: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphGetRelationships: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getRelationships',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Enumerates public relationships between one account, and a list of other accounts',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n            others: {\n              type: 'array',\n              maxLength: 30,\n              items: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['relationships'],\n            properties: {\n              actor: {\n                type: 'string',\n                format: 'did',\n              },\n              relationships: {\n                type: 'array',\n                items: {\n                  type: 'union',\n                  refs: [\n                    'lex:app.bsky.graph.defs#relationship',\n                    'lex:app.bsky.graph.defs#notFoundActor',\n                  ],\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'ActorNotFound',\n            description:\n              'the primary actor at-identifier could not be resolved',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyGraphGetSuggestedFollowsByActor: {\n    lexicon: 1,\n    id: 'app.bsky.graph.getSuggestedFollowsByActor',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get suggested follows related to a given actor.',\n        parameters: {\n          type: 'params',\n          required: ['actor'],\n          properties: {\n            actor: {\n              type: 'string',\n              format: 'at-identifier',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['suggestions'],\n            properties: {\n              suggestions: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.actor.defs#profileView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphList: {\n    lexicon: 1,\n    id: 'app.bsky.graph.list',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A declaration of a list of actors.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['name', 'purpose', 'createdAt'],\n          properties: {\n            purpose: {\n              type: 'ref',\n              ref: 'lex:app.bsky.graph.defs#listPurpose',\n            },\n            name: {\n              type: 'string',\n              maxLength: 64,\n              minLength: 1,\n            },\n            description: {\n              type: 'string',\n              maxGraphemes: 300,\n              maxLength: 3000,\n            },\n            descriptionFacets: {\n              type: 'array',\n              items: {\n                type: 'ref',\n                ref: 'lex:app.bsky.richtext.facet',\n              },\n            },\n            avatar: {\n              type: 'blob',\n              accept: ['image/png', 'image/jpeg'],\n              maxSize: 1000000,\n            },\n            labels: {\n              type: 'union',\n              refs: ['lex:com.atproto.label.defs#selfLabels'],\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphListblock: {\n    lexicon: 1,\n    id: 'app.bsky.graph.listblock',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'A block of an entire list of actors.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphListitem: {\n    lexicon: 1,\n    id: 'app.bsky.graph.listitem',\n    defs: {\n      main: {\n        type: 'record',\n        description: 'An item under a declared list of actors.',\n        key: 'tid',\n        record: {\n          type: 'object',\n          required: ['subject', 'list', 'createdAt'],\n          properties: {\n            subject: {\n              type: 'string',\n              format: 'did',\n            },\n            list: {\n              type: 'string',\n              format: 'at-uri',\n            },\n            createdAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphMuteActor: {\n    lexicon: 1,\n    id: 'app.bsky.graph.muteActor',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Mute an actor by DID or handle.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actor'],\n            properties: {\n              actor: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphMuteActorList: {\n    lexicon: 1,\n    id: 'app.bsky.graph.muteActorList',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Mute a list of actors.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['list'],\n            properties: {\n              list: {\n                type: 'string',\n                format: 'at-uri',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphUnmuteActor: {\n    lexicon: 1,\n    id: 'app.bsky.graph.unmuteActor',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Unmute an actor by DID or handle.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actor'],\n            properties: {\n              actor: {\n                type: 'string',\n                format: 'at-identifier',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyGraphUnmuteActorList: {\n    lexicon: 1,\n    id: 'app.bsky.graph.unmuteActorList',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Unmute a list of actors.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['list'],\n            properties: {\n              list: {\n                type: 'string',\n                format: 'at-uri',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationGetUnreadCount: {\n    lexicon: 1,\n    id: 'app.bsky.notification.getUnreadCount',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get the count of unread notifications.',\n        parameters: {\n          type: 'params',\n          properties: {\n            seenAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['count'],\n            properties: {\n              count: {\n                type: 'integer',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationListNotifications: {\n    lexicon: 1,\n    id: 'app.bsky.notification.listNotifications',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Get a list of notifications.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n            seenAt: {\n              type: 'string',\n              format: 'datetime',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['notifications'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              notifications: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.notification.listNotifications#notification',\n                },\n              },\n              seenAt: {\n                type: 'string',\n                format: 'datetime',\n              },\n            },\n          },\n        },\n      },\n      notification: {\n        type: 'object',\n        required: [\n          'uri',\n          'cid',\n          'author',\n          'reason',\n          'record',\n          'isRead',\n          'indexedAt',\n        ],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          cid: {\n            type: 'string',\n            format: 'cid',\n          },\n          author: {\n            type: 'ref',\n            ref: 'lex:app.bsky.actor.defs#profileView',\n          },\n          reason: {\n            type: 'string',\n            description:\n              \"Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'.\",\n            knownValues: [\n              'like',\n              'repost',\n              'follow',\n              'mention',\n              'reply',\n              'quote',\n            ],\n          },\n          reasonSubject: {\n            type: 'string',\n            format: 'at-uri',\n          },\n          record: {\n            type: 'unknown',\n          },\n          isRead: {\n            type: 'boolean',\n          },\n          indexedAt: {\n            type: 'string',\n            format: 'datetime',\n          },\n          labels: {\n            type: 'array',\n            items: {\n              type: 'ref',\n              ref: 'lex:com.atproto.label.defs#label',\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationRegisterPush: {\n    lexicon: 1,\n    id: 'app.bsky.notification.registerPush',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Register for push notifications with a service.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['serviceDid', 'token', 'platform', 'appId'],\n            properties: {\n              serviceDid: {\n                type: 'string',\n                format: 'did',\n              },\n              token: {\n                type: 'string',\n              },\n              platform: {\n                type: 'string',\n                knownValues: ['ios', 'android', 'web'],\n              },\n              appId: {\n                type: 'string',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyNotificationUpdateSeen: {\n    lexicon: 1,\n    id: 'app.bsky.notification.updateSeen',\n    defs: {\n      main: {\n        type: 'procedure',\n        description: 'Notify server that the user has seen notifications.',\n        input: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['seenAt'],\n            properties: {\n              seenAt: {\n                type: 'string',\n                format: 'datetime',\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyRichtextFacet: {\n    lexicon: 1,\n    id: 'app.bsky.richtext.facet',\n    defs: {\n      main: {\n        type: 'object',\n        required: ['index', 'features'],\n        properties: {\n          index: {\n            type: 'ref',\n            ref: 'lex:app.bsky.richtext.facet#byteSlice',\n          },\n          features: {\n            type: 'array',\n            items: {\n              type: 'union',\n              refs: [\n                'lex:app.bsky.richtext.facet#mention',\n                'lex:app.bsky.richtext.facet#link',\n                'lex:app.bsky.richtext.facet#tag',\n              ],\n            },\n          },\n        },\n      },\n      mention: {\n        type: 'object',\n        description: 'A facet feature for actor mentions.',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n        },\n      },\n      link: {\n        type: 'object',\n        description: 'A facet feature for links.',\n        required: ['uri'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'uri',\n          },\n        },\n      },\n      tag: {\n        type: 'object',\n        description: 'A hashtag.',\n        required: ['tag'],\n        properties: {\n          tag: {\n            type: 'string',\n            maxLength: 640,\n            maxGraphemes: 64,\n          },\n        },\n      },\n      byteSlice: {\n        type: 'object',\n        description:\n          'A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings.',\n        required: ['byteStart', 'byteEnd'],\n        properties: {\n          byteStart: {\n            type: 'integer',\n            minimum: 0,\n          },\n          byteEnd: {\n            type: 'integer',\n            minimum: 0,\n          },\n        },\n      },\n    },\n  },\n  AppBskyUnspeccedDefs: {\n    lexicon: 1,\n    id: 'app.bsky.unspecced.defs',\n    defs: {\n      skeletonSearchPost: {\n        type: 'object',\n        required: ['uri'],\n        properties: {\n          uri: {\n            type: 'string',\n            format: 'at-uri',\n          },\n        },\n      },\n      skeletonSearchActor: {\n        type: 'object',\n        required: ['did'],\n        properties: {\n          did: {\n            type: 'string',\n            format: 'did',\n          },\n        },\n      },\n    },\n  },\n  AppBskyUnspeccedGetPopularFeedGenerators: {\n    lexicon: 1,\n    id: 'app.bsky.unspecced.getPopularFeedGenerators',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'An unspecced view of globally popular feed generators.',\n        parameters: {\n          type: 'params',\n          properties: {\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 50,\n            },\n            cursor: {\n              type: 'string',\n            },\n            query: {\n              type: 'string',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['feeds'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              feeds: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.feed.defs#generatorView',\n                },\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n  AppBskyUnspeccedGetTaggedSuggestions: {\n    lexicon: 1,\n    id: 'app.bsky.unspecced.getTaggedSuggestions',\n    defs: {\n      main: {\n        type: 'query',\n        description:\n          'Get a list of suggestions (feeds and users) tagged with categories',\n        parameters: {\n          type: 'params',\n          properties: {},\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['suggestions'],\n            properties: {\n              suggestions: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.unspecced.getTaggedSuggestions#suggestion',\n                },\n              },\n            },\n          },\n        },\n      },\n      suggestion: {\n        type: 'object',\n        required: ['tag', 'subjectType', 'subject'],\n        properties: {\n          tag: {\n            type: 'string',\n          },\n          subjectType: {\n            type: 'string',\n            knownValues: ['actor', 'feed'],\n          },\n          subject: {\n            type: 'string',\n            format: 'uri',\n          },\n        },\n      },\n    },\n  },\n  AppBskyUnspeccedSearchActorsSkeleton: {\n    lexicon: 1,\n    id: 'app.bsky.unspecced.searchActorsSkeleton',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Backend Actors (profile) search, returns only skeleton.',\n        parameters: {\n          type: 'params',\n          required: ['q'],\n          properties: {\n            q: {\n              type: 'string',\n              description:\n                'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.',\n            },\n            typeahead: {\n              type: 'boolean',\n              description: \"If true, acts as fast/simple 'typeahead' query.\",\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 25,\n            },\n            cursor: {\n              type: 'string',\n              description:\n                'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['actors'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              hitsTotal: {\n                type: 'integer',\n                description:\n                  'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',\n              },\n              actors: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.unspecced.defs#skeletonSearchActor',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'BadQueryString',\n          },\n        ],\n      },\n    },\n  },\n  AppBskyUnspeccedSearchPostsSkeleton: {\n    lexicon: 1,\n    id: 'app.bsky.unspecced.searchPostsSkeleton',\n    defs: {\n      main: {\n        type: 'query',\n        description: 'Backend Posts search, returns only skeleton',\n        parameters: {\n          type: 'params',\n          required: ['q'],\n          properties: {\n            q: {\n              type: 'string',\n              description:\n                'Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.',\n            },\n            limit: {\n              type: 'integer',\n              minimum: 1,\n              maximum: 100,\n              default: 25,\n            },\n            cursor: {\n              type: 'string',\n              description:\n                'Optional pagination mechanism; may not necessarily allow scrolling through entire result set.',\n            },\n          },\n        },\n        output: {\n          encoding: 'application/json',\n          schema: {\n            type: 'object',\n            required: ['posts'],\n            properties: {\n              cursor: {\n                type: 'string',\n              },\n              hitsTotal: {\n                type: 'integer',\n                description:\n                  'Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.',\n              },\n              posts: {\n                type: 'array',\n                items: {\n                  type: 'ref',\n                  ref: 'lex:app.bsky.unspecced.defs#skeletonSearchPost',\n                },\n              },\n            },\n          },\n        },\n        errors: [\n          {\n            name: 'BadQueryString',\n          },\n        ],\n      },\n    },\n  },\n}\nexport const schemas: LexiconDoc[] = Object.values(schemaDict) as LexiconDoc[]\nexport const lexicons: Lexicons = new Lexicons(schemas)\nexport const ids = {\n  ComAtprotoAdminCreateCommunicationTemplate:\n    'com.atproto.admin.createCommunicationTemplate',\n  ComAtprotoAdminDefs: 'com.atproto.admin.defs',\n  ComAtprotoAdminDeleteAccount: 'com.atproto.admin.deleteAccount',\n  ComAtprotoAdminDeleteCommunicationTemplate:\n    'com.atproto.admin.deleteCommunicationTemplate',\n  ComAtprotoAdminDisableAccountInvites:\n    'com.atproto.admin.disableAccountInvites',\n  ComAtprotoAdminDisableInviteCodes: 'com.atproto.admin.disableInviteCodes',\n  ComAtprotoAdminEmitModerationEvent: 'com.atproto.admin.emitModerationEvent',\n  ComAtprotoAdminEnableAccountInvites: 'com.atproto.admin.enableAccountInvites',\n  ComAtprotoAdminGetAccountInfo: 'com.atproto.admin.getAccountInfo',\n  ComAtprotoAdminGetAccountInfos: 'com.atproto.admin.getAccountInfos',\n  ComAtprotoAdminGetInviteCodes: 'com.atproto.admin.getInviteCodes',\n  ComAtprotoAdminGetModerationEvent: 'com.atproto.admin.getModerationEvent',\n  ComAtprotoAdminGetRecord: 'com.atproto.admin.getRecord',\n  ComAtprotoAdminGetRepo: 'com.atproto.admin.getRepo',\n  ComAtprotoAdminGetSubjectStatus: 'com.atproto.admin.getSubjectStatus',\n  ComAtprotoAdminListCommunicationTemplates:\n    'com.atproto.admin.listCommunicationTemplates',\n  ComAtprotoAdminQueryModerationEvents:\n    'com.atproto.admin.queryModerationEvents',\n  ComAtprotoAdminQueryModerationStatuses:\n    'com.atproto.admin.queryModerationStatuses',\n  ComAtprotoAdminSearchRepos: 'com.atproto.admin.searchRepos',\n  ComAtprotoAdminSendEmail: 'com.atproto.admin.sendEmail',\n  ComAtprotoAdminUpdateAccountEmail: 'com.atproto.admin.updateAccountEmail',\n  ComAtprotoAdminUpdateAccountHandle: 'com.atproto.admin.updateAccountHandle',\n  ComAtprotoAdminUpdateCommunicationTemplate:\n    'com.atproto.admin.updateCommunicationTemplate',\n  ComAtprotoAdminUpdateSubjectStatus: 'com.atproto.admin.updateSubjectStatus',\n  ComAtprotoIdentityResolveHandle: 'com.atproto.identity.resolveHandle',\n  ComAtprotoIdentityUpdateHandle: 'com.atproto.identity.updateHandle',\n  ComAtprotoLabelDefs: 'com.atproto.label.defs',\n  ComAtprotoLabelQueryLabels: 'com.atproto.label.queryLabels',\n  ComAtprotoLabelSubscribeLabels: 'com.atproto.label.subscribeLabels',\n  ComAtprotoModerationCreateReport: 'com.atproto.moderation.createReport',\n  ComAtprotoModerationDefs: 'com.atproto.moderation.defs',\n  ComAtprotoRepoApplyWrites: 'com.atproto.repo.applyWrites',\n  ComAtprotoRepoCreateRecord: 'com.atproto.repo.createRecord',\n  ComAtprotoRepoDeleteRecord: 'com.atproto.repo.deleteRecord',\n  ComAtprotoRepoDescribeRepo: 'com.atproto.repo.describeRepo',\n  ComAtprotoRepoGetRecord: 'com.atproto.repo.getRecord',\n  ComAtprotoRepoListRecords: 'com.atproto.repo.listRecords',\n  ComAtprotoRepoPutRecord: 'com.atproto.repo.putRecord',\n  ComAtprotoRepoStrongRef: 'com.atproto.repo.strongRef',\n  ComAtprotoRepoUploadBlob: 'com.atproto.repo.uploadBlob',\n  ComAtprotoServerConfirmEmail: 'com.atproto.server.confirmEmail',\n  ComAtprotoServerCreateAccount: 'com.atproto.server.createAccount',\n  ComAtprotoServerCreateAppPassword: 'com.atproto.server.createAppPassword',\n  ComAtprotoServerCreateInviteCode: 'com.atproto.server.createInviteCode',\n  ComAtprotoServerCreateInviteCodes: 'com.atproto.server.createInviteCodes',\n  ComAtprotoServerCreateSession: 'com.atproto.server.createSession',\n  ComAtprotoServerDefs: 'com.atproto.server.defs',\n  ComAtprotoServerDeleteAccount: 'com.atproto.server.deleteAccount',\n  ComAtprotoServerDeleteSession: 'com.atproto.server.deleteSession',\n  ComAtprotoServerDescribeServer: 'com.atproto.server.describeServer',\n  ComAtprotoServerGetAccountInviteCodes:\n    'com.atproto.server.getAccountInviteCodes',\n  ComAtprotoServerGetSession: 'com.atproto.server.getSession',\n  ComAtprotoServerListAppPasswords: 'com.atproto.server.listAppPasswords',\n  ComAtprotoServerRefreshSession: 'com.atproto.server.refreshSession',\n  ComAtprotoServerRequestAccountDelete:\n    'com.atproto.server.requestAccountDelete',\n  ComAtprotoServerRequestEmailConfirmation:\n    'com.atproto.server.requestEmailConfirmation',\n  ComAtprotoServerRequestEmailUpdate: 'com.atproto.server.requestEmailUpdate',\n  ComAtprotoServerRequestPasswordReset:\n    'com.atproto.server.requestPasswordReset',\n  ComAtprotoServerReserveSigningKey: 'com.atproto.server.reserveSigningKey',\n  ComAtprotoServerResetPassword: 'com.atproto.server.resetPassword',\n  ComAtprotoServerRevokeAppPassword: 'com.atproto.server.revokeAppPassword',\n  ComAtprotoServerUpdateEmail: 'com.atproto.server.updateEmail',\n  ComAtprotoSyncGetBlob: 'com.atproto.sync.getBlob',\n  ComAtprotoSyncGetBlocks: 'com.atproto.sync.getBlocks',\n  ComAtprotoSyncGetCheckout: 'com.atproto.sync.getCheckout',\n  ComAtprotoSyncGetHead: 'com.atproto.sync.getHead',\n  ComAtprotoSyncGetLatestCommit: 'com.atproto.sync.getLatestCommit',\n  ComAtprotoSyncGetRecord: 'com.atproto.sync.getRecord',\n  ComAtprotoSyncGetRepo: 'com.atproto.sync.getRepo',\n  ComAtprotoSyncListBlobs: 'com.atproto.sync.listBlobs',\n  ComAtprotoSyncListRepos: 'com.atproto.sync.listRepos',\n  ComAtprotoSyncNotifyOfUpdate: 'com.atproto.sync.notifyOfUpdate',\n  ComAtprotoSyncRequestCrawl: 'com.atproto.sync.requestCrawl',\n  ComAtprotoSyncSubscribeRepos: 'com.atproto.sync.subscribeRepos',\n  ComAtprotoTempCheckSignupQueue: 'com.atproto.temp.checkSignupQueue',\n  ComAtprotoTempFetchLabels: 'com.atproto.temp.fetchLabels',\n  ComAtprotoTempImportRepo: 'com.atproto.temp.importRepo',\n  ComAtprotoTempPushBlob: 'com.atproto.temp.pushBlob',\n  ComAtprotoTempRequestPhoneVerification:\n    'com.atproto.temp.requestPhoneVerification',\n  ComAtprotoTempTransferAccount: 'com.atproto.temp.transferAccount',\n  AppBskyActorDefs: 'app.bsky.actor.defs',\n  AppBskyActorGetPreferences: 'app.bsky.actor.getPreferences',\n  AppBskyActorGetProfile: 'app.bsky.actor.getProfile',\n  AppBskyActorGetProfiles: 'app.bsky.actor.getProfiles',\n  AppBskyActorGetSuggestions: 'app.bsky.actor.getSuggestions',\n  AppBskyActorProfile: 'app.bsky.actor.profile',\n  AppBskyActorPutPreferences: 'app.bsky.actor.putPreferences',\n  AppBskyActorSearchActors: 'app.bsky.actor.searchActors',\n  AppBskyActorSearchActorsTypeahead: 'app.bsky.actor.searchActorsTypeahead',\n  AppBskyEmbedExternal: 'app.bsky.embed.external',\n  AppBskyEmbedImages: 'app.bsky.embed.images',\n  AppBskyEmbedRecord: 'app.bsky.embed.record',\n  AppBskyEmbedRecordWithMedia: 'app.bsky.embed.recordWithMedia',\n  AppBskyFeedDefs: 'app.bsky.feed.defs',\n  AppBskyFeedDescribeFeedGenerator: 'app.bsky.feed.describeFeedGenerator',\n  AppBskyFeedGenerator: 'app.bsky.feed.generator',\n  AppBskyFeedGetActorFeeds: 'app.bsky.feed.getActorFeeds',\n  AppBskyFeedGetActorLikes: 'app.bsky.feed.getActorLikes',\n  AppBskyFeedGetAuthorFeed: 'app.bsky.feed.getAuthorFeed',\n  AppBskyFeedGetFeed: 'app.bsky.feed.getFeed',\n  AppBskyFeedGetFeedGenerator: 'app.bsky.feed.getFeedGenerator',\n  AppBskyFeedGetFeedGenerators: 'app.bsky.feed.getFeedGenerators',\n  AppBskyFeedGetFeedSkeleton: 'app.bsky.feed.getFeedSkeleton',\n  AppBskyFeedGetLikes: 'app.bsky.feed.getLikes',\n  AppBskyFeedGetListFeed: 'app.bsky.feed.getListFeed',\n  AppBskyFeedGetPostThread: 'app.bsky.feed.getPostThread',\n  AppBskyFeedGetPosts: 'app.bsky.feed.getPosts',\n  AppBskyFeedGetRepostedBy: 'app.bsky.feed.getRepostedBy',\n  AppBskyFeedGetSuggestedFeeds: 'app.bsky.feed.getSuggestedFeeds',\n  AppBskyFeedGetTimeline: 'app.bsky.feed.getTimeline',\n  AppBskyFeedLike: 'app.bsky.feed.like',\n  AppBskyFeedPost: 'app.bsky.feed.post',\n  AppBskyFeedRepost: 'app.bsky.feed.repost',\n  AppBskyFeedSearchPosts: 'app.bsky.feed.searchPosts',\n  AppBskyFeedThreadgate: 'app.bsky.feed.threadgate',\n  AppBskyGraphBlock: 'app.bsky.graph.block',\n  AppBskyGraphDefs: 'app.bsky.graph.defs',\n  AppBskyGraphFollow: 'app.bsky.graph.follow',\n  AppBskyGraphGetBlocks: 'app.bsky.graph.getBlocks',\n  AppBskyGraphGetFollowers: 'app.bsky.graph.getFollowers',\n  AppBskyGraphGetFollows: 'app.bsky.graph.getFollows',\n  AppBskyGraphGetList: 'app.bsky.graph.getList',\n  AppBskyGraphGetListBlocks: 'app.bsky.graph.getListBlocks',\n  AppBskyGraphGetListMutes: 'app.bsky.graph.getListMutes',\n  AppBskyGraphGetLists: 'app.bsky.graph.getLists',\n  AppBskyGraphGetMutes: 'app.bsky.graph.getMutes',\n  AppBskyGraphGetRelationships: 'app.bsky.graph.getRelationships',\n  AppBskyGraphGetSuggestedFollowsByActor:\n    'app.bsky.graph.getSuggestedFollowsByActor',\n  AppBskyGraphList: 'app.bsky.graph.list',\n  AppBskyGraphListblock: 'app.bsky.graph.listblock',\n  AppBskyGraphListitem: 'app.bsky.graph.listitem',\n  AppBskyGraphMuteActor: 'app.bsky.graph.muteActor',\n  AppBskyGraphMuteActorList: 'app.bsky.graph.muteActorList',\n  AppBskyGraphUnmuteActor: 'app.bsky.graph.unmuteActor',\n  AppBskyGraphUnmuteActorList: 'app.bsky.graph.unmuteActorList',\n  AppBskyNotificationGetUnreadCount: 'app.bsky.notification.getUnreadCount',\n  AppBskyNotificationListNotifications:\n    'app.bsky.notification.listNotifications',\n  AppBskyNotificationRegisterPush: 'app.bsky.notification.registerPush',\n  AppBskyNotificationUpdateSeen: 'app.bsky.notification.updateSeen',\n  AppBskyRichtextFacet: 'app.bsky.richtext.facet',\n  AppBskyUnspeccedDefs: 'app.bsky.unspecced.defs',\n  AppBskyUnspeccedGetPopularFeedGenerators:\n    'app.bsky.unspecced.getPopularFeedGenerators',\n  AppBskyUnspeccedGetTaggedSuggestions:\n    'app.bsky.unspecced.getTaggedSuggestions',\n  AppBskyUnspeccedSearchActorsSkeleton:\n    'app.bsky.unspecced.searchActorsSkeleton',\n  AppBskyUnspeccedSearchPostsSkeleton: 'app.bsky.unspecced.searchPostsSkeleton',\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** Name of the template. */\n  name: string\n  /** Content of the template, markdown supported, can contain variable placeholders. */\n  contentMarkdown: string\n  /** Subject of the message, used in emails. */\n  subject: string\n  /** DID of the user who is creating the template. */\n  createdBy?: string\n  [k: string]: unknown\n}\n\nexport type OutputSchema = ComAtprotoAdminDefs.CommunicationTemplateView\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  did: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  id: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  account: string\n  /** Optional reason for disabled invites. */\n  note?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  codes?: string[]\n  accounts?: string[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  event:\n    | ComAtprotoAdminDefs.ModEventTakedown\n    | ComAtprotoAdminDefs.ModEventAcknowledge\n    | ComAtprotoAdminDefs.ModEventEscalate\n    | ComAtprotoAdminDefs.ModEventComment\n    | ComAtprotoAdminDefs.ModEventLabel\n    | ComAtprotoAdminDefs.ModEventReport\n    | ComAtprotoAdminDefs.ModEventMute\n    | ComAtprotoAdminDefs.ModEventReverseTakedown\n    | ComAtprotoAdminDefs.ModEventUnmute\n    | ComAtprotoAdminDefs.ModEventEmail\n    | { $type: string; [k: string]: unknown }\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  subjectBlobCids?: string[]\n  createdBy: string\n  [k: string]: unknown\n}\n\nexport type OutputSchema = ComAtprotoAdminDefs.ModEventView\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class SubjectHasActionError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'SubjectHasAction') return new SubjectHasActionError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  account: string\n  /** Optional reason for enabled invites. */\n  note?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  did: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.AccountView\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  dids: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  infos: ComAtprotoAdminDefs.AccountView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoServerDefs from '../server/defs'\n\nexport interface QueryParams {\n  sort?: 'recent' | 'usage' | (string & {})\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  codes: ComAtprotoServerDefs.InviteCode[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  id: number\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.ModEventViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  uri: string\n  cid?: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.RecordViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class RecordNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'RecordNotFound') return new RecordNotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  did: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = ComAtprotoAdminDefs.RepoViewDetail\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class RepoNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'RepoNotFound') return new RepoNotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\n\nexport interface QueryParams {\n  did?: string\n  uri?: string\n  blob?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | ComAtprotoAdminDefs.RepoBlobRef\n    | { $type: string; [k: string]: unknown }\n  takedown?: ComAtprotoAdminDefs.StatusAttr\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  communicationTemplates: ComAtprotoAdminDefs.CommunicationTemplateView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  /** The types of events (fully qualified string in the format of com.atproto.admin#modEvent<name>) to filter by. If not specified, all events are returned. */\n  types?: string[]\n  createdBy?: string\n  /** Sort direction for the events. Defaults to descending order of created at timestamp. */\n  sortDirection?: 'asc' | 'desc'\n  /** Retrieve events created after a given timestamp */\n  createdAfter?: string\n  /** Retrieve events created before a given timestamp */\n  createdBefore?: string\n  subject?: string\n  /** If true, events on all record types (posts, lists, profile etc.) owned by the did are returned */\n  includeAllUserRecords?: boolean\n  limit?: number\n  /** If true, only events with comments are returned */\n  hasComment?: boolean\n  /** If specified, only events with comments containing the keyword are returned */\n  comment?: string\n  /** If specified, only events where all of these labels were added are returned */\n  addedLabels?: string[]\n  /** If specified, only events where all of these labels were removed are returned */\n  removedLabels?: string[]\n  reportTypes?: string[]\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  events: ComAtprotoAdminDefs.ModEventView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  subject?: string\n  /** Search subjects by keyword from comments */\n  comment?: string\n  /** Search subjects reported after a given timestamp */\n  reportedAfter?: string\n  /** Search subjects reported before a given timestamp */\n  reportedBefore?: string\n  /** Search subjects reviewed after a given timestamp */\n  reviewedAfter?: string\n  /** Search subjects reviewed before a given timestamp */\n  reviewedBefore?: string\n  /** By default, we don't include muted subjects in the results. Set this to true to include them. */\n  includeMuted?: boolean\n  /** Specify when fetching subjects in a certain state */\n  reviewState?: string\n  ignoreSubjects?: string[]\n  /** Get all subject statuses that were reviewed by a specific moderator */\n  lastReviewedBy?: string\n  sortField?: 'lastReviewedAt' | 'lastReportedAt'\n  sortDirection?: 'asc' | 'desc'\n  /** Get subjects that were taken down */\n  takendown?: boolean\n  /** Get subjects in unresolved appealed status */\n  appealed?: boolean\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  subjectStatuses: ComAtprotoAdminDefs.SubjectStatusView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {\n  /** DEPRECATED: use 'q' instead */\n  term?: string\n  q?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  repos: ComAtprotoAdminDefs.RepoView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  recipientDid: string\n  content: string\n  subject?: string\n  senderDid: string\n  /** Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers */\n  comment?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  sent: boolean\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  account: string\n  email: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  did: string\n  handle: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** ID of the template to be updated. */\n  id: string\n  /** Name of the template. */\n  name?: string\n  /** Content of the template, markdown supported, can contain variable placeholders. */\n  contentMarkdown?: string\n  /** Subject of the message, used in emails. */\n  subject?: string\n  /** DID of the user who is updating the template. */\n  updatedBy?: string\n  disabled?: boolean\n  [k: string]: unknown\n}\n\nexport type OutputSchema = ComAtprotoAdminDefs.CommunicationTemplateView\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminDefs from './defs'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | ComAtprotoAdminDefs.RepoBlobRef\n    | { $type: string; [k: string]: unknown }\n  takedown?: ComAtprotoAdminDefs.StatusAttr\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | ComAtprotoAdminDefs.RepoBlobRef\n    | { $type: string; [k: string]: unknown }\n  takedown?: ComAtprotoAdminDefs.StatusAttr\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle to resolve. */\n  handle: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  did: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  handle: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from './defs'\n\nexport interface QueryParams {\n  /** List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI. */\n  uriPatterns: string[]\n  /** Optional list of label sources (DIDs) to filter on. */\n  sources?: string[]\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  labels: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoModerationDefs from './defs'\nimport * as ComAtprotoAdminDefs from '../admin/defs'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  reason?: string\n  subject:\n    | ComAtprotoAdminDefs.RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  reportedBy: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** Flag for validating the records. */\n  validate?: boolean\n  writes: (Create | Update | Delete)[]\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n\n/** Create a new record. */\nexport interface Create {\n  collection: string\n  rkey?: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport function isCreate(v: unknown): v is Create {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.applyWrites#create'\n  )\n}\n\nexport function validateCreate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.applyWrites#create', v)\n}\n\n/** Update an existing record. */\nexport interface Update {\n  collection: string\n  rkey: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport function isUpdate(v: unknown): v is Update {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.applyWrites#update'\n  )\n}\n\nexport function validateUpdate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.applyWrites#update', v)\n}\n\n/** Delete an existing record. */\nexport interface Delete {\n  collection: string\n  rkey: string\n  [k: string]: unknown\n}\n\nexport function isDelete(v: unknown): v is Delete {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.applyWrites#delete'\n  )\n}\n\nexport function validateDelete(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.applyWrites#delete', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nexport function isObj(v: unknown): v is Record<string, unknown> {\n  return typeof v === 'object' && v !== null\n}\n\nexport function hasProp<K extends PropertyKey>(\n  data: object,\n  prop: K,\n): data is Record<K, unknown> {\n  return prop in data\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey?: string\n  /** Flag for validating the record. */\n  validate?: boolean\n  /** The record to create. */\n  record: {}\n  /** Compare and swap with the previous commit by CID. */\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  uri: string\n  cid: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey: string\n  /** Compare and swap with the previous record by CID. */\n  swapRecord?: string\n  /** Compare and swap with the previous commit by CID. */\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle or DID of the repo. */\n  repo: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  handle: string\n  did: string\n  didDoc: {}\n  collections: string[]\n  handleIsCorrect: boolean\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey: string\n  /** The CID of the version of the record. If not specified, then return the most recent version. */\n  cid?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  uri: string\n  cid?: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record type. */\n  collection: string\n  /** The number of records to return. */\n  limit?: number\n  cursor?: string\n  /** DEPRECATED: The lowest sort-ordered rkey to start from (exclusive) */\n  rkeyStart?: string\n  /** DEPRECATED: The highest sort-ordered rkey to stop at (exclusive) */\n  rkeyEnd?: string\n  /** Flag to reverse the order of the returned records. */\n  reverse?: boolean\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  records: Record[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Record {\n  uri: string\n  cid: string\n  value: {}\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.repo.listRecords#record'\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.listRecords#record', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The handle or DID of the repo. */\n  repo: string\n  /** The NSID of the record collection. */\n  collection: string\n  /** The key of the record. */\n  rkey: string\n  /** Flag for validating the record. */\n  validate?: boolean\n  /** The record to write. */\n  record: {}\n  /** Compare and swap with the previous record by CID. */\n  swapRecord?: string | null\n  /** Compare and swap with the previous commit by CID. */\n  swapCommit?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  uri: string\n  cid: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidSwapError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidSwap') return new InvalidSwapError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = string | Uint8Array\n\nexport interface OutputSchema {\n  blob: BlobRef\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: string\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  email: string\n  token: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class AccountNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class ExpiredTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidEmailError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountNotFound') return new AccountNotFoundError(e)\n    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)\n    if (e.error === 'InvalidToken') return new InvalidTokenError(e)\n    if (e.error === 'InvalidEmail') return new InvalidEmailError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  email?: string\n  handle: string\n  did?: string\n  inviteCode?: string\n  verificationCode?: string\n  verificationPhone?: string\n  password?: string\n  recoveryKey?: string\n  plcOp?: {}\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  didDoc?: {}\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidHandleError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidPasswordError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidInviteCodeError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class HandleNotAvailableError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class UnsupportedDomainError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class UnresolvableDidError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class IncompatibleDidDocError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidHandle') return new InvalidHandleError(e)\n    if (e.error === 'InvalidPassword') return new InvalidPasswordError(e)\n    if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e)\n    if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e)\n    if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e)\n    if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e)\n    if (e.error === 'IncompatibleDidDoc') return new IncompatibleDidDocError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  name: string\n  [k: string]: unknown\n}\n\nexport type OutputSchema = AppPassword\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n  }\n  return e\n}\n\nexport interface AppPassword {\n  name: string\n  password: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isAppPassword(v: unknown): v is AppPassword {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.createAppPassword#appPassword'\n  )\n}\n\nexport function validateAppPassword(v: unknown): ValidationResult {\n  return lexicons.validate(\n    'com.atproto.server.createAppPassword#appPassword',\n    v,\n  )\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  useCount: number\n  forAccount?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  code: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  codeCount: number\n  useCount: number\n  forAccounts?: string[]\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  codes: AccountCodes[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface AccountCodes {\n  account: string\n  codes: string[]\n  [k: string]: unknown\n}\n\nexport function isAccountCodes(v: unknown): v is AccountCodes {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.createInviteCodes#accountCodes'\n  )\n}\n\nexport function validateAccountCodes(v: unknown): ValidationResult {\n  return lexicons.validate(\n    'com.atproto.server.createInviteCodes#accountCodes',\n    v,\n  )\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** Handle or other identifier supported by the server for the authenticating user. */\n  identifier: string\n  password: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  didDoc?: {}\n  email?: string\n  emailConfirmed?: boolean\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  did: string\n  password: string\n  token: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class ExpiredTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)\n    if (e.error === 'InvalidToken') return new InvalidTokenError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  inviteCodeRequired?: boolean\n  phoneVerificationRequired?: boolean\n  availableUserDomains: string[]\n  links?: Links\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Links {\n  privacyPolicy?: string\n  termsOfService?: string\n  [k: string]: unknown\n}\n\nexport function isLinks(v: unknown): v is Links {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.describeServer#links'\n  )\n}\n\nexport function validateLinks(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.describeServer#links', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoServerDefs from './defs'\n\nexport interface QueryParams {\n  includeUsed?: boolean\n  createAvailable?: boolean\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  codes: ComAtprotoServerDefs.InviteCode[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class DuplicateCreateError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'DuplicateCreate') return new DuplicateCreateError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  handle: string\n  did: string\n  email?: string\n  emailConfirmed?: boolean\n  didDoc?: {}\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  passwords: AppPassword[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n  }\n  return e\n}\n\nexport interface AppPassword {\n  name: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isAppPassword(v: unknown): v is AppPassword {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.listAppPasswords#appPassword'\n  )\n}\n\nexport function validateAppPassword(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.listAppPasswords#appPassword', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  didDoc?: {}\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class AccountTakedownError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'AccountTakedown') return new AccountTakedownError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  tokenRequired: boolean\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  email: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** The did to reserve a new did:key for */\n  did?: string\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  /** Public signing key in the form of a did:key. */\n  signingKey: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  token: string\n  password: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class ExpiredTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)\n    if (e.error === 'InvalidToken') return new InvalidTokenError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  name: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  email: string\n  /** Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed. */\n  token?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport class ExpiredTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidTokenError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class TokenRequiredError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'ExpiredToken') return new ExpiredTokenError(e)\n    if (e.error === 'InvalidToken') return new InvalidTokenError(e)\n    if (e.error === 'TokenRequired') return new TokenRequiredError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The CID of the blob to fetch */\n  cid: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  cids: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  root: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class HeadNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'HeadNotFound') return new HeadNotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cid: string\n  rev: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class RepoNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'RepoNotFound') return new RepoNotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  collection: string\n  rkey: string\n  /** An optional past commit CID. */\n  commit?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** The revision of the repo to catch up from. */\n  since?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n  /** Optional revision of the repo to list blobs since. */\n  since?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  cids: string[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  repos: Repo[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Repo {\n  did: string\n  head: string\n  rev: string\n  [k: string]: unknown\n}\n\nexport function isRepo(v: unknown): v is Repo {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.listRepos#repo'\n  )\n}\n\nexport function validateRepo(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.listRepos#repo', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** Hostname of the service that is notifying of update. */\n  hostname: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  /** Hostname of the service that is requesting to be crawled. */\n  hostname: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  activated: boolean\n  placeInQueue?: number\n  estimatedTimeMs?: number\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from '../label/defs'\n\nexport interface QueryParams {\n  since?: number\n  limit?: number\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  labels: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n}\n\nexport type InputSchema = string | Uint8Array\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/vnd.ipld.car'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: Uint8Array\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  /** The DID of the repo. */\n  did: string\n}\n\nexport type InputSchema = string | Uint8Array\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: string\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  phoneNumber: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  handle: string\n  did: string\n  plcOp: {}\n  [k: string]: unknown\n}\n\nexport interface OutputSchema {\n  accessJwt: string\n  refreshJwt: string\n  handle: string\n  did: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class InvalidHandleError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidPasswordError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class InvalidInviteCodeError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class HandleNotAvailableError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class UnsupportedDomainError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class UnresolvableDidError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class IncompatibleDidDocError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'InvalidHandle') return new InvalidHandleError(e)\n    if (e.error === 'InvalidPassword') return new InvalidPasswordError(e)\n    if (e.error === 'InvalidInviteCode') return new InvalidInviteCodeError(e)\n    if (e.error === 'HandleNotAvailable') return new HandleNotAvailableError(e)\n    if (e.error === 'UnsupportedDomain') return new UnsupportedDomainError(e)\n    if (e.error === 'UnresolvableDid') return new UnresolvableDidError(e)\n    if (e.error === 'IncompatibleDidDoc') return new IncompatibleDidDocError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  preferences: AppBskyActorDefs.Preferences\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n}\n\nexport type InputSchema = undefined\nexport type OutputSchema = AppBskyActorDefs.ProfileViewDetailed\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  actors: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  profiles: AppBskyActorDefs.ProfileViewDetailed[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  actors: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  preferences: AppBskyActorDefs.Preferences\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  /** DEPRECATED: use 'q' instead. */\n  term?: string\n  /** Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. */\n  q?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  actors: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from './defs'\n\nexport interface QueryParams {\n  /** DEPRECATED: use 'q' instead. */\n  term?: string\n  /** Search query prefix; not a full query string. */\n  q?: string\n  limit?: number\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  actors: AppBskyActorDefs.ProfileViewBasic[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  did: string\n  feeds: Feed[]\n  links?: Links\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Feed {\n  uri: string\n  [k: string]: unknown\n}\n\nexport function isFeed(v: unknown): v is Feed {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.describeFeedGenerator#feed'\n  )\n}\n\nexport function validateFeed(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.describeFeedGenerator#feed', v)\n}\n\nexport interface Links {\n  privacyPolicy?: string\n  termsOfService?: string\n  [k: string]: unknown\n}\n\nexport function isLinks(v: unknown): v is Links {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.describeFeedGenerator#links'\n  )\n}\n\nexport function validateLinks(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.describeFeedGenerator#links', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feeds: AppBskyFeedDefs.GeneratorView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class BlockedActorError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class BlockedByActorError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'BlockedActor') return new BlockedActorError(e)\n    if (e.error === 'BlockedByActor') return new BlockedByActorError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n  filter?:\n    | 'posts_with_replies'\n    | 'posts_no_replies'\n    | 'posts_with_media'\n    | 'posts_and_author_threads'\n    | (string & {})\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class BlockedActorError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport class BlockedByActorError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'BlockedActor') return new BlockedActorError(e)\n    if (e.error === 'BlockedByActor') return new BlockedByActorError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  feed: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class UnknownFeedError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'UnknownFeed') return new UnknownFeedError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  feed: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  view: AppBskyFeedDefs.GeneratorView\n  isOnline: boolean\n  isValid: boolean\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  feeds: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  feeds: AppBskyFeedDefs.GeneratorView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  feed: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.SkeletonFeedPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class UnknownFeedError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'UnknownFeed') return new UnknownFeedError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  uri: string\n  cid?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  uri: string\n  cid?: string\n  cursor?: string\n  likes: Like[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Like {\n  indexedAt: string\n  createdAt: string\n  actor: AppBskyActorDefs.ProfileView\n  [k: string]: unknown\n}\n\nexport function isLike(v: unknown): v is Like {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.getLikes#like'\n  )\n}\n\nexport function validateLike(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.getLikes#like', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  list: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class UnknownListError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'UnknownList') return new UnknownListError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  uri: string\n  depth?: number\n  parentHeight?: number\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  thread:\n    | AppBskyFeedDefs.ThreadViewPost\n    | AppBskyFeedDefs.NotFoundPost\n    | AppBskyFeedDefs.BlockedPost\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class NotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'NotFound') return new NotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  uris: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  posts: AppBskyFeedDefs.PostView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  uri: string\n  cid?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  uri: string\n  cid?: string\n  cursor?: string\n  repostedBy: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feeds: AppBskyFeedDefs.GeneratorView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  algorithm?: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feed: AppBskyFeedDefs.FeedViewPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from './defs'\n\nexport interface QueryParams {\n  /** Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. */\n  q: string\n  limit?: number\n  /** Optional pagination mechanism; may not necessarily allow scrolling through entire result set. */\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  /** Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits. */\n  hitsTotal?: number\n  posts: AppBskyFeedDefs.PostView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class BadQueryStringError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'BadQueryString') return new BadQueryStringError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  blocks: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  subject: AppBskyActorDefs.ProfileView\n  cursor?: string\n  followers: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  subject: AppBskyActorDefs.ProfileView\n  cursor?: string\n  follows: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyGraphDefs from './defs'\n\nexport interface QueryParams {\n  list: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  list: AppBskyGraphDefs.ListView\n  items: AppBskyGraphDefs.ListItemView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyGraphDefs from './defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  lists: AppBskyGraphDefs.ListView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyGraphDefs from './defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  lists: AppBskyGraphDefs.ListView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyGraphDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  lists: AppBskyGraphDefs.ListView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  mutes: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyGraphDefs from './defs'\n\nexport interface QueryParams {\n  actor: string\n  others?: string[]\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  actor?: string\n  relationships: (\n    | AppBskyGraphDefs.Relationship\n    | AppBskyGraphDefs.NotFoundActor\n    | { $type: string; [k: string]: unknown }\n  )[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class ActorNotFoundError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'ActorNotFound') return new ActorNotFoundError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\n\nexport interface QueryParams {\n  actor: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  suggestions: AppBskyActorDefs.ProfileView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  actor: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  list: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  actor: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  list: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {\n  seenAt?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  count: number\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n  seenAt?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  notifications: Notification[]\n  seenAt?: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Notification {\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileView\n  /** Expected values are 'like', 'repost', 'follow', 'mention', 'reply', and 'quote'. */\n  reason:\n    | 'like'\n    | 'repost'\n    | 'follow'\n    | 'mention'\n    | 'reply'\n    | 'quote'\n    | (string & {})\n  reasonSubject?: string\n  record: {}\n  isRead: boolean\n  indexedAt: string\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isNotification(v: unknown): v is Notification {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.notification.listNotifications#notification'\n  )\n}\n\nexport function validateNotification(v: unknown): ValidationResult {\n  return lexicons.validate(\n    'app.bsky.notification.listNotifications#notification',\n    v,\n  )\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  serviceDid: string\n  token: string\n  platform: 'ios' | 'android' | 'web' | (string & {})\n  appId: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport interface InputSchema {\n  seenAt: string\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n  qp?: QueryParams\n  encoding: 'application/json'\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyFeedDefs from '../feed/defs'\n\nexport interface QueryParams {\n  limit?: number\n  cursor?: string\n  query?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  feeds: AppBskyFeedDefs.GeneratorView[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface QueryParams {}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  suggestions: Suggestion[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n  }\n  return e\n}\n\nexport interface Suggestion {\n  tag: string\n  subjectType: 'actor' | 'feed' | (string & {})\n  subject: string\n  [k: string]: unknown\n}\n\nexport function isSuggestion(v: unknown): v is Suggestion {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.unspecced.getTaggedSuggestions#suggestion'\n  )\n}\n\nexport function validateSuggestion(v: unknown): ValidationResult {\n  return lexicons.validate(\n    'app.bsky.unspecced.getTaggedSuggestions#suggestion',\n    v,\n  )\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyUnspeccedDefs from './defs'\n\nexport interface QueryParams {\n  /** Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax. */\n  q: string\n  /** If true, acts as fast/simple 'typeahead' query. */\n  typeahead?: boolean\n  limit?: number\n  /** Optional pagination mechanism; may not necessarily allow scrolling through entire result set. */\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  /** Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits. */\n  hitsTotal?: number\n  actors: AppBskyUnspeccedDefs.SkeletonSearchActor[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class BadQueryStringError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'BadQueryString') return new BadQueryStringError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyUnspeccedDefs from './defs'\n\nexport interface QueryParams {\n  /** Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. */\n  q: string\n  limit?: number\n  /** Optional pagination mechanism; may not necessarily allow scrolling through entire result set. */\n  cursor?: string\n}\n\nexport type InputSchema = undefined\n\nexport interface OutputSchema {\n  cursor?: string\n  /** Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits. */\n  hitsTotal?: number\n  posts: AppBskyUnspeccedDefs.SkeletonSearchPost[]\n  [k: string]: unknown\n}\n\nexport interface CallOptions {\n  headers?: Headers\n}\n\nexport interface Response {\n  success: boolean\n  headers: Headers\n  data: OutputSchema\n}\n\nexport class BadQueryStringError extends XRPCError {\n  constructor(src: XRPCError) {\n    super(src.status, src.error, src.message, src.headers)\n  }\n}\n\nexport function toKnownErr(e: any) {\n  if (e instanceof XRPCError) {\n    if (e.error === 'BadQueryString') return new BadQueryStringError(e)\n  }\n  return e\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../repo/strongRef'\nimport * as ComAtprotoModerationDefs from '../moderation/defs'\nimport * as ComAtprotoServerDefs from '../server/defs'\nimport * as ComAtprotoLabelDefs from '../label/defs'\n\nexport interface StatusAttr {\n  applied: boolean\n  ref?: string\n  [k: string]: unknown\n}\n\nexport function isStatusAttr(v: unknown): v is StatusAttr {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#statusAttr'\n  )\n}\n\nexport function validateStatusAttr(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#statusAttr', v)\n}\n\nexport interface ModEventView {\n  id: number\n  event:\n    | ModEventTakedown\n    | ModEventReverseTakedown\n    | ModEventComment\n    | ModEventReport\n    | ModEventLabel\n    | ModEventAcknowledge\n    | ModEventEscalate\n    | ModEventMute\n    | ModEventEmail\n    | ModEventResolveAppeal\n    | { $type: string; [k: string]: unknown }\n  subject:\n    | RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  subjectBlobCids: string[]\n  createdBy: string\n  createdAt: string\n  creatorHandle?: string\n  subjectHandle?: string\n  [k: string]: unknown\n}\n\nexport function isModEventView(v: unknown): v is ModEventView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventView'\n  )\n}\n\nexport function validateModEventView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventView', v)\n}\n\nexport interface ModEventViewDetail {\n  id: number\n  event:\n    | ModEventTakedown\n    | ModEventReverseTakedown\n    | ModEventComment\n    | ModEventReport\n    | ModEventLabel\n    | ModEventAcknowledge\n    | ModEventEscalate\n    | ModEventMute\n    | ModEventEmail\n    | ModEventResolveAppeal\n    | { $type: string; [k: string]: unknown }\n  subject:\n    | RepoView\n    | RepoViewNotFound\n    | RecordView\n    | RecordViewNotFound\n    | { $type: string; [k: string]: unknown }\n  subjectBlobs: BlobView[]\n  createdBy: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isModEventViewDetail(v: unknown): v is ModEventViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventViewDetail'\n  )\n}\n\nexport function validateModEventViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventViewDetail', v)\n}\n\nexport interface ReportView {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  comment?: string\n  subjectRepoHandle?: string\n  subject:\n    | RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  reportedBy: string\n  createdAt: string\n  resolvedByActionIds: number[]\n  [k: string]: unknown\n}\n\nexport function isReportView(v: unknown): v is ReportView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#reportView'\n  )\n}\n\nexport function validateReportView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#reportView', v)\n}\n\nexport interface SubjectStatusView {\n  id: number\n  subject:\n    | RepoRef\n    | ComAtprotoRepoStrongRef.Main\n    | { $type: string; [k: string]: unknown }\n  subjectBlobCids?: string[]\n  subjectRepoHandle?: string\n  /** Timestamp referencing when the last update was made to the moderation status of the subject */\n  updatedAt: string\n  /** Timestamp referencing the first moderation status impacting event was emitted on the subject */\n  createdAt: string\n  reviewState: SubjectReviewState\n  /** Sticky comment on the subject. */\n  comment?: string\n  muteUntil?: string\n  lastReviewedBy?: string\n  lastReviewedAt?: string\n  lastReportedAt?: string\n  /** Timestamp referencing when the author of the subject appealed a moderation action */\n  lastAppealedAt?: string\n  takendown?: boolean\n  /** True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators. */\n  appealed?: boolean\n  suspendUntil?: string\n  [k: string]: unknown\n}\n\nexport function isSubjectStatusView(v: unknown): v is SubjectStatusView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#subjectStatusView'\n  )\n}\n\nexport function validateSubjectStatusView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#subjectStatusView', v)\n}\n\nexport interface ReportViewDetail {\n  id: number\n  reasonType: ComAtprotoModerationDefs.ReasonType\n  comment?: string\n  subject:\n    | RepoView\n    | RepoViewNotFound\n    | RecordView\n    | RecordViewNotFound\n    | { $type: string; [k: string]: unknown }\n  subjectStatus?: SubjectStatusView\n  reportedBy: string\n  createdAt: string\n  resolvedByActions: ModEventView[]\n  [k: string]: unknown\n}\n\nexport function isReportViewDetail(v: unknown): v is ReportViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#reportViewDetail'\n  )\n}\n\nexport function validateReportViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#reportViewDetail', v)\n}\n\nexport interface RepoView {\n  did: string\n  handle: string\n  email?: string\n  relatedRecords: {}[]\n  indexedAt: string\n  moderation: Moderation\n  invitedBy?: ComAtprotoServerDefs.InviteCode\n  invitesDisabled?: boolean\n  inviteNote?: string\n  [k: string]: unknown\n}\n\nexport function isRepoView(v: unknown): v is RepoView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoView'\n  )\n}\n\nexport function validateRepoView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoView', v)\n}\n\nexport interface RepoViewDetail {\n  did: string\n  handle: string\n  email?: string\n  relatedRecords: {}[]\n  indexedAt: string\n  moderation: ModerationDetail\n  labels?: ComAtprotoLabelDefs.Label[]\n  invitedBy?: ComAtprotoServerDefs.InviteCode\n  invites?: ComAtprotoServerDefs.InviteCode[]\n  invitesDisabled?: boolean\n  inviteNote?: string\n  emailConfirmedAt?: string\n  [k: string]: unknown\n}\n\nexport function isRepoViewDetail(v: unknown): v is RepoViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoViewDetail'\n  )\n}\n\nexport function validateRepoViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoViewDetail', v)\n}\n\nexport interface AccountView {\n  did: string\n  handle: string\n  email?: string\n  relatedRecords?: {}[]\n  indexedAt: string\n  invitedBy?: ComAtprotoServerDefs.InviteCode\n  invites?: ComAtprotoServerDefs.InviteCode[]\n  invitesDisabled?: boolean\n  emailConfirmedAt?: string\n  inviteNote?: string\n  [k: string]: unknown\n}\n\nexport function isAccountView(v: unknown): v is AccountView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#accountView'\n  )\n}\n\nexport function validateAccountView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#accountView', v)\n}\n\nexport interface RepoViewNotFound {\n  did: string\n  [k: string]: unknown\n}\n\nexport function isRepoViewNotFound(v: unknown): v is RepoViewNotFound {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoViewNotFound'\n  )\n}\n\nexport function validateRepoViewNotFound(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoViewNotFound', v)\n}\n\nexport interface RepoRef {\n  did: string\n  [k: string]: unknown\n}\n\nexport function isRepoRef(v: unknown): v is RepoRef {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoRef'\n  )\n}\n\nexport function validateRepoRef(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoRef', v)\n}\n\nexport interface RepoBlobRef {\n  did: string\n  cid: string\n  recordUri?: string\n  [k: string]: unknown\n}\n\nexport function isRepoBlobRef(v: unknown): v is RepoBlobRef {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#repoBlobRef'\n  )\n}\n\nexport function validateRepoBlobRef(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#repoBlobRef', v)\n}\n\nexport interface RecordView {\n  uri: string\n  cid: string\n  value: {}\n  blobCids: string[]\n  indexedAt: string\n  moderation: Moderation\n  repo: RepoView\n  [k: string]: unknown\n}\n\nexport function isRecordView(v: unknown): v is RecordView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#recordView'\n  )\n}\n\nexport function validateRecordView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#recordView', v)\n}\n\nexport interface RecordViewDetail {\n  uri: string\n  cid: string\n  value: {}\n  blobs: BlobView[]\n  labels?: ComAtprotoLabelDefs.Label[]\n  indexedAt: string\n  moderation: ModerationDetail\n  repo: RepoView\n  [k: string]: unknown\n}\n\nexport function isRecordViewDetail(v: unknown): v is RecordViewDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#recordViewDetail'\n  )\n}\n\nexport function validateRecordViewDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#recordViewDetail', v)\n}\n\nexport interface RecordViewNotFound {\n  uri: string\n  [k: string]: unknown\n}\n\nexport function isRecordViewNotFound(v: unknown): v is RecordViewNotFound {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#recordViewNotFound'\n  )\n}\n\nexport function validateRecordViewNotFound(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#recordViewNotFound', v)\n}\n\nexport interface Moderation {\n  subjectStatus?: SubjectStatusView\n  [k: string]: unknown\n}\n\nexport function isModeration(v: unknown): v is Moderation {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#moderation'\n  )\n}\n\nexport function validateModeration(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#moderation', v)\n}\n\nexport interface ModerationDetail {\n  subjectStatus?: SubjectStatusView\n  [k: string]: unknown\n}\n\nexport function isModerationDetail(v: unknown): v is ModerationDetail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#moderationDetail'\n  )\n}\n\nexport function validateModerationDetail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#moderationDetail', v)\n}\n\nexport interface BlobView {\n  cid: string\n  mimeType: string\n  size: number\n  createdAt: string\n  details?:\n    | ImageDetails\n    | VideoDetails\n    | { $type: string; [k: string]: unknown }\n  moderation?: Moderation\n  [k: string]: unknown\n}\n\nexport function isBlobView(v: unknown): v is BlobView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#blobView'\n  )\n}\n\nexport function validateBlobView(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#blobView', v)\n}\n\nexport interface ImageDetails {\n  width: number\n  height: number\n  [k: string]: unknown\n}\n\nexport function isImageDetails(v: unknown): v is ImageDetails {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#imageDetails'\n  )\n}\n\nexport function validateImageDetails(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#imageDetails', v)\n}\n\nexport interface VideoDetails {\n  width: number\n  height: number\n  length: number\n  [k: string]: unknown\n}\n\nexport function isVideoDetails(v: unknown): v is VideoDetails {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#videoDetails'\n  )\n}\n\nexport function validateVideoDetails(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#videoDetails', v)\n}\n\nexport type SubjectReviewState =\n  | 'lex:com.atproto.admin.defs#reviewOpen'\n  | 'lex:com.atproto.admin.defs#reviewEscalated'\n  | 'lex:com.atproto.admin.defs#reviewClosed'\n  | (string & {})\n\n/** Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator */\nexport const REVIEWOPEN = 'com.atproto.admin.defs#reviewOpen'\n/** Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator */\nexport const REVIEWESCALATED = 'com.atproto.admin.defs#reviewEscalated'\n/** Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator */\nexport const REVIEWCLOSED = 'com.atproto.admin.defs#reviewClosed'\n\n/** Take down a subject permanently or temporarily */\nexport interface ModEventTakedown {\n  comment?: string\n  /** Indicates how long the takedown should be in effect before automatically expiring. */\n  durationInHours?: number\n  [k: string]: unknown\n}\n\nexport function isModEventTakedown(v: unknown): v is ModEventTakedown {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventTakedown'\n  )\n}\n\nexport function validateModEventTakedown(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventTakedown', v)\n}\n\n/** Revert take down action on a subject */\nexport interface ModEventReverseTakedown {\n  /** Describe reasoning behind the reversal. */\n  comment?: string\n  [k: string]: unknown\n}\n\nexport function isModEventReverseTakedown(\n  v: unknown,\n): v is ModEventReverseTakedown {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventReverseTakedown'\n  )\n}\n\nexport function validateModEventReverseTakedown(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventReverseTakedown', v)\n}\n\n/** Resolve appeal on a subject */\nexport interface ModEventResolveAppeal {\n  /** Describe resolution. */\n  comment?: string\n  [k: string]: unknown\n}\n\nexport function isModEventResolveAppeal(\n  v: unknown,\n): v is ModEventResolveAppeal {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventResolveAppeal'\n  )\n}\n\nexport function validateModEventResolveAppeal(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventResolveAppeal', v)\n}\n\n/** Add a comment to a subject */\nexport interface ModEventComment {\n  comment: string\n  /** Make the comment persistent on the subject */\n  sticky?: boolean\n  [k: string]: unknown\n}\n\nexport function isModEventComment(v: unknown): v is ModEventComment {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventComment'\n  )\n}\n\nexport function validateModEventComment(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventComment', v)\n}\n\n/** Report a subject */\nexport interface ModEventReport {\n  comment?: string\n  reportType: ComAtprotoModerationDefs.ReasonType\n  [k: string]: unknown\n}\n\nexport function isModEventReport(v: unknown): v is ModEventReport {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventReport'\n  )\n}\n\nexport function validateModEventReport(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventReport', v)\n}\n\n/** Apply/Negate labels on a subject */\nexport interface ModEventLabel {\n  comment?: string\n  createLabelVals: string[]\n  negateLabelVals: string[]\n  [k: string]: unknown\n}\n\nexport function isModEventLabel(v: unknown): v is ModEventLabel {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventLabel'\n  )\n}\n\nexport function validateModEventLabel(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventLabel', v)\n}\n\nexport interface ModEventAcknowledge {\n  comment?: string\n  [k: string]: unknown\n}\n\nexport function isModEventAcknowledge(v: unknown): v is ModEventAcknowledge {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventAcknowledge'\n  )\n}\n\nexport function validateModEventAcknowledge(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventAcknowledge', v)\n}\n\nexport interface ModEventEscalate {\n  comment?: string\n  [k: string]: unknown\n}\n\nexport function isModEventEscalate(v: unknown): v is ModEventEscalate {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventEscalate'\n  )\n}\n\nexport function validateModEventEscalate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventEscalate', v)\n}\n\n/** Mute incoming reports on a subject */\nexport interface ModEventMute {\n  comment?: string\n  /** Indicates how long the subject should remain muted. */\n  durationInHours: number\n  [k: string]: unknown\n}\n\nexport function isModEventMute(v: unknown): v is ModEventMute {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventMute'\n  )\n}\n\nexport function validateModEventMute(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventMute', v)\n}\n\n/** Unmute action on a subject */\nexport interface ModEventUnmute {\n  /** Describe reasoning behind the reversal. */\n  comment?: string\n  [k: string]: unknown\n}\n\nexport function isModEventUnmute(v: unknown): v is ModEventUnmute {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventUnmute'\n  )\n}\n\nexport function validateModEventUnmute(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventUnmute', v)\n}\n\n/** Keep a log of outgoing email to a user */\nexport interface ModEventEmail {\n  /** The subject line of the email sent to the user. */\n  subjectLine: string\n  /** Additional comment about the outgoing comm. */\n  comment?: string\n  [k: string]: unknown\n}\n\nexport function isModEventEmail(v: unknown): v is ModEventEmail {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#modEventEmail'\n  )\n}\n\nexport function validateModEventEmail(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.admin.defs#modEventEmail', v)\n}\n\nexport interface CommunicationTemplateView {\n  id: string\n  /** Name of the template. */\n  name: string\n  /** Content of the template, can contain markdown and variable placeholders. */\n  subject?: string\n  /** Subject of the message, used in emails. */\n  contentMarkdown: string\n  disabled: boolean\n  /** DID of the user who last updated the template. */\n  lastUpdatedBy: string\n  createdAt: string\n  updatedAt: string\n  [k: string]: unknown\n}\n\nexport function isCommunicationTemplateView(\n  v: unknown,\n): v is CommunicationTemplateView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.admin.defs#communicationTemplateView'\n  )\n}\n\nexport function validateCommunicationTemplateView(\n  v: unknown,\n): ValidationResult {\n  return lexicons.validate(\n    'com.atproto.admin.defs#communicationTemplateView',\n    v,\n  )\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\n/** Metadata tag on an atproto resource (eg, repo or record). */\nexport interface Label {\n  /** DID of the actor who created this label. */\n  src: string\n  /** AT URI of the record, repository (account), or other resource that this label applies to. */\n  uri: string\n  /** Optionally, CID specifying the specific version of 'uri' resource this label applies to. */\n  cid?: string\n  /** The short string name of the value or type of this label. */\n  val: string\n  /** If true, this is a negation label, overwriting a previous label. */\n  neg?: boolean\n  /** Timestamp when this label was created. */\n  cts: string\n  [k: string]: unknown\n}\n\nexport function isLabel(v: unknown): v is Label {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.defs#label'\n  )\n}\n\nexport function validateLabel(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.defs#label', v)\n}\n\n/** Metadata tags on an atproto record, published by the author within the record. */\nexport interface SelfLabels {\n  values: SelfLabel[]\n  [k: string]: unknown\n}\n\nexport function isSelfLabels(v: unknown): v is SelfLabels {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.defs#selfLabels'\n  )\n}\n\nexport function validateSelfLabels(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.defs#selfLabels', v)\n}\n\n/** Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel. */\nexport interface SelfLabel {\n  /** The short string name of the value or type of this label. */\n  val: string\n  [k: string]: unknown\n}\n\nexport function isSelfLabel(v: unknown): v is SelfLabel {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.defs#selfLabel'\n  )\n}\n\nexport function validateSelfLabel(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.defs#selfLabel', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from './defs'\n\nexport interface Labels {\n  seq: number\n  labels: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isLabels(v: unknown): v is Labels {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.subscribeLabels#labels'\n  )\n}\n\nexport function validateLabels(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.subscribeLabels#labels', v)\n}\n\nexport interface Info {\n  name: 'OutdatedCursor' | (string & {})\n  message?: string\n  [k: string]: unknown\n}\n\nexport function isInfo(v: unknown): v is Info {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.label.subscribeLabels#info'\n  )\n}\n\nexport function validateInfo(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.label.subscribeLabels#info', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport type ReasonType =\n  | 'com.atproto.moderation.defs#reasonSpam'\n  | 'com.atproto.moderation.defs#reasonViolation'\n  | 'com.atproto.moderation.defs#reasonMisleading'\n  | 'com.atproto.moderation.defs#reasonSexual'\n  | 'com.atproto.moderation.defs#reasonRude'\n  | 'com.atproto.moderation.defs#reasonOther'\n  | 'com.atproto.moderation.defs#reasonAppeal'\n  | (string & {})\n\n/** Spam: frequent unwanted promotion, replies, mentions */\nexport const REASONSPAM = 'com.atproto.moderation.defs#reasonSpam'\n/** Direct violation of server rules, laws, terms of service */\nexport const REASONVIOLATION = 'com.atproto.moderation.defs#reasonViolation'\n/** Misleading identity, affiliation, or content */\nexport const REASONMISLEADING = 'com.atproto.moderation.defs#reasonMisleading'\n/** Unwanted or mislabeled sexual content */\nexport const REASONSEXUAL = 'com.atproto.moderation.defs#reasonSexual'\n/** Rude, harassing, explicit, or otherwise unwelcoming behavior */\nexport const REASONRUDE = 'com.atproto.moderation.defs#reasonRude'\n/** Other: reports not falling under another report category */\nexport const REASONOTHER = 'com.atproto.moderation.defs#reasonOther'\n/** Appeal: appeal a previously taken moderation action */\nexport const REASONAPPEAL = 'com.atproto.moderation.defs#reasonAppeal'\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  uri: string\n  cid: string\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'com.atproto.repo.strongRef#main' ||\n      v.$type === 'com.atproto.repo.strongRef')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.repo.strongRef#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface InviteCode {\n  code: string\n  available: number\n  disabled: boolean\n  forAccount: string\n  createdBy: string\n  createdAt: string\n  uses: InviteCodeUse[]\n  [k: string]: unknown\n}\n\nexport function isInviteCode(v: unknown): v is InviteCode {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.defs#inviteCode'\n  )\n}\n\nexport function validateInviteCode(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.defs#inviteCode', v)\n}\n\nexport interface InviteCodeUse {\n  usedBy: string\n  usedAt: string\n  [k: string]: unknown\n}\n\nexport function isInviteCodeUse(v: unknown): v is InviteCodeUse {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.server.defs#inviteCodeUse'\n  )\n}\n\nexport function validateInviteCodeUse(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.server.defs#inviteCodeUse', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { Headers, XRPCError } from '@atproto/xrpc'\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Commit {\n  seq: number\n  rebase: boolean\n  tooBig: boolean\n  repo: string\n  commit: CID\n  prev?: CID | null\n  /** The rev of the emitted commit. */\n  rev: string\n  /** The rev of the last emitted commit from this repo. */\n  since: string | null\n  /** CAR file containing relevant blocks. */\n  blocks: Uint8Array\n  ops: RepoOp[]\n  blobs: CID[]\n  time: string\n  [k: string]: unknown\n}\n\nexport function isCommit(v: unknown): v is Commit {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#commit'\n  )\n}\n\nexport function validateCommit(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#commit', v)\n}\n\nexport interface Handle {\n  seq: number\n  did: string\n  handle: string\n  time: string\n  [k: string]: unknown\n}\n\nexport function isHandle(v: unknown): v is Handle {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#handle'\n  )\n}\n\nexport function validateHandle(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#handle', v)\n}\n\nexport interface Migrate {\n  seq: number\n  did: string\n  migrateTo: string | null\n  time: string\n  [k: string]: unknown\n}\n\nexport function isMigrate(v: unknown): v is Migrate {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#migrate'\n  )\n}\n\nexport function validateMigrate(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#migrate', v)\n}\n\nexport interface Tombstone {\n  seq: number\n  did: string\n  time: string\n  [k: string]: unknown\n}\n\nexport function isTombstone(v: unknown): v is Tombstone {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#tombstone'\n  )\n}\n\nexport function validateTombstone(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#tombstone', v)\n}\n\nexport interface Info {\n  name: 'OutdatedCursor' | (string & {})\n  message?: string\n  [k: string]: unknown\n}\n\nexport function isInfo(v: unknown): v is Info {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#info'\n  )\n}\n\nexport function validateInfo(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#info', v)\n}\n\n/** A repo operation, ie a write of a single record. For creates and updates, CID is the record's CID as of this operation. For deletes, it's null. */\nexport interface RepoOp {\n  action: 'create' | 'update' | 'delete' | (string & {})\n  path: string\n  cid: CID | null\n  [k: string]: unknown\n}\n\nexport function isRepoOp(v: unknown): v is RepoOp {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'com.atproto.sync.subscribeRepos#repoOp'\n  )\n}\n\nexport function validateRepoOp(v: unknown): ValidationResult {\n  return lexicons.validate('com.atproto.sync.subscribeRepos#repoOp', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\nimport * as AppBskyGraphDefs from '../graph/defs'\n\nexport interface ProfileViewBasic {\n  did: string\n  handle: string\n  displayName?: string\n  avatar?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isProfileViewBasic(v: unknown): v is ProfileViewBasic {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#profileViewBasic'\n  )\n}\n\nexport function validateProfileViewBasic(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#profileViewBasic', v)\n}\n\nexport interface ProfileView {\n  did: string\n  handle: string\n  displayName?: string\n  description?: string\n  avatar?: string\n  indexedAt?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isProfileView(v: unknown): v is ProfileView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#profileView'\n  )\n}\n\nexport function validateProfileView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#profileView', v)\n}\n\nexport interface ProfileViewDetailed {\n  did: string\n  handle: string\n  displayName?: string\n  description?: string\n  avatar?: string\n  banner?: string\n  followersCount?: number\n  followsCount?: number\n  postsCount?: number\n  indexedAt?: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  [k: string]: unknown\n}\n\nexport function isProfileViewDetailed(v: unknown): v is ProfileViewDetailed {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#profileViewDetailed'\n  )\n}\n\nexport function validateProfileViewDetailed(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#profileViewDetailed', v)\n}\n\nexport interface ViewerState {\n  muted?: boolean\n  mutedByList?: AppBskyGraphDefs.ListViewBasic\n  blockedBy?: boolean\n  blocking?: string\n  blockingByList?: AppBskyGraphDefs.ListViewBasic\n  following?: string\n  followedBy?: string\n  [k: string]: unknown\n}\n\nexport function isViewerState(v: unknown): v is ViewerState {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#viewerState'\n  )\n}\n\nexport function validateViewerState(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#viewerState', v)\n}\n\nexport type Preferences = (\n  | AdultContentPref\n  | ContentLabelPref\n  | SavedFeedsPref\n  | PersonalDetailsPref\n  | FeedViewPref\n  | ThreadViewPref\n  | InterestsPref\n  | { $type: string; [k: string]: unknown }\n)[]\n\nexport interface AdultContentPref {\n  enabled: boolean\n  [k: string]: unknown\n}\n\nexport function isAdultContentPref(v: unknown): v is AdultContentPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#adultContentPref'\n  )\n}\n\nexport function validateAdultContentPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#adultContentPref', v)\n}\n\nexport interface ContentLabelPref {\n  label: string\n  visibility: 'show' | 'warn' | 'hide' | (string & {})\n  [k: string]: unknown\n}\n\nexport function isContentLabelPref(v: unknown): v is ContentLabelPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#contentLabelPref'\n  )\n}\n\nexport function validateContentLabelPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#contentLabelPref', v)\n}\n\nexport interface SavedFeedsPref {\n  pinned: string[]\n  saved: string[]\n  [k: string]: unknown\n}\n\nexport function isSavedFeedsPref(v: unknown): v is SavedFeedsPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#savedFeedsPref'\n  )\n}\n\nexport function validateSavedFeedsPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#savedFeedsPref', v)\n}\n\nexport interface PersonalDetailsPref {\n  /** The birth date of account owner. */\n  birthDate?: string\n  [k: string]: unknown\n}\n\nexport function isPersonalDetailsPref(v: unknown): v is PersonalDetailsPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#personalDetailsPref'\n  )\n}\n\nexport function validatePersonalDetailsPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#personalDetailsPref', v)\n}\n\nexport interface FeedViewPref {\n  /** The URI of the feed, or an identifier which describes the feed. */\n  feed: string\n  /** Hide replies in the feed. */\n  hideReplies?: boolean\n  /** Hide replies in the feed if they are not by followed users. */\n  hideRepliesByUnfollowed?: boolean\n  /** Hide replies in the feed if they do not have this number of likes. */\n  hideRepliesByLikeCount?: number\n  /** Hide reposts in the feed. */\n  hideReposts?: boolean\n  /** Hide quote posts in the feed. */\n  hideQuotePosts?: boolean\n  [k: string]: unknown\n}\n\nexport function isFeedViewPref(v: unknown): v is FeedViewPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#feedViewPref'\n  )\n}\n\nexport function validateFeedViewPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#feedViewPref', v)\n}\n\nexport interface ThreadViewPref {\n  /** Sorting mode for threads. */\n  sort?: 'oldest' | 'newest' | 'most-likes' | 'random' | (string & {})\n  /** Show followed users at the top of all replies. */\n  prioritizeFollowedUsers?: boolean\n  [k: string]: unknown\n}\n\nexport function isThreadViewPref(v: unknown): v is ThreadViewPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#threadViewPref'\n  )\n}\n\nexport function validateThreadViewPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#threadViewPref', v)\n}\n\nexport interface InterestsPref {\n  /** A list of tags which describe the account owner's interests gathered during onboarding. */\n  tags: string[]\n  [k: string]: unknown\n}\n\nexport function isInterestsPref(v: unknown): v is InterestsPref {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.actor.defs#interestsPref'\n  )\n}\n\nexport function validateInterestsPref(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.defs#interestsPref', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface Record {\n  displayName?: string\n  description?: string\n  avatar?: BlobRef\n  banner?: BlobRef\n  labels?:\n    | ComAtprotoLabelDefs.SelfLabels\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.actor.profile#main' ||\n      v.$type === 'app.bsky.actor.profile')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.actor.profile#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  external: External\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.external#main' ||\n      v.$type === 'app.bsky.embed.external')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#main', v)\n}\n\nexport interface External {\n  uri: string\n  title: string\n  description: string\n  thumb?: BlobRef\n  [k: string]: unknown\n}\n\nexport function isExternal(v: unknown): v is External {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.external#external'\n  )\n}\n\nexport function validateExternal(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#external', v)\n}\n\nexport interface View {\n  external: ViewExternal\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.external#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#view', v)\n}\n\nexport interface ViewExternal {\n  uri: string\n  title: string\n  description: string\n  thumb?: string\n  [k: string]: unknown\n}\n\nexport function isViewExternal(v: unknown): v is ViewExternal {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.external#viewExternal'\n  )\n}\n\nexport function validateViewExternal(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.external#viewExternal', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  images: Image[]\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.images#main' ||\n      v.$type === 'app.bsky.embed.images')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#main', v)\n}\n\nexport interface Image {\n  image: BlobRef\n  alt: string\n  aspectRatio?: AspectRatio\n  [k: string]: unknown\n}\n\nexport function isImage(v: unknown): v is Image {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.embed.images#image'\n  )\n}\n\nexport function validateImage(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#image', v)\n}\n\n/** width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit. */\nexport interface AspectRatio {\n  width: number\n  height: number\n  [k: string]: unknown\n}\n\nexport function isAspectRatio(v: unknown): v is AspectRatio {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.images#aspectRatio'\n  )\n}\n\nexport function validateAspectRatio(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#aspectRatio', v)\n}\n\nexport interface View {\n  images: ViewImage[]\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.embed.images#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#view', v)\n}\n\nexport interface ViewImage {\n  thumb: string\n  fullsize: string\n  alt: string\n  aspectRatio?: AspectRatio\n  [k: string]: unknown\n}\n\nexport function isViewImage(v: unknown): v is ViewImage {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.images#viewImage'\n  )\n}\n\nexport function validateViewImage(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.images#viewImage', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\nimport * as AppBskyFeedDefs from '../feed/defs'\nimport * as AppBskyGraphDefs from '../graph/defs'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\nimport * as AppBskyEmbedImages from './images'\nimport * as AppBskyEmbedExternal from './external'\nimport * as AppBskyEmbedRecordWithMedia from './recordWithMedia'\n\nexport interface Main {\n  record: ComAtprotoRepoStrongRef.Main\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.record#main' ||\n      v.$type === 'app.bsky.embed.record')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#main', v)\n}\n\nexport interface View {\n  record:\n    | ViewRecord\n    | ViewNotFound\n    | ViewBlocked\n    | AppBskyFeedDefs.GeneratorView\n    | AppBskyGraphDefs.ListView\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.embed.record#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#view', v)\n}\n\nexport interface ViewRecord {\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileViewBasic\n  value: {}\n  labels?: ComAtprotoLabelDefs.Label[]\n  embeds?: (\n    | AppBskyEmbedImages.View\n    | AppBskyEmbedExternal.View\n    | View\n    | AppBskyEmbedRecordWithMedia.View\n    | { $type: string; [k: string]: unknown }\n  )[]\n  indexedAt: string\n  [k: string]: unknown\n}\n\nexport function isViewRecord(v: unknown): v is ViewRecord {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.record#viewRecord'\n  )\n}\n\nexport function validateViewRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#viewRecord', v)\n}\n\nexport interface ViewNotFound {\n  uri: string\n  notFound: true\n  [k: string]: unknown\n}\n\nexport function isViewNotFound(v: unknown): v is ViewNotFound {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.record#viewNotFound'\n  )\n}\n\nexport function validateViewNotFound(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#viewNotFound', v)\n}\n\nexport interface ViewBlocked {\n  uri: string\n  blocked: true\n  author: AppBskyFeedDefs.BlockedAuthor\n  [k: string]: unknown\n}\n\nexport function isViewBlocked(v: unknown): v is ViewBlocked {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.record#viewBlocked'\n  )\n}\n\nexport function validateViewBlocked(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.record#viewBlocked', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyEmbedRecord from './record'\nimport * as AppBskyEmbedImages from './images'\nimport * as AppBskyEmbedExternal from './external'\n\nexport interface Main {\n  record: AppBskyEmbedRecord.Main\n  media:\n    | AppBskyEmbedImages.Main\n    | AppBskyEmbedExternal.Main\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.embed.recordWithMedia#main' ||\n      v.$type === 'app.bsky.embed.recordWithMedia')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.recordWithMedia#main', v)\n}\n\nexport interface View {\n  record: AppBskyEmbedRecord.View\n  media:\n    | AppBskyEmbedImages.View\n    | AppBskyEmbedExternal.View\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isView(v: unknown): v is View {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.embed.recordWithMedia#view'\n  )\n}\n\nexport function validateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.embed.recordWithMedia#view', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as AppBskyEmbedImages from '../embed/images'\nimport * as AppBskyEmbedExternal from '../embed/external'\nimport * as AppBskyEmbedRecord from '../embed/record'\nimport * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\nimport * as AppBskyRichtextFacet from '../richtext/facet'\nimport * as AppBskyGraphDefs from '../graph/defs'\n\nexport interface PostView {\n  uri: string\n  cid: string\n  author: AppBskyActorDefs.ProfileViewBasic\n  record: {}\n  embed?:\n    | AppBskyEmbedImages.View\n    | AppBskyEmbedExternal.View\n    | AppBskyEmbedRecord.View\n    | AppBskyEmbedRecordWithMedia.View\n    | { $type: string; [k: string]: unknown }\n  replyCount?: number\n  repostCount?: number\n  likeCount?: number\n  indexedAt: string\n  viewer?: ViewerState\n  labels?: ComAtprotoLabelDefs.Label[]\n  threadgate?: ThreadgateView\n  [k: string]: unknown\n}\n\nexport function isPostView(v: unknown): v is PostView {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.defs#postView'\n  )\n}\n\nexport function validatePostView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#postView', v)\n}\n\nexport interface ViewerState {\n  repost?: string\n  like?: string\n  replyDisabled?: boolean\n  [k: string]: unknown\n}\n\nexport function isViewerState(v: unknown): v is ViewerState {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#viewerState'\n  )\n}\n\nexport function validateViewerState(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#viewerState', v)\n}\n\nexport interface FeedViewPost {\n  post: PostView\n  reply?: ReplyRef\n  reason?: ReasonRepost | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isFeedViewPost(v: unknown): v is FeedViewPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#feedViewPost'\n  )\n}\n\nexport function validateFeedViewPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#feedViewPost', v)\n}\n\nexport interface ReplyRef {\n  root:\n    | PostView\n    | NotFoundPost\n    | BlockedPost\n    | { $type: string; [k: string]: unknown }\n  parent:\n    | PostView\n    | NotFoundPost\n    | BlockedPost\n    | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isReplyRef(v: unknown): v is ReplyRef {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.defs#replyRef'\n  )\n}\n\nexport function validateReplyRef(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#replyRef', v)\n}\n\nexport interface ReasonRepost {\n  by: AppBskyActorDefs.ProfileViewBasic\n  indexedAt: string\n  [k: string]: unknown\n}\n\nexport function isReasonRepost(v: unknown): v is ReasonRepost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#reasonRepost'\n  )\n}\n\nexport function validateReasonRepost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#reasonRepost', v)\n}\n\nexport interface ThreadViewPost {\n  post: PostView\n  parent?:\n    | ThreadViewPost\n    | NotFoundPost\n    | BlockedPost\n    | { $type: string; [k: string]: unknown }\n  replies?: (\n    | ThreadViewPost\n    | NotFoundPost\n    | BlockedPost\n    | { $type: string; [k: string]: unknown }\n  )[]\n  [k: string]: unknown\n}\n\nexport function isThreadViewPost(v: unknown): v is ThreadViewPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#threadViewPost'\n  )\n}\n\nexport function validateThreadViewPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#threadViewPost', v)\n}\n\nexport interface NotFoundPost {\n  uri: string\n  notFound: true\n  [k: string]: unknown\n}\n\nexport function isNotFoundPost(v: unknown): v is NotFoundPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#notFoundPost'\n  )\n}\n\nexport function validateNotFoundPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#notFoundPost', v)\n}\n\nexport interface BlockedPost {\n  uri: string\n  blocked: true\n  author: BlockedAuthor\n  [k: string]: unknown\n}\n\nexport function isBlockedPost(v: unknown): v is BlockedPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#blockedPost'\n  )\n}\n\nexport function validateBlockedPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#blockedPost', v)\n}\n\nexport interface BlockedAuthor {\n  did: string\n  viewer?: AppBskyActorDefs.ViewerState\n  [k: string]: unknown\n}\n\nexport function isBlockedAuthor(v: unknown): v is BlockedAuthor {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#blockedAuthor'\n  )\n}\n\nexport function validateBlockedAuthor(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#blockedAuthor', v)\n}\n\nexport interface GeneratorView {\n  uri: string\n  cid: string\n  did: string\n  creator: AppBskyActorDefs.ProfileView\n  displayName: string\n  description?: string\n  descriptionFacets?: AppBskyRichtextFacet.Main[]\n  avatar?: string\n  likeCount?: number\n  viewer?: GeneratorViewerState\n  indexedAt: string\n  [k: string]: unknown\n}\n\nexport function isGeneratorView(v: unknown): v is GeneratorView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#generatorView'\n  )\n}\n\nexport function validateGeneratorView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#generatorView', v)\n}\n\nexport interface GeneratorViewerState {\n  like?: string\n  [k: string]: unknown\n}\n\nexport function isGeneratorViewerState(v: unknown): v is GeneratorViewerState {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#generatorViewerState'\n  )\n}\n\nexport function validateGeneratorViewerState(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#generatorViewerState', v)\n}\n\nexport interface SkeletonFeedPost {\n  post: string\n  reason?: SkeletonReasonRepost | { $type: string; [k: string]: unknown }\n  [k: string]: unknown\n}\n\nexport function isSkeletonFeedPost(v: unknown): v is SkeletonFeedPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#skeletonFeedPost'\n  )\n}\n\nexport function validateSkeletonFeedPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#skeletonFeedPost', v)\n}\n\nexport interface SkeletonReasonRepost {\n  repost: string\n  [k: string]: unknown\n}\n\nexport function isSkeletonReasonRepost(v: unknown): v is SkeletonReasonRepost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#skeletonReasonRepost'\n  )\n}\n\nexport function validateSkeletonReasonRepost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#skeletonReasonRepost', v)\n}\n\nexport interface ThreadgateView {\n  uri?: string\n  cid?: string\n  record?: {}\n  lists?: AppBskyGraphDefs.ListViewBasic[]\n  [k: string]: unknown\n}\n\nexport function isThreadgateView(v: unknown): v is ThreadgateView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.defs#threadgateView'\n  )\n}\n\nexport function validateThreadgateView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.defs#threadgateView', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyRichtextFacet from '../richtext/facet'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface Record {\n  did: string\n  displayName: string\n  description?: string\n  descriptionFacets?: AppBskyRichtextFacet.Main[]\n  avatar?: BlobRef\n  labels?:\n    | ComAtprotoLabelDefs.SelfLabels\n    | { $type: string; [k: string]: unknown }\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.generator#main' ||\n      v.$type === 'app.bsky.feed.generator')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.generator#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\n\nexport interface Record {\n  subject: ComAtprotoRepoStrongRef.Main\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.like#main' || v.$type === 'app.bsky.feed.like')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.like#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyRichtextFacet from '../richtext/facet'\nimport * as AppBskyEmbedImages from '../embed/images'\nimport * as AppBskyEmbedExternal from '../embed/external'\nimport * as AppBskyEmbedRecord from '../embed/record'\nimport * as AppBskyEmbedRecordWithMedia from '../embed/recordWithMedia'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\n\nexport interface Record {\n  text: string\n  /** Deprecated: replaced by app.bsky.richtext.facet. */\n  entities?: Entity[]\n  facets?: AppBskyRichtextFacet.Main[]\n  reply?: ReplyRef\n  embed?:\n    | AppBskyEmbedImages.Main\n    | AppBskyEmbedExternal.Main\n    | AppBskyEmbedRecord.Main\n    | AppBskyEmbedRecordWithMedia.Main\n    | { $type: string; [k: string]: unknown }\n  langs?: string[]\n  labels?:\n    | ComAtprotoLabelDefs.SelfLabels\n    | { $type: string; [k: string]: unknown }\n  /** Additional non-inline tags describing this post. */\n  tags?: string[]\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.post#main' || v.$type === 'app.bsky.feed.post')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#main', v)\n}\n\nexport interface ReplyRef {\n  root: ComAtprotoRepoStrongRef.Main\n  parent: ComAtprotoRepoStrongRef.Main\n  [k: string]: unknown\n}\n\nexport function isReplyRef(v: unknown): v is ReplyRef {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.post#replyRef'\n  )\n}\n\nexport function validateReplyRef(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#replyRef', v)\n}\n\n/** Deprecated: use facets instead. */\nexport interface Entity {\n  index: TextSlice\n  /** Expected values are 'mention' and 'link'. */\n  type: string\n  value: string\n  [k: string]: unknown\n}\n\nexport function isEntity(v: unknown): v is Entity {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.feed.post#entity'\n  )\n}\n\nexport function validateEntity(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#entity', v)\n}\n\n/** Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings. */\nexport interface TextSlice {\n  start: number\n  end: number\n  [k: string]: unknown\n}\n\nexport function isTextSlice(v: unknown): v is TextSlice {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.post#textSlice'\n  )\n}\n\nexport function validateTextSlice(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.post#textSlice', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoRepoStrongRef from '../../../com/atproto/repo/strongRef'\n\nexport interface Record {\n  subject: ComAtprotoRepoStrongRef.Main\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.repost#main' ||\n      v.$type === 'app.bsky.feed.repost')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.repost#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  post: string\n  allow?: (\n    | MentionRule\n    | FollowingRule\n    | ListRule\n    | { $type: string; [k: string]: unknown }\n  )[]\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.feed.threadgate#main' ||\n      v.$type === 'app.bsky.feed.threadgate')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.threadgate#main', v)\n}\n\n/** Allow replies from actors mentioned in your post. */\nexport interface MentionRule {\n  [k: string]: unknown\n}\n\nexport function isMentionRule(v: unknown): v is MentionRule {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.threadgate#mentionRule'\n  )\n}\n\nexport function validateMentionRule(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.threadgate#mentionRule', v)\n}\n\n/** Allow replies from actors you follow. */\nexport interface FollowingRule {\n  [k: string]: unknown\n}\n\nexport function isFollowingRule(v: unknown): v is FollowingRule {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.threadgate#followingRule'\n  )\n}\n\nexport function validateFollowingRule(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.threadgate#followingRule', v)\n}\n\n/** Allow replies from actors on a list. */\nexport interface ListRule {\n  list: string\n  [k: string]: unknown\n}\n\nexport function isListRule(v: unknown): v is ListRule {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.feed.threadgate#listRule'\n  )\n}\n\nexport function validateListRule(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.feed.threadgate#listRule', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  subject: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.graph.block#main' ||\n      v.$type === 'app.bsky.graph.block')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.block#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyActorDefs from '../actor/defs'\nimport * as AppBskyRichtextFacet from '../richtext/facet'\n\nexport interface ListViewBasic {\n  uri: string\n  cid: string\n  name: string\n  purpose: ListPurpose\n  avatar?: string\n  viewer?: ListViewerState\n  indexedAt?: string\n  [k: string]: unknown\n}\n\nexport function isListViewBasic(v: unknown): v is ListViewBasic {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.graph.defs#listViewBasic'\n  )\n}\n\nexport function validateListViewBasic(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.defs#listViewBasic', v)\n}\n\nexport interface ListView {\n  uri: string\n  cid: string\n  creator: AppBskyActorDefs.ProfileView\n  name: string\n  purpose: ListPurpose\n  description?: string\n  descriptionFacets?: AppBskyRichtextFacet.Main[]\n  avatar?: string\n  viewer?: ListViewerState\n  indexedAt: string\n  [k: string]: unknown\n}\n\nexport function isListView(v: unknown): v is ListView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.graph.defs#listView'\n  )\n}\n\nexport function validateListView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.defs#listView', v)\n}\n\nexport interface ListItemView {\n  uri: string\n  subject: AppBskyActorDefs.ProfileView\n  [k: string]: unknown\n}\n\nexport function isListItemView(v: unknown): v is ListItemView {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.graph.defs#listItemView'\n  )\n}\n\nexport function validateListItemView(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.defs#listItemView', v)\n}\n\nexport type ListPurpose =\n  | 'app.bsky.graph.defs#modlist'\n  | 'app.bsky.graph.defs#curatelist'\n  | (string & {})\n\n/** A list of actors to apply an aggregate moderation action (mute/block) on. */\nexport const MODLIST = 'app.bsky.graph.defs#modlist'\n/** A list of actors used for curation purposes such as list feeds or interaction gating. */\nexport const CURATELIST = 'app.bsky.graph.defs#curatelist'\n\nexport interface ListViewerState {\n  muted?: boolean\n  blocked?: string\n  [k: string]: unknown\n}\n\nexport function isListViewerState(v: unknown): v is ListViewerState {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.graph.defs#listViewerState'\n  )\n}\n\nexport function validateListViewerState(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.defs#listViewerState', v)\n}\n\n/** indicates that a handle or DID could not be resolved */\nexport interface NotFoundActor {\n  actor: string\n  notFound: true\n  [k: string]: unknown\n}\n\nexport function isNotFoundActor(v: unknown): v is NotFoundActor {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.graph.defs#notFoundActor'\n  )\n}\n\nexport function validateNotFoundActor(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.defs#notFoundActor', v)\n}\n\n/** lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object) */\nexport interface Relationship {\n  did: string\n  /** if the actor follows this DID, this is the AT-URI of the follow record */\n  following?: string\n  /** if the actor is followed by this DID, contains the AT-URI of the follow record */\n  followedBy?: string\n  [k: string]: unknown\n}\n\nexport function isRelationship(v: unknown): v is Relationship {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.graph.defs#relationship'\n  )\n}\n\nexport function validateRelationship(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.defs#relationship', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  subject: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.graph.follow#main' ||\n      v.$type === 'app.bsky.graph.follow')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.follow#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as AppBskyGraphDefs from './defs'\nimport * as AppBskyRichtextFacet from '../richtext/facet'\nimport * as ComAtprotoLabelDefs from '../../../com/atproto/label/defs'\n\nexport interface Record {\n  purpose: AppBskyGraphDefs.ListPurpose\n  name: string\n  description?: string\n  descriptionFacets?: AppBskyRichtextFacet.Main[]\n  avatar?: BlobRef\n  labels?:\n    | ComAtprotoLabelDefs.SelfLabels\n    | { $type: string; [k: string]: unknown }\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.graph.list#main' ||\n      v.$type === 'app.bsky.graph.list')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.list#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  subject: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.graph.listblock#main' ||\n      v.$type === 'app.bsky.graph.listblock')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.listblock#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Record {\n  subject: string\n  list: string\n  createdAt: string\n  [k: string]: unknown\n}\n\nexport function isRecord(v: unknown): v is Record {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.graph.listitem#main' ||\n      v.$type === 'app.bsky.graph.listitem')\n  )\n}\n\nexport function validateRecord(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.graph.listitem#main', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface Main {\n  index: ByteSlice\n  features: (Mention | Link | Tag | { $type: string; [k: string]: unknown })[]\n  [k: string]: unknown\n}\n\nexport function isMain(v: unknown): v is Main {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    (v.$type === 'app.bsky.richtext.facet#main' ||\n      v.$type === 'app.bsky.richtext.facet')\n  )\n}\n\nexport function validateMain(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#main', v)\n}\n\n/** A facet feature for actor mentions. */\nexport interface Mention {\n  did: string\n  [k: string]: unknown\n}\n\nexport function isMention(v: unknown): v is Mention {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.richtext.facet#mention'\n  )\n}\n\nexport function validateMention(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#mention', v)\n}\n\n/** A facet feature for links. */\nexport interface Link {\n  uri: string\n  [k: string]: unknown\n}\n\nexport function isLink(v: unknown): v is Link {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.richtext.facet#link'\n  )\n}\n\nexport function validateLink(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#link', v)\n}\n\n/** A hashtag. */\nexport interface Tag {\n  tag: string\n  [k: string]: unknown\n}\n\nexport function isTag(v: unknown): v is Tag {\n  return (\n    isObj(v) && hasProp(v, '$type') && v.$type === 'app.bsky.richtext.facet#tag'\n  )\n}\n\nexport function validateTag(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#tag', v)\n}\n\n/** A text segment. Start is inclusive, end is exclusive. Indices are for utf8-encoded strings. */\nexport interface ByteSlice {\n  byteStart: number\n  byteEnd: number\n  [k: string]: unknown\n}\n\nexport function isByteSlice(v: unknown): v is ByteSlice {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.richtext.facet#byteSlice'\n  )\n}\n\nexport function validateByteSlice(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.richtext.facet#byteSlice', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport { ValidationResult, BlobRef } from '@atproto/lexicon'\nimport { isObj, hasProp } from '../../../../util'\nimport { lexicons } from '../../../../lexicons'\nimport { CID } from 'multiformats/cid'\n\nexport interface SkeletonSearchPost {\n  uri: string\n  [k: string]: unknown\n}\n\nexport function isSkeletonSearchPost(v: unknown): v is SkeletonSearchPost {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.unspecced.defs#skeletonSearchPost'\n  )\n}\n\nexport function validateSkeletonSearchPost(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.unspecced.defs#skeletonSearchPost', v)\n}\n\nexport interface SkeletonSearchActor {\n  did: string\n  [k: string]: unknown\n}\n\nexport function isSkeletonSearchActor(v: unknown): v is SkeletonSearchActor {\n  return (\n    isObj(v) &&\n    hasProp(v, '$type') &&\n    v.$type === 'app.bsky.unspecced.defs#skeletonSearchActor'\n  )\n}\n\nexport function validateSkeletonSearchActor(v: unknown): ValidationResult {\n  return lexicons.validate('app.bsky.unspecced.defs#skeletonSearchActor', v)\n}\n","/**\n * GENERATED CODE - DO NOT MODIFY\n */\nimport {\n  Client as XrpcClient,\n  ServiceClient as XrpcServiceClient,\n} from '@atproto/xrpc'\nimport { schemas } from './lexicons'\nimport { CID } from 'multiformats/cid'\nimport * as ComAtprotoAdminCreateCommunicationTemplate from './types/com/atproto/admin/createCommunicationTemplate'\nimport * as ComAtprotoAdminDefs from './types/com/atproto/admin/defs'\nimport * as ComAtprotoAdminDeleteAccount from './types/com/atproto/admin/deleteAccount'\nimport * as ComAtprotoAdminDeleteCommunicationTemplate from './types/com/atproto/admin/deleteCommunicationTemplate'\nimport * as ComAtprotoAdminDisableAccountInvites from './types/com/atproto/admin/disableAccountInvites'\nimport * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes'\nimport * as ComAtprotoAdminEmitModerationEvent from './types/com/atproto/admin/emitModerationEvent'\nimport * as ComAtprotoAdminEnableAccountInvites from './types/com/atproto/admin/enableAccountInvites'\nimport * as ComAtprotoAdminGetAccountInfo from './types/com/atproto/admin/getAccountInfo'\nimport * as ComAtprotoAdminGetAccountInfos from './types/com/atproto/admin/getAccountInfos'\nimport * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes'\nimport * as ComAtprotoAdminGetModerationEvent from './types/com/atproto/admin/getModerationEvent'\nimport * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord'\nimport * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo'\nimport * as ComAtprotoAdminGetSubjectStatus from './types/com/atproto/admin/getSubjectStatus'\nimport * as ComAtprotoAdminListCommunicationTemplates from './types/com/atproto/admin/listCommunicationTemplates'\nimport * as ComAtprotoAdminQueryModerationEvents from './types/com/atproto/admin/queryModerationEvents'\nimport * as ComAtprotoAdminQueryModerationStatuses from './types/com/atproto/admin/queryModerationStatuses'\nimport * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos'\nimport * as ComAtprotoAdminSendEmail from './types/com/atproto/admin/sendEmail'\nimport * as ComAtprotoAdminUpdateAccountEmail from './types/com/atproto/admin/updateAccountEmail'\nimport * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle'\nimport * as ComAtprotoAdminUpdateCommunicationTemplate from './types/com/atproto/admin/updateCommunicationTemplate'\nimport * as ComAtprotoAdminUpdateSubjectStatus from './types/com/atproto/admin/updateSubjectStatus'\nimport * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle'\nimport * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle'\nimport * as ComAtprotoLabelDefs from './types/com/atproto/label/defs'\nimport * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels'\nimport * as ComAtprotoLabelSubscribeLabels from './types/com/atproto/label/subscribeLabels'\nimport * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport'\nimport * as ComAtprotoModerationDefs from './types/com/atproto/moderation/defs'\nimport * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites'\nimport * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord'\nimport * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord'\nimport * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo'\nimport * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord'\nimport * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords'\nimport * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord'\nimport * as ComAtprotoRepoStrongRef from './types/com/atproto/repo/strongRef'\nimport * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob'\nimport * as ComAtprotoServerConfirmEmail from './types/com/atproto/server/confirmEmail'\nimport * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount'\nimport * as ComAtprotoServerCreateAppPassword from './types/com/atproto/server/createAppPassword'\nimport * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode'\nimport * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes'\nimport * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession'\nimport * as ComAtprotoServerDefs from './types/com/atproto/server/defs'\nimport * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount'\nimport * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession'\nimport * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer'\nimport * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes'\nimport * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession'\nimport * as ComAtprotoServerListAppPasswords from './types/com/atproto/server/listAppPasswords'\nimport * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession'\nimport * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete'\nimport * as ComAtprotoServerRequestEmailConfirmation from './types/com/atproto/server/requestEmailConfirmation'\nimport * as ComAtprotoServerRequestEmailUpdate from './types/com/atproto/server/requestEmailUpdate'\nimport * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset'\nimport * as ComAtprotoServerReserveSigningKey from './types/com/atproto/server/reserveSigningKey'\nimport * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword'\nimport * as ComAtprotoServerRevokeAppPassword from './types/com/atproto/server/revokeAppPassword'\nimport * as ComAtprotoServerUpdateEmail from './types/com/atproto/server/updateEmail'\nimport * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob'\nimport * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks'\nimport * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout'\nimport * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead'\nimport * as ComAtprotoSyncGetLatestCommit from './types/com/atproto/sync/getLatestCommit'\nimport * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord'\nimport * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo'\nimport * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs'\nimport * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos'\nimport * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate'\nimport * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl'\nimport * as ComAtprotoSyncSubscribeRepos from './types/com/atproto/sync/subscribeRepos'\nimport * as ComAtprotoTempCheckSignupQueue from './types/com/atproto/temp/checkSignupQueue'\nimport * as ComAtprotoTempFetchLabels from './types/com/atproto/temp/fetchLabels'\nimport * as ComAtprotoTempImportRepo from './types/com/atproto/temp/importRepo'\nimport * as ComAtprotoTempPushBlob from './types/com/atproto/temp/pushBlob'\nimport * as ComAtprotoTempRequestPhoneVerification from './types/com/atproto/temp/requestPhoneVerification'\nimport * as ComAtprotoTempTransferAccount from './types/com/atproto/temp/transferAccount'\nimport * as AppBskyActorDefs from './types/app/bsky/actor/defs'\nimport * as AppBskyActorGetPreferences from './types/app/bsky/actor/getPreferences'\nimport * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile'\nimport * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles'\nimport * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions'\nimport * as AppBskyActorProfile from './types/app/bsky/actor/profile'\nimport * as AppBskyActorPutPreferences from './types/app/bsky/actor/putPreferences'\nimport * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors'\nimport * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead'\nimport * as AppBskyEmbedExternal from './types/app/bsky/embed/external'\nimport * as AppBskyEmbedImages from './types/app/bsky/embed/images'\nimport * as AppBskyEmbedRecord from './types/app/bsky/embed/record'\nimport * as AppBskyEmbedRecordWithMedia from './types/app/bsky/embed/recordWithMedia'\nimport * as AppBskyFeedDefs from './types/app/bsky/feed/defs'\nimport * as AppBskyFeedDescribeFeedGenerator from './types/app/bsky/feed/describeFeedGenerator'\nimport * as AppBskyFeedGenerator from './types/app/bsky/feed/generator'\nimport * as AppBskyFeedGetActorFeeds from './types/app/bsky/feed/getActorFeeds'\nimport * as AppBskyFeedGetActorLikes from './types/app/bsky/feed/getActorLikes'\nimport * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed'\nimport * as AppBskyFeedGetFeed from './types/app/bsky/feed/getFeed'\nimport * as AppBskyFeedGetFeedGenerator from './types/app/bsky/feed/getFeedGenerator'\nimport * as AppBskyFeedGetFeedGenerators from './types/app/bsky/feed/getFeedGenerators'\nimport * as AppBskyFeedGetFeedSkeleton from './types/app/bsky/feed/getFeedSkeleton'\nimport * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes'\nimport * as AppBskyFeedGetListFeed from './types/app/bsky/feed/getListFeed'\nimport * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread'\nimport * as AppBskyFeedGetPosts from './types/app/bsky/feed/getPosts'\nimport * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy'\nimport * as AppBskyFeedGetSuggestedFeeds from './types/app/bsky/feed/getSuggestedFeeds'\nimport * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline'\nimport * as AppBskyFeedLike from './types/app/bsky/feed/like'\nimport * as AppBskyFeedPost from './types/app/bsky/feed/post'\nimport * as AppBskyFeedRepost from './types/app/bsky/feed/repost'\nimport * as AppBskyFeedSearchPosts from './types/app/bsky/feed/searchPosts'\nimport * as AppBskyFeedThreadgate from './types/app/bsky/feed/threadgate'\nimport * as AppBskyGraphBlock from './types/app/bsky/graph/block'\nimport * as AppBskyGraphDefs from './types/app/bsky/graph/defs'\nimport * as AppBskyGraphFollow from './types/app/bsky/graph/follow'\nimport * as AppBskyGraphGetBlocks from './types/app/bsky/graph/getBlocks'\nimport * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers'\nimport * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows'\nimport * as AppBskyGraphGetList from './types/app/bsky/graph/getList'\nimport * as AppBskyGraphGetListBlocks from './types/app/bsky/graph/getListBlocks'\nimport * as AppBskyGraphGetListMutes from './types/app/bsky/graph/getListMutes'\nimport * as AppBskyGraphGetLists from './types/app/bsky/graph/getLists'\nimport * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes'\nimport * as AppBskyGraphGetRelationships from './types/app/bsky/graph/getRelationships'\nimport * as AppBskyGraphGetSuggestedFollowsByActor from './types/app/bsky/graph/getSuggestedFollowsByActor'\nimport * as AppBskyGraphList from './types/app/bsky/graph/list'\nimport * as AppBskyGraphListblock from './types/app/bsky/graph/listblock'\nimport * as AppBskyGraphListitem from './types/app/bsky/graph/listitem'\nimport * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor'\nimport * as AppBskyGraphMuteActorList from './types/app/bsky/graph/muteActorList'\nimport * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor'\nimport * as AppBskyGraphUnmuteActorList from './types/app/bsky/graph/unmuteActorList'\nimport * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount'\nimport * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications'\nimport * as AppBskyNotificationRegisterPush from './types/app/bsky/notification/registerPush'\nimport * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen'\nimport * as AppBskyRichtextFacet from './types/app/bsky/richtext/facet'\nimport * as AppBskyUnspeccedDefs from './types/app/bsky/unspecced/defs'\nimport * as AppBskyUnspeccedGetPopularFeedGenerators from './types/app/bsky/unspecced/getPopularFeedGenerators'\nimport * as AppBskyUnspeccedGetTaggedSuggestions from './types/app/bsky/unspecced/getTaggedSuggestions'\nimport * as AppBskyUnspeccedSearchActorsSkeleton from './types/app/bsky/unspecced/searchActorsSkeleton'\nimport * as AppBskyUnspeccedSearchPostsSkeleton from './types/app/bsky/unspecced/searchPostsSkeleton'\n\nexport * as ComAtprotoAdminCreateCommunicationTemplate from './types/com/atproto/admin/createCommunicationTemplate'\nexport * as ComAtprotoAdminDefs from './types/com/atproto/admin/defs'\nexport * as ComAtprotoAdminDeleteAccount from './types/com/atproto/admin/deleteAccount'\nexport * as ComAtprotoAdminDeleteCommunicationTemplate from './types/com/atproto/admin/deleteCommunicationTemplate'\nexport * as ComAtprotoAdminDisableAccountInvites from './types/com/atproto/admin/disableAccountInvites'\nexport * as ComAtprotoAdminDisableInviteCodes from './types/com/atproto/admin/disableInviteCodes'\nexport * as ComAtprotoAdminEmitModerationEvent from './types/com/atproto/admin/emitModerationEvent'\nexport * as ComAtprotoAdminEnableAccountInvites from './types/com/atproto/admin/enableAccountInvites'\nexport * as ComAtprotoAdminGetAccountInfo from './types/com/atproto/admin/getAccountInfo'\nexport * as ComAtprotoAdminGetAccountInfos from './types/com/atproto/admin/getAccountInfos'\nexport * as ComAtprotoAdminGetInviteCodes from './types/com/atproto/admin/getInviteCodes'\nexport * as ComAtprotoAdminGetModerationEvent from './types/com/atproto/admin/getModerationEvent'\nexport * as ComAtprotoAdminGetRecord from './types/com/atproto/admin/getRecord'\nexport * as ComAtprotoAdminGetRepo from './types/com/atproto/admin/getRepo'\nexport * as ComAtprotoAdminGetSubjectStatus from './types/com/atproto/admin/getSubjectStatus'\nexport * as ComAtprotoAdminListCommunicationTemplates from './types/com/atproto/admin/listCommunicationTemplates'\nexport * as ComAtprotoAdminQueryModerationEvents from './types/com/atproto/admin/queryModerationEvents'\nexport * as ComAtprotoAdminQueryModerationStatuses from './types/com/atproto/admin/queryModerationStatuses'\nexport * as ComAtprotoAdminSearchRepos from './types/com/atproto/admin/searchRepos'\nexport * as ComAtprotoAdminSendEmail from './types/com/atproto/admin/sendEmail'\nexport * as ComAtprotoAdminUpdateAccountEmail from './types/com/atproto/admin/updateAccountEmail'\nexport * as ComAtprotoAdminUpdateAccountHandle from './types/com/atproto/admin/updateAccountHandle'\nexport * as ComAtprotoAdminUpdateCommunicationTemplate from './types/com/atproto/admin/updateCommunicationTemplate'\nexport * as ComAtprotoAdminUpdateSubjectStatus from './types/com/atproto/admin/updateSubjectStatus'\nexport * as ComAtprotoIdentityResolveHandle from './types/com/atproto/identity/resolveHandle'\nexport * as ComAtprotoIdentityUpdateHandle from './types/com/atproto/identity/updateHandle'\nexport * as ComAtprotoLabelDefs from './types/com/atproto/label/defs'\nexport * as ComAtprotoLabelQueryLabels from './types/com/atproto/label/queryLabels'\nexport * as ComAtprotoLabelSubscribeLabels from './types/com/atproto/label/subscribeLabels'\nexport * as ComAtprotoModerationCreateReport from './types/com/atproto/moderation/createReport'\nexport * as ComAtprotoModerationDefs from './types/com/atproto/moderation/defs'\nexport * as ComAtprotoRepoApplyWrites from './types/com/atproto/repo/applyWrites'\nexport * as ComAtprotoRepoCreateRecord from './types/com/atproto/repo/createRecord'\nexport * as ComAtprotoRepoDeleteRecord from './types/com/atproto/repo/deleteRecord'\nexport * as ComAtprotoRepoDescribeRepo from './types/com/atproto/repo/describeRepo'\nexport * as ComAtprotoRepoGetRecord from './types/com/atproto/repo/getRecord'\nexport * as ComAtprotoRepoListRecords from './types/com/atproto/repo/listRecords'\nexport * as ComAtprotoRepoPutRecord from './types/com/atproto/repo/putRecord'\nexport * as ComAtprotoRepoStrongRef from './types/com/atproto/repo/strongRef'\nexport * as ComAtprotoRepoUploadBlob from './types/com/atproto/repo/uploadBlob'\nexport * as ComAtprotoServerConfirmEmail from './types/com/atproto/server/confirmEmail'\nexport * as ComAtprotoServerCreateAccount from './types/com/atproto/server/createAccount'\nexport * as ComAtprotoServerCreateAppPassword from './types/com/atproto/server/createAppPassword'\nexport * as ComAtprotoServerCreateInviteCode from './types/com/atproto/server/createInviteCode'\nexport * as ComAtprotoServerCreateInviteCodes from './types/com/atproto/server/createInviteCodes'\nexport * as ComAtprotoServerCreateSession from './types/com/atproto/server/createSession'\nexport * as ComAtprotoServerDefs from './types/com/atproto/server/defs'\nexport * as ComAtprotoServerDeleteAccount from './types/com/atproto/server/deleteAccount'\nexport * as ComAtprotoServerDeleteSession from './types/com/atproto/server/deleteSession'\nexport * as ComAtprotoServerDescribeServer from './types/com/atproto/server/describeServer'\nexport * as ComAtprotoServerGetAccountInviteCodes from './types/com/atproto/server/getAccountInviteCodes'\nexport * as ComAtprotoServerGetSession from './types/com/atproto/server/getSession'\nexport * as ComAtprotoServerListAppPasswords from './types/com/atproto/server/listAppPasswords'\nexport * as ComAtprotoServerRefreshSession from './types/com/atproto/server/refreshSession'\nexport * as ComAtprotoServerRequestAccountDelete from './types/com/atproto/server/requestAccountDelete'\nexport * as ComAtprotoServerRequestEmailConfirmation from './types/com/atproto/server/requestEmailConfirmation'\nexport * as ComAtprotoServerRequestEmailUpdate from './types/com/atproto/server/requestEmailUpdate'\nexport * as ComAtprotoServerRequestPasswordReset from './types/com/atproto/server/requestPasswordReset'\nexport * as ComAtprotoServerReserveSigningKey from './types/com/atproto/server/reserveSigningKey'\nexport * as ComAtprotoServerResetPassword from './types/com/atproto/server/resetPassword'\nexport * as ComAtprotoServerRevokeAppPassword from './types/com/atproto/server/revokeAppPassword'\nexport * as ComAtprotoServerUpdateEmail from './types/com/atproto/server/updateEmail'\nexport * as ComAtprotoSyncGetBlob from './types/com/atproto/sync/getBlob'\nexport * as ComAtprotoSyncGetBlocks from './types/com/atproto/sync/getBlocks'\nexport * as ComAtprotoSyncGetCheckout from './types/com/atproto/sync/getCheckout'\nexport * as ComAtprotoSyncGetHead from './types/com/atproto/sync/getHead'\nexport * as ComAtprotoSyncGetLatestCommit from './types/com/atproto/sync/getLatestCommit'\nexport * as ComAtprotoSyncGetRecord from './types/com/atproto/sync/getRecord'\nexport * as ComAtprotoSyncGetRepo from './types/com/atproto/sync/getRepo'\nexport * as ComAtprotoSyncListBlobs from './types/com/atproto/sync/listBlobs'\nexport * as ComAtprotoSyncListRepos from './types/com/atproto/sync/listRepos'\nexport * as ComAtprotoSyncNotifyOfUpdate from './types/com/atproto/sync/notifyOfUpdate'\nexport * as ComAtprotoSyncRequestCrawl from './types/com/atproto/sync/requestCrawl'\nexport * as ComAtprotoSyncSubscribeRepos from './types/com/atproto/sync/subscribeRepos'\nexport * as ComAtprotoTempCheckSignupQueue from './types/com/atproto/temp/checkSignupQueue'\nexport * as ComAtprotoTempFetchLabels from './types/com/atproto/temp/fetchLabels'\nexport * as ComAtprotoTempImportRepo from './types/com/atproto/temp/importRepo'\nexport * as ComAtprotoTempPushBlob from './types/com/atproto/temp/pushBlob'\nexport * as ComAtprotoTempRequestPhoneVerification from './types/com/atproto/temp/requestPhoneVerification'\nexport * as ComAtprotoTempTransferAccount from './types/com/atproto/temp/transferAccount'\nexport * as AppBskyActorDefs from './types/app/bsky/actor/defs'\nexport * as AppBskyActorGetPreferences from './types/app/bsky/actor/getPreferences'\nexport * as AppBskyActorGetProfile from './types/app/bsky/actor/getProfile'\nexport * as AppBskyActorGetProfiles from './types/app/bsky/actor/getProfiles'\nexport * as AppBskyActorGetSuggestions from './types/app/bsky/actor/getSuggestions'\nexport * as AppBskyActorProfile from './types/app/bsky/actor/profile'\nexport * as AppBskyActorPutPreferences from './types/app/bsky/actor/putPreferences'\nexport * as AppBskyActorSearchActors from './types/app/bsky/actor/searchActors'\nexport * as AppBskyActorSearchActorsTypeahead from './types/app/bsky/actor/searchActorsTypeahead'\nexport * as AppBskyEmbedExternal from './types/app/bsky/embed/external'\nexport * as AppBskyEmbedImages from './types/app/bsky/embed/images'\nexport * as AppBskyEmbedRecord from './types/app/bsky/embed/record'\nexport * as AppBskyEmbedRecordWithMedia from './types/app/bsky/embed/recordWithMedia'\nexport * as AppBskyFeedDefs from './types/app/bsky/feed/defs'\nexport * as AppBskyFeedDescribeFeedGenerator from './types/app/bsky/feed/describeFeedGenerator'\nexport * as AppBskyFeedGenerator from './types/app/bsky/feed/generator'\nexport * as AppBskyFeedGetActorFeeds from './types/app/bsky/feed/getActorFeeds'\nexport * as AppBskyFeedGetActorLikes from './types/app/bsky/feed/getActorLikes'\nexport * as AppBskyFeedGetAuthorFeed from './types/app/bsky/feed/getAuthorFeed'\nexport * as AppBskyFeedGetFeed from './types/app/bsky/feed/getFeed'\nexport * as AppBskyFeedGetFeedGenerator from './types/app/bsky/feed/getFeedGenerator'\nexport * as AppBskyFeedGetFeedGenerators from './types/app/bsky/feed/getFeedGenerators'\nexport * as AppBskyFeedGetFeedSkeleton from './types/app/bsky/feed/getFeedSkeleton'\nexport * as AppBskyFeedGetLikes from './types/app/bsky/feed/getLikes'\nexport * as AppBskyFeedGetListFeed from './types/app/bsky/feed/getListFeed'\nexport * as AppBskyFeedGetPostThread from './types/app/bsky/feed/getPostThread'\nexport * as AppBskyFeedGetPosts from './types/app/bsky/feed/getPosts'\nexport * as AppBskyFeedGetRepostedBy from './types/app/bsky/feed/getRepostedBy'\nexport * as AppBskyFeedGetSuggestedFeeds from './types/app/bsky/feed/getSuggestedFeeds'\nexport * as AppBskyFeedGetTimeline from './types/app/bsky/feed/getTimeline'\nexport * as AppBskyFeedLike from './types/app/bsky/feed/like'\nexport * as AppBskyFeedPost from './types/app/bsky/feed/post'\nexport * as AppBskyFeedRepost from './types/app/bsky/feed/repost'\nexport * as AppBskyFeedSearchPosts from './types/app/bsky/feed/searchPosts'\nexport * as AppBskyFeedThreadgate from './types/app/bsky/feed/threadgate'\nexport * as AppBskyGraphBlock from './types/app/bsky/graph/block'\nexport * as AppBskyGraphDefs from './types/app/bsky/graph/defs'\nexport * as AppBskyGraphFollow from './types/app/bsky/graph/follow'\nexport * as AppBskyGraphGetBlocks from './types/app/bsky/graph/getBlocks'\nexport * as AppBskyGraphGetFollowers from './types/app/bsky/graph/getFollowers'\nexport * as AppBskyGraphGetFollows from './types/app/bsky/graph/getFollows'\nexport * as AppBskyGraphGetList from './types/app/bsky/graph/getList'\nexport * as AppBskyGraphGetListBlocks from './types/app/bsky/graph/getListBlocks'\nexport * as AppBskyGraphGetListMutes from './types/app/bsky/graph/getListMutes'\nexport * as AppBskyGraphGetLists from './types/app/bsky/graph/getLists'\nexport * as AppBskyGraphGetMutes from './types/app/bsky/graph/getMutes'\nexport * as AppBskyGraphGetRelationships from './types/app/bsky/graph/getRelationships'\nexport * as AppBskyGraphGetSuggestedFollowsByActor from './types/app/bsky/graph/getSuggestedFollowsByActor'\nexport * as AppBskyGraphList from './types/app/bsky/graph/list'\nexport * as AppBskyGraphListblock from './types/app/bsky/graph/listblock'\nexport * as AppBskyGraphListitem from './types/app/bsky/graph/listitem'\nexport * as AppBskyGraphMuteActor from './types/app/bsky/graph/muteActor'\nexport * as AppBskyGraphMuteActorList from './types/app/bsky/graph/muteActorList'\nexport * as AppBskyGraphUnmuteActor from './types/app/bsky/graph/unmuteActor'\nexport * as AppBskyGraphUnmuteActorList from './types/app/bsky/graph/unmuteActorList'\nexport * as AppBskyNotificationGetUnreadCount from './types/app/bsky/notification/getUnreadCount'\nexport * as AppBskyNotificationListNotifications from './types/app/bsky/notification/listNotifications'\nexport * as AppBskyNotificationRegisterPush from './types/app/bsky/notification/registerPush'\nexport * as AppBskyNotificationUpdateSeen from './types/app/bsky/notification/updateSeen'\nexport * as AppBskyRichtextFacet from './types/app/bsky/richtext/facet'\nexport * as AppBskyUnspeccedDefs from './types/app/bsky/unspecced/defs'\nexport * as AppBskyUnspeccedGetPopularFeedGenerators from './types/app/bsky/unspecced/getPopularFeedGenerators'\nexport * as AppBskyUnspeccedGetTaggedSuggestions from './types/app/bsky/unspecced/getTaggedSuggestions'\nexport * as AppBskyUnspeccedSearchActorsSkeleton from './types/app/bsky/unspecced/searchActorsSkeleton'\nexport * as AppBskyUnspeccedSearchPostsSkeleton from './types/app/bsky/unspecced/searchPostsSkeleton'\n\nexport const COM_ATPROTO_ADMIN = {\n  DefsReviewOpen: 'com.atproto.admin.defs#reviewOpen',\n  DefsReviewEscalated: 'com.atproto.admin.defs#reviewEscalated',\n  DefsReviewClosed: 'com.atproto.admin.defs#reviewClosed',\n}\nexport const COM_ATPROTO_MODERATION = {\n  DefsReasonSpam: 'com.atproto.moderation.defs#reasonSpam',\n  DefsReasonViolation: 'com.atproto.moderation.defs#reasonViolation',\n  DefsReasonMisleading: 'com.atproto.moderation.defs#reasonMisleading',\n  DefsReasonSexual: 'com.atproto.moderation.defs#reasonSexual',\n  DefsReasonRude: 'com.atproto.moderation.defs#reasonRude',\n  DefsReasonOther: 'com.atproto.moderation.defs#reasonOther',\n  DefsReasonAppeal: 'com.atproto.moderation.defs#reasonAppeal',\n}\nexport const APP_BSKY_GRAPH = {\n  DefsModlist: 'app.bsky.graph.defs#modlist',\n  DefsCuratelist: 'app.bsky.graph.defs#curatelist',\n}\n\nexport class AtpBaseClient {\n  xrpc: XrpcClient = new XrpcClient()\n\n  constructor() {\n    this.xrpc.addLexicons(schemas)\n  }\n\n  service(serviceUri: string | URL): AtpServiceClient {\n    return new AtpServiceClient(this, this.xrpc.service(serviceUri))\n  }\n}\n\nexport class AtpServiceClient {\n  _baseClient: AtpBaseClient\n  xrpc: XrpcServiceClient\n  com: ComNS\n  app: AppNS\n\n  constructor(baseClient: AtpBaseClient, xrpcService: XrpcServiceClient) {\n    this._baseClient = baseClient\n    this.xrpc = xrpcService\n    this.com = new ComNS(this)\n    this.app = new AppNS(this)\n  }\n\n  setHeader(key: string, value: string): void {\n    this.xrpc.setHeader(key, value)\n  }\n}\n\nexport class ComNS {\n  _service: AtpServiceClient\n  atproto: ComAtprotoNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.atproto = new ComAtprotoNS(service)\n  }\n}\n\nexport class ComAtprotoNS {\n  _service: AtpServiceClient\n  admin: ComAtprotoAdminNS\n  identity: ComAtprotoIdentityNS\n  label: ComAtprotoLabelNS\n  moderation: ComAtprotoModerationNS\n  repo: ComAtprotoRepoNS\n  server: ComAtprotoServerNS\n  sync: ComAtprotoSyncNS\n  temp: ComAtprotoTempNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.admin = new ComAtprotoAdminNS(service)\n    this.identity = new ComAtprotoIdentityNS(service)\n    this.label = new ComAtprotoLabelNS(service)\n    this.moderation = new ComAtprotoModerationNS(service)\n    this.repo = new ComAtprotoRepoNS(service)\n    this.server = new ComAtprotoServerNS(service)\n    this.sync = new ComAtprotoSyncNS(service)\n    this.temp = new ComAtprotoTempNS(service)\n  }\n}\n\nexport class ComAtprotoAdminNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  createCommunicationTemplate(\n    data?: ComAtprotoAdminCreateCommunicationTemplate.InputSchema,\n    opts?: ComAtprotoAdminCreateCommunicationTemplate.CallOptions,\n  ): Promise<ComAtprotoAdminCreateCommunicationTemplate.Response> {\n    return this._service.xrpc\n      .call(\n        'com.atproto.admin.createCommunicationTemplate',\n        opts?.qp,\n        data,\n        opts,\n      )\n      .catch((e) => {\n        throw ComAtprotoAdminCreateCommunicationTemplate.toKnownErr(e)\n      })\n  }\n\n  deleteAccount(\n    data?: ComAtprotoAdminDeleteAccount.InputSchema,\n    opts?: ComAtprotoAdminDeleteAccount.CallOptions,\n  ): Promise<ComAtprotoAdminDeleteAccount.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.deleteAccount', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminDeleteAccount.toKnownErr(e)\n      })\n  }\n\n  deleteCommunicationTemplate(\n    data?: ComAtprotoAdminDeleteCommunicationTemplate.InputSchema,\n    opts?: ComAtprotoAdminDeleteCommunicationTemplate.CallOptions,\n  ): Promise<ComAtprotoAdminDeleteCommunicationTemplate.Response> {\n    return this._service.xrpc\n      .call(\n        'com.atproto.admin.deleteCommunicationTemplate',\n        opts?.qp,\n        data,\n        opts,\n      )\n      .catch((e) => {\n        throw ComAtprotoAdminDeleteCommunicationTemplate.toKnownErr(e)\n      })\n  }\n\n  disableAccountInvites(\n    data?: ComAtprotoAdminDisableAccountInvites.InputSchema,\n    opts?: ComAtprotoAdminDisableAccountInvites.CallOptions,\n  ): Promise<ComAtprotoAdminDisableAccountInvites.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.disableAccountInvites', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminDisableAccountInvites.toKnownErr(e)\n      })\n  }\n\n  disableInviteCodes(\n    data?: ComAtprotoAdminDisableInviteCodes.InputSchema,\n    opts?: ComAtprotoAdminDisableInviteCodes.CallOptions,\n  ): Promise<ComAtprotoAdminDisableInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.disableInviteCodes', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminDisableInviteCodes.toKnownErr(e)\n      })\n  }\n\n  emitModerationEvent(\n    data?: ComAtprotoAdminEmitModerationEvent.InputSchema,\n    opts?: ComAtprotoAdminEmitModerationEvent.CallOptions,\n  ): Promise<ComAtprotoAdminEmitModerationEvent.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.emitModerationEvent', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminEmitModerationEvent.toKnownErr(e)\n      })\n  }\n\n  enableAccountInvites(\n    data?: ComAtprotoAdminEnableAccountInvites.InputSchema,\n    opts?: ComAtprotoAdminEnableAccountInvites.CallOptions,\n  ): Promise<ComAtprotoAdminEnableAccountInvites.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.enableAccountInvites', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminEnableAccountInvites.toKnownErr(e)\n      })\n  }\n\n  getAccountInfo(\n    params?: ComAtprotoAdminGetAccountInfo.QueryParams,\n    opts?: ComAtprotoAdminGetAccountInfo.CallOptions,\n  ): Promise<ComAtprotoAdminGetAccountInfo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getAccountInfo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetAccountInfo.toKnownErr(e)\n      })\n  }\n\n  getAccountInfos(\n    params?: ComAtprotoAdminGetAccountInfos.QueryParams,\n    opts?: ComAtprotoAdminGetAccountInfos.CallOptions,\n  ): Promise<ComAtprotoAdminGetAccountInfos.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getAccountInfos', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetAccountInfos.toKnownErr(e)\n      })\n  }\n\n  getInviteCodes(\n    params?: ComAtprotoAdminGetInviteCodes.QueryParams,\n    opts?: ComAtprotoAdminGetInviteCodes.CallOptions,\n  ): Promise<ComAtprotoAdminGetInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getInviteCodes', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetInviteCodes.toKnownErr(e)\n      })\n  }\n\n  getModerationEvent(\n    params?: ComAtprotoAdminGetModerationEvent.QueryParams,\n    opts?: ComAtprotoAdminGetModerationEvent.CallOptions,\n  ): Promise<ComAtprotoAdminGetModerationEvent.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getModerationEvent', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetModerationEvent.toKnownErr(e)\n      })\n  }\n\n  getRecord(\n    params?: ComAtprotoAdminGetRecord.QueryParams,\n    opts?: ComAtprotoAdminGetRecord.CallOptions,\n  ): Promise<ComAtprotoAdminGetRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getRecord', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetRecord.toKnownErr(e)\n      })\n  }\n\n  getRepo(\n    params?: ComAtprotoAdminGetRepo.QueryParams,\n    opts?: ComAtprotoAdminGetRepo.CallOptions,\n  ): Promise<ComAtprotoAdminGetRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getRepo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetRepo.toKnownErr(e)\n      })\n  }\n\n  getSubjectStatus(\n    params?: ComAtprotoAdminGetSubjectStatus.QueryParams,\n    opts?: ComAtprotoAdminGetSubjectStatus.CallOptions,\n  ): Promise<ComAtprotoAdminGetSubjectStatus.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.getSubjectStatus', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminGetSubjectStatus.toKnownErr(e)\n      })\n  }\n\n  listCommunicationTemplates(\n    params?: ComAtprotoAdminListCommunicationTemplates.QueryParams,\n    opts?: ComAtprotoAdminListCommunicationTemplates.CallOptions,\n  ): Promise<ComAtprotoAdminListCommunicationTemplates.Response> {\n    return this._service.xrpc\n      .call(\n        'com.atproto.admin.listCommunicationTemplates',\n        params,\n        undefined,\n        opts,\n      )\n      .catch((e) => {\n        throw ComAtprotoAdminListCommunicationTemplates.toKnownErr(e)\n      })\n  }\n\n  queryModerationEvents(\n    params?: ComAtprotoAdminQueryModerationEvents.QueryParams,\n    opts?: ComAtprotoAdminQueryModerationEvents.CallOptions,\n  ): Promise<ComAtprotoAdminQueryModerationEvents.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.queryModerationEvents', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminQueryModerationEvents.toKnownErr(e)\n      })\n  }\n\n  queryModerationStatuses(\n    params?: ComAtprotoAdminQueryModerationStatuses.QueryParams,\n    opts?: ComAtprotoAdminQueryModerationStatuses.CallOptions,\n  ): Promise<ComAtprotoAdminQueryModerationStatuses.Response> {\n    return this._service.xrpc\n      .call(\n        'com.atproto.admin.queryModerationStatuses',\n        params,\n        undefined,\n        opts,\n      )\n      .catch((e) => {\n        throw ComAtprotoAdminQueryModerationStatuses.toKnownErr(e)\n      })\n  }\n\n  searchRepos(\n    params?: ComAtprotoAdminSearchRepos.QueryParams,\n    opts?: ComAtprotoAdminSearchRepos.CallOptions,\n  ): Promise<ComAtprotoAdminSearchRepos.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.searchRepos', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminSearchRepos.toKnownErr(e)\n      })\n  }\n\n  sendEmail(\n    data?: ComAtprotoAdminSendEmail.InputSchema,\n    opts?: ComAtprotoAdminSendEmail.CallOptions,\n  ): Promise<ComAtprotoAdminSendEmail.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.sendEmail', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminSendEmail.toKnownErr(e)\n      })\n  }\n\n  updateAccountEmail(\n    data?: ComAtprotoAdminUpdateAccountEmail.InputSchema,\n    opts?: ComAtprotoAdminUpdateAccountEmail.CallOptions,\n  ): Promise<ComAtprotoAdminUpdateAccountEmail.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.updateAccountEmail', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminUpdateAccountEmail.toKnownErr(e)\n      })\n  }\n\n  updateAccountHandle(\n    data?: ComAtprotoAdminUpdateAccountHandle.InputSchema,\n    opts?: ComAtprotoAdminUpdateAccountHandle.CallOptions,\n  ): Promise<ComAtprotoAdminUpdateAccountHandle.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.updateAccountHandle', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminUpdateAccountHandle.toKnownErr(e)\n      })\n  }\n\n  updateCommunicationTemplate(\n    data?: ComAtprotoAdminUpdateCommunicationTemplate.InputSchema,\n    opts?: ComAtprotoAdminUpdateCommunicationTemplate.CallOptions,\n  ): Promise<ComAtprotoAdminUpdateCommunicationTemplate.Response> {\n    return this._service.xrpc\n      .call(\n        'com.atproto.admin.updateCommunicationTemplate',\n        opts?.qp,\n        data,\n        opts,\n      )\n      .catch((e) => {\n        throw ComAtprotoAdminUpdateCommunicationTemplate.toKnownErr(e)\n      })\n  }\n\n  updateSubjectStatus(\n    data?: ComAtprotoAdminUpdateSubjectStatus.InputSchema,\n    opts?: ComAtprotoAdminUpdateSubjectStatus.CallOptions,\n  ): Promise<ComAtprotoAdminUpdateSubjectStatus.Response> {\n    return this._service.xrpc\n      .call('com.atproto.admin.updateSubjectStatus', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoAdminUpdateSubjectStatus.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoIdentityNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  resolveHandle(\n    params?: ComAtprotoIdentityResolveHandle.QueryParams,\n    opts?: ComAtprotoIdentityResolveHandle.CallOptions,\n  ): Promise<ComAtprotoIdentityResolveHandle.Response> {\n    return this._service.xrpc\n      .call('com.atproto.identity.resolveHandle', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoIdentityResolveHandle.toKnownErr(e)\n      })\n  }\n\n  updateHandle(\n    data?: ComAtprotoIdentityUpdateHandle.InputSchema,\n    opts?: ComAtprotoIdentityUpdateHandle.CallOptions,\n  ): Promise<ComAtprotoIdentityUpdateHandle.Response> {\n    return this._service.xrpc\n      .call('com.atproto.identity.updateHandle', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoIdentityUpdateHandle.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoLabelNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  queryLabels(\n    params?: ComAtprotoLabelQueryLabels.QueryParams,\n    opts?: ComAtprotoLabelQueryLabels.CallOptions,\n  ): Promise<ComAtprotoLabelQueryLabels.Response> {\n    return this._service.xrpc\n      .call('com.atproto.label.queryLabels', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoLabelQueryLabels.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoModerationNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  createReport(\n    data?: ComAtprotoModerationCreateReport.InputSchema,\n    opts?: ComAtprotoModerationCreateReport.CallOptions,\n  ): Promise<ComAtprotoModerationCreateReport.Response> {\n    return this._service.xrpc\n      .call('com.atproto.moderation.createReport', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoModerationCreateReport.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoRepoNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  applyWrites(\n    data?: ComAtprotoRepoApplyWrites.InputSchema,\n    opts?: ComAtprotoRepoApplyWrites.CallOptions,\n  ): Promise<ComAtprotoRepoApplyWrites.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.applyWrites', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoApplyWrites.toKnownErr(e)\n      })\n  }\n\n  createRecord(\n    data?: ComAtprotoRepoCreateRecord.InputSchema,\n    opts?: ComAtprotoRepoCreateRecord.CallOptions,\n  ): Promise<ComAtprotoRepoCreateRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.createRecord', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoCreateRecord.toKnownErr(e)\n      })\n  }\n\n  deleteRecord(\n    data?: ComAtprotoRepoDeleteRecord.InputSchema,\n    opts?: ComAtprotoRepoDeleteRecord.CallOptions,\n  ): Promise<ComAtprotoRepoDeleteRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.deleteRecord', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoDeleteRecord.toKnownErr(e)\n      })\n  }\n\n  describeRepo(\n    params?: ComAtprotoRepoDescribeRepo.QueryParams,\n    opts?: ComAtprotoRepoDescribeRepo.CallOptions,\n  ): Promise<ComAtprotoRepoDescribeRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.describeRepo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoDescribeRepo.toKnownErr(e)\n      })\n  }\n\n  getRecord(\n    params?: ComAtprotoRepoGetRecord.QueryParams,\n    opts?: ComAtprotoRepoGetRecord.CallOptions,\n  ): Promise<ComAtprotoRepoGetRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.getRecord', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoGetRecord.toKnownErr(e)\n      })\n  }\n\n  listRecords(\n    params?: ComAtprotoRepoListRecords.QueryParams,\n    opts?: ComAtprotoRepoListRecords.CallOptions,\n  ): Promise<ComAtprotoRepoListRecords.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.listRecords', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoListRecords.toKnownErr(e)\n      })\n  }\n\n  putRecord(\n    data?: ComAtprotoRepoPutRecord.InputSchema,\n    opts?: ComAtprotoRepoPutRecord.CallOptions,\n  ): Promise<ComAtprotoRepoPutRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.putRecord', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoPutRecord.toKnownErr(e)\n      })\n  }\n\n  uploadBlob(\n    data?: ComAtprotoRepoUploadBlob.InputSchema,\n    opts?: ComAtprotoRepoUploadBlob.CallOptions,\n  ): Promise<ComAtprotoRepoUploadBlob.Response> {\n    return this._service.xrpc\n      .call('com.atproto.repo.uploadBlob', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoRepoUploadBlob.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoServerNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  confirmEmail(\n    data?: ComAtprotoServerConfirmEmail.InputSchema,\n    opts?: ComAtprotoServerConfirmEmail.CallOptions,\n  ): Promise<ComAtprotoServerConfirmEmail.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.confirmEmail', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerConfirmEmail.toKnownErr(e)\n      })\n  }\n\n  createAccount(\n    data?: ComAtprotoServerCreateAccount.InputSchema,\n    opts?: ComAtprotoServerCreateAccount.CallOptions,\n  ): Promise<ComAtprotoServerCreateAccount.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createAccount', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateAccount.toKnownErr(e)\n      })\n  }\n\n  createAppPassword(\n    data?: ComAtprotoServerCreateAppPassword.InputSchema,\n    opts?: ComAtprotoServerCreateAppPassword.CallOptions,\n  ): Promise<ComAtprotoServerCreateAppPassword.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createAppPassword', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateAppPassword.toKnownErr(e)\n      })\n  }\n\n  createInviteCode(\n    data?: ComAtprotoServerCreateInviteCode.InputSchema,\n    opts?: ComAtprotoServerCreateInviteCode.CallOptions,\n  ): Promise<ComAtprotoServerCreateInviteCode.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createInviteCode', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateInviteCode.toKnownErr(e)\n      })\n  }\n\n  createInviteCodes(\n    data?: ComAtprotoServerCreateInviteCodes.InputSchema,\n    opts?: ComAtprotoServerCreateInviteCodes.CallOptions,\n  ): Promise<ComAtprotoServerCreateInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createInviteCodes', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateInviteCodes.toKnownErr(e)\n      })\n  }\n\n  createSession(\n    data?: ComAtprotoServerCreateSession.InputSchema,\n    opts?: ComAtprotoServerCreateSession.CallOptions,\n  ): Promise<ComAtprotoServerCreateSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.createSession', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerCreateSession.toKnownErr(e)\n      })\n  }\n\n  deleteAccount(\n    data?: ComAtprotoServerDeleteAccount.InputSchema,\n    opts?: ComAtprotoServerDeleteAccount.CallOptions,\n  ): Promise<ComAtprotoServerDeleteAccount.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.deleteAccount', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerDeleteAccount.toKnownErr(e)\n      })\n  }\n\n  deleteSession(\n    data?: ComAtprotoServerDeleteSession.InputSchema,\n    opts?: ComAtprotoServerDeleteSession.CallOptions,\n  ): Promise<ComAtprotoServerDeleteSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.deleteSession', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerDeleteSession.toKnownErr(e)\n      })\n  }\n\n  describeServer(\n    params?: ComAtprotoServerDescribeServer.QueryParams,\n    opts?: ComAtprotoServerDescribeServer.CallOptions,\n  ): Promise<ComAtprotoServerDescribeServer.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.describeServer', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerDescribeServer.toKnownErr(e)\n      })\n  }\n\n  getAccountInviteCodes(\n    params?: ComAtprotoServerGetAccountInviteCodes.QueryParams,\n    opts?: ComAtprotoServerGetAccountInviteCodes.CallOptions,\n  ): Promise<ComAtprotoServerGetAccountInviteCodes.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.getAccountInviteCodes', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerGetAccountInviteCodes.toKnownErr(e)\n      })\n  }\n\n  getSession(\n    params?: ComAtprotoServerGetSession.QueryParams,\n    opts?: ComAtprotoServerGetSession.CallOptions,\n  ): Promise<ComAtprotoServerGetSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.getSession', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerGetSession.toKnownErr(e)\n      })\n  }\n\n  listAppPasswords(\n    params?: ComAtprotoServerListAppPasswords.QueryParams,\n    opts?: ComAtprotoServerListAppPasswords.CallOptions,\n  ): Promise<ComAtprotoServerListAppPasswords.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.listAppPasswords', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoServerListAppPasswords.toKnownErr(e)\n      })\n  }\n\n  refreshSession(\n    data?: ComAtprotoServerRefreshSession.InputSchema,\n    opts?: ComAtprotoServerRefreshSession.CallOptions,\n  ): Promise<ComAtprotoServerRefreshSession.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.refreshSession', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRefreshSession.toKnownErr(e)\n      })\n  }\n\n  requestAccountDelete(\n    data?: ComAtprotoServerRequestAccountDelete.InputSchema,\n    opts?: ComAtprotoServerRequestAccountDelete.CallOptions,\n  ): Promise<ComAtprotoServerRequestAccountDelete.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.requestAccountDelete', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRequestAccountDelete.toKnownErr(e)\n      })\n  }\n\n  requestEmailConfirmation(\n    data?: ComAtprotoServerRequestEmailConfirmation.InputSchema,\n    opts?: ComAtprotoServerRequestEmailConfirmation.CallOptions,\n  ): Promise<ComAtprotoServerRequestEmailConfirmation.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.requestEmailConfirmation', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRequestEmailConfirmation.toKnownErr(e)\n      })\n  }\n\n  requestEmailUpdate(\n    data?: ComAtprotoServerRequestEmailUpdate.InputSchema,\n    opts?: ComAtprotoServerRequestEmailUpdate.CallOptions,\n  ): Promise<ComAtprotoServerRequestEmailUpdate.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.requestEmailUpdate', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRequestEmailUpdate.toKnownErr(e)\n      })\n  }\n\n  requestPasswordReset(\n    data?: ComAtprotoServerRequestPasswordReset.InputSchema,\n    opts?: ComAtprotoServerRequestPasswordReset.CallOptions,\n  ): Promise<ComAtprotoServerRequestPasswordReset.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.requestPasswordReset', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRequestPasswordReset.toKnownErr(e)\n      })\n  }\n\n  reserveSigningKey(\n    data?: ComAtprotoServerReserveSigningKey.InputSchema,\n    opts?: ComAtprotoServerReserveSigningKey.CallOptions,\n  ): Promise<ComAtprotoServerReserveSigningKey.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.reserveSigningKey', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerReserveSigningKey.toKnownErr(e)\n      })\n  }\n\n  resetPassword(\n    data?: ComAtprotoServerResetPassword.InputSchema,\n    opts?: ComAtprotoServerResetPassword.CallOptions,\n  ): Promise<ComAtprotoServerResetPassword.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.resetPassword', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerResetPassword.toKnownErr(e)\n      })\n  }\n\n  revokeAppPassword(\n    data?: ComAtprotoServerRevokeAppPassword.InputSchema,\n    opts?: ComAtprotoServerRevokeAppPassword.CallOptions,\n  ): Promise<ComAtprotoServerRevokeAppPassword.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.revokeAppPassword', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerRevokeAppPassword.toKnownErr(e)\n      })\n  }\n\n  updateEmail(\n    data?: ComAtprotoServerUpdateEmail.InputSchema,\n    opts?: ComAtprotoServerUpdateEmail.CallOptions,\n  ): Promise<ComAtprotoServerUpdateEmail.Response> {\n    return this._service.xrpc\n      .call('com.atproto.server.updateEmail', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoServerUpdateEmail.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoSyncNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  getBlob(\n    params?: ComAtprotoSyncGetBlob.QueryParams,\n    opts?: ComAtprotoSyncGetBlob.CallOptions,\n  ): Promise<ComAtprotoSyncGetBlob.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getBlob', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetBlob.toKnownErr(e)\n      })\n  }\n\n  getBlocks(\n    params?: ComAtprotoSyncGetBlocks.QueryParams,\n    opts?: ComAtprotoSyncGetBlocks.CallOptions,\n  ): Promise<ComAtprotoSyncGetBlocks.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getBlocks', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetBlocks.toKnownErr(e)\n      })\n  }\n\n  getCheckout(\n    params?: ComAtprotoSyncGetCheckout.QueryParams,\n    opts?: ComAtprotoSyncGetCheckout.CallOptions,\n  ): Promise<ComAtprotoSyncGetCheckout.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getCheckout', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetCheckout.toKnownErr(e)\n      })\n  }\n\n  getHead(\n    params?: ComAtprotoSyncGetHead.QueryParams,\n    opts?: ComAtprotoSyncGetHead.CallOptions,\n  ): Promise<ComAtprotoSyncGetHead.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getHead', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetHead.toKnownErr(e)\n      })\n  }\n\n  getLatestCommit(\n    params?: ComAtprotoSyncGetLatestCommit.QueryParams,\n    opts?: ComAtprotoSyncGetLatestCommit.CallOptions,\n  ): Promise<ComAtprotoSyncGetLatestCommit.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getLatestCommit', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetLatestCommit.toKnownErr(e)\n      })\n  }\n\n  getRecord(\n    params?: ComAtprotoSyncGetRecord.QueryParams,\n    opts?: ComAtprotoSyncGetRecord.CallOptions,\n  ): Promise<ComAtprotoSyncGetRecord.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getRecord', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetRecord.toKnownErr(e)\n      })\n  }\n\n  getRepo(\n    params?: ComAtprotoSyncGetRepo.QueryParams,\n    opts?: ComAtprotoSyncGetRepo.CallOptions,\n  ): Promise<ComAtprotoSyncGetRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.getRepo', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncGetRepo.toKnownErr(e)\n      })\n  }\n\n  listBlobs(\n    params?: ComAtprotoSyncListBlobs.QueryParams,\n    opts?: ComAtprotoSyncListBlobs.CallOptions,\n  ): Promise<ComAtprotoSyncListBlobs.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.listBlobs', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncListBlobs.toKnownErr(e)\n      })\n  }\n\n  listRepos(\n    params?: ComAtprotoSyncListRepos.QueryParams,\n    opts?: ComAtprotoSyncListRepos.CallOptions,\n  ): Promise<ComAtprotoSyncListRepos.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.listRepos', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncListRepos.toKnownErr(e)\n      })\n  }\n\n  notifyOfUpdate(\n    data?: ComAtprotoSyncNotifyOfUpdate.InputSchema,\n    opts?: ComAtprotoSyncNotifyOfUpdate.CallOptions,\n  ): Promise<ComAtprotoSyncNotifyOfUpdate.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.notifyOfUpdate', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncNotifyOfUpdate.toKnownErr(e)\n      })\n  }\n\n  requestCrawl(\n    data?: ComAtprotoSyncRequestCrawl.InputSchema,\n    opts?: ComAtprotoSyncRequestCrawl.CallOptions,\n  ): Promise<ComAtprotoSyncRequestCrawl.Response> {\n    return this._service.xrpc\n      .call('com.atproto.sync.requestCrawl', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoSyncRequestCrawl.toKnownErr(e)\n      })\n  }\n}\n\nexport class ComAtprotoTempNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  checkSignupQueue(\n    params?: ComAtprotoTempCheckSignupQueue.QueryParams,\n    opts?: ComAtprotoTempCheckSignupQueue.CallOptions,\n  ): Promise<ComAtprotoTempCheckSignupQueue.Response> {\n    return this._service.xrpc\n      .call('com.atproto.temp.checkSignupQueue', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoTempCheckSignupQueue.toKnownErr(e)\n      })\n  }\n\n  fetchLabels(\n    params?: ComAtprotoTempFetchLabels.QueryParams,\n    opts?: ComAtprotoTempFetchLabels.CallOptions,\n  ): Promise<ComAtprotoTempFetchLabels.Response> {\n    return this._service.xrpc\n      .call('com.atproto.temp.fetchLabels', params, undefined, opts)\n      .catch((e) => {\n        throw ComAtprotoTempFetchLabels.toKnownErr(e)\n      })\n  }\n\n  importRepo(\n    data?: ComAtprotoTempImportRepo.InputSchema,\n    opts?: ComAtprotoTempImportRepo.CallOptions,\n  ): Promise<ComAtprotoTempImportRepo.Response> {\n    return this._service.xrpc\n      .call('com.atproto.temp.importRepo', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoTempImportRepo.toKnownErr(e)\n      })\n  }\n\n  pushBlob(\n    data?: ComAtprotoTempPushBlob.InputSchema,\n    opts?: ComAtprotoTempPushBlob.CallOptions,\n  ): Promise<ComAtprotoTempPushBlob.Response> {\n    return this._service.xrpc\n      .call('com.atproto.temp.pushBlob', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoTempPushBlob.toKnownErr(e)\n      })\n  }\n\n  requestPhoneVerification(\n    data?: ComAtprotoTempRequestPhoneVerification.InputSchema,\n    opts?: ComAtprotoTempRequestPhoneVerification.CallOptions,\n  ): Promise<ComAtprotoTempRequestPhoneVerification.Response> {\n    return this._service.xrpc\n      .call('com.atproto.temp.requestPhoneVerification', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoTempRequestPhoneVerification.toKnownErr(e)\n      })\n  }\n\n  transferAccount(\n    data?: ComAtprotoTempTransferAccount.InputSchema,\n    opts?: ComAtprotoTempTransferAccount.CallOptions,\n  ): Promise<ComAtprotoTempTransferAccount.Response> {\n    return this._service.xrpc\n      .call('com.atproto.temp.transferAccount', opts?.qp, data, opts)\n      .catch((e) => {\n        throw ComAtprotoTempTransferAccount.toKnownErr(e)\n      })\n  }\n}\n\nexport class AppNS {\n  _service: AtpServiceClient\n  bsky: AppBskyNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.bsky = new AppBskyNS(service)\n  }\n}\n\nexport class AppBskyNS {\n  _service: AtpServiceClient\n  actor: AppBskyActorNS\n  embed: AppBskyEmbedNS\n  feed: AppBskyFeedNS\n  graph: AppBskyGraphNS\n  notification: AppBskyNotificationNS\n  richtext: AppBskyRichtextNS\n  unspecced: AppBskyUnspeccedNS\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.actor = new AppBskyActorNS(service)\n    this.embed = new AppBskyEmbedNS(service)\n    this.feed = new AppBskyFeedNS(service)\n    this.graph = new AppBskyGraphNS(service)\n    this.notification = new AppBskyNotificationNS(service)\n    this.richtext = new AppBskyRichtextNS(service)\n    this.unspecced = new AppBskyUnspeccedNS(service)\n  }\n}\n\nexport class AppBskyActorNS {\n  _service: AtpServiceClient\n  profile: ProfileRecord\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.profile = new ProfileRecord(service)\n  }\n\n  getPreferences(\n    params?: AppBskyActorGetPreferences.QueryParams,\n    opts?: AppBskyActorGetPreferences.CallOptions,\n  ): Promise<AppBskyActorGetPreferences.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getPreferences', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetPreferences.toKnownErr(e)\n      })\n  }\n\n  getProfile(\n    params?: AppBskyActorGetProfile.QueryParams,\n    opts?: AppBskyActorGetProfile.CallOptions,\n  ): Promise<AppBskyActorGetProfile.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getProfile', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetProfile.toKnownErr(e)\n      })\n  }\n\n  getProfiles(\n    params?: AppBskyActorGetProfiles.QueryParams,\n    opts?: AppBskyActorGetProfiles.CallOptions,\n  ): Promise<AppBskyActorGetProfiles.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getProfiles', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetProfiles.toKnownErr(e)\n      })\n  }\n\n  getSuggestions(\n    params?: AppBskyActorGetSuggestions.QueryParams,\n    opts?: AppBskyActorGetSuggestions.CallOptions,\n  ): Promise<AppBskyActorGetSuggestions.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.getSuggestions', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorGetSuggestions.toKnownErr(e)\n      })\n  }\n\n  putPreferences(\n    data?: AppBskyActorPutPreferences.InputSchema,\n    opts?: AppBskyActorPutPreferences.CallOptions,\n  ): Promise<AppBskyActorPutPreferences.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.putPreferences', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyActorPutPreferences.toKnownErr(e)\n      })\n  }\n\n  searchActors(\n    params?: AppBskyActorSearchActors.QueryParams,\n    opts?: AppBskyActorSearchActors.CallOptions,\n  ): Promise<AppBskyActorSearchActors.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.searchActors', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorSearchActors.toKnownErr(e)\n      })\n  }\n\n  searchActorsTypeahead(\n    params?: AppBskyActorSearchActorsTypeahead.QueryParams,\n    opts?: AppBskyActorSearchActorsTypeahead.CallOptions,\n  ): Promise<AppBskyActorSearchActorsTypeahead.Response> {\n    return this._service.xrpc\n      .call('app.bsky.actor.searchActorsTypeahead', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyActorSearchActorsTypeahead.toKnownErr(e)\n      })\n  }\n}\n\nexport class ProfileRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyActorProfile.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.actor.profile',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyActorProfile.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.actor.profile',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyActorProfile.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.actor.profile'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.actor.profile', rkey: 'self', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.actor.profile', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class AppBskyEmbedNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n}\n\nexport class AppBskyFeedNS {\n  _service: AtpServiceClient\n  generator: GeneratorRecord\n  like: LikeRecord\n  post: PostRecord\n  repost: RepostRecord\n  threadgate: ThreadgateRecord\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.generator = new GeneratorRecord(service)\n    this.like = new LikeRecord(service)\n    this.post = new PostRecord(service)\n    this.repost = new RepostRecord(service)\n    this.threadgate = new ThreadgateRecord(service)\n  }\n\n  describeFeedGenerator(\n    params?: AppBskyFeedDescribeFeedGenerator.QueryParams,\n    opts?: AppBskyFeedDescribeFeedGenerator.CallOptions,\n  ): Promise<AppBskyFeedDescribeFeedGenerator.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.describeFeedGenerator', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedDescribeFeedGenerator.toKnownErr(e)\n      })\n  }\n\n  getActorFeeds(\n    params?: AppBskyFeedGetActorFeeds.QueryParams,\n    opts?: AppBskyFeedGetActorFeeds.CallOptions,\n  ): Promise<AppBskyFeedGetActorFeeds.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getActorFeeds', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetActorFeeds.toKnownErr(e)\n      })\n  }\n\n  getActorLikes(\n    params?: AppBskyFeedGetActorLikes.QueryParams,\n    opts?: AppBskyFeedGetActorLikes.CallOptions,\n  ): Promise<AppBskyFeedGetActorLikes.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getActorLikes', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetActorLikes.toKnownErr(e)\n      })\n  }\n\n  getAuthorFeed(\n    params?: AppBskyFeedGetAuthorFeed.QueryParams,\n    opts?: AppBskyFeedGetAuthorFeed.CallOptions,\n  ): Promise<AppBskyFeedGetAuthorFeed.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getAuthorFeed', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetAuthorFeed.toKnownErr(e)\n      })\n  }\n\n  getFeed(\n    params?: AppBskyFeedGetFeed.QueryParams,\n    opts?: AppBskyFeedGetFeed.CallOptions,\n  ): Promise<AppBskyFeedGetFeed.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getFeed', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetFeed.toKnownErr(e)\n      })\n  }\n\n  getFeedGenerator(\n    params?: AppBskyFeedGetFeedGenerator.QueryParams,\n    opts?: AppBskyFeedGetFeedGenerator.CallOptions,\n  ): Promise<AppBskyFeedGetFeedGenerator.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getFeedGenerator', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetFeedGenerator.toKnownErr(e)\n      })\n  }\n\n  getFeedGenerators(\n    params?: AppBskyFeedGetFeedGenerators.QueryParams,\n    opts?: AppBskyFeedGetFeedGenerators.CallOptions,\n  ): Promise<AppBskyFeedGetFeedGenerators.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getFeedGenerators', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetFeedGenerators.toKnownErr(e)\n      })\n  }\n\n  getFeedSkeleton(\n    params?: AppBskyFeedGetFeedSkeleton.QueryParams,\n    opts?: AppBskyFeedGetFeedSkeleton.CallOptions,\n  ): Promise<AppBskyFeedGetFeedSkeleton.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getFeedSkeleton', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetFeedSkeleton.toKnownErr(e)\n      })\n  }\n\n  getLikes(\n    params?: AppBskyFeedGetLikes.QueryParams,\n    opts?: AppBskyFeedGetLikes.CallOptions,\n  ): Promise<AppBskyFeedGetLikes.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getLikes', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetLikes.toKnownErr(e)\n      })\n  }\n\n  getListFeed(\n    params?: AppBskyFeedGetListFeed.QueryParams,\n    opts?: AppBskyFeedGetListFeed.CallOptions,\n  ): Promise<AppBskyFeedGetListFeed.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getListFeed', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetListFeed.toKnownErr(e)\n      })\n  }\n\n  getPostThread(\n    params?: AppBskyFeedGetPostThread.QueryParams,\n    opts?: AppBskyFeedGetPostThread.CallOptions,\n  ): Promise<AppBskyFeedGetPostThread.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getPostThread', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetPostThread.toKnownErr(e)\n      })\n  }\n\n  getPosts(\n    params?: AppBskyFeedGetPosts.QueryParams,\n    opts?: AppBskyFeedGetPosts.CallOptions,\n  ): Promise<AppBskyFeedGetPosts.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getPosts', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetPosts.toKnownErr(e)\n      })\n  }\n\n  getRepostedBy(\n    params?: AppBskyFeedGetRepostedBy.QueryParams,\n    opts?: AppBskyFeedGetRepostedBy.CallOptions,\n  ): Promise<AppBskyFeedGetRepostedBy.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getRepostedBy', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetRepostedBy.toKnownErr(e)\n      })\n  }\n\n  getSuggestedFeeds(\n    params?: AppBskyFeedGetSuggestedFeeds.QueryParams,\n    opts?: AppBskyFeedGetSuggestedFeeds.CallOptions,\n  ): Promise<AppBskyFeedGetSuggestedFeeds.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getSuggestedFeeds', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetSuggestedFeeds.toKnownErr(e)\n      })\n  }\n\n  getTimeline(\n    params?: AppBskyFeedGetTimeline.QueryParams,\n    opts?: AppBskyFeedGetTimeline.CallOptions,\n  ): Promise<AppBskyFeedGetTimeline.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.getTimeline', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedGetTimeline.toKnownErr(e)\n      })\n  }\n\n  searchPosts(\n    params?: AppBskyFeedSearchPosts.QueryParams,\n    opts?: AppBskyFeedSearchPosts.CallOptions,\n  ): Promise<AppBskyFeedSearchPosts.Response> {\n    return this._service.xrpc\n      .call('app.bsky.feed.searchPosts', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyFeedSearchPosts.toKnownErr(e)\n      })\n  }\n}\n\nexport class GeneratorRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedGenerator.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.generator',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedGenerator.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.generator',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedGenerator.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.generator'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.generator', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.generator', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class LikeRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedLike.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.like',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedLike.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.like',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedLike.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.like'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.like', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.like', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class PostRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedPost.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.post',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedPost.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.post',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedPost.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.post'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.post', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.post', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class RepostRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedRepost.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.repost',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyFeedRepost.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.repost',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedRepost.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.repost'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.repost', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.repost', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class ThreadgateRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyFeedThreadgate.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.feed.threadgate',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{\n    uri: string\n    cid: string\n    value: AppBskyFeedThreadgate.Record\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.feed.threadgate',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyFeedThreadgate.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.feed.threadgate'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.feed.threadgate', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.feed.threadgate', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class AppBskyGraphNS {\n  _service: AtpServiceClient\n  block: BlockRecord\n  follow: FollowRecord\n  list: ListRecord\n  listblock: ListblockRecord\n  listitem: ListitemRecord\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n    this.block = new BlockRecord(service)\n    this.follow = new FollowRecord(service)\n    this.list = new ListRecord(service)\n    this.listblock = new ListblockRecord(service)\n    this.listitem = new ListitemRecord(service)\n  }\n\n  getBlocks(\n    params?: AppBskyGraphGetBlocks.QueryParams,\n    opts?: AppBskyGraphGetBlocks.CallOptions,\n  ): Promise<AppBskyGraphGetBlocks.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getBlocks', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetBlocks.toKnownErr(e)\n      })\n  }\n\n  getFollowers(\n    params?: AppBskyGraphGetFollowers.QueryParams,\n    opts?: AppBskyGraphGetFollowers.CallOptions,\n  ): Promise<AppBskyGraphGetFollowers.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getFollowers', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetFollowers.toKnownErr(e)\n      })\n  }\n\n  getFollows(\n    params?: AppBskyGraphGetFollows.QueryParams,\n    opts?: AppBskyGraphGetFollows.CallOptions,\n  ): Promise<AppBskyGraphGetFollows.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getFollows', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetFollows.toKnownErr(e)\n      })\n  }\n\n  getList(\n    params?: AppBskyGraphGetList.QueryParams,\n    opts?: AppBskyGraphGetList.CallOptions,\n  ): Promise<AppBskyGraphGetList.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getList', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetList.toKnownErr(e)\n      })\n  }\n\n  getListBlocks(\n    params?: AppBskyGraphGetListBlocks.QueryParams,\n    opts?: AppBskyGraphGetListBlocks.CallOptions,\n  ): Promise<AppBskyGraphGetListBlocks.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getListBlocks', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetListBlocks.toKnownErr(e)\n      })\n  }\n\n  getListMutes(\n    params?: AppBskyGraphGetListMutes.QueryParams,\n    opts?: AppBskyGraphGetListMutes.CallOptions,\n  ): Promise<AppBskyGraphGetListMutes.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getListMutes', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetListMutes.toKnownErr(e)\n      })\n  }\n\n  getLists(\n    params?: AppBskyGraphGetLists.QueryParams,\n    opts?: AppBskyGraphGetLists.CallOptions,\n  ): Promise<AppBskyGraphGetLists.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getLists', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetLists.toKnownErr(e)\n      })\n  }\n\n  getMutes(\n    params?: AppBskyGraphGetMutes.QueryParams,\n    opts?: AppBskyGraphGetMutes.CallOptions,\n  ): Promise<AppBskyGraphGetMutes.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getMutes', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetMutes.toKnownErr(e)\n      })\n  }\n\n  getRelationships(\n    params?: AppBskyGraphGetRelationships.QueryParams,\n    opts?: AppBskyGraphGetRelationships.CallOptions,\n  ): Promise<AppBskyGraphGetRelationships.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.getRelationships', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyGraphGetRelationships.toKnownErr(e)\n      })\n  }\n\n  getSuggestedFollowsByActor(\n    params?: AppBskyGraphGetSuggestedFollowsByActor.QueryParams,\n    opts?: AppBskyGraphGetSuggestedFollowsByActor.CallOptions,\n  ): Promise<AppBskyGraphGetSuggestedFollowsByActor.Response> {\n    return this._service.xrpc\n      .call(\n        'app.bsky.graph.getSuggestedFollowsByActor',\n        params,\n        undefined,\n        opts,\n      )\n      .catch((e) => {\n        throw AppBskyGraphGetSuggestedFollowsByActor.toKnownErr(e)\n      })\n  }\n\n  muteActor(\n    data?: AppBskyGraphMuteActor.InputSchema,\n    opts?: AppBskyGraphMuteActor.CallOptions,\n  ): Promise<AppBskyGraphMuteActor.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.muteActor', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyGraphMuteActor.toKnownErr(e)\n      })\n  }\n\n  muteActorList(\n    data?: AppBskyGraphMuteActorList.InputSchema,\n    opts?: AppBskyGraphMuteActorList.CallOptions,\n  ): Promise<AppBskyGraphMuteActorList.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.muteActorList', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyGraphMuteActorList.toKnownErr(e)\n      })\n  }\n\n  unmuteActor(\n    data?: AppBskyGraphUnmuteActor.InputSchema,\n    opts?: AppBskyGraphUnmuteActor.CallOptions,\n  ): Promise<AppBskyGraphUnmuteActor.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.unmuteActor', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyGraphUnmuteActor.toKnownErr(e)\n      })\n  }\n\n  unmuteActorList(\n    data?: AppBskyGraphUnmuteActorList.InputSchema,\n    opts?: AppBskyGraphUnmuteActorList.CallOptions,\n  ): Promise<AppBskyGraphUnmuteActorList.Response> {\n    return this._service.xrpc\n      .call('app.bsky.graph.unmuteActorList', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyGraphUnmuteActorList.toKnownErr(e)\n      })\n  }\n}\n\nexport class BlockRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyGraphBlock.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.graph.block',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyGraphBlock.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.graph.block',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyGraphBlock.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.graph.block'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.graph.block', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.graph.block', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class FollowRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyGraphFollow.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.graph.follow',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyGraphFollow.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.graph.follow',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyGraphFollow.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.graph.follow'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.graph.follow', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.graph.follow', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class ListRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyGraphList.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.graph.list',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyGraphList.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.graph.list',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyGraphList.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.graph.list'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.graph.list', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.graph.list', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class ListblockRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyGraphListblock.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.graph.listblock',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{\n    uri: string\n    cid: string\n    value: AppBskyGraphListblock.Record\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.graph.listblock',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyGraphListblock.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.graph.listblock'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.graph.listblock', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.graph.listblock', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class ListitemRecord {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  async list(\n    params: Omit<ComAtprotoRepoListRecords.QueryParams, 'collection'>,\n  ): Promise<{\n    cursor?: string\n    records: { uri: string; value: AppBskyGraphListitem.Record }[]\n  }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.listRecords', {\n      collection: 'app.bsky.graph.listitem',\n      ...params,\n    })\n    return res.data\n  }\n\n  async get(\n    params: Omit<ComAtprotoRepoGetRecord.QueryParams, 'collection'>,\n  ): Promise<{ uri: string; cid: string; value: AppBskyGraphListitem.Record }> {\n    const res = await this._service.xrpc.call('com.atproto.repo.getRecord', {\n      collection: 'app.bsky.graph.listitem',\n      ...params,\n    })\n    return res.data\n  }\n\n  async create(\n    params: Omit<\n      ComAtprotoRepoCreateRecord.InputSchema,\n      'collection' | 'record'\n    >,\n    record: AppBskyGraphListitem.Record,\n    headers?: Record<string, string>,\n  ): Promise<{ uri: string; cid: string }> {\n    record.$type = 'app.bsky.graph.listitem'\n    const res = await this._service.xrpc.call(\n      'com.atproto.repo.createRecord',\n      undefined,\n      { collection: 'app.bsky.graph.listitem', ...params, record },\n      { encoding: 'application/json', headers },\n    )\n    return res.data\n  }\n\n  async delete(\n    params: Omit<ComAtprotoRepoDeleteRecord.InputSchema, 'collection'>,\n    headers?: Record<string, string>,\n  ): Promise<void> {\n    await this._service.xrpc.call(\n      'com.atproto.repo.deleteRecord',\n      undefined,\n      { collection: 'app.bsky.graph.listitem', ...params },\n      { headers },\n    )\n  }\n}\n\nexport class AppBskyNotificationNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  getUnreadCount(\n    params?: AppBskyNotificationGetUnreadCount.QueryParams,\n    opts?: AppBskyNotificationGetUnreadCount.CallOptions,\n  ): Promise<AppBskyNotificationGetUnreadCount.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.getUnreadCount', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyNotificationGetUnreadCount.toKnownErr(e)\n      })\n  }\n\n  listNotifications(\n    params?: AppBskyNotificationListNotifications.QueryParams,\n    opts?: AppBskyNotificationListNotifications.CallOptions,\n  ): Promise<AppBskyNotificationListNotifications.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.listNotifications', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyNotificationListNotifications.toKnownErr(e)\n      })\n  }\n\n  registerPush(\n    data?: AppBskyNotificationRegisterPush.InputSchema,\n    opts?: AppBskyNotificationRegisterPush.CallOptions,\n  ): Promise<AppBskyNotificationRegisterPush.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.registerPush', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyNotificationRegisterPush.toKnownErr(e)\n      })\n  }\n\n  updateSeen(\n    data?: AppBskyNotificationUpdateSeen.InputSchema,\n    opts?: AppBskyNotificationUpdateSeen.CallOptions,\n  ): Promise<AppBskyNotificationUpdateSeen.Response> {\n    return this._service.xrpc\n      .call('app.bsky.notification.updateSeen', opts?.qp, data, opts)\n      .catch((e) => {\n        throw AppBskyNotificationUpdateSeen.toKnownErr(e)\n      })\n  }\n}\n\nexport class AppBskyRichtextNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n}\n\nexport class AppBskyUnspeccedNS {\n  _service: AtpServiceClient\n\n  constructor(service: AtpServiceClient) {\n    this._service = service\n  }\n\n  getPopularFeedGenerators(\n    params?: AppBskyUnspeccedGetPopularFeedGenerators.QueryParams,\n    opts?: AppBskyUnspeccedGetPopularFeedGenerators.CallOptions,\n  ): Promise<AppBskyUnspeccedGetPopularFeedGenerators.Response> {\n    return this._service.xrpc\n      .call(\n        'app.bsky.unspecced.getPopularFeedGenerators',\n        params,\n        undefined,\n        opts,\n      )\n      .catch((e) => {\n        throw AppBskyUnspeccedGetPopularFeedGenerators.toKnownErr(e)\n      })\n  }\n\n  getTaggedSuggestions(\n    params?: AppBskyUnspeccedGetTaggedSuggestions.QueryParams,\n    opts?: AppBskyUnspeccedGetTaggedSuggestions.CallOptions,\n  ): Promise<AppBskyUnspeccedGetTaggedSuggestions.Response> {\n    return this._service.xrpc\n      .call('app.bsky.unspecced.getTaggedSuggestions', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyUnspeccedGetTaggedSuggestions.toKnownErr(e)\n      })\n  }\n\n  searchActorsSkeleton(\n    params?: AppBskyUnspeccedSearchActorsSkeleton.QueryParams,\n    opts?: AppBskyUnspeccedSearchActorsSkeleton.CallOptions,\n  ): Promise<AppBskyUnspeccedSearchActorsSkeleton.Response> {\n    return this._service.xrpc\n      .call('app.bsky.unspecced.searchActorsSkeleton', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyUnspeccedSearchActorsSkeleton.toKnownErr(e)\n      })\n  }\n\n  searchPostsSkeleton(\n    params?: AppBskyUnspeccedSearchPostsSkeleton.QueryParams,\n    opts?: AppBskyUnspeccedSearchPostsSkeleton.CallOptions,\n  ): Promise<AppBskyUnspeccedSearchPostsSkeleton.Response> {\n    return this._service.xrpc\n      .call('app.bsky.unspecced.searchPostsSkeleton', params, undefined, opts)\n      .catch((e) => {\n        throw AppBskyUnspeccedSearchPostsSkeleton.toKnownErr(e)\n      })\n  }\n}\n","import { ErrorResponseBody, errorResponseBody } from '@atproto/xrpc'\nimport { defaultFetchHandler, XRPCError, ResponseType } from '@atproto/xrpc'\nimport { isValidDidDoc, getPdsEndpoint } from '@atproto/common-web'\nimport {\n  AtpBaseClient,\n  AtpServiceClient,\n  ComAtprotoServerCreateAccount,\n  ComAtprotoServerCreateSession,\n  ComAtprotoServerGetSession,\n  ComAtprotoServerRefreshSession,\n} from './client'\nimport {\n  AtpSessionData,\n  AtpAgentLoginOpts,\n  AtpAgentFetchHandler,\n  AtpAgentFetchHandlerResponse,\n  AtpAgentGlobalOpts,\n  AtpPersistSessionHandler,\n  AtpAgentOpts,\n} from './types'\n\nconst REFRESH_SESSION = 'com.atproto.server.refreshSession'\n\n/**\n * An ATP \"Agent\"\n * Manages session token lifecycles and provides convenience methods.\n */\nexport class AtpAgent {\n  service: URL\n  api: AtpServiceClient\n  session?: AtpSessionData\n\n  /**\n   * The PDS URL, driven by the did doc. May be undefined.\n   */\n  pdsUrl: URL | undefined\n\n  private _baseClient: AtpBaseClient\n  private _persistSession?: AtpPersistSessionHandler\n  private _refreshSessionPromise: Promise<void> | undefined\n\n  get com() {\n    return this.api.com\n  }\n\n  /**\n   * The `fetch` implementation; must be implemented for your platform.\n   */\n  static fetch: AtpAgentFetchHandler | undefined = defaultFetchHandler\n\n  /**\n   * Configures the API globally.\n   */\n  static configure(opts: AtpAgentGlobalOpts) {\n    AtpAgent.fetch = opts.fetch\n  }\n\n  constructor(opts: AtpAgentOpts) {\n    this.service =\n      opts.service instanceof URL ? opts.service : new URL(opts.service)\n    this._persistSession = opts.persistSession\n\n    // create an ATP client instance for this agent\n    this._baseClient = new AtpBaseClient()\n    this._baseClient.xrpc.fetch = this._fetch.bind(this) // patch its fetch implementation\n    this.api = this._baseClient.service(opts.service)\n  }\n\n  /**\n   * Is there any active session?\n   */\n  get hasSession() {\n    return !!this.session\n  }\n\n  /**\n   * Sets the \"Persist Session\" method which can be used to store access tokens\n   * as they change.\n   */\n  setPersistSessionHandler(handler?: AtpPersistSessionHandler) {\n    this._persistSession = handler\n  }\n\n  /**\n   * Create a new account and hydrate its session in this agent.\n   */\n  async createAccount(\n    opts: ComAtprotoServerCreateAccount.InputSchema,\n  ): Promise<ComAtprotoServerCreateAccount.Response> {\n    try {\n      const res = await this.api.com.atproto.server.createAccount(opts)\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: opts.email,\n        emailConfirmed: false,\n      }\n      this._updateApiEndpoint(res.data.didDoc)\n      return res\n    } catch (e) {\n      this.session = undefined\n      throw e\n    } finally {\n      if (this.session) {\n        this._persistSession?.('create', this.session)\n      } else {\n        this._persistSession?.('create-failed', undefined)\n      }\n    }\n  }\n\n  /**\n   * Start a new session with this agent.\n   */\n  async login(\n    opts: AtpAgentLoginOpts,\n  ): Promise<ComAtprotoServerCreateSession.Response> {\n    try {\n      const res = await this.api.com.atproto.server.createSession({\n        identifier: opts.identifier,\n        password: opts.password,\n      })\n      this.session = {\n        accessJwt: res.data.accessJwt,\n        refreshJwt: res.data.refreshJwt,\n        handle: res.data.handle,\n        did: res.data.did,\n        email: res.data.email,\n        emailConfirmed: res.data.emailConfirmed,\n      }\n      this._updateApiEndpoint(res.data.didDoc)\n      return res\n    } catch (e) {\n      this.session = undefined\n      throw e\n    } finally {\n      if (this.session) {\n        this._persistSession?.('create', this.session)\n      } else {\n        this._persistSession?.('create-failed', undefined)\n      }\n    }\n  }\n\n  /**\n   * Resume a pre-existing session with this agent.\n   */\n  async resumeSession(\n    session: AtpSessionData,\n  ): Promise<ComAtprotoServerGetSession.Response> {\n    try {\n      this.session = session\n      const res = await this.api.com.atproto.server.getSession()\n      if (res.data.did !== this.session.did) {\n        throw new XRPCError(\n          ResponseType.InvalidRequest,\n          'Invalid session',\n          'InvalidDID',\n        )\n      }\n      this.session.email = res.data.email\n      this.session.handle = res.data.handle\n      this.session.emailConfirmed = res.data.emailConfirmed\n      this._updateApiEndpoint(res.data.didDoc)\n      this._persistSession?.('update', this.session)\n      return res\n    } catch (e) {\n      this.session = undefined\n\n      if (e instanceof XRPCError) {\n        /*\n         * `ExpiredToken` and `InvalidToken` are handled in\n         * `this_refreshSession`, and emit an `expired` event there.\n         *\n         * Everything else is handled here.\n         */\n        if (\n          [1, 408, 425, 429, 500, 502, 503, 504, 522, 524].includes(e.status)\n        ) {\n          this._persistSession?.('network-error', undefined)\n        } else {\n          this._persistSession?.('expired', undefined)\n        }\n      } else {\n        this._persistSession?.('network-error', undefined)\n      }\n\n      throw e\n    }\n  }\n\n  /**\n   * Internal helper to add authorization headers to requests.\n   */\n  private _addAuthHeader(reqHeaders: Record<string, string>) {\n    if (!reqHeaders.authorization && this.session?.accessJwt) {\n      return {\n        ...reqHeaders,\n        authorization: `Bearer ${this.session.accessJwt}`,\n      }\n    }\n    return reqHeaders\n  }\n\n  /**\n   * Internal fetch handler which adds access-token management\n   */\n  private async _fetch(\n    reqUri: string,\n    reqMethod: string,\n    reqHeaders: Record<string, string>,\n    reqBody: any,\n  ): Promise<AtpAgentFetchHandlerResponse> {\n    if (!AtpAgent.fetch) {\n      throw new Error('AtpAgent fetch() method not configured')\n    }\n\n    // wait for any active session-refreshes to finish\n    await this._refreshSessionPromise\n\n    // send the request\n    let res = await AtpAgent.fetch(\n      reqUri,\n      reqMethod,\n      this._addAuthHeader(reqHeaders),\n      reqBody,\n    )\n\n    // handle session-refreshes as needed\n    if (isErrorResponse(res, ['ExpiredToken']) && this.session?.refreshJwt) {\n      // attempt refresh\n      await this.refreshSession()\n\n      // resend the request with the new access token\n      res = await AtpAgent.fetch(\n        reqUri,\n        reqMethod,\n        this._addAuthHeader(reqHeaders),\n        reqBody,\n      )\n    }\n\n    return res\n  }\n\n  /**\n   * Internal helper to refresh sessions\n   * - Wraps the actual implementation in a promise-guard to ensure only\n   *   one refresh is attempted at a time.\n   */\n  async refreshSession() {\n    if (this._refreshSessionPromise) {\n      return this._refreshSessionPromise\n    }\n    this._refreshSessionPromise = this._refreshSessionInner()\n    try {\n      await this._refreshSessionPromise\n    } finally {\n      this._refreshSessionPromise = undefined\n    }\n  }\n\n  /**\n   * Internal helper to refresh sessions (actual behavior)\n   */\n  private async _refreshSessionInner() {\n    if (!AtpAgent.fetch) {\n      throw new Error('AtpAgent fetch() method not configured')\n    }\n    if (!this.session?.refreshJwt) {\n      return\n    }\n\n    // send the refresh request\n    const url = new URL((this.pdsUrl || this.service).origin)\n    url.pathname = `/xrpc/${REFRESH_SESSION}`\n    const res = await AtpAgent.fetch(\n      url.toString(),\n      'POST',\n      {\n        authorization: `Bearer ${this.session.refreshJwt}`,\n      },\n      undefined,\n    )\n\n    if (isErrorResponse(res, ['ExpiredToken', 'InvalidToken'])) {\n      // failed due to a bad refresh token\n      this.session = undefined\n      this._persistSession?.('expired', undefined)\n    } else if (isNewSessionObject(this._baseClient, res.body)) {\n      // succeeded, update the session\n      this.session = {\n        ...(this.session || {}),\n        accessJwt: res.body.accessJwt,\n        refreshJwt: res.body.refreshJwt,\n        handle: res.body.handle,\n        did: res.body.did,\n      }\n      this._updateApiEndpoint(res.body.didDoc)\n      this._persistSession?.('update', this.session)\n    }\n    // else: other failures should be ignored - the issue will\n    // propagate in the _fetch() handler's second attempt to run\n    // the request\n  }\n\n  /**\n   * Upload a binary blob to the server\n   */\n  uploadBlob: typeof this.api.com.atproto.repo.uploadBlob = (data, opts) =>\n    this.api.com.atproto.repo.uploadBlob(data, opts)\n\n  /**\n   * Resolve a handle to a DID\n   */\n  resolveHandle: typeof this.api.com.atproto.identity.resolveHandle = (\n    params,\n    opts,\n  ) => this.api.com.atproto.identity.resolveHandle(params, opts)\n\n  /**\n   * Change the user's handle\n   */\n  updateHandle: typeof this.api.com.atproto.identity.updateHandle = (\n    data,\n    opts,\n  ) => this.api.com.atproto.identity.updateHandle(data, opts)\n\n  /**\n   * Create a moderation report\n   */\n  createModerationReport: typeof this.api.com.atproto.moderation.createReport =\n    (data, opts) => this.api.com.atproto.moderation.createReport(data, opts)\n\n  /**\n   * Helper to update the pds endpoint dynamically.\n   *\n   * The session methods (create, resume, refresh) may respond with the user's\n   * did document which contains the user's canonical PDS endpoint. That endpoint\n   * may differ from the endpoint used to contact the server. We capture that\n   * PDS endpoint and update the client to use that given endpoint for future\n   * requests. (This helps ensure smooth migrations between PDSes, especially\n   * when the PDSes are operated by a single org.)\n   */\n  private _updateApiEndpoint(didDoc: unknown) {\n    if (isValidDidDoc(didDoc)) {\n      const endpoint = getPdsEndpoint(didDoc)\n      this.pdsUrl = endpoint ? new URL(endpoint) : undefined\n    }\n    this.api.xrpc.uri = this.pdsUrl || this.service\n  }\n}\n\nfunction isErrorObject(v: unknown): v is ErrorResponseBody {\n  return errorResponseBody.safeParse(v).success\n}\n\nfunction isErrorResponse(\n  res: AtpAgentFetchHandlerResponse,\n  errorNames: string[],\n): boolean {\n  if (res.status !== 400) {\n    return false\n  }\n  if (!isErrorObject(res.body)) {\n    return false\n  }\n  return (\n    typeof res.body.error === 'string' && errorNames.includes(res.body.error)\n  )\n}\n\nfunction isNewSessionObject(\n  client: AtpBaseClient,\n  v: unknown,\n): v is ComAtprotoServerRefreshSession.OutputSchema {\n  try {\n    client.xrpc.lex.assertValidXrpcOutput(\n      'com.atproto.server.refreshSession',\n      v,\n    )\n    return true\n  } catch {\n    return false\n  }\n}\n","/**\n * Javascript uses utf16-encoded strings while most environments and specs\n * have standardized around utf8 (including JSON).\n *\n * After some lengthy debated we decided that richtext facets need to use\n * utf8 indices. This means we need tools to convert indices between utf8\n * and utf16, and that's precisely what this library handles.\n */\n\nimport { graphemeLen } from '@atproto/common-web'\n\nconst encoder = new TextEncoder()\nconst decoder = new TextDecoder()\n\nexport class UnicodeString {\n  utf16: string\n  utf8: Uint8Array\n  private _graphemeLen?: number | undefined\n\n  constructor(utf16: string) {\n    this.utf16 = utf16\n    this.utf8 = encoder.encode(utf16)\n  }\n\n  get length() {\n    return this.utf8.byteLength\n  }\n\n  get graphemeLength() {\n    if (!this._graphemeLen) {\n      this._graphemeLen = graphemeLen(this.utf16)\n    }\n    return this._graphemeLen\n  }\n\n  slice(start?: number, end?: number): string {\n    return decoder.decode(this.utf8.slice(start, end))\n  }\n\n  utf16IndexToUtf8Index(i: number) {\n    return encoder.encode(this.utf16.slice(0, i)).byteLength\n  }\n\n  toString() {\n    return this.utf16\n  }\n}\n","import { RichText } from './rich-text'\nimport { UnicodeString } from './unicode'\n\n// this regex is intentionally matching on the zero-with-separator codepoint\n// eslint-disable-next-line no-misleading-character-class\nconst EXCESS_SPACE_RE = /[\\r\\n]([\\u00AD\\u2060\\u200D\\u200C\\u200B\\s]*[\\r\\n]){2,}/\nconst REPLACEMENT_STR = '\\n\\n'\n\nexport function sanitizeRichText(\n  richText: RichText,\n  opts: { cleanNewlines?: boolean },\n) {\n  if (opts.cleanNewlines) {\n    richText = clean(richText, EXCESS_SPACE_RE, REPLACEMENT_STR)\n  }\n  return richText\n}\n\nfunction clean(\n  richText: RichText,\n  targetRegexp: RegExp,\n  replacementString: string,\n): RichText {\n  richText = richText.clone()\n\n  let match = richText.unicodeText.utf16.match(targetRegexp)\n  while (match && typeof match.index !== 'undefined') {\n    const oldText = richText.unicodeText\n    const removeStartIndex = richText.unicodeText.utf16IndexToUtf8Index(\n      match.index,\n    )\n    const removeEndIndex = removeStartIndex + new UnicodeString(match[0]).length\n    richText.delete(removeStartIndex, removeEndIndex)\n    if (richText.unicodeText.utf16 === oldText.utf16) {\n      break // sanity check\n    }\n    richText.insert(removeStartIndex, replacementString)\n    match = richText.unicodeText.utf16.match(targetRegexp)\n  }\n\n  return richText\n}\n","import TLDs from 'tlds'\nimport { AppBskyRichtextFacet } from '../client'\nimport { UnicodeString } from './unicode'\n\nexport type Facet = AppBskyRichtextFacet.Main\n\nexport function detectFacets(text: UnicodeString): Facet[] | undefined {\n  let match\n  const facets: Facet[] = []\n  {\n    // mentions\n    const re = /(^|\\s|\\()(@)([a-zA-Z0-9.-]+)(\\b)/g\n    while ((match = re.exec(text.utf16))) {\n      if (!isValidDomain(match[3]) && !match[3].endsWith('.test')) {\n        continue // probably not a handle\n      }\n\n      const start = text.utf16.indexOf(match[3], match.index) - 1\n      facets.push({\n        $type: 'app.bsky.richtext.facet',\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(start),\n          byteEnd: text.utf16IndexToUtf8Index(start + match[3].length + 1),\n        },\n        features: [\n          {\n            $type: 'app.bsky.richtext.facet#mention',\n            did: match[3], // must be resolved afterwards\n          },\n        ],\n      })\n    }\n  }\n  {\n    // links\n    const re =\n      /(^|\\s|\\()((https?:\\/\\/[\\S]+)|((?<domain>[a-z][a-z0-9]*(\\.[a-z0-9]+)+)[\\S]*))/gim\n    while ((match = re.exec(text.utf16))) {\n      let uri = match[2]\n      if (!uri.startsWith('http')) {\n        const domain = match.groups?.domain\n        if (!domain || !isValidDomain(domain)) {\n          continue\n        }\n        uri = `https://${uri}`\n      }\n      const start = text.utf16.indexOf(match[2], match.index)\n      const index = { start, end: start + match[2].length }\n      // strip ending puncuation\n      if (/[.,;:!?]$/.test(uri)) {\n        uri = uri.slice(0, -1)\n        index.end--\n      }\n      if (/[)]$/.test(uri) && !uri.includes('(')) {\n        uri = uri.slice(0, -1)\n        index.end--\n      }\n      facets.push({\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(index.start),\n          byteEnd: text.utf16IndexToUtf8Index(index.end),\n        },\n        features: [\n          {\n            $type: 'app.bsky.richtext.facet#link',\n            uri,\n          },\n        ],\n      })\n    }\n  }\n  {\n    const re = /(?:^|\\s)(#[^\\d\\s]\\S*)(?=\\s)?/g\n    while ((match = re.exec(text.utf16))) {\n      let [tag] = match\n      const hasLeadingSpace = /^\\s/.test(tag)\n\n      tag = tag.trim().replace(/\\p{P}+$/gu, '') // strip ending punctuation\n\n      // inclusive of #, max of 64 chars\n      if (tag.length > 66) continue\n\n      const index = match.index + (hasLeadingSpace ? 1 : 0)\n\n      facets.push({\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(index),\n          byteEnd: text.utf16IndexToUtf8Index(index + tag.length), // inclusive of last char\n        },\n        features: [\n          {\n            $type: 'app.bsky.richtext.facet#tag',\n            tag: tag.replace(/^#/, ''),\n          },\n        ],\n      })\n    }\n  }\n  return facets.length > 0 ? facets : undefined\n}\n\nfunction isValidDomain(str: string): boolean {\n  return !!TLDs.find((tld) => {\n    const i = str.lastIndexOf(tld)\n    if (i === -1) {\n      return false\n    }\n    return str.charAt(i - 1) === '.' && i === str.length - tld.length\n  })\n}\n","/*\n= Rich Text Manipulation\n\nWhen we sanitize rich text, we have to update the entity indices as the\ntext is modified. This can be modeled as inserts() and deletes() of the\nrich text string. The possible scenarios are outlined below, along with\ntheir expected behaviors.\n\nNOTE: Slices are start inclusive, end exclusive\n\n== richTextInsert()\n\nTarget string:\n\n   0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w o r l d   // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\nScenarios:\n\nA: ^                       // insert \"test\" at 0\nB:        ^                // insert \"test\" at 4\nC:                 ^       // insert \"test\" at 8\n\nA = before           -> move both by num added\nB = inner            -> move end by num added\nC = after            -> noop\n\nResults:\n\nA: 0 1 2 3 4 5 6 7 8 910   // string indices\n   t e s t h e l l o   w   // string value\n               ^-------^   // target slice {start: 6, end: 11}\n\nB: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l t e s t o   w   // string value\n       ^---------------^   // target slice {start: 2, end: 11}\n\nC: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w o t e s   // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\n== richTextDelete()\n\nTarget string:\n\n   0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w o r l d   // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\nScenarios:\n\nA: ^---------------^       // remove slice {start: 0, end: 9}\nB:               ^-----^   // remove slice {start: 7, end: 11}\nC:         ^-----------^   // remove slice {start: 4, end: 11}\nD:       ^-^               // remove slice {start: 3, end: 5}\nE:   ^-----^               // remove slice {start: 1, end: 5}\nF: ^-^                     // remove slice {start: 0, end: 2}\n\nA = entirely outer   -> delete slice\nB = entirely after   -> noop\nC = partially after  -> move end to remove-start\nD = entirely inner   -> move end by num removed\nE = partially before -> move start to remove-start index, move end by num removed\nF = entirely before  -> move both by num removed\n\nResults:\n\nA: 0 1 2 3 4 5 6 7 8 910   // string indices\n   l d                     // string value\n                           // target slice (deleted)\n\nB: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l o   w           // string value\n       ^-------^           // target slice {start: 2, end: 7}\n\nC: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l l                 // string value\n       ^-^                 // target slice {start: 2, end: 4}\n\nD: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h e l   w o r l d       // string value\n       ^---^               // target slice {start: 2, end: 5}\n\nE: 0 1 2 3 4 5 6 7 8 910   // string indices\n   h   w o r l d           // string value\n     ^-^                   // target slice {start: 1, end: 3}\n\nF: 0 1 2 3 4 5 6 7 8 910   // string indices\n   l l o   w o r l d       // string value\n   ^-------^               // target slice {start: 0, end: 5}\n */\n\nimport { AtpAgent } from '../agent'\nimport { AppBskyFeedPost, AppBskyRichtextFacet } from '../client'\nimport { UnicodeString } from './unicode'\nimport { sanitizeRichText } from './sanitization'\nimport { detectFacets } from './detection'\n\nexport type Facet = AppBskyRichtextFacet.Main\nexport type FacetLink = AppBskyRichtextFacet.Link\nexport type FacetMention = AppBskyRichtextFacet.Mention\nexport type FacetTag = AppBskyRichtextFacet.Tag\nexport type Entity = AppBskyFeedPost.Entity\n\nexport interface RichTextProps {\n  text: string\n  facets?: Facet[]\n  /**\n   * @deprecated Use facets instead\n   */\n  entities?: Entity[]\n}\n\nexport interface RichTextOpts {\n  cleanNewlines?: boolean\n}\n\nexport class RichTextSegment {\n  constructor(public text: string, public facet?: Facet) {}\n\n  get link(): FacetLink | undefined {\n    const link = this.facet?.features.find(AppBskyRichtextFacet.isLink)\n    if (AppBskyRichtextFacet.isLink(link)) {\n      return link\n    }\n    return undefined\n  }\n\n  isLink() {\n    return !!this.link\n  }\n\n  get mention(): FacetMention | undefined {\n    const mention = this.facet?.features.find(AppBskyRichtextFacet.isMention)\n    if (AppBskyRichtextFacet.isMention(mention)) {\n      return mention\n    }\n    return undefined\n  }\n\n  isMention() {\n    return !!this.mention\n  }\n\n  get tag(): FacetTag | undefined {\n    const tag = this.facet?.features.find(AppBskyRichtextFacet.isTag)\n    if (AppBskyRichtextFacet.isTag(tag)) {\n      return tag\n    }\n    return undefined\n  }\n\n  isTag() {\n    return !!this.tag\n  }\n}\n\nexport class RichText {\n  unicodeText: UnicodeString\n  facets?: Facet[]\n\n  constructor(props: RichTextProps, opts?: RichTextOpts) {\n    this.unicodeText = new UnicodeString(props.text)\n    this.facets = props.facets\n    if (!this.facets?.length && props.entities?.length) {\n      this.facets = entitiesToFacets(this.unicodeText, props.entities)\n    }\n    if (this.facets) {\n      this.facets.sort(facetSort)\n    }\n    if (opts?.cleanNewlines) {\n      sanitizeRichText(this, { cleanNewlines: true }).copyInto(this)\n    }\n  }\n\n  get text() {\n    return this.unicodeText.toString()\n  }\n\n  get length() {\n    return this.unicodeText.length\n  }\n\n  get graphemeLength() {\n    return this.unicodeText.graphemeLength\n  }\n\n  clone() {\n    return new RichText({\n      text: this.unicodeText.utf16,\n      facets: cloneDeep(this.facets),\n    })\n  }\n\n  copyInto(target: RichText) {\n    target.unicodeText = this.unicodeText\n    target.facets = cloneDeep(this.facets)\n  }\n\n  *segments(): Generator<RichTextSegment, void, void> {\n    const facets = this.facets || []\n    if (!facets.length) {\n      yield new RichTextSegment(this.unicodeText.utf16)\n      return\n    }\n\n    let textCursor = 0\n    let facetCursor = 0\n    do {\n      const currFacet = facets[facetCursor]\n      if (textCursor < currFacet.index.byteStart) {\n        yield new RichTextSegment(\n          this.unicodeText.slice(textCursor, currFacet.index.byteStart),\n        )\n      } else if (textCursor > currFacet.index.byteStart) {\n        facetCursor++\n        continue\n      }\n      if (currFacet.index.byteStart < currFacet.index.byteEnd) {\n        const subtext = this.unicodeText.slice(\n          currFacet.index.byteStart,\n          currFacet.index.byteEnd,\n        )\n        if (!subtext.trim()) {\n          // dont empty string entities\n          yield new RichTextSegment(subtext)\n        } else {\n          yield new RichTextSegment(subtext, currFacet)\n        }\n      }\n      textCursor = currFacet.index.byteEnd\n      facetCursor++\n    } while (facetCursor < facets.length)\n    if (textCursor < this.unicodeText.length) {\n      yield new RichTextSegment(\n        this.unicodeText.slice(textCursor, this.unicodeText.length),\n      )\n    }\n  }\n\n  insert(insertIndex: number, insertText: string) {\n    this.unicodeText = new UnicodeString(\n      this.unicodeText.slice(0, insertIndex) +\n        insertText +\n        this.unicodeText.slice(insertIndex),\n    )\n\n    if (!this.facets?.length) {\n      return this\n    }\n\n    const numCharsAdded = insertText.length\n    for (const ent of this.facets) {\n      // see comment at top of file for labels of each scenario\n      // scenario A (before)\n      if (insertIndex <= ent.index.byteStart) {\n        // move both by num added\n        ent.index.byteStart += numCharsAdded\n        ent.index.byteEnd += numCharsAdded\n      }\n      // scenario B (inner)\n      else if (\n        insertIndex >= ent.index.byteStart &&\n        insertIndex < ent.index.byteEnd\n      ) {\n        // move end by num added\n        ent.index.byteEnd += numCharsAdded\n      }\n      // scenario C (after)\n      // noop\n    }\n    return this\n  }\n\n  delete(removeStartIndex: number, removeEndIndex: number) {\n    this.unicodeText = new UnicodeString(\n      this.unicodeText.slice(0, removeStartIndex) +\n        this.unicodeText.slice(removeEndIndex),\n    )\n\n    if (!this.facets?.length) {\n      return this\n    }\n\n    const numCharsRemoved = removeEndIndex - removeStartIndex\n    for (const ent of this.facets) {\n      // see comment at top of file for labels of each scenario\n      // scenario A (entirely outer)\n      if (\n        removeStartIndex <= ent.index.byteStart &&\n        removeEndIndex >= ent.index.byteEnd\n      ) {\n        // delete slice (will get removed in final pass)\n        ent.index.byteStart = 0\n        ent.index.byteEnd = 0\n      }\n      // scenario B (entirely after)\n      else if (removeStartIndex > ent.index.byteEnd) {\n        // noop\n      }\n      // scenario C (partially after)\n      else if (\n        removeStartIndex > ent.index.byteStart &&\n        removeStartIndex <= ent.index.byteEnd &&\n        removeEndIndex > ent.index.byteEnd\n      ) {\n        // move end to remove start\n        ent.index.byteEnd = removeStartIndex\n      }\n      // scenario D (entirely inner)\n      else if (\n        removeStartIndex >= ent.index.byteStart &&\n        removeEndIndex <= ent.index.byteEnd\n      ) {\n        // move end by num removed\n        ent.index.byteEnd -= numCharsRemoved\n      }\n      // scenario E (partially before)\n      else if (\n        removeStartIndex < ent.index.byteStart &&\n        removeEndIndex >= ent.index.byteStart &&\n        removeEndIndex <= ent.index.byteEnd\n      ) {\n        // move start to remove-start index, move end by num removed\n        ent.index.byteStart = removeStartIndex\n        ent.index.byteEnd -= numCharsRemoved\n      }\n      // scenario F (entirely before)\n      else if (removeEndIndex < ent.index.byteStart) {\n        // move both by num removed\n        ent.index.byteStart -= numCharsRemoved\n        ent.index.byteEnd -= numCharsRemoved\n      }\n    }\n\n    // filter out any facets that were made irrelevant\n    this.facets = this.facets.filter(\n      (ent) => ent.index.byteStart < ent.index.byteEnd,\n    )\n    return this\n  }\n\n  /**\n   * Detects facets such as links and mentions\n   * Note: Overwrites the existing facets with auto-detected facets\n   */\n  async detectFacets(agent: AtpAgent) {\n    this.facets = detectFacets(this.unicodeText)\n    if (this.facets) {\n      for (const facet of this.facets) {\n        for (const feature of facet.features) {\n          if (AppBskyRichtextFacet.isMention(feature)) {\n            const did = await agent\n              .resolveHandle({ handle: feature.did })\n              .catch((_) => undefined)\n              .then((res) => res?.data.did)\n            feature.did = did || ''\n          }\n        }\n      }\n      this.facets.sort(facetSort)\n    }\n  }\n\n  /**\n   * Detects facets such as links and mentions but does not resolve them\n   * Will produce invalid facets! For instance, mentions will not have their DIDs set.\n   * Note: Overwrites the existing facets with auto-detected facets\n   */\n  detectFacetsWithoutResolution() {\n    this.facets = detectFacets(this.unicodeText)\n    if (this.facets) {\n      this.facets.sort(facetSort)\n    }\n  }\n}\n\nconst facetSort = (a, b) => a.index.byteStart - b.index.byteStart\n\nfunction entitiesToFacets(text: UnicodeString, entities: Entity[]): Facet[] {\n  const facets: Facet[] = []\n  for (const ent of entities) {\n    if (ent.type === 'link') {\n      facets.push({\n        $type: 'app.bsky.richtext.facet',\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end),\n        },\n        features: [{ $type: 'app.bsky.richtext.facet#link', uri: ent.value }],\n      })\n    } else if (ent.type === 'mention') {\n      facets.push({\n        $type: 'app.bsky.richtext.facet',\n        index: {\n          byteStart: text.utf16IndexToUtf8Index(ent.index.start),\n          byteEnd: text.utf16IndexToUtf8Index(ent.index.end),\n        },\n        features: [\n          { $type: 'app.bsky.richtext.facet#mention', did: ent.value },\n        ],\n      })\n    }\n  }\n  return facets\n}\n\nfunction cloneDeep<T>(v: T): T {\n  if (typeof v === 'undefined') {\n    return v\n  }\n  return JSON.parse(JSON.stringify(v))\n}\n","import {\n  AppBskyActorDefs,\n  AppBskyFeedDefs,\n  AppBskyGraphDefs,\n  ComAtprotoLabelDefs,\n} from '../client/index'\n\n// labels\n// =\n\nexport type Label = ComAtprotoLabelDefs.Label\n\nexport type LabelPreference = 'ignore' | 'warn' | 'hide'\nexport type LabelDefinitionFlag = 'no-override' | 'adult' | 'unauthed'\nexport type LabelDefinitionOnWarnBehavior =\n  | 'blur'\n  | 'blur-media'\n  | 'alert'\n  | null\n\nexport interface LabelDefinitionLocalizedStrings {\n  name: string\n  description: string\n}\n\nexport type LabelDefinitionLocalizedStringsMap = Record<\n  string,\n  LabelDefinitionLocalizedStrings\n>\n\nexport interface LabelDefinition {\n  id: string\n  groupId: string\n  configurable: boolean\n  preferences: LabelPreference[]\n  flags: LabelDefinitionFlag[]\n  onwarn: LabelDefinitionOnWarnBehavior\n  strings: {\n    settings: LabelDefinitionLocalizedStringsMap\n    account: LabelDefinitionLocalizedStringsMap\n    content: LabelDefinitionLocalizedStringsMap\n  }\n}\n\nexport interface LabelGroupDefinition {\n  id: string\n  configurable: boolean\n  labels: LabelDefinition[]\n  strings: {\n    settings: LabelDefinitionLocalizedStringsMap\n  }\n}\n\nexport type LabelDefinitionMap = Record<string, LabelDefinition>\nexport type LabelGroupDefinitionMap = Record<string, LabelGroupDefinition>\n\n// labelers\n// =\n\ninterface Labeler {\n  did: string\n  displayName: string\n}\n\nexport interface LabelerSettings {\n  labeler: Labeler\n  labels: Record<string, LabelPreference>\n}\n\n// subjects\n// =\n\nexport type ModerationSubjectProfile =\n  | AppBskyActorDefs.ProfileViewBasic\n  | AppBskyActorDefs.ProfileView\n  | AppBskyActorDefs.ProfileViewDetailed\n\nexport type ModerationSubjectPost = AppBskyFeedDefs.PostView\n\nexport type ModerationSubjectFeedGenerator = AppBskyFeedDefs.GeneratorView\n\nexport type ModerationSubjectUserList =\n  | AppBskyGraphDefs.ListViewBasic\n  | AppBskyGraphDefs.ListView\n\nexport type ModerationSubject =\n  | ModerationSubjectProfile\n  | ModerationSubjectPost\n  | ModerationSubjectFeedGenerator\n  | ModerationSubjectUserList\n\n// behaviors\n// =\n\nexport type ModerationCauseSource =\n  | { type: 'user' }\n  | { type: 'list'; list: AppBskyGraphDefs.ListViewBasic }\n  | { type: 'labeler'; labeler: Labeler }\n\nexport type ModerationCause =\n  | { type: 'blocking'; source: ModerationCauseSource; priority: 3 }\n  | { type: 'blocked-by'; source: ModerationCauseSource; priority: 4 }\n  | { type: 'block-other'; source: ModerationCauseSource; priority: 4 }\n  | {\n      type: 'label'\n      source: ModerationCauseSource\n      label: Label\n      labelDef: LabelDefinition\n      setting: LabelPreference\n      priority: 1 | 2 | 5 | 7 | 8\n    }\n  | { type: 'muted'; source: ModerationCauseSource; priority: 6 }\n\nexport interface ModerationOpts {\n  userDid: string\n  adultContentEnabled: boolean\n  labels: Record<string, LabelPreference>\n  labelers: LabelerSettings[]\n}\n\nexport class ModerationDecision {\n  static noop() {\n    return new ModerationDecision()\n  }\n\n  constructor(\n    public cause: ModerationCause | undefined = undefined,\n    public alert: boolean = false,\n    public blur: boolean = false,\n    public blurMedia: boolean = false,\n    public filter: boolean = false,\n    public noOverride: boolean = false,\n    public additionalCauses: ModerationCause[] = [],\n    public did: string = '',\n  ) {}\n}\n\nexport interface ModerationUI {\n  filter?: boolean\n  blur?: boolean\n  alert?: boolean\n  cause?: ModerationCause\n  noOverride?: boolean\n}\n","/** this doc is generated by ./scripts/code/labels.mjs **/\nimport { LabelDefinitionMap } from '../types'\n\nexport const LABELS: LabelDefinitionMap = {\n  '!hide': {\n    id: '!hide',\n    preferences: ['hide'],\n    flags: ['no-override'],\n    onwarn: 'blur',\n    groupId: 'system',\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: 'Moderator Hide',\n          description: 'Moderator has chosen to hide the content.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Content Blocked',\n          description: 'This account has been hidden by the moderators.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Content Blocked',\n          description: 'This content has been hidden by the moderators.',\n        },\n      },\n    },\n  },\n  '!no-promote': {\n    id: '!no-promote',\n    preferences: ['hide'],\n    flags: [],\n    onwarn: null,\n    groupId: 'system',\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: 'Moderator Filter',\n          description: 'Moderator has chosen to filter the content from feeds.',\n        },\n      },\n      account: {\n        en: {\n          name: 'N/A',\n          description: 'N/A',\n        },\n      },\n      content: {\n        en: {\n          name: 'N/A',\n          description: 'N/A',\n        },\n      },\n    },\n  },\n  '!warn': {\n    id: '!warn',\n    preferences: ['warn'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'system',\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: 'Moderator Warn',\n          description:\n            'Moderator has chosen to set a general warning on the content.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Content Warning',\n          description:\n            'This account has received a general warning from moderators.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Content Warning',\n          description:\n            'This content has received a general warning from moderators.',\n        },\n      },\n    },\n  },\n  '!no-unauthenticated': {\n    id: '!no-unauthenticated',\n    preferences: ['hide'],\n    flags: ['no-override', 'unauthed'],\n    onwarn: 'blur',\n    groupId: 'system',\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: 'Sign-in Required',\n          description:\n            'This user has requested that their account only be shown to signed-in users.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Sign-in Required',\n          description:\n            'This user has requested that their account only be shown to signed-in users.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Sign-in Required',\n          description:\n            'This user has requested that their content only be shown to signed-in users.',\n        },\n      },\n    },\n  },\n  'dmca-violation': {\n    id: 'dmca-violation',\n    preferences: ['hide'],\n    flags: ['no-override'],\n    onwarn: 'blur',\n    groupId: 'legal',\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: 'Copyright Violation',\n          description: 'The content has received a DMCA takedown request.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Copyright Violation',\n          description:\n            'This account has received a DMCA takedown request. It will be restored if the concerns can be resolved.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Copyright Violation',\n          description:\n            'This content has received a DMCA takedown request. It will be restored if the concerns can be resolved.',\n        },\n      },\n    },\n  },\n  doxxing: {\n    id: 'doxxing',\n    preferences: ['hide'],\n    flags: ['no-override'],\n    onwarn: 'blur',\n    groupId: 'legal',\n    configurable: false,\n    strings: {\n      settings: {\n        en: {\n          name: 'Doxxing',\n          description:\n            'Information that reveals private information about someone which has been shared without the consent of the subject.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Doxxing',\n          description:\n            'This account has been reported to publish private information about someone without their consent. This report is currently under review.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Doxxing',\n          description:\n            'This content has been reported to include private information about someone without their consent.',\n        },\n      },\n    },\n  },\n  porn: {\n    id: 'porn',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'sexual',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Pornography',\n          description:\n            'Images of full-frontal nudity (genitalia) in any sexualized context, or explicit sexual activity (meaning contact with genitalia or breasts) even if partially covered. Includes graphic sexual cartoons (often jokes/memes).',\n        },\n      },\n      account: {\n        en: {\n          name: 'Adult Content',\n          description:\n            'This account contains imagery of full-frontal nudity or explicit sexual activity.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Adult Content',\n          description:\n            'This content contains imagery of full-frontal nudity or explicit sexual activity.',\n        },\n      },\n    },\n  },\n  sexual: {\n    id: 'sexual',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'sexual',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Sexually Suggestive',\n          description:\n            'Content that does not meet the level of \"pornography\", but is still sexual. Some common examples have been selfies and \"hornyposting\" with underwear on, or partially naked (naked but covered, eg with hands or from side perspective). Sheer/see-through nipples may end up in this category.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Suggestive Content',\n          description:\n            'This account contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Suggestive Content',\n          description:\n            'This content contains imagery which is sexually suggestive. Common examples include selfies in underwear or in partial undress.',\n        },\n      },\n    },\n  },\n  nudity: {\n    id: 'nudity',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'sexual',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Nudity',\n          description:\n            'Nudity which is not sexual, or that is primarily \"artistic\" in nature. For example: breastfeeding; classic art paintings and sculptures; newspaper images with some nudity; fashion modeling. \"Erotic photography\" is likely to end up in sexual or porn.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Adult Content',\n          description:\n            'This account contains imagery which portrays nudity in a non-sexual or artistic setting.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Adult Content',\n          description:\n            'This content contains imagery which portrays nudity in a non-sexual or artistic setting.',\n        },\n      },\n    },\n  },\n  nsfl: {\n    id: 'nsfl',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'violence',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'NSFL',\n          description:\n            '\"Not Suitable For Life.\" This includes graphic images like the infamous \"goatse\" (don\\'t look it up).',\n        },\n      },\n      account: {\n        en: {\n          name: 'Graphic Imagery (NSFL)',\n          description:\n            'This account contains graphic images which are often referred to as \"Not Suitable For Life.\"',\n        },\n      },\n      content: {\n        en: {\n          name: 'Graphic Imagery (NSFL)',\n          description:\n            'This content contains graphic images which are often referred to as \"Not Suitable For Life.\"',\n        },\n      },\n    },\n  },\n  corpse: {\n    id: 'corpse',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'violence',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Corpse',\n          description:\n            'Visual image of a dead human body in any context. Includes war images, hanging, funeral caskets. Does not include all figurative cases (cartoons), but can include realistic figurative images or renderings.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Graphic Imagery (Corpse)',\n          description:\n            'This account contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Graphic Imagery (Corpse)',\n          description:\n            'This content contains images of a dead human body in any context. Includes war images, hanging, funeral caskets.',\n        },\n      },\n    },\n  },\n  gore: {\n    id: 'gore',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'violence',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Gore',\n          description:\n            'Intended for shocking images, typically involving blood or visible wounds.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Graphic Imagery (Gore)',\n          description:\n            'This account contains shocking images involving blood or visible wounds.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Graphic Imagery (Gore)',\n          description:\n            'This content contains shocking images involving blood or visible wounds.',\n        },\n      },\n    },\n  },\n  torture: {\n    id: 'torture',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur',\n    groupId: 'violence',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Torture',\n          description:\n            'Depictions of torture of a human or animal (animal cruelty).',\n        },\n      },\n      account: {\n        en: {\n          name: 'Graphic Imagery (Torture)',\n          description:\n            'This account contains depictions of torture of a human or animal.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Graphic Imagery (Torture)',\n          description:\n            'This content contains depictions of torture of a human or animal.',\n        },\n      },\n    },\n  },\n  'self-harm': {\n    id: 'self-harm',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: ['adult'],\n    onwarn: 'blur-media',\n    groupId: 'violence',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Self-Harm',\n          description:\n            'A visual depiction (photo or figurative) of cutting, suicide, or similar.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Graphic Imagery (Self-Harm)',\n          description:\n            'This account includes depictions of cutting, suicide, or other forms of self-harm.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Graphic Imagery (Self-Harm)',\n          description:\n            'This content includes depictions of cutting, suicide, or other forms of self-harm.',\n        },\n      },\n    },\n  },\n  'intolerant-race': {\n    id: 'intolerant-race',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'intolerance',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Racial Intolerance',\n          description: 'Hateful or intolerant content related to race.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Intolerance (Racial)',\n          description:\n            'This account includes hateful or intolerant content related to race.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Intolerance (Racial)',\n          description:\n            'This content includes hateful or intolerant views related to race.',\n        },\n      },\n    },\n  },\n  'intolerant-gender': {\n    id: 'intolerant-gender',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'intolerance',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Gender Intolerance',\n          description:\n            'Hateful or intolerant content related to gender or gender identity.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Intolerance (Gender)',\n          description:\n            'This account includes hateful or intolerant content related to gender or gender identity.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Intolerance (Gender)',\n          description:\n            'This content includes hateful or intolerant views related to gender or gender identity.',\n        },\n      },\n    },\n  },\n  'intolerant-sexual-orientation': {\n    id: 'intolerant-sexual-orientation',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'intolerance',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Sexual Orientation Intolerance',\n          description:\n            'Hateful or intolerant content related to sexual preferences.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Intolerance (Orientation)',\n          description:\n            'This account includes hateful or intolerant content related to sexual preferences.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Intolerance (Orientation)',\n          description:\n            'This content includes hateful or intolerant views related to sexual preferences.',\n        },\n      },\n    },\n  },\n  'intolerant-religion': {\n    id: 'intolerant-religion',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'intolerance',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Religious Intolerance',\n          description:\n            'Hateful or intolerant content related to religious views or practices.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Intolerance (Religious)',\n          description:\n            'This account includes hateful or intolerant content related to religious views or practices.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Intolerance (Religious)',\n          description:\n            'This content includes hateful or intolerant views related to religious views or practices.',\n        },\n      },\n    },\n  },\n  intolerant: {\n    id: 'intolerant',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'intolerance',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Intolerance',\n          description:\n            'A catchall for hateful or intolerant content which is not covered elsewhere.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Intolerance',\n          description: 'This account includes hateful or intolerant content.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Intolerance',\n          description: 'This content includes hateful or intolerant views.',\n        },\n      },\n    },\n  },\n  'icon-intolerant': {\n    id: 'icon-intolerant',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur-media',\n    groupId: 'intolerance',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Intolerant Iconography',\n          description:\n            'Visual imagery associated with a hate group, such as the KKK or Nazi, in any context (supportive, critical, documentary, etc).',\n        },\n      },\n      account: {\n        en: {\n          name: 'Intolerant Iconography',\n          description:\n            'This account includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Intolerant Iconography',\n          description:\n            'This content includes imagery associated with a hate group such as the KKK or Nazis. This warning may apply to content any context, including critical or documentary purposes.',\n        },\n      },\n    },\n  },\n  threat: {\n    id: 'threat',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'rude',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Threats',\n          description:\n            'Statements or imagery published with the intent to threaten, intimidate, or harm.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Threats',\n          description:\n            'The moderators believe this account has published statements or imagery with the intent to threaten, intimidate, or harm others.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Threats',\n          description:\n            'The moderators believe this content was published with the intent to threaten, intimidate, or harm others.',\n        },\n      },\n    },\n  },\n  spoiler: {\n    id: 'spoiler',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'curation',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Spoiler',\n          description:\n            'Discussion about film, TV, etc which gives away plot points.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Spoiler Warning',\n          description:\n            'This account contains discussion about film, TV, etc which gives away plot points.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Spoiler Warning',\n          description:\n            'This content contains discussion about film, TV, etc which gives away plot points.',\n        },\n      },\n    },\n  },\n  spam: {\n    id: 'spam',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'spam',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Spam',\n          description:\n            'Repeat, low-quality messages which are clearly not designed to add to a conversation or space.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Spam',\n          description:\n            'This account publishes repeat, low-quality messages which are clearly not designed to add to a conversation or space.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Spam',\n          description:\n            'This content is a part of repeat, low-quality messages which are clearly not designed to add to a conversation or space.',\n        },\n      },\n    },\n  },\n  'account-security': {\n    id: 'account-security',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'misinfo',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Security Concerns',\n          description:\n            'Content designed to hijack user accounts such as a phishing attack.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Security Warning',\n          description:\n            'This account has published content designed to hijack user accounts such as a phishing attack.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Security Warning',\n          description:\n            'This content is designed to hijack user accounts such as a phishing attack.',\n        },\n      },\n    },\n  },\n  'net-abuse': {\n    id: 'net-abuse',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'blur',\n    groupId: 'misinfo',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Network Attacks',\n          description:\n            'Content designed to attack network systems such as denial-of-service attacks.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Network Attack Warning',\n          description:\n            'This account has published content designed to attack network systems such as denial-of-service attacks.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Network Attack Warning',\n          description:\n            'This content is designed to attack network systems such as denial-of-service attacks.',\n        },\n      },\n    },\n  },\n  impersonation: {\n    id: 'impersonation',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'alert',\n    groupId: 'misinfo',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Impersonation',\n          description: 'Accounts which falsely assert some identity.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Impersonation Warning',\n          description:\n            'The moderators believe this account is lying about their identity.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Impersonation Warning',\n          description:\n            'The moderators believe this account is lying about their identity.',\n        },\n      },\n    },\n  },\n  scam: {\n    id: 'scam',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'alert',\n    groupId: 'misinfo',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Scam',\n          description: 'Fraudulent content.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Scam Warning',\n          description:\n            'The moderators believe this account publishes fraudulent content.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Scam Warning',\n          description: 'The moderators believe this is fraudulent content.',\n        },\n      },\n    },\n  },\n  misleading: {\n    id: 'misleading',\n    preferences: ['ignore', 'warn', 'hide'],\n    flags: [],\n    onwarn: 'alert',\n    groupId: 'misinfo',\n    configurable: true,\n    strings: {\n      settings: {\n        en: {\n          name: 'Misleading',\n          description: 'Accounts which share misleading information.',\n        },\n      },\n      account: {\n        en: {\n          name: 'Misleading',\n          description:\n            'The moderators believe this account is spreading misleading information.',\n        },\n      },\n      content: {\n        en: {\n          name: 'Misleading',\n          description:\n            'The moderators believe this account is spreading misleading information.',\n        },\n      },\n    },\n  },\n}\n","import { AppBskyGraphDefs } from '../client/index'\nimport {\n  Label,\n  LabelPreference,\n  ModerationCause,\n  ModerationOpts,\n  ModerationDecision,\n} from './types'\nimport { LABELS } from './const/labels'\n\nexport class ModerationCauseAccumulator {\n  did = ''\n  causes: ModerationCause[] = []\n\n  constructor() {}\n\n  setDid(did: string) {\n    this.did = did\n  }\n\n  addBlocking(blocking: string | undefined) {\n    if (blocking) {\n      this.causes.push({\n        type: 'blocking',\n        source: { type: 'user' },\n        priority: 3,\n      })\n    }\n  }\n\n  addBlockingByList(\n    blockingByList: AppBskyGraphDefs.ListViewBasic | undefined,\n  ) {\n    if (blockingByList) {\n      this.causes.push({\n        type: 'blocking',\n        source: { type: 'list', list: blockingByList },\n        priority: 3,\n      })\n    }\n  }\n\n  addBlockedBy(blockedBy: boolean | undefined) {\n    if (blockedBy) {\n      this.causes.push({\n        type: 'blocked-by',\n        source: { type: 'user' },\n        priority: 4,\n      })\n    }\n  }\n\n  addBlockOther(blockOther: boolean | undefined) {\n    if (blockOther) {\n      this.causes.push({\n        type: 'block-other',\n        source: { type: 'user' },\n        priority: 4,\n      })\n    }\n  }\n\n  addLabel(label: Label, opts: ModerationOpts) {\n    // look up the label definition\n    const labelDef = LABELS[label.val]\n    if (!labelDef) {\n      // ignore labels we don't understand\n      return\n    }\n\n    // look up the label preference\n    const isSelf = label.src === this.did\n    const labeler = isSelf\n      ? undefined\n      : opts.labelers.find((s) => s.labeler.did === label.src)\n\n    /* TODO when 3P labelers are supported\n    if (!isSelf && !labeler) {\n      return // skip labelers not configured by the user\n    }*/\n\n    // establish the label preference for interpretation\n    let labelPref: LabelPreference = 'ignore'\n    if (!labelDef.configurable) {\n      labelPref = labelDef.preferences[0]\n    } else if (labelDef.flags.includes('adult') && !opts.adultContentEnabled) {\n      labelPref = 'hide'\n    } else if (labeler?.labels[label.val]) {\n      labelPref = labeler.labels[label.val]\n    } else if (opts.labels[label.val]) {\n      labelPref = opts.labels[label.val]\n    }\n\n    // ignore labels the user has asked to ignore\n    if (labelPref === 'ignore') {\n      return\n    }\n\n    // ignore 'unauthed' labels when the user is authed\n    if (labelDef.flags.includes('unauthed') && !!opts.userDid) {\n      return\n    }\n\n    // establish the priority of the label\n    let priority: 1 | 2 | 5 | 7 | 8\n    if (labelDef.flags.includes('no-override')) {\n      priority = 1\n    } else if (labelPref === 'hide') {\n      priority = 2\n    } else if (labelDef.onwarn === 'blur') {\n      priority = 5\n    } else if (labelDef.onwarn === 'blur-media') {\n      priority = 7\n    } else {\n      priority = 8\n    }\n\n    this.causes.push({\n      type: 'label',\n      source:\n        isSelf || !labeler\n          ? { type: 'user' }\n          : { type: 'labeler', labeler: labeler.labeler },\n      label,\n      labelDef,\n      setting: labelPref,\n      priority,\n    })\n  }\n\n  addMuted(muted: boolean | undefined) {\n    if (muted) {\n      this.causes.push({\n        type: 'muted',\n        source: { type: 'user' },\n        priority: 6,\n      })\n    }\n  }\n\n  addMutedByList(mutedByList: AppBskyGraphDefs.ListViewBasic | undefined) {\n    if (mutedByList) {\n      this.causes.push({\n        type: 'muted',\n        source: { type: 'list', list: mutedByList },\n        priority: 6,\n      })\n    }\n  }\n\n  finalizeDecision(opts: ModerationOpts): ModerationDecision {\n    const mod = new ModerationDecision()\n    mod.did = this.did\n    if (!this.causes.length) {\n      return mod\n    }\n\n    // sort the causes by priority and then choose the top one\n    this.causes.sort((a, b) => a.priority - b.priority)\n    mod.cause = this.causes[0]\n    mod.additionalCauses = this.causes.slice(1)\n\n    // blocked user\n    if (\n      mod.cause.type === 'blocking' ||\n      mod.cause.type === 'blocked-by' ||\n      mod.cause.type === 'block-other'\n    ) {\n      // filter and blur, dont allow override\n      mod.filter = true\n      mod.blur = true\n      mod.noOverride = true\n    }\n    // muted user\n    else if (mod.cause.type === 'muted') {\n      // filter and blur\n      mod.filter = true\n      mod.blur = true\n    }\n    // labeled subject\n    else if (mod.cause.type === 'label') {\n      // 'hide' setting\n      if (mod.cause.setting === 'hide') {\n        // filter\n        mod.filter = true\n      }\n\n      // 'hide' and 'warn' setting, apply onwarn\n      switch (mod.cause.labelDef.onwarn) {\n        case 'alert':\n          mod.alert = true\n          break\n        case 'blur':\n          mod.blur = true\n          break\n        case 'blur-media':\n          mod.blurMedia = true\n          break\n        case null:\n          // do nothing\n          break\n      }\n\n      // apply noOverride as needed\n      if (mod.cause.labelDef.flags.includes('no-override')) {\n        mod.noOverride = true\n      } else if (\n        mod.cause.labelDef.flags.includes('adult') &&\n        !opts.adultContentEnabled\n      ) {\n        mod.noOverride = true\n      }\n    }\n\n    return mod\n  }\n}\n","import { ModerationCauseAccumulator } from '../accumulator'\nimport {\n  Label,\n  ModerationSubjectProfile,\n  ModerationOpts,\n  ModerationDecision,\n} from '../types'\n\nexport function decideAccount(\n  subject: ModerationSubjectProfile,\n  opts: ModerationOpts,\n): ModerationDecision {\n  const acc = new ModerationCauseAccumulator()\n\n  acc.setDid(subject.did)\n  if (subject.viewer?.muted) {\n    if (subject.viewer?.mutedByList) {\n      acc.addMutedByList(subject.viewer?.mutedByList)\n    } else {\n      acc.addMuted(subject.viewer?.muted)\n    }\n  }\n  if (subject.viewer?.blocking) {\n    if (subject.viewer?.blockingByList) {\n      acc.addBlockingByList(subject.viewer?.blockingByList)\n    } else {\n      acc.addBlocking(subject.viewer?.blocking)\n    }\n  }\n  acc.addBlockedBy(subject.viewer?.blockedBy)\n\n  for (const label of filterAccountLabels(subject.labels)) {\n    acc.addLabel(label, opts)\n  }\n\n  return acc.finalizeDecision(opts)\n}\n\nexport function filterAccountLabels(labels?: Label[]): Label[] {\n  if (!labels) {\n    return []\n  }\n  return labels.filter(\n    (label) =>\n      !label.uri.endsWith('/app.bsky.actor.profile/self') ||\n      label.val === '!no-unauthenticated',\n  )\n}\n","import { ModerationCauseAccumulator } from '../accumulator'\nimport {\n  Label,\n  ModerationSubjectProfile,\n  ModerationOpts,\n  ModerationDecision,\n} from '../types'\n\nexport function decideProfile(\n  subject: ModerationSubjectProfile,\n  opts: ModerationOpts,\n): ModerationDecision {\n  const acc = new ModerationCauseAccumulator()\n\n  acc.setDid(subject.did)\n\n  for (const label of filterProfileLabels(subject.labels)) {\n    acc.addLabel(label, opts)\n  }\n\n  return acc.finalizeDecision(opts)\n}\n\nexport function filterProfileLabels(labels?: Label[]): Label[] {\n  if (!labels) {\n    return []\n  }\n  return labels.filter((label) =>\n    label.uri.endsWith('/app.bsky.actor.profile/self'),\n  )\n}\n","import { ModerationCauseAccumulator } from '../accumulator'\nimport {\n  ModerationSubjectPost,\n  ModerationOpts,\n  ModerationDecision,\n} from '../types'\n\nexport function decidePost(\n  subject: ModerationSubjectPost,\n  opts: ModerationOpts,\n): ModerationDecision {\n  const acc = new ModerationCauseAccumulator()\n\n  acc.setDid(subject.author.did)\n\n  if (subject.labels?.length) {\n    for (const label of subject.labels) {\n      acc.addLabel(label, opts)\n    }\n  }\n\n  return acc.finalizeDecision(opts)\n}\n","import { AppBskyEmbedRecord, AppBskyEmbedRecordWithMedia } from '../../client'\nimport { ModerationCauseAccumulator } from '../accumulator'\nimport { ModerationOpts, ModerationDecision } from '../types'\nimport { decideAccount } from './account'\n\nexport function decideQuotedPost(\n  subject: AppBskyEmbedRecord.View,\n  opts: ModerationOpts,\n): ModerationDecision {\n  const acc = new ModerationCauseAccumulator()\n\n  if (AppBskyEmbedRecord.isViewRecord(subject.record)) {\n    acc.setDid(subject.record.author.did)\n\n    if (subject.record.labels?.length) {\n      for (const label of subject.record.labels) {\n        acc.addLabel(label, opts)\n      }\n    }\n  } else if (AppBskyEmbedRecord.isViewBlocked(subject.record)) {\n    acc.setDid(subject.record.author.did)\n    if (subject.record.author.viewer?.blocking) {\n      acc.addBlocking(subject.record.author.viewer?.blocking)\n    } else if (subject.record.author.viewer?.blockedBy) {\n      acc.addBlockedBy(subject.record.author.viewer?.blockedBy)\n    } else {\n      acc.addBlockOther(true)\n    }\n  }\n\n  return acc.finalizeDecision(opts)\n}\n\nexport function decideQuotedPostAccount(\n  subject: AppBskyEmbedRecord.View,\n  opts: ModerationOpts,\n): ModerationDecision {\n  if (AppBskyEmbedRecord.isViewRecord(subject.record)) {\n    return decideAccount(subject.record.author, opts)\n  }\n  return ModerationDecision.noop()\n}\n\nexport function decideQuotedPostWithMedia(\n  subject: AppBskyEmbedRecordWithMedia.View,\n  opts: ModerationOpts,\n): ModerationDecision {\n  const acc = new ModerationCauseAccumulator()\n\n  if (AppBskyEmbedRecord.isViewRecord(subject.record.record)) {\n    acc.setDid(subject.record.record.author.did)\n\n    if (subject.record.record.labels?.length) {\n      for (const label of subject.record.record.labels) {\n        acc.addLabel(label, opts)\n      }\n    }\n  } else if (AppBskyEmbedRecord.isViewBlocked(subject.record.record)) {\n    acc.setDid(subject.record.record.author.did)\n    if (subject.record.record.author.viewer?.blocking) {\n      acc.addBlocking(subject.record.record.author.viewer?.blocking)\n    } else if (subject.record.record.author.viewer?.blockedBy) {\n      acc.addBlockedBy(subject.record.record.author.viewer?.blockedBy)\n    } else {\n      acc.addBlockOther(true)\n    }\n  }\n\n  return acc.finalizeDecision(opts)\n}\n\nexport function decideQuotedPostWithMediaAccount(\n  subject: AppBskyEmbedRecordWithMedia.View,\n  opts: ModerationOpts,\n): ModerationDecision {\n  if (AppBskyEmbedRecord.isViewRecord(subject.record.record)) {\n    return decideAccount(subject.record.record.author, opts)\n  }\n  return ModerationDecision.noop()\n}\n","import {\n  ModerationSubjectFeedGenerator,\n  ModerationDecision,\n  ModerationOpts,\n} from '../types'\n\nexport function decideFeedGenerator(\n  _subject: ModerationSubjectFeedGenerator,\n  _opts: ModerationOpts,\n): ModerationDecision {\n  // TODO handle labels applied on the feed generator itself\n  return ModerationDecision.noop()\n}\n","import {\n  ModerationSubjectUserList,\n  ModerationOpts,\n  ModerationDecision,\n} from '../types'\n\nexport function decideUserList(\n  _subject: ModerationSubjectUserList,\n  _opts: ModerationOpts,\n): ModerationDecision {\n  // TODO handle labels applied on the list itself\n  return ModerationDecision.noop()\n}\n","import { AppBskyEmbedRecord, AppBskyEmbedRecordWithMedia } from '../client'\nimport { ModerationDecision, ModerationUI } from './types'\n\nexport function takeHighestPriorityDecision(\n  ...decisions: (ModerationDecision | undefined)[]\n): ModerationDecision {\n  // remove undefined decisions\n  const filtered = decisions.filter((d) => !!d) as ModerationDecision[]\n  if (filtered.length === 0) {\n    return ModerationDecision.noop()\n  }\n\n  // sort by highest priority\n  filtered.sort((a, b) => {\n    if (a.cause && b.cause) {\n      return a.cause.priority - b.cause.priority\n    }\n    if (a.cause) {\n      return -1\n    }\n    if (b.cause) {\n      return 1\n    }\n    return 0\n  })\n\n  // use the top priority\n  return filtered[0]\n}\n\nexport function downgradeDecision(\n  decision: ModerationDecision,\n  to: 'blur' | 'alert' | 'noop',\n) {\n  decision.filter = false\n  decision.noOverride = false\n  if (to === 'noop') {\n    decision.blur = false\n    decision.blurMedia = false\n    decision.alert = false\n    delete decision.cause\n  } else if (to === 'alert') {\n    decision.blur = false\n    decision.blurMedia = false\n    decision.alert = true\n  }\n}\n\nexport function isModerationDecisionNoop(\n  decision: ModerationDecision | undefined,\n  { ignoreFilter }: { ignoreFilter: boolean } = { ignoreFilter: false },\n): boolean {\n  if (!decision) {\n    return true\n  }\n  if (decision.alert) {\n    return false\n  }\n  if (decision.blur) {\n    return false\n  }\n  if (decision.filter && !ignoreFilter) {\n    return false\n  }\n  return true\n}\n\nexport function isQuotedPost(embed: unknown): embed is AppBskyEmbedRecord.View {\n  return Boolean(embed && AppBskyEmbedRecord.isView(embed))\n}\n\nexport function isQuotedPostWithMedia(\n  embed: unknown,\n): embed is AppBskyEmbedRecordWithMedia.View {\n  return Boolean(embed && AppBskyEmbedRecordWithMedia.isView(embed))\n}\n\nexport function toModerationUI(decision: ModerationDecision): ModerationUI {\n  return {\n    cause: decision.cause,\n    filter: decision.filter,\n    blur: decision.blur,\n    alert: decision.alert,\n    noOverride: decision.noOverride,\n  }\n}\n","import { AppBskyActorDefs } from '../client/index'\nimport {\n  ModerationSubjectProfile,\n  ModerationSubjectPost,\n  ModerationSubjectFeedGenerator,\n  ModerationSubjectUserList,\n  ModerationOpts,\n  ModerationDecision,\n  ModerationUI,\n} from './types'\nimport { decideAccount } from './subjects/account'\nimport { decideProfile } from './subjects/profile'\nimport { decidePost } from './subjects/post'\nimport {\n  decideQuotedPost,\n  decideQuotedPostAccount,\n  decideQuotedPostWithMedia,\n  decideQuotedPostWithMediaAccount,\n} from './subjects/quoted-post'\nimport { decideFeedGenerator } from './subjects/feed-generator'\nimport { decideUserList } from './subjects/user-list'\nimport {\n  takeHighestPriorityDecision,\n  downgradeDecision,\n  isModerationDecisionNoop,\n  isQuotedPost,\n  isQuotedPostWithMedia,\n  toModerationUI,\n} from './util'\n\n// profiles\n// =\n\nexport interface ProfileModeration {\n  decisions: {\n    account: ModerationDecision\n    profile: ModerationDecision\n  }\n  account: ModerationUI\n  profile: ModerationUI\n  avatar: ModerationUI\n}\n\nexport function moderateProfile(\n  subject: ModerationSubjectProfile,\n  opts: ModerationOpts,\n): ProfileModeration {\n  // decide the moderation the account and the profile\n  const account = decideAccount(subject, opts)\n  const profile = decideProfile(subject, opts)\n\n  // if the decision is supposed to blur media,\n  // - have it apply to the view if it's on the account\n  // - otherwise ignore it\n  if (account.blurMedia) {\n    account.blur = true\n  }\n\n  // don't give profile.filter because that is meaningless\n  profile.filter = false\n\n  // downgrade based on authorship\n  if (!isModerationDecisionNoop(account) && account.did === opts.userDid) {\n    downgradeDecision(account, 'alert')\n  }\n  if (!isModerationDecisionNoop(profile) && profile.did === opts.userDid) {\n    downgradeDecision(profile, 'alert')\n  }\n\n  // derive avatar blurring from account & profile, but override for mutes because that shouldn't blur\n  let avatarBlur = false\n  let avatarNoOverride = false\n  if ((account.blur || account.blurMedia) && account.cause?.type !== 'muted') {\n    avatarBlur = true\n    avatarNoOverride = account.noOverride || profile.noOverride\n  } else if (profile.blur || profile.blurMedia) {\n    avatarBlur = true\n    avatarNoOverride = account.noOverride || profile.noOverride\n  }\n\n  // don't blur the account for blocking & muting\n  if (\n    account.cause?.type === 'blocking' ||\n    account.cause?.type === 'blocked-by' ||\n    account.cause?.type === 'muted'\n  ) {\n    account.blur = false\n    account.noOverride = false\n  }\n\n  return {\n    decisions: { account, profile },\n\n    // moderate all content based on account\n    account:\n      account.filter || account.blur || account.alert\n        ? toModerationUI(account)\n        : {},\n\n    // moderate the profile details based on the profile\n    profile:\n      profile.filter || profile.blur || profile.alert\n        ? toModerationUI(profile)\n        : {},\n\n    // blur or alert the avatar based on the account and profile decisions\n    avatar: {\n      blur: avatarBlur,\n      alert: account.alert || profile.alert,\n      noOverride: avatarNoOverride,\n    },\n  }\n}\n\n// posts\n// =\n\nexport interface PostModeration {\n  decisions: {\n    post: ModerationDecision\n    account: ModerationDecision\n    profile: ModerationDecision\n    quote?: ModerationDecision\n    quotedAccount?: ModerationDecision\n  }\n  content: ModerationUI\n  avatar: ModerationUI\n  embed: ModerationUI\n}\n\nexport function moderatePost(\n  subject: ModerationSubjectPost,\n  opts: ModerationOpts,\n): PostModeration {\n  // decide the moderation for the post, the post author's account,\n  // and the post author's profile\n  const post = decidePost(subject, opts)\n  const account = decideAccount(subject.author, opts)\n  const profile = decideProfile(subject.author, opts)\n\n  // decide the moderation for any quoted posts\n  let quote: ModerationDecision | undefined\n  let quotedAccount: ModerationDecision | undefined\n  if (isQuotedPost(subject.embed)) {\n    quote = decideQuotedPost(subject.embed, opts)\n    quotedAccount = decideQuotedPostAccount(subject.embed, opts)\n  } else if (isQuotedPostWithMedia(subject.embed)) {\n    quote = decideQuotedPostWithMedia(subject.embed, opts)\n    quotedAccount = decideQuotedPostWithMediaAccount(subject.embed, opts)\n  }\n  if (quote?.blurMedia) {\n    quote.blur = true // treat blurMedia of quote as blur of quote\n  }\n\n  // downgrade based on authorship\n  if (!isModerationDecisionNoop(post) && post.did === opts.userDid) {\n    downgradeDecision(post, 'blur')\n  }\n  if (account.cause && account.did === opts.userDid) {\n    downgradeDecision(account, 'noop')\n  }\n  if (profile.cause && profile.did === opts.userDid) {\n    downgradeDecision(profile, 'noop')\n  }\n  if (quote && !isModerationDecisionNoop(quote) && quote.did === opts.userDid) {\n    downgradeDecision(quote, 'blur')\n  }\n  if (\n    quotedAccount &&\n    !isModerationDecisionNoop(quotedAccount) &&\n    quotedAccount.did === opts.userDid\n  ) {\n    downgradeDecision(quotedAccount, 'noop')\n  }\n\n  // derive filtering from feeds from the post, post author's account,\n  // quoted post, and quoted post author's account\n  const mergedForFeed = takeHighestPriorityDecision(\n    post,\n    account,\n    quote,\n    quotedAccount,\n  )\n\n  // derive view blurring from the post and the post author's account\n  const mergedForView = takeHighestPriorityDecision(post, account)\n\n  // derive embed blurring from the quoted post and the quoted post author's account\n  const mergedQuote = takeHighestPriorityDecision(quote, quotedAccount)\n\n  // derive avatar blurring from account & profile, but override for mutes because that shouldn't blur\n  let blurAvatar = false\n  if ((account.blur || account.blurMedia) && account.cause?.type !== 'muted') {\n    blurAvatar = true\n  } else if (\n    (profile.blur || profile.blurMedia) &&\n    profile.cause?.type !== 'muted'\n  ) {\n    blurAvatar = true\n  }\n\n  return {\n    decisions: { post, account, profile, quote, quotedAccount },\n\n    // content behaviors are pulled from feed and view derivations above\n    content: {\n      cause: !isModerationDecisionNoop(mergedForView)\n        ? mergedForView.cause\n        : mergedForFeed.filter\n        ? mergedForFeed.cause\n        : undefined,\n      filter: mergedForFeed.filter,\n      blur: mergedForView.blur,\n      alert: mergedForView.alert,\n      noOverride: mergedForView.noOverride,\n    },\n\n    // blur or alert the avatar based on the account and profile decisions\n    avatar: {\n      blur: blurAvatar,\n      alert: account.alert || profile.alert,\n      noOverride: account.noOverride || profile.noOverride,\n    },\n\n    // blur the embed if the quoted post required it,\n    // or else if the account or post decision was to blur media\n    embed: !isModerationDecisionNoop(mergedQuote, { ignoreFilter: true })\n      ? {\n          cause: mergedQuote.cause,\n          blur: mergedQuote.blur,\n          alert: mergedQuote.alert,\n          noOverride: mergedQuote.noOverride,\n        }\n      : account.blurMedia\n      ? {\n          cause: account.cause,\n          blur: true,\n          noOverride: account.noOverride,\n        }\n      : post.blurMedia\n      ? {\n          cause: post.cause,\n          blur: true,\n          noOverride: post.noOverride,\n        }\n      : {},\n  }\n}\n\n// feed generators\n// =\n\nexport interface FeedGeneratorModeration {\n  decisions: {\n    feedGenerator: ModerationDecision\n    account: ModerationDecision\n    profile: ModerationDecision\n  }\n  content: ModerationUI\n  avatar: ModerationUI\n}\n\nexport function moderateFeedGenerator(\n  subject: ModerationSubjectFeedGenerator,\n  opts: ModerationOpts,\n): FeedGeneratorModeration {\n  // decide the moderation for the generator, the generator creator's account,\n  // and the generator creator's profile\n  const feedGenerator = decideFeedGenerator(subject, opts)\n  const account = decideAccount(subject.creator, opts)\n  const profile = decideProfile(subject.creator, opts)\n\n  // derive behaviors from feeds from the generator and the generator's account\n  const merged = takeHighestPriorityDecision(feedGenerator, account)\n\n  return {\n    decisions: { feedGenerator, account, profile },\n\n    // content behaviors are pulled from merged decisions\n    content: {\n      cause: isModerationDecisionNoop(merged) ? undefined : merged.cause,\n      filter: merged.filter,\n      blur: merged.blur,\n      alert: merged.alert,\n      noOverride: merged.noOverride,\n    },\n\n    // blur or alert the avatar based on the account and profile decisions\n    avatar: {\n      blur: account.blurMedia || profile.blurMedia,\n      alert: account.alert,\n      noOverride: account.noOverride || profile.noOverride,\n    },\n  }\n}\n\n// user lists\n// =\n\nexport interface UserListModeration {\n  decisions: {\n    userList: ModerationDecision\n    account: ModerationDecision\n    profile: ModerationDecision\n  }\n  content: ModerationUI\n  avatar: ModerationUI\n}\n\nexport function moderateUserList(\n  subject: ModerationSubjectUserList,\n  opts: ModerationOpts,\n): UserListModeration {\n  // decide the moderation for the list, the list creator's account,\n  // and the list creator's profile\n  const userList = decideUserList(subject, opts)\n  const account = AppBskyActorDefs.isProfileViewBasic(subject.creator)\n    ? decideAccount(subject.creator, opts)\n    : ModerationDecision.noop()\n  const profile = AppBskyActorDefs.isProfileViewBasic(subject.creator)\n    ? decideProfile(subject.creator, opts)\n    : ModerationDecision.noop()\n\n  // derive behaviors from feeds from the list and the list's account\n  const merged = takeHighestPriorityDecision(userList, account)\n\n  return {\n    decisions: { userList, account, profile },\n\n    // content behaviors are pulled from merged decisions\n    content: {\n      cause: isModerationDecisionNoop(merged) ? undefined : merged.cause,\n      filter: merged.filter,\n      blur: merged.blur,\n      alert: merged.alert,\n      noOverride: merged.noOverride,\n    },\n\n    // blur or alert the avatar based on the account and profile decisions\n    avatar: {\n      blur: account.blurMedia || profile.blurMedia,\n      alert: account.alert,\n      noOverride: account.noOverride || profile.noOverride,\n    },\n  }\n}\n","/** this doc is generated by ./scripts/code/labels.mjs **/\nimport { LabelGroupDefinitionMap } from '../types'\nimport { LABELS } from './labels'\n\nexport const LABEL_GROUPS: LabelGroupDefinitionMap = {\n  system: {\n    id: 'system',\n    configurable: false,\n    labels: [\n      LABELS['!hide'],\n      LABELS['!no-promote'],\n      LABELS['!warn'],\n      LABELS['!no-unauthenticated'],\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: 'System',\n          description: 'Moderator overrides for special cases.',\n        },\n      },\n    },\n  },\n  legal: {\n    id: 'legal',\n    configurable: false,\n    labels: [LABELS['dmca-violation'], LABELS['doxxing']],\n    strings: {\n      settings: {\n        en: {\n          name: 'Legal',\n          description: 'Content removed for legal reasons.',\n        },\n      },\n    },\n  },\n  sexual: {\n    id: 'sexual',\n    configurable: true,\n    labels: [LABELS['porn'], LABELS['sexual'], LABELS['nudity']],\n    strings: {\n      settings: {\n        en: {\n          name: 'Adult Content',\n          description: 'Content which is sexual in nature.',\n        },\n      },\n    },\n  },\n  violence: {\n    id: 'violence',\n    configurable: true,\n    labels: [\n      LABELS['nsfl'],\n      LABELS['corpse'],\n      LABELS['gore'],\n      LABELS['torture'],\n      LABELS['self-harm'],\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: 'Violence',\n          description: 'Content which is violent or deeply disturbing.',\n        },\n      },\n    },\n  },\n  intolerance: {\n    id: 'intolerance',\n    configurable: true,\n    labels: [\n      LABELS['intolerant-race'],\n      LABELS['intolerant-gender'],\n      LABELS['intolerant-sexual-orientation'],\n      LABELS['intolerant-religion'],\n      LABELS['intolerant'],\n      LABELS['icon-intolerant'],\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: 'Intolerance',\n          description:\n            'Content or behavior which is hateful or intolerant toward a group of people.',\n        },\n      },\n    },\n  },\n  rude: {\n    id: 'rude',\n    configurable: true,\n    labels: [LABELS['threat']],\n    strings: {\n      settings: {\n        en: {\n          name: 'Rude',\n          description: 'Behavior which is rude toward other users.',\n        },\n      },\n    },\n  },\n  curation: {\n    id: 'curation',\n    configurable: true,\n    labels: [LABELS['spoiler']],\n    strings: {\n      settings: {\n        en: {\n          name: 'Curational',\n          description:\n            'Subjective moderation geared towards curating a more positive environment.',\n        },\n      },\n    },\n  },\n  spam: {\n    id: 'spam',\n    configurable: true,\n    labels: [LABELS['spam']],\n    strings: {\n      settings: {\n        en: {\n          name: 'Spam',\n          description: \"Content which doesn't add to the conversation.\",\n        },\n      },\n    },\n  },\n  misinfo: {\n    id: 'misinfo',\n    configurable: true,\n    labels: [\n      LABELS['account-security'],\n      LABELS['net-abuse'],\n      LABELS['impersonation'],\n      LABELS['scam'],\n      LABELS['misleading'],\n    ],\n    strings: {\n      settings: {\n        en: {\n          name: 'Misinformation',\n          description: 'Content which misleads or defrauds users.',\n        },\n      },\n    },\n  },\n}\n","import { AtUri } from '@atproto/syntax'\nimport { AtpAgent } from './agent'\nimport {\n  AppBskyFeedPost,\n  AppBskyActorProfile,\n  AppBskyActorDefs,\n  ComAtprotoRepoPutRecord,\n} from './client'\nimport {\n  BskyPreferences,\n  BskyLabelPreference,\n  BskyFeedViewPreference,\n  BskyThreadViewPreference,\n  BskyInterestsPreference,\n} from './types'\n\nconst FEED_VIEW_PREF_DEFAULTS = {\n  hideReplies: false,\n  hideRepliesByUnfollowed: false,\n  hideRepliesByLikeCount: 0,\n  hideReposts: false,\n  hideQuotePosts: false,\n}\nconst THREAD_VIEW_PREF_DEFAULTS = {\n  sort: 'oldest',\n  prioritizeFollowedUsers: true,\n}\n\ndeclare global {\n  interface Array<T> {\n    findLast(\n      predicate: (value: T, index: number, obj: T[]) => unknown,\n      thisArg?: any,\n    ): T\n  }\n}\n\nexport class BskyAgent extends AtpAgent {\n  get app() {\n    return this.api.app\n  }\n\n  getTimeline: typeof this.api.app.bsky.feed.getTimeline = (params, opts) =>\n    this.api.app.bsky.feed.getTimeline(params, opts)\n\n  getAuthorFeed: typeof this.api.app.bsky.feed.getAuthorFeed = (params, opts) =>\n    this.api.app.bsky.feed.getAuthorFeed(params, opts)\n\n  getActorLikes: typeof this.api.app.bsky.feed.getActorLikes = (params, opts) =>\n    this.api.app.bsky.feed.getActorLikes(params, opts)\n\n  getPostThread: typeof this.api.app.bsky.feed.getPostThread = (params, opts) =>\n    this.api.app.bsky.feed.getPostThread(params, opts)\n\n  getPost: typeof this.api.app.bsky.feed.post.get = (params) =>\n    this.api.app.bsky.feed.post.get(params)\n\n  getPosts: typeof this.api.app.bsky.feed.getPosts = (params, opts) =>\n    this.api.app.bsky.feed.getPosts(params, opts)\n\n  getLikes: typeof this.api.app.bsky.feed.getLikes = (params, opts) =>\n    this.api.app.bsky.feed.getLikes(params, opts)\n\n  getRepostedBy: typeof this.api.app.bsky.feed.getRepostedBy = (params, opts) =>\n    this.api.app.bsky.feed.getRepostedBy(params, opts)\n\n  getFollows: typeof this.api.app.bsky.graph.getFollows = (params, opts) =>\n    this.api.app.bsky.graph.getFollows(params, opts)\n\n  getFollowers: typeof this.api.app.bsky.graph.getFollowers = (params, opts) =>\n    this.api.app.bsky.graph.getFollowers(params, opts)\n\n  getProfile: typeof this.api.app.bsky.actor.getProfile = (params, opts) =>\n    this.api.app.bsky.actor.getProfile(params, opts)\n\n  getProfiles: typeof this.api.app.bsky.actor.getProfiles = (params, opts) =>\n    this.api.app.bsky.actor.getProfiles(params, opts)\n\n  getSuggestions: typeof this.api.app.bsky.actor.getSuggestions = (\n    params,\n    opts,\n  ) => this.api.app.bsky.actor.getSuggestions(params, opts)\n\n  searchActors: typeof this.api.app.bsky.actor.searchActors = (params, opts) =>\n    this.api.app.bsky.actor.searchActors(params, opts)\n\n  searchActorsTypeahead: typeof this.api.app.bsky.actor.searchActorsTypeahead =\n    (params, opts) =>\n      this.api.app.bsky.actor.searchActorsTypeahead(params, opts)\n\n  listNotifications: typeof this.api.app.bsky.notification.listNotifications = (\n    params,\n    opts,\n  ) => this.api.app.bsky.notification.listNotifications(params, opts)\n\n  countUnreadNotifications: typeof this.api.app.bsky.notification.getUnreadCount =\n    (params, opts) =>\n      this.api.app.bsky.notification.getUnreadCount(params, opts)\n\n  async post(\n    record: Partial<AppBskyFeedPost.Record> &\n      Omit<AppBskyFeedPost.Record, 'createdAt'>,\n  ) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    record.createdAt = record.createdAt || new Date().toISOString()\n    return this.api.app.bsky.feed.post.create(\n      { repo: this.session.did },\n      record as AppBskyFeedPost.Record,\n    )\n  }\n\n  async deletePost(postUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const postUrip = new AtUri(postUri)\n    return await this.api.app.bsky.feed.post.delete({\n      repo: postUrip.hostname,\n      rkey: postUrip.rkey,\n    })\n  }\n\n  async like(uri: string, cid: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.feed.like.create(\n      { repo: this.session.did },\n      {\n        subject: { uri, cid },\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async deleteLike(likeUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const likeUrip = new AtUri(likeUri)\n    return await this.api.app.bsky.feed.like.delete({\n      repo: likeUrip.hostname,\n      rkey: likeUrip.rkey,\n    })\n  }\n\n  async repost(uri: string, cid: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.feed.repost.create(\n      { repo: this.session.did },\n      {\n        subject: { uri, cid },\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async deleteRepost(repostUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const repostUrip = new AtUri(repostUri)\n    return await this.api.app.bsky.feed.repost.delete({\n      repo: repostUrip.hostname,\n      rkey: repostUrip.rkey,\n    })\n  }\n\n  async follow(subjectDid: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.graph.follow.create(\n      { repo: this.session.did },\n      {\n        subject: subjectDid,\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async deleteFollow(followUri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const followUrip = new AtUri(followUri)\n    return await this.api.app.bsky.graph.follow.delete({\n      repo: followUrip.hostname,\n      rkey: followUrip.rkey,\n    })\n  }\n\n  async upsertProfile(\n    updateFn: (\n      existing: AppBskyActorProfile.Record | undefined,\n    ) => AppBskyActorProfile.Record | Promise<AppBskyActorProfile.Record>,\n  ) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n\n    let retriesRemaining = 5\n    while (retriesRemaining >= 0) {\n      // fetch existing\n      const existing = await this.com.atproto.repo\n        .getRecord({\n          repo: this.session.did,\n          collection: 'app.bsky.actor.profile',\n          rkey: 'self',\n        })\n        .catch((_) => undefined)\n\n      // run the update\n      const updated = await updateFn(existing?.data.value)\n      if (updated) {\n        updated.$type = 'app.bsky.actor.profile'\n      }\n\n      // validate the record\n      const validation = AppBskyActorProfile.validateRecord(updated)\n      if (!validation.success) {\n        throw validation.error\n      }\n\n      try {\n        // attempt the put\n        await this.com.atproto.repo.putRecord({\n          repo: this.session.did,\n          collection: 'app.bsky.actor.profile',\n          rkey: 'self',\n          record: updated,\n          swapRecord: existing?.data.cid || null,\n        })\n      } catch (e: unknown) {\n        if (\n          retriesRemaining > 0 &&\n          e instanceof ComAtprotoRepoPutRecord.InvalidSwapError\n        ) {\n          // try again\n          retriesRemaining--\n          continue\n        } else {\n          throw e\n        }\n      }\n      break\n    }\n  }\n\n  async mute(actor: string) {\n    return this.api.app.bsky.graph.muteActor({ actor })\n  }\n\n  async unmute(actor: string) {\n    return this.api.app.bsky.graph.unmuteActor({ actor })\n  }\n\n  async muteModList(uri: string) {\n    return this.api.app.bsky.graph.muteActorList({\n      list: uri,\n    })\n  }\n\n  async unmuteModList(uri: string) {\n    return this.api.app.bsky.graph.unmuteActorList({\n      list: uri,\n    })\n  }\n\n  async blockModList(uri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    return await this.api.app.bsky.graph.listblock.create(\n      { repo: this.session.did },\n      {\n        subject: uri,\n        createdAt: new Date().toISOString(),\n      },\n    )\n  }\n\n  async unblockModList(uri: string) {\n    if (!this.session) {\n      throw new Error('Not logged in')\n    }\n    const listInfo = await this.api.app.bsky.graph.getList({\n      list: uri,\n      limit: 1,\n    })\n    if (!listInfo.data.list.viewer?.blocked) {\n      return\n    }\n    const { rkey } = new AtUri(listInfo.data.list.viewer.blocked)\n    return await this.api.app.bsky.graph.listblock.delete({\n      repo: this.session.did,\n      rkey,\n    })\n  }\n\n  async updateSeenNotifications(seenAt?: string) {\n    seenAt = seenAt || new Date().toISOString()\n    return this.api.app.bsky.notification.updateSeen({\n      seenAt,\n    })\n  }\n\n  async getPreferences(): Promise<BskyPreferences> {\n    const prefs: BskyPreferences = {\n      feeds: {\n        saved: undefined,\n        pinned: undefined,\n      },\n      feedViewPrefs: {\n        home: {\n          ...FEED_VIEW_PREF_DEFAULTS,\n        },\n      },\n      threadViewPrefs: { ...THREAD_VIEW_PREF_DEFAULTS },\n      adultContentEnabled: false,\n      contentLabels: {},\n      birthDate: undefined,\n      interests: {\n        tags: [],\n      },\n    }\n    const res = await this.app.bsky.actor.getPreferences({})\n    for (const pref of res.data.preferences) {\n      if (\n        AppBskyActorDefs.isAdultContentPref(pref) &&\n        AppBskyActorDefs.validateAdultContentPref(pref).success\n      ) {\n        prefs.adultContentEnabled = pref.enabled\n      } else if (\n        AppBskyActorDefs.isContentLabelPref(pref) &&\n        AppBskyActorDefs.validateAdultContentPref(pref).success\n      ) {\n        let value = pref.visibility\n        if (value === 'show') {\n          value = 'ignore'\n        }\n        if (value === 'ignore' || value === 'warn' || value === 'hide') {\n          prefs.contentLabels[pref.label] = value as BskyLabelPreference\n        }\n      } else if (\n        AppBskyActorDefs.isSavedFeedsPref(pref) &&\n        AppBskyActorDefs.validateSavedFeedsPref(pref).success\n      ) {\n        prefs.feeds.saved = pref.saved\n        prefs.feeds.pinned = pref.pinned\n      } else if (\n        AppBskyActorDefs.isPersonalDetailsPref(pref) &&\n        AppBskyActorDefs.validatePersonalDetailsPref(pref).success\n      ) {\n        if (pref.birthDate) {\n          prefs.birthDate = new Date(pref.birthDate)\n        }\n      } else if (\n        AppBskyActorDefs.isFeedViewPref(pref) &&\n        AppBskyActorDefs.validateFeedViewPref(pref).success\n      ) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { $type, feed, ...v } = pref\n        prefs.feedViewPrefs[pref.feed] = { ...FEED_VIEW_PREF_DEFAULTS, ...v }\n      } else if (\n        AppBskyActorDefs.isThreadViewPref(pref) &&\n        AppBskyActorDefs.validateThreadViewPref(pref).success\n      ) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { $type, ...v } = pref\n        prefs.threadViewPrefs = { ...prefs.threadViewPrefs, ...v }\n      } else if (\n        AppBskyActorDefs.isInterestsPref(pref) &&\n        AppBskyActorDefs.validateInterestsPref(pref).success\n      ) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { $type, ...v } = pref\n        prefs.interests = { ...prefs.interests, ...v }\n      }\n    }\n    return prefs\n  }\n\n  async setSavedFeeds(saved: string[], pinned: string[]) {\n    return updateFeedPreferences(this, () => ({\n      saved,\n      pinned,\n    }))\n  }\n\n  async addSavedFeed(v: string) {\n    return updateFeedPreferences(this, (saved: string[], pinned: string[]) => ({\n      saved: [...saved.filter((uri) => uri !== v), v],\n      pinned,\n    }))\n  }\n\n  async removeSavedFeed(v: string) {\n    return updateFeedPreferences(this, (saved: string[], pinned: string[]) => ({\n      saved: saved.filter((uri) => uri !== v),\n      pinned: pinned.filter((uri) => uri !== v),\n    }))\n  }\n\n  async addPinnedFeed(v: string) {\n    return updateFeedPreferences(this, (saved: string[], pinned: string[]) => ({\n      saved: [...saved.filter((uri) => uri !== v), v],\n      pinned: [...pinned.filter((uri) => uri !== v), v],\n    }))\n  }\n\n  async removePinnedFeed(v: string) {\n    return updateFeedPreferences(this, (saved: string[], pinned: string[]) => ({\n      saved,\n      pinned: pinned.filter((uri) => uri !== v),\n    }))\n  }\n\n  async setAdultContentEnabled(v: boolean) {\n    await updatePreferences(this, (prefs: AppBskyActorDefs.Preferences) => {\n      let adultContentPref = prefs.findLast(\n        (pref) =>\n          AppBskyActorDefs.isAdultContentPref(pref) &&\n          AppBskyActorDefs.validateAdultContentPref(pref).success,\n      )\n      if (adultContentPref) {\n        adultContentPref.enabled = v\n      } else {\n        adultContentPref = {\n          $type: 'app.bsky.actor.defs#adultContentPref',\n          enabled: v,\n        }\n      }\n      return prefs\n        .filter((pref) => !AppBskyActorDefs.isAdultContentPref(pref))\n        .concat([adultContentPref])\n    })\n  }\n\n  async setContentLabelPref(key: string, value: BskyLabelPreference) {\n    // TEMP update old value\n    if (value === 'show') {\n      value = 'ignore'\n    }\n\n    await updatePreferences(this, (prefs: AppBskyActorDefs.Preferences) => {\n      let labelPref = prefs.findLast(\n        (pref) =>\n          AppBskyActorDefs.isContentLabelPref(pref) &&\n          AppBskyActorDefs.validateAdultContentPref(pref).success &&\n          pref.label === key,\n      )\n      if (labelPref) {\n        labelPref.visibility = value\n      } else {\n        labelPref = {\n          $type: 'app.bsky.actor.defs#contentLabelPref',\n          label: key,\n          visibility: value,\n        }\n      }\n      return prefs\n        .filter(\n          (pref) =>\n            !AppBskyActorDefs.isContentLabelPref(pref) || pref.label !== key,\n        )\n        .concat([labelPref])\n    })\n  }\n\n  async setPersonalDetails({\n    birthDate,\n  }: {\n    birthDate: string | Date | undefined\n  }) {\n    birthDate = birthDate instanceof Date ? birthDate.toISOString() : birthDate\n    await updatePreferences(this, (prefs: AppBskyActorDefs.Preferences) => {\n      let personalDetailsPref = prefs.findLast(\n        (pref) =>\n          AppBskyActorDefs.isPersonalDetailsPref(pref) &&\n          AppBskyActorDefs.validatePersonalDetailsPref(pref).success,\n      )\n      if (personalDetailsPref) {\n        personalDetailsPref.birthDate = birthDate\n      } else {\n        personalDetailsPref = {\n          $type: 'app.bsky.actor.defs#personalDetailsPref',\n          birthDate,\n        }\n      }\n      return prefs\n        .filter((pref) => !AppBskyActorDefs.isPersonalDetailsPref(pref))\n        .concat([personalDetailsPref])\n    })\n  }\n\n  async setFeedViewPrefs(feed: string, pref: Partial<BskyFeedViewPreference>) {\n    await updatePreferences(this, (prefs: AppBskyActorDefs.Preferences) => {\n      const existing = prefs.findLast(\n        (pref) =>\n          AppBskyActorDefs.isFeedViewPref(pref) &&\n          AppBskyActorDefs.validateFeedViewPref(pref).success &&\n          pref.feed === feed,\n      )\n      if (existing) {\n        pref = { ...existing, ...pref }\n      }\n      return prefs\n        .filter(\n          (p) => !AppBskyActorDefs.isFeedViewPref(pref) || p.feed !== feed,\n        )\n        .concat([{ ...pref, $type: 'app.bsky.actor.defs#feedViewPref', feed }])\n    })\n  }\n\n  async setThreadViewPrefs(pref: Partial<BskyThreadViewPreference>) {\n    await updatePreferences(this, (prefs: AppBskyActorDefs.Preferences) => {\n      const existing = prefs.findLast(\n        (pref) =>\n          AppBskyActorDefs.isThreadViewPref(pref) &&\n          AppBskyActorDefs.validateThreadViewPref(pref).success,\n      )\n      if (existing) {\n        pref = { ...existing, ...pref }\n      }\n      return prefs\n        .filter((p) => !AppBskyActorDefs.isThreadViewPref(p))\n        .concat([{ ...pref, $type: 'app.bsky.actor.defs#threadViewPref' }])\n    })\n  }\n\n  async setInterestsPref(pref: Partial<BskyInterestsPreference>) {\n    await updatePreferences(this, (prefs: AppBskyActorDefs.Preferences) => {\n      const existing = prefs.findLast(\n        (pref) =>\n          AppBskyActorDefs.isInterestsPref(pref) &&\n          AppBskyActorDefs.validateInterestsPref(pref).success,\n      )\n      if (existing) {\n        pref = { ...existing, ...pref }\n      }\n      return prefs\n        .filter((p) => !AppBskyActorDefs.isInterestsPref(p))\n        .concat([{ ...pref, $type: 'app.bsky.actor.defs#interestsPref' }])\n    })\n  }\n}\n\n/**\n * This function updates the preferences of a user and allows for a callback function to be executed\n * before the update.\n * @param cb - cb is a callback function that takes in a single parameter of type\n * AppBskyActorDefs.Preferences and returns either a boolean or void. This callback function is used to\n * update the preferences of the user. The function is called with the current preferences as an\n * argument and if the callback returns false, the preferences are not updated.\n */\nasync function updatePreferences(\n  agent: BskyAgent,\n  cb: (\n    prefs: AppBskyActorDefs.Preferences,\n  ) => AppBskyActorDefs.Preferences | false,\n) {\n  const res = await agent.app.bsky.actor.getPreferences({})\n  const newPrefs = cb(res.data.preferences)\n  if (newPrefs === false) {\n    return\n  }\n  await agent.app.bsky.actor.putPreferences({\n    preferences: newPrefs,\n  })\n}\n\n/**\n * A helper specifically for updating feed preferences\n */\nasync function updateFeedPreferences(\n  agent: BskyAgent,\n  cb: (\n    saved: string[],\n    pinned: string[],\n  ) => { saved: string[]; pinned: string[] },\n): Promise<{ saved: string[]; pinned: string[] }> {\n  let res\n  await updatePreferences(agent, (prefs: AppBskyActorDefs.Preferences) => {\n    let feedsPref = prefs.findLast(\n      (pref) =>\n        AppBskyActorDefs.isSavedFeedsPref(pref) &&\n        AppBskyActorDefs.validateSavedFeedsPref(pref).success,\n    ) as AppBskyActorDefs.SavedFeedsPref | undefined\n    if (feedsPref) {\n      res = cb(feedsPref.saved, feedsPref.pinned)\n      feedsPref.saved = res.saved\n      feedsPref.pinned = res.pinned\n    } else {\n      res = cb([], [])\n      feedsPref = {\n        $type: 'app.bsky.actor.defs#savedFeedsPref',\n        saved: res.saved,\n        pinned: res.pinned,\n      }\n    }\n    return prefs\n      .filter((pref) => !AppBskyActorDefs.isSavedFeedsPref(pref))\n      .concat([feedsPref])\n  })\n  return res\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}